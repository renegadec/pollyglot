import {
  OpenAI,
  __commonJS,
  __export,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __publicField,
  __toESM,
  makeParseableResponseTool,
  makeParseableTextFormat
} from "./chunk-GVFRK7DL.js";

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse3(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse3(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce2;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug3(...args) {
          if (!debug3.enabled) {
            return;
          }
          const self = debug3;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self, args);
          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }
        debug3.namespace = namespace;
        debug3.useColors = createDebug.useColors();
        debug3.color = createDebug.selectColor(namespace);
        debug3.extend = extend2;
        debug3.destroy = createDebug.destroy;
        Object.defineProperty(debug3, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug3);
        }
        return debug3;
      }
      function extend2(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
        for (const ns of split) {
          if (ns[0] === "-") {
            createDebug.skips.push(ns.slice(1));
          } else {
            createDebug.names.push(ns);
          }
        }
      }
      function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while (searchIndex < search.length) {
          if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
            if (template[templateIndex] === "*") {
              starIndex = templateIndex;
              matchIndex = searchIndex;
              templateIndex++;
            } else {
              searchIndex++;
              templateIndex++;
            }
          } else if (starIndex !== -1) {
            templateIndex = starIndex + 1;
            matchIndex++;
            searchIndex = matchIndex;
          } else {
            return false;
          }
        }
        while (templateIndex < template.length && template[templateIndex] === "*") {
          templateIndex++;
        }
        return templateIndex === template.length;
      }
      function disable() {
        const namespaces = [
          ...createDebug.names,
          ...createDebug.skips.map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        for (const skip of createDebug.skips) {
          if (matchesTemplate(name, skip)) {
            return false;
          }
        }
        for (const ns of createDebug.names) {
          if (matchesTemplate(name, ns)) {
            return true;
          }
        }
        return false;
      }
      function coerce2(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error40) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug") || exports.storage.getItem("DEBUG");
      } catch (error40) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error40) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error40) {
        return "[UnexpectedJSONParseError]: " + error40.message;
      }
    };
  }
});

// node_modules/@openai/agents-core/dist/utils/safeExecute.mjs
async function safeExecute(fn) {
  try {
    return [null, await fn()];
  } catch (error40) {
    return [error40, null];
  }
}

// node_modules/zod/v4/classic/external.js
var external_exports = {};
__export(external_exports, {
  $brand: () => $brand,
  $input: () => $input,
  $output: () => $output,
  NEVER: () => NEVER,
  TimePrecision: () => TimePrecision,
  ZodAny: () => ZodAny,
  ZodArray: () => ZodArray,
  ZodBase64: () => ZodBase64,
  ZodBase64URL: () => ZodBase64URL,
  ZodBigInt: () => ZodBigInt,
  ZodBigIntFormat: () => ZodBigIntFormat,
  ZodBoolean: () => ZodBoolean,
  ZodCIDRv4: () => ZodCIDRv4,
  ZodCIDRv6: () => ZodCIDRv6,
  ZodCUID: () => ZodCUID,
  ZodCUID2: () => ZodCUID2,
  ZodCatch: () => ZodCatch,
  ZodCustom: () => ZodCustom,
  ZodCustomStringFormat: () => ZodCustomStringFormat,
  ZodDate: () => ZodDate,
  ZodDefault: () => ZodDefault,
  ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,
  ZodE164: () => ZodE164,
  ZodEmail: () => ZodEmail,
  ZodEmoji: () => ZodEmoji,
  ZodEnum: () => ZodEnum,
  ZodError: () => ZodError,
  ZodFile: () => ZodFile,
  ZodGUID: () => ZodGUID,
  ZodIPv4: () => ZodIPv4,
  ZodIPv6: () => ZodIPv6,
  ZodISODate: () => ZodISODate,
  ZodISODateTime: () => ZodISODateTime,
  ZodISODuration: () => ZodISODuration,
  ZodISOTime: () => ZodISOTime,
  ZodIntersection: () => ZodIntersection,
  ZodIssueCode: () => ZodIssueCode,
  ZodJWT: () => ZodJWT,
  ZodKSUID: () => ZodKSUID,
  ZodLazy: () => ZodLazy,
  ZodLiteral: () => ZodLiteral,
  ZodMap: () => ZodMap,
  ZodNaN: () => ZodNaN,
  ZodNanoID: () => ZodNanoID,
  ZodNever: () => ZodNever,
  ZodNonOptional: () => ZodNonOptional,
  ZodNull: () => ZodNull,
  ZodNullable: () => ZodNullable,
  ZodNumber: () => ZodNumber,
  ZodNumberFormat: () => ZodNumberFormat,
  ZodObject: () => ZodObject,
  ZodOptional: () => ZodOptional,
  ZodPipe: () => ZodPipe,
  ZodPrefault: () => ZodPrefault,
  ZodPromise: () => ZodPromise,
  ZodReadonly: () => ZodReadonly,
  ZodRealError: () => ZodRealError,
  ZodRecord: () => ZodRecord,
  ZodSet: () => ZodSet,
  ZodString: () => ZodString,
  ZodStringFormat: () => ZodStringFormat,
  ZodSuccess: () => ZodSuccess,
  ZodSymbol: () => ZodSymbol,
  ZodTemplateLiteral: () => ZodTemplateLiteral,
  ZodTransform: () => ZodTransform,
  ZodTuple: () => ZodTuple,
  ZodType: () => ZodType,
  ZodULID: () => ZodULID,
  ZodURL: () => ZodURL,
  ZodUUID: () => ZodUUID,
  ZodUndefined: () => ZodUndefined,
  ZodUnion: () => ZodUnion,
  ZodUnknown: () => ZodUnknown,
  ZodVoid: () => ZodVoid,
  ZodXID: () => ZodXID,
  _ZodString: () => _ZodString,
  _default: () => _default2,
  any: () => any,
  array: () => array,
  base64: () => base642,
  base64url: () => base64url2,
  bigint: () => bigint2,
  boolean: () => boolean2,
  catch: () => _catch2,
  check: () => check,
  cidrv4: () => cidrv42,
  cidrv6: () => cidrv62,
  clone: () => clone,
  coerce: () => coerce_exports,
  config: () => config,
  core: () => core_exports2,
  cuid: () => cuid3,
  cuid2: () => cuid22,
  custom: () => custom,
  date: () => date3,
  discriminatedUnion: () => discriminatedUnion,
  e164: () => e1642,
  email: () => email2,
  emoji: () => emoji2,
  endsWith: () => _endsWith,
  enum: () => _enum2,
  file: () => file,
  flattenError: () => flattenError,
  float32: () => float32,
  float64: () => float64,
  formatError: () => formatError,
  function: () => _function,
  getErrorMap: () => getErrorMap,
  globalRegistry: () => globalRegistry,
  gt: () => _gt,
  gte: () => _gte,
  guid: () => guid2,
  includes: () => _includes,
  instanceof: () => _instanceof,
  int: () => int,
  int32: () => int32,
  int64: () => int64,
  intersection: () => intersection,
  ipv4: () => ipv42,
  ipv6: () => ipv62,
  iso: () => iso_exports,
  json: () => json,
  jwt: () => jwt,
  keyof: () => keyof,
  ksuid: () => ksuid2,
  lazy: () => lazy,
  length: () => _length,
  literal: () => literal,
  locales: () => locales_exports,
  looseObject: () => looseObject,
  lowercase: () => _lowercase,
  lt: () => _lt,
  lte: () => _lte,
  map: () => map,
  maxLength: () => _maxLength,
  maxSize: () => _maxSize,
  mime: () => _mime,
  minLength: () => _minLength,
  minSize: () => _minSize,
  multipleOf: () => _multipleOf,
  nan: () => nan,
  nanoid: () => nanoid2,
  nativeEnum: () => nativeEnum,
  negative: () => _negative,
  never: () => never,
  nonnegative: () => _nonnegative,
  nonoptional: () => nonoptional,
  nonpositive: () => _nonpositive,
  normalize: () => _normalize,
  null: () => _null3,
  nullable: () => nullable,
  nullish: () => nullish2,
  number: () => number2,
  object: () => object,
  optional: () => optional,
  overwrite: () => _overwrite,
  parse: () => parse2,
  parseAsync: () => parseAsync2,
  partialRecord: () => partialRecord,
  pipe: () => pipe,
  positive: () => _positive,
  prefault: () => prefault,
  preprocess: () => preprocess,
  prettifyError: () => prettifyError,
  promise: () => promise,
  property: () => _property,
  readonly: () => readonly,
  record: () => record,
  refine: () => refine,
  regex: () => _regex,
  regexes: () => regexes_exports,
  registry: () => registry,
  safeParse: () => safeParse2,
  safeParseAsync: () => safeParseAsync2,
  set: () => set,
  setErrorMap: () => setErrorMap,
  size: () => _size,
  startsWith: () => _startsWith,
  strictObject: () => strictObject,
  string: () => string2,
  stringFormat: () => stringFormat,
  stringbool: () => stringbool,
  success: () => success,
  superRefine: () => superRefine,
  symbol: () => symbol,
  templateLiteral: () => templateLiteral,
  toJSONSchema: () => toJSONSchema,
  toLowerCase: () => _toLowerCase,
  toUpperCase: () => _toUpperCase,
  transform: () => transform,
  treeifyError: () => treeifyError,
  trim: () => _trim,
  tuple: () => tuple,
  uint32: () => uint32,
  uint64: () => uint64,
  ulid: () => ulid2,
  undefined: () => _undefined3,
  union: () => union,
  unknown: () => unknown,
  uppercase: () => _uppercase,
  url: () => url,
  uuid: () => uuid2,
  uuidv4: () => uuidv4,
  uuidv6: () => uuidv6,
  uuidv7: () => uuidv7,
  void: () => _void2,
  xid: () => xid2
});

// node_modules/zod/v4/core/index.js
var core_exports2 = {};
__export(core_exports2, {
  $ZodAny: () => $ZodAny,
  $ZodArray: () => $ZodArray,
  $ZodAsyncError: () => $ZodAsyncError,
  $ZodBase64: () => $ZodBase64,
  $ZodBase64URL: () => $ZodBase64URL,
  $ZodBigInt: () => $ZodBigInt,
  $ZodBigIntFormat: () => $ZodBigIntFormat,
  $ZodBoolean: () => $ZodBoolean,
  $ZodCIDRv4: () => $ZodCIDRv4,
  $ZodCIDRv6: () => $ZodCIDRv6,
  $ZodCUID: () => $ZodCUID,
  $ZodCUID2: () => $ZodCUID2,
  $ZodCatch: () => $ZodCatch,
  $ZodCheck: () => $ZodCheck,
  $ZodCheckBigIntFormat: () => $ZodCheckBigIntFormat,
  $ZodCheckEndsWith: () => $ZodCheckEndsWith,
  $ZodCheckGreaterThan: () => $ZodCheckGreaterThan,
  $ZodCheckIncludes: () => $ZodCheckIncludes,
  $ZodCheckLengthEquals: () => $ZodCheckLengthEquals,
  $ZodCheckLessThan: () => $ZodCheckLessThan,
  $ZodCheckLowerCase: () => $ZodCheckLowerCase,
  $ZodCheckMaxLength: () => $ZodCheckMaxLength,
  $ZodCheckMaxSize: () => $ZodCheckMaxSize,
  $ZodCheckMimeType: () => $ZodCheckMimeType,
  $ZodCheckMinLength: () => $ZodCheckMinLength,
  $ZodCheckMinSize: () => $ZodCheckMinSize,
  $ZodCheckMultipleOf: () => $ZodCheckMultipleOf,
  $ZodCheckNumberFormat: () => $ZodCheckNumberFormat,
  $ZodCheckOverwrite: () => $ZodCheckOverwrite,
  $ZodCheckProperty: () => $ZodCheckProperty,
  $ZodCheckRegex: () => $ZodCheckRegex,
  $ZodCheckSizeEquals: () => $ZodCheckSizeEquals,
  $ZodCheckStartsWith: () => $ZodCheckStartsWith,
  $ZodCheckStringFormat: () => $ZodCheckStringFormat,
  $ZodCheckUpperCase: () => $ZodCheckUpperCase,
  $ZodCustom: () => $ZodCustom,
  $ZodCustomStringFormat: () => $ZodCustomStringFormat,
  $ZodDate: () => $ZodDate,
  $ZodDefault: () => $ZodDefault,
  $ZodDiscriminatedUnion: () => $ZodDiscriminatedUnion,
  $ZodE164: () => $ZodE164,
  $ZodEmail: () => $ZodEmail,
  $ZodEmoji: () => $ZodEmoji,
  $ZodEnum: () => $ZodEnum,
  $ZodError: () => $ZodError,
  $ZodFile: () => $ZodFile,
  $ZodFunction: () => $ZodFunction,
  $ZodGUID: () => $ZodGUID,
  $ZodIPv4: () => $ZodIPv4,
  $ZodIPv6: () => $ZodIPv6,
  $ZodISODate: () => $ZodISODate,
  $ZodISODateTime: () => $ZodISODateTime,
  $ZodISODuration: () => $ZodISODuration,
  $ZodISOTime: () => $ZodISOTime,
  $ZodIntersection: () => $ZodIntersection,
  $ZodJWT: () => $ZodJWT,
  $ZodKSUID: () => $ZodKSUID,
  $ZodLazy: () => $ZodLazy,
  $ZodLiteral: () => $ZodLiteral,
  $ZodMap: () => $ZodMap,
  $ZodNaN: () => $ZodNaN,
  $ZodNanoID: () => $ZodNanoID,
  $ZodNever: () => $ZodNever,
  $ZodNonOptional: () => $ZodNonOptional,
  $ZodNull: () => $ZodNull,
  $ZodNullable: () => $ZodNullable,
  $ZodNumber: () => $ZodNumber,
  $ZodNumberFormat: () => $ZodNumberFormat,
  $ZodObject: () => $ZodObject,
  $ZodOptional: () => $ZodOptional,
  $ZodPipe: () => $ZodPipe,
  $ZodPrefault: () => $ZodPrefault,
  $ZodPromise: () => $ZodPromise,
  $ZodReadonly: () => $ZodReadonly,
  $ZodRealError: () => $ZodRealError,
  $ZodRecord: () => $ZodRecord,
  $ZodRegistry: () => $ZodRegistry,
  $ZodSet: () => $ZodSet,
  $ZodString: () => $ZodString,
  $ZodStringFormat: () => $ZodStringFormat,
  $ZodSuccess: () => $ZodSuccess,
  $ZodSymbol: () => $ZodSymbol,
  $ZodTemplateLiteral: () => $ZodTemplateLiteral,
  $ZodTransform: () => $ZodTransform,
  $ZodTuple: () => $ZodTuple,
  $ZodType: () => $ZodType,
  $ZodULID: () => $ZodULID,
  $ZodURL: () => $ZodURL,
  $ZodUUID: () => $ZodUUID,
  $ZodUndefined: () => $ZodUndefined,
  $ZodUnion: () => $ZodUnion,
  $ZodUnknown: () => $ZodUnknown,
  $ZodVoid: () => $ZodVoid,
  $ZodXID: () => $ZodXID,
  $brand: () => $brand,
  $constructor: () => $constructor,
  $input: () => $input,
  $output: () => $output,
  Doc: () => Doc,
  JSONSchema: () => json_schema_exports,
  JSONSchemaGenerator: () => JSONSchemaGenerator,
  NEVER: () => NEVER,
  TimePrecision: () => TimePrecision,
  _any: () => _any,
  _array: () => _array,
  _base64: () => _base64,
  _base64url: () => _base64url,
  _bigint: () => _bigint,
  _boolean: () => _boolean,
  _catch: () => _catch,
  _cidrv4: () => _cidrv4,
  _cidrv6: () => _cidrv6,
  _coercedBigint: () => _coercedBigint,
  _coercedBoolean: () => _coercedBoolean,
  _coercedDate: () => _coercedDate,
  _coercedNumber: () => _coercedNumber,
  _coercedString: () => _coercedString,
  _cuid: () => _cuid,
  _cuid2: () => _cuid2,
  _custom: () => _custom,
  _date: () => _date,
  _default: () => _default,
  _discriminatedUnion: () => _discriminatedUnion,
  _e164: () => _e164,
  _email: () => _email,
  _emoji: () => _emoji2,
  _endsWith: () => _endsWith,
  _enum: () => _enum,
  _file: () => _file,
  _float32: () => _float32,
  _float64: () => _float64,
  _gt: () => _gt,
  _gte: () => _gte,
  _guid: () => _guid,
  _includes: () => _includes,
  _int: () => _int,
  _int32: () => _int32,
  _int64: () => _int64,
  _intersection: () => _intersection,
  _ipv4: () => _ipv4,
  _ipv6: () => _ipv6,
  _isoDate: () => _isoDate,
  _isoDateTime: () => _isoDateTime,
  _isoDuration: () => _isoDuration,
  _isoTime: () => _isoTime,
  _jwt: () => _jwt,
  _ksuid: () => _ksuid,
  _lazy: () => _lazy,
  _length: () => _length,
  _literal: () => _literal,
  _lowercase: () => _lowercase,
  _lt: () => _lt,
  _lte: () => _lte,
  _map: () => _map,
  _max: () => _lte,
  _maxLength: () => _maxLength,
  _maxSize: () => _maxSize,
  _mime: () => _mime,
  _min: () => _gte,
  _minLength: () => _minLength,
  _minSize: () => _minSize,
  _multipleOf: () => _multipleOf,
  _nan: () => _nan,
  _nanoid: () => _nanoid,
  _nativeEnum: () => _nativeEnum,
  _negative: () => _negative,
  _never: () => _never,
  _nonnegative: () => _nonnegative,
  _nonoptional: () => _nonoptional,
  _nonpositive: () => _nonpositive,
  _normalize: () => _normalize,
  _null: () => _null2,
  _nullable: () => _nullable,
  _number: () => _number,
  _optional: () => _optional,
  _overwrite: () => _overwrite,
  _parse: () => _parse,
  _parseAsync: () => _parseAsync,
  _pipe: () => _pipe,
  _positive: () => _positive,
  _promise: () => _promise,
  _property: () => _property,
  _readonly: () => _readonly,
  _record: () => _record,
  _refine: () => _refine,
  _regex: () => _regex,
  _safeParse: () => _safeParse,
  _safeParseAsync: () => _safeParseAsync,
  _set: () => _set,
  _size: () => _size,
  _startsWith: () => _startsWith,
  _string: () => _string,
  _stringFormat: () => _stringFormat,
  _stringbool: () => _stringbool,
  _success: () => _success,
  _symbol: () => _symbol,
  _templateLiteral: () => _templateLiteral,
  _toLowerCase: () => _toLowerCase,
  _toUpperCase: () => _toUpperCase,
  _transform: () => _transform,
  _trim: () => _trim,
  _tuple: () => _tuple,
  _uint32: () => _uint32,
  _uint64: () => _uint64,
  _ulid: () => _ulid,
  _undefined: () => _undefined2,
  _union: () => _union,
  _unknown: () => _unknown,
  _uppercase: () => _uppercase,
  _url: () => _url,
  _uuid: () => _uuid,
  _uuidv4: () => _uuidv4,
  _uuidv6: () => _uuidv6,
  _uuidv7: () => _uuidv7,
  _void: () => _void,
  _xid: () => _xid,
  clone: () => clone,
  config: () => config,
  flattenError: () => flattenError,
  formatError: () => formatError,
  function: () => _function,
  globalConfig: () => globalConfig,
  globalRegistry: () => globalRegistry,
  isValidBase64: () => isValidBase64,
  isValidBase64URL: () => isValidBase64URL,
  isValidJWT: () => isValidJWT,
  locales: () => locales_exports,
  parse: () => parse,
  parseAsync: () => parseAsync,
  prettifyError: () => prettifyError,
  regexes: () => regexes_exports,
  registry: () => registry,
  safeParse: () => safeParse,
  safeParseAsync: () => safeParseAsync,
  toDotPath: () => toDotPath,
  toJSONSchema: () => toJSONSchema,
  treeifyError: () => treeifyError,
  util: () => util_exports,
  version: () => version
});

// node_modules/zod/v4/core/core.js
var NEVER = Object.freeze({
  status: "aborted"
});
function $constructor(name, initializer3, params) {
  function init(inst, def) {
    var _a;
    Object.defineProperty(inst, "_zod", {
      value: inst._zod ?? {},
      enumerable: false
    });
    (_a = inst._zod).traits ?? (_a.traits = /* @__PURE__ */ new Set());
    inst._zod.traits.add(name);
    initializer3(inst, def);
    for (const k in _.prototype) {
      if (!(k in inst))
        Object.defineProperty(inst, k, { value: _.prototype[k].bind(inst) });
    }
    inst._zod.constr = _;
    inst._zod.def = def;
  }
  const Parent = (params == null ? void 0 : params.Parent) ?? Object;
  class Definition extends Parent {
  }
  Object.defineProperty(Definition, "name", { value: name });
  function _(def) {
    var _a;
    const inst = (params == null ? void 0 : params.Parent) ? new Definition() : this;
    init(inst, def);
    (_a = inst._zod).deferred ?? (_a.deferred = []);
    for (const fn of inst._zod.deferred) {
      fn();
    }
    return inst;
  }
  Object.defineProperty(_, "init", { value: init });
  Object.defineProperty(_, Symbol.hasInstance, {
    value: (inst) => {
      var _a, _b;
      if ((params == null ? void 0 : params.Parent) && inst instanceof params.Parent)
        return true;
      return (_b = (_a = inst == null ? void 0 : inst._zod) == null ? void 0 : _a.traits) == null ? void 0 : _b.has(name);
    }
  });
  Object.defineProperty(_, "name", { value: name });
  return _;
}
var $brand = Symbol("zod_brand");
var $ZodAsyncError = class extends Error {
  constructor() {
    super(`Encountered Promise during synchronous parse. Use .parseAsync() instead.`);
  }
};
var globalConfig = {};
function config(newConfig) {
  if (newConfig)
    Object.assign(globalConfig, newConfig);
  return globalConfig;
}

// node_modules/zod/v4/core/util.js
var util_exports = {};
__export(util_exports, {
  BIGINT_FORMAT_RANGES: () => BIGINT_FORMAT_RANGES,
  Class: () => Class,
  NUMBER_FORMAT_RANGES: () => NUMBER_FORMAT_RANGES,
  aborted: () => aborted,
  allowsEval: () => allowsEval,
  assert: () => assert,
  assertEqual: () => assertEqual,
  assertIs: () => assertIs,
  assertNever: () => assertNever,
  assertNotEqual: () => assertNotEqual,
  assignProp: () => assignProp,
  cached: () => cached,
  captureStackTrace: () => captureStackTrace,
  cleanEnum: () => cleanEnum,
  cleanRegex: () => cleanRegex,
  clone: () => clone,
  createTransparentProxy: () => createTransparentProxy,
  defineLazy: () => defineLazy,
  esc: () => esc,
  escapeRegex: () => escapeRegex,
  extend: () => extend,
  finalizeIssue: () => finalizeIssue,
  floatSafeRemainder: () => floatSafeRemainder,
  getElementAtPath: () => getElementAtPath,
  getEnumValues: () => getEnumValues,
  getLengthableOrigin: () => getLengthableOrigin,
  getParsedType: () => getParsedType,
  getSizableOrigin: () => getSizableOrigin,
  isObject: () => isObject,
  isPlainObject: () => isPlainObject,
  issue: () => issue,
  joinValues: () => joinValues,
  jsonStringifyReplacer: () => jsonStringifyReplacer,
  merge: () => merge,
  normalizeParams: () => normalizeParams,
  nullish: () => nullish,
  numKeys: () => numKeys,
  omit: () => omit,
  optionalKeys: () => optionalKeys,
  partial: () => partial,
  pick: () => pick,
  prefixIssues: () => prefixIssues,
  primitiveTypes: () => primitiveTypes,
  promiseAllObject: () => promiseAllObject,
  propertyKeyTypes: () => propertyKeyTypes,
  randomString: () => randomString,
  required: () => required,
  stringifyPrimitive: () => stringifyPrimitive,
  unwrapMessage: () => unwrapMessage
});
function assertEqual(val) {
  return val;
}
function assertNotEqual(val) {
  return val;
}
function assertIs(_arg) {
}
function assertNever(_x) {
  throw new Error();
}
function assert(_) {
}
function getEnumValues(entries) {
  const numericValues = Object.values(entries).filter((v) => typeof v === "number");
  const values = Object.entries(entries).filter(([k, _]) => numericValues.indexOf(+k) === -1).map(([_, v]) => v);
  return values;
}
function joinValues(array2, separator = "|") {
  return array2.map((val) => stringifyPrimitive(val)).join(separator);
}
function jsonStringifyReplacer(_, value) {
  if (typeof value === "bigint")
    return value.toString();
  return value;
}
function cached(getter) {
  const set2 = false;
  return {
    get value() {
      if (!set2) {
        const value = getter();
        Object.defineProperty(this, "value", { value });
        return value;
      }
      throw new Error("cached value already set");
    }
  };
}
function nullish(input) {
  return input === null || input === void 0;
}
function cleanRegex(source) {
  const start = source.startsWith("^") ? 1 : 0;
  const end = source.endsWith("$") ? source.length - 1 : source.length;
  return source.slice(start, end);
}
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}
function defineLazy(object2, key, getter) {
  const set2 = false;
  Object.defineProperty(object2, key, {
    get() {
      if (!set2) {
        const value = getter();
        object2[key] = value;
        return value;
      }
      throw new Error("cached value already set");
    },
    set(v) {
      Object.defineProperty(object2, key, {
        value: v
        // configurable: true,
      });
    },
    configurable: true
  });
}
function assignProp(target, prop, value) {
  Object.defineProperty(target, prop, {
    value,
    writable: true,
    enumerable: true,
    configurable: true
  });
}
function getElementAtPath(obj, path) {
  if (!path)
    return obj;
  return path.reduce((acc, key) => acc == null ? void 0 : acc[key], obj);
}
function promiseAllObject(promisesObj) {
  const keys = Object.keys(promisesObj);
  const promises = keys.map((key) => promisesObj[key]);
  return Promise.all(promises).then((results) => {
    const resolvedObj = {};
    for (let i = 0; i < keys.length; i++) {
      resolvedObj[keys[i]] = results[i];
    }
    return resolvedObj;
  });
}
function randomString(length = 10) {
  const chars = "abcdefghijklmnopqrstuvwxyz";
  let str = "";
  for (let i = 0; i < length; i++) {
    str += chars[Math.floor(Math.random() * chars.length)];
  }
  return str;
}
function esc(str) {
  return JSON.stringify(str);
}
var captureStackTrace = Error.captureStackTrace ? Error.captureStackTrace : (..._args) => {
};
function isObject(data) {
  return typeof data === "object" && data !== null && !Array.isArray(data);
}
var allowsEval = cached(() => {
  var _a;
  if (typeof navigator !== "undefined" && ((_a = navigator == null ? void 0 : navigator.userAgent) == null ? void 0 : _a.includes("Cloudflare"))) {
    return false;
  }
  try {
    const F = Function;
    new F("");
    return true;
  } catch (_) {
    return false;
  }
});
function isPlainObject(o) {
  if (isObject(o) === false)
    return false;
  const ctor = o.constructor;
  if (ctor === void 0)
    return true;
  const prot = ctor.prototype;
  if (isObject(prot) === false)
    return false;
  if (Object.prototype.hasOwnProperty.call(prot, "isPrototypeOf") === false) {
    return false;
  }
  return true;
}
function numKeys(data) {
  let keyCount = 0;
  for (const key in data) {
    if (Object.prototype.hasOwnProperty.call(data, key)) {
      keyCount++;
    }
  }
  return keyCount;
}
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return "undefined";
    case "string":
      return "string";
    case "number":
      return Number.isNaN(data) ? "nan" : "number";
    case "boolean":
      return "boolean";
    case "function":
      return "function";
    case "bigint":
      return "bigint";
    case "symbol":
      return "symbol";
    case "object":
      if (Array.isArray(data)) {
        return "array";
      }
      if (data === null) {
        return "null";
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return "promise";
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return "map";
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return "set";
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return "date";
      }
      if (typeof File !== "undefined" && data instanceof File) {
        return "file";
      }
      return "object";
    default:
      throw new Error(`Unknown data type: ${t}`);
  }
};
var propertyKeyTypes = /* @__PURE__ */ new Set(["string", "number", "symbol"]);
var primitiveTypes = /* @__PURE__ */ new Set(["string", "number", "bigint", "boolean", "symbol", "undefined"]);
function escapeRegex(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function clone(inst, def, params) {
  const cl = new inst._zod.constr(def ?? inst._zod.def);
  if (!def || (params == null ? void 0 : params.parent))
    cl._zod.parent = inst;
  return cl;
}
function normalizeParams(_params) {
  const params = _params;
  if (!params)
    return {};
  if (typeof params === "string")
    return { error: () => params };
  if ((params == null ? void 0 : params.message) !== void 0) {
    if ((params == null ? void 0 : params.error) !== void 0)
      throw new Error("Cannot specify both `message` and `error` params");
    params.error = params.message;
  }
  delete params.message;
  if (typeof params.error === "string")
    return { ...params, error: () => params.error };
  return params;
}
function createTransparentProxy(getter) {
  let target;
  return new Proxy({}, {
    get(_, prop, receiver) {
      target ?? (target = getter());
      return Reflect.get(target, prop, receiver);
    },
    set(_, prop, value, receiver) {
      target ?? (target = getter());
      return Reflect.set(target, prop, value, receiver);
    },
    has(_, prop) {
      target ?? (target = getter());
      return Reflect.has(target, prop);
    },
    deleteProperty(_, prop) {
      target ?? (target = getter());
      return Reflect.deleteProperty(target, prop);
    },
    ownKeys(_) {
      target ?? (target = getter());
      return Reflect.ownKeys(target);
    },
    getOwnPropertyDescriptor(_, prop) {
      target ?? (target = getter());
      return Reflect.getOwnPropertyDescriptor(target, prop);
    },
    defineProperty(_, prop, descriptor) {
      target ?? (target = getter());
      return Reflect.defineProperty(target, prop, descriptor);
    }
  });
}
function stringifyPrimitive(value) {
  if (typeof value === "bigint")
    return value.toString() + "n";
  if (typeof value === "string")
    return `"${value}"`;
  return `${value}`;
}
function optionalKeys(shape) {
  return Object.keys(shape).filter((k) => {
    return shape[k]._zod.optin === "optional" && shape[k]._zod.optout === "optional";
  });
}
var NUMBER_FORMAT_RANGES = {
  safeint: [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],
  int32: [-2147483648, 2147483647],
  uint32: [0, 4294967295],
  float32: [-34028234663852886e22, 34028234663852886e22],
  float64: [-Number.MAX_VALUE, Number.MAX_VALUE]
};
var BIGINT_FORMAT_RANGES = {
  int64: [BigInt("-9223372036854775808"), BigInt("9223372036854775807")],
  uint64: [BigInt(0), BigInt("18446744073709551615")]
};
function pick(schema, mask) {
  const newShape = {};
  const currDef = schema._zod.def;
  for (const key in mask) {
    if (!(key in currDef.shape)) {
      throw new Error(`Unrecognized key: "${key}"`);
    }
    if (!mask[key])
      continue;
    newShape[key] = currDef.shape[key];
  }
  return clone(schema, {
    ...schema._zod.def,
    shape: newShape,
    checks: []
  });
}
function omit(schema, mask) {
  const newShape = { ...schema._zod.def.shape };
  const currDef = schema._zod.def;
  for (const key in mask) {
    if (!(key in currDef.shape)) {
      throw new Error(`Unrecognized key: "${key}"`);
    }
    if (!mask[key])
      continue;
    delete newShape[key];
  }
  return clone(schema, {
    ...schema._zod.def,
    shape: newShape,
    checks: []
  });
}
function extend(schema, shape) {
  if (!isPlainObject(shape)) {
    throw new Error("Invalid input to extend: expected a plain object");
  }
  const def = {
    ...schema._zod.def,
    get shape() {
      const _shape = { ...schema._zod.def.shape, ...shape };
      assignProp(this, "shape", _shape);
      return _shape;
    },
    checks: []
    // delete existing checks
  };
  return clone(schema, def);
}
function merge(a, b) {
  return clone(a, {
    ...a._zod.def,
    get shape() {
      const _shape = { ...a._zod.def.shape, ...b._zod.def.shape };
      assignProp(this, "shape", _shape);
      return _shape;
    },
    catchall: b._zod.def.catchall,
    checks: []
    // delete existing checks
  });
}
function partial(Class2, schema, mask) {
  const oldShape = schema._zod.def.shape;
  const shape = { ...oldShape };
  if (mask) {
    for (const key in mask) {
      if (!(key in oldShape)) {
        throw new Error(`Unrecognized key: "${key}"`);
      }
      if (!mask[key])
        continue;
      shape[key] = Class2 ? new Class2({
        type: "optional",
        innerType: oldShape[key]
      }) : oldShape[key];
    }
  } else {
    for (const key in oldShape) {
      shape[key] = Class2 ? new Class2({
        type: "optional",
        innerType: oldShape[key]
      }) : oldShape[key];
    }
  }
  return clone(schema, {
    ...schema._zod.def,
    shape,
    checks: []
  });
}
function required(Class2, schema, mask) {
  const oldShape = schema._zod.def.shape;
  const shape = { ...oldShape };
  if (mask) {
    for (const key in mask) {
      if (!(key in shape)) {
        throw new Error(`Unrecognized key: "${key}"`);
      }
      if (!mask[key])
        continue;
      shape[key] = new Class2({
        type: "nonoptional",
        innerType: oldShape[key]
      });
    }
  } else {
    for (const key in oldShape) {
      shape[key] = new Class2({
        type: "nonoptional",
        innerType: oldShape[key]
      });
    }
  }
  return clone(schema, {
    ...schema._zod.def,
    shape,
    // optional: [],
    checks: []
  });
}
function aborted(x, startIndex = 0) {
  var _a;
  for (let i = startIndex; i < x.issues.length; i++) {
    if (((_a = x.issues[i]) == null ? void 0 : _a.continue) !== true)
      return true;
  }
  return false;
}
function prefixIssues(path, issues) {
  return issues.map((iss) => {
    var _a;
    (_a = iss).path ?? (_a.path = []);
    iss.path.unshift(path);
    return iss;
  });
}
function unwrapMessage(message) {
  return typeof message === "string" ? message : message == null ? void 0 : message.message;
}
function finalizeIssue(iss, ctx, config2) {
  var _a, _b, _c, _d, _e, _f;
  const full = { ...iss, path: iss.path ?? [] };
  if (!iss.message) {
    const message = unwrapMessage((_c = (_b = (_a = iss.inst) == null ? void 0 : _a._zod.def) == null ? void 0 : _b.error) == null ? void 0 : _c.call(_b, iss)) ?? unwrapMessage((_d = ctx == null ? void 0 : ctx.error) == null ? void 0 : _d.call(ctx, iss)) ?? unwrapMessage((_e = config2.customError) == null ? void 0 : _e.call(config2, iss)) ?? unwrapMessage((_f = config2.localeError) == null ? void 0 : _f.call(config2, iss)) ?? "Invalid input";
    full.message = message;
  }
  delete full.inst;
  delete full.continue;
  if (!(ctx == null ? void 0 : ctx.reportInput)) {
    delete full.input;
  }
  return full;
}
function getSizableOrigin(input) {
  if (input instanceof Set)
    return "set";
  if (input instanceof Map)
    return "map";
  if (input instanceof File)
    return "file";
  return "unknown";
}
function getLengthableOrigin(input) {
  if (Array.isArray(input))
    return "array";
  if (typeof input === "string")
    return "string";
  return "unknown";
}
function issue(...args) {
  const [iss, input, inst] = args;
  if (typeof iss === "string") {
    return {
      message: iss,
      code: "custom",
      input,
      inst
    };
  }
  return { ...iss };
}
function cleanEnum(obj) {
  return Object.entries(obj).filter(([k, _]) => {
    return Number.isNaN(Number.parseInt(k, 10));
  }).map((el) => el[1]);
}
var Class = class {
  constructor(..._args) {
  }
};

// node_modules/zod/v4/core/errors.js
var initializer = (inst, def) => {
  inst.name = "$ZodError";
  Object.defineProperty(inst, "_zod", {
    value: inst._zod,
    enumerable: false
  });
  Object.defineProperty(inst, "issues", {
    value: def,
    enumerable: false
  });
  Object.defineProperty(inst, "message", {
    get() {
      return JSON.stringify(def, jsonStringifyReplacer, 2);
    },
    enumerable: true
    // configurable: false,
  });
  Object.defineProperty(inst, "toString", {
    value: () => inst.message,
    enumerable: false
  });
};
var $ZodError = $constructor("$ZodError", initializer);
var $ZodRealError = $constructor("$ZodError", initializer, { Parent: Error });
function flattenError(error40, mapper = (issue2) => issue2.message) {
  const fieldErrors = {};
  const formErrors = [];
  for (const sub of error40.issues) {
    if (sub.path.length > 0) {
      fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
      fieldErrors[sub.path[0]].push(mapper(sub));
    } else {
      formErrors.push(mapper(sub));
    }
  }
  return { formErrors, fieldErrors };
}
function formatError(error40, _mapper) {
  const mapper = _mapper || function(issue2) {
    return issue2.message;
  };
  const fieldErrors = { _errors: [] };
  const processError = (error41) => {
    for (const issue2 of error41.issues) {
      if (issue2.code === "invalid_union" && issue2.errors.length) {
        issue2.errors.map((issues) => processError({ issues }));
      } else if (issue2.code === "invalid_key") {
        processError({ issues: issue2.issues });
      } else if (issue2.code === "invalid_element") {
        processError({ issues: issue2.issues });
      } else if (issue2.path.length === 0) {
        fieldErrors._errors.push(mapper(issue2));
      } else {
        let curr = fieldErrors;
        let i = 0;
        while (i < issue2.path.length) {
          const el = issue2.path[i];
          const terminal = i === issue2.path.length - 1;
          if (!terminal) {
            curr[el] = curr[el] || { _errors: [] };
          } else {
            curr[el] = curr[el] || { _errors: [] };
            curr[el]._errors.push(mapper(issue2));
          }
          curr = curr[el];
          i++;
        }
      }
    }
  };
  processError(error40);
  return fieldErrors;
}
function treeifyError(error40, _mapper) {
  const mapper = _mapper || function(issue2) {
    return issue2.message;
  };
  const result = { errors: [] };
  const processError = (error41, path = []) => {
    var _a, _b;
    for (const issue2 of error41.issues) {
      if (issue2.code === "invalid_union" && issue2.errors.length) {
        issue2.errors.map((issues) => processError({ issues }, issue2.path));
      } else if (issue2.code === "invalid_key") {
        processError({ issues: issue2.issues }, issue2.path);
      } else if (issue2.code === "invalid_element") {
        processError({ issues: issue2.issues }, issue2.path);
      } else {
        const fullpath = [...path, ...issue2.path];
        if (fullpath.length === 0) {
          result.errors.push(mapper(issue2));
          continue;
        }
        let curr = result;
        let i = 0;
        while (i < fullpath.length) {
          const el = fullpath[i];
          const terminal = i === fullpath.length - 1;
          if (typeof el === "string") {
            curr.properties ?? (curr.properties = {});
            (_a = curr.properties)[el] ?? (_a[el] = { errors: [] });
            curr = curr.properties[el];
          } else {
            curr.items ?? (curr.items = []);
            (_b = curr.items)[el] ?? (_b[el] = { errors: [] });
            curr = curr.items[el];
          }
          if (terminal) {
            curr.errors.push(mapper(issue2));
          }
          i++;
        }
      }
    }
  };
  processError(error40);
  return result;
}
function toDotPath(path) {
  const segs = [];
  for (const seg of path) {
    if (typeof seg === "number")
      segs.push(`[${seg}]`);
    else if (typeof seg === "symbol")
      segs.push(`[${JSON.stringify(String(seg))}]`);
    else if (/[^\w$]/.test(seg))
      segs.push(`[${JSON.stringify(seg)}]`);
    else {
      if (segs.length)
        segs.push(".");
      segs.push(seg);
    }
  }
  return segs.join("");
}
function prettifyError(error40) {
  var _a;
  const lines = [];
  const issues = [...error40.issues].sort((a, b) => a.path.length - b.path.length);
  for (const issue2 of issues) {
    lines.push(`✖ ${issue2.message}`);
    if ((_a = issue2.path) == null ? void 0 : _a.length)
      lines.push(`  → at ${toDotPath(issue2.path)}`);
  }
  return lines.join("\n");
}

// node_modules/zod/v4/core/parse.js
var _parse = (_Err) => (schema, value, _ctx, _params) => {
  const ctx = _ctx ? Object.assign(_ctx, { async: false }) : { async: false };
  const result = schema._zod.run({ value, issues: [] }, ctx);
  if (result instanceof Promise) {
    throw new $ZodAsyncError();
  }
  if (result.issues.length) {
    const e = new ((_params == null ? void 0 : _params.Err) ?? _Err)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())));
    captureStackTrace(e, _params == null ? void 0 : _params.callee);
    throw e;
  }
  return result.value;
};
var parse = _parse($ZodRealError);
var _parseAsync = (_Err) => async (schema, value, _ctx, params) => {
  const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };
  let result = schema._zod.run({ value, issues: [] }, ctx);
  if (result instanceof Promise)
    result = await result;
  if (result.issues.length) {
    const e = new ((params == null ? void 0 : params.Err) ?? _Err)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())));
    captureStackTrace(e, params == null ? void 0 : params.callee);
    throw e;
  }
  return result.value;
};
var parseAsync = _parseAsync($ZodRealError);
var _safeParse = (_Err) => (schema, value, _ctx) => {
  const ctx = _ctx ? { ..._ctx, async: false } : { async: false };
  const result = schema._zod.run({ value, issues: [] }, ctx);
  if (result instanceof Promise) {
    throw new $ZodAsyncError();
  }
  return result.issues.length ? {
    success: false,
    error: new (_Err ?? $ZodError)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())))
  } : { success: true, data: result.value };
};
var safeParse = _safeParse($ZodRealError);
var _safeParseAsync = (_Err) => async (schema, value, _ctx) => {
  const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };
  let result = schema._zod.run({ value, issues: [] }, ctx);
  if (result instanceof Promise)
    result = await result;
  return result.issues.length ? {
    success: false,
    error: new _Err(result.issues.map((iss) => finalizeIssue(iss, ctx, config())))
  } : { success: true, data: result.value };
};
var safeParseAsync = _safeParseAsync($ZodRealError);

// node_modules/zod/v4/core/regexes.js
var regexes_exports = {};
__export(regexes_exports, {
  _emoji: () => _emoji,
  base64: () => base64,
  base64url: () => base64url,
  bigint: () => bigint,
  boolean: () => boolean,
  browserEmail: () => browserEmail,
  cidrv4: () => cidrv4,
  cidrv6: () => cidrv6,
  cuid: () => cuid,
  cuid2: () => cuid2,
  date: () => date,
  datetime: () => datetime,
  domain: () => domain,
  duration: () => duration,
  e164: () => e164,
  email: () => email,
  emoji: () => emoji,
  extendedDuration: () => extendedDuration,
  guid: () => guid,
  hostname: () => hostname,
  html5Email: () => html5Email,
  integer: () => integer,
  ipv4: () => ipv4,
  ipv6: () => ipv6,
  ksuid: () => ksuid,
  lowercase: () => lowercase,
  nanoid: () => nanoid,
  null: () => _null,
  number: () => number,
  rfc5322Email: () => rfc5322Email,
  string: () => string,
  time: () => time,
  ulid: () => ulid,
  undefined: () => _undefined,
  unicodeEmail: () => unicodeEmail,
  uppercase: () => uppercase,
  uuid: () => uuid,
  uuid4: () => uuid4,
  uuid6: () => uuid6,
  uuid7: () => uuid7,
  xid: () => xid
});
var cuid = /^[cC][^\s-]{8,}$/;
var cuid2 = /^[0-9a-z]+$/;
var ulid = /^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/;
var xid = /^[0-9a-vA-V]{20}$/;
var ksuid = /^[A-Za-z0-9]{27}$/;
var nanoid = /^[a-zA-Z0-9_-]{21}$/;
var duration = /^P(?:(\d+W)|(?!.*W)(?=\d|T\d)(\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+([.,]\d+)?S)?)?)$/;
var extendedDuration = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var guid = /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/;
var uuid = (version2) => {
  if (!version2)
    return /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$/;
  return new RegExp(`^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-${version2}[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$`);
};
var uuid4 = uuid(4);
var uuid6 = uuid(6);
var uuid7 = uuid(7);
var email = /^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$/;
var html5Email = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
var rfc5322Email = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
var unicodeEmail = /^[^\s@"]{1,64}@[^\s@]{1,255}$/u;
var browserEmail = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
var _emoji = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
function emoji() {
  return new RegExp(_emoji, "u");
}
var ipv4 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})$/;
var cidrv4 = /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/([0-9]|[1-2][0-9]|3[0-2])$/;
var cidrv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var base64 = /^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/;
var base64url = /^[A-Za-z0-9_-]*$/;
var hostname = /^([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+$/;
var domain = /^([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/;
var e164 = /^\+(?:[0-9]){6,14}[0-9]$/;
var dateSource = `(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))`;
var date = new RegExp(`^${dateSource}$`);
function timeSource(args) {
  const hhmm = `(?:[01]\\d|2[0-3]):[0-5]\\d`;
  const regex = typeof args.precision === "number" ? args.precision === -1 ? `${hhmm}` : args.precision === 0 ? `${hhmm}:[0-5]\\d` : `${hhmm}:[0-5]\\d\\.\\d{${args.precision}}` : `${hhmm}(?::[0-5]\\d(?:\\.\\d+)?)?`;
  return regex;
}
function time(args) {
  return new RegExp(`^${timeSource(args)}$`);
}
function datetime(args) {
  const time3 = timeSource({ precision: args.precision });
  const opts = ["Z"];
  if (args.local)
    opts.push("");
  if (args.offset)
    opts.push(`([+-]\\d{2}:\\d{2})`);
  const timeRegex2 = `${time3}(?:${opts.join("|")})`;
  return new RegExp(`^${dateSource}T(?:${timeRegex2})$`);
}
var string = (params) => {
  const regex = params ? `[\\s\\S]{${(params == null ? void 0 : params.minimum) ?? 0},${(params == null ? void 0 : params.maximum) ?? ""}}` : `[\\s\\S]*`;
  return new RegExp(`^${regex}$`);
};
var bigint = /^\d+n?$/;
var integer = /^\d+$/;
var number = /^-?\d+(?:\.\d+)?/i;
var boolean = /true|false/i;
var _null = /null/i;
var _undefined = /undefined/i;
var lowercase = /^[^A-Z]*$/;
var uppercase = /^[^a-z]*$/;

// node_modules/zod/v4/core/checks.js
var $ZodCheck = $constructor("$ZodCheck", (inst, def) => {
  var _a;
  inst._zod ?? (inst._zod = {});
  inst._zod.def = def;
  (_a = inst._zod).onattach ?? (_a.onattach = []);
});
var numericOriginMap = {
  number: "number",
  bigint: "bigint",
  object: "date"
};
var $ZodCheckLessThan = $constructor("$ZodCheckLessThan", (inst, def) => {
  $ZodCheck.init(inst, def);
  const origin = numericOriginMap[typeof def.value];
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    const curr = (def.inclusive ? bag.maximum : bag.exclusiveMaximum) ?? Number.POSITIVE_INFINITY;
    if (def.value < curr) {
      if (def.inclusive)
        bag.maximum = def.value;
      else
        bag.exclusiveMaximum = def.value;
    }
  });
  inst._zod.check = (payload) => {
    if (def.inclusive ? payload.value <= def.value : payload.value < def.value) {
      return;
    }
    payload.issues.push({
      origin,
      code: "too_big",
      maximum: def.value,
      input: payload.value,
      inclusive: def.inclusive,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckGreaterThan = $constructor("$ZodCheckGreaterThan", (inst, def) => {
  $ZodCheck.init(inst, def);
  const origin = numericOriginMap[typeof def.value];
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    const curr = (def.inclusive ? bag.minimum : bag.exclusiveMinimum) ?? Number.NEGATIVE_INFINITY;
    if (def.value > curr) {
      if (def.inclusive)
        bag.minimum = def.value;
      else
        bag.exclusiveMinimum = def.value;
    }
  });
  inst._zod.check = (payload) => {
    if (def.inclusive ? payload.value >= def.value : payload.value > def.value) {
      return;
    }
    payload.issues.push({
      origin,
      code: "too_small",
      minimum: def.value,
      input: payload.value,
      inclusive: def.inclusive,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckMultipleOf = $constructor("$ZodCheckMultipleOf", (inst, def) => {
  $ZodCheck.init(inst, def);
  inst._zod.onattach.push((inst2) => {
    var _a;
    (_a = inst2._zod.bag).multipleOf ?? (_a.multipleOf = def.value);
  });
  inst._zod.check = (payload) => {
    if (typeof payload.value !== typeof def.value)
      throw new Error("Cannot mix number and bigint in multiple_of check.");
    const isMultiple = typeof payload.value === "bigint" ? payload.value % def.value === BigInt(0) : floatSafeRemainder(payload.value, def.value) === 0;
    if (isMultiple)
      return;
    payload.issues.push({
      origin: typeof payload.value,
      code: "not_multiple_of",
      divisor: def.value,
      input: payload.value,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckNumberFormat = $constructor("$ZodCheckNumberFormat", (inst, def) => {
  var _a;
  $ZodCheck.init(inst, def);
  def.format = def.format || "float64";
  const isInt = (_a = def.format) == null ? void 0 : _a.includes("int");
  const origin = isInt ? "int" : "number";
  const [minimum, maximum] = NUMBER_FORMAT_RANGES[def.format];
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    bag.format = def.format;
    bag.minimum = minimum;
    bag.maximum = maximum;
    if (isInt)
      bag.pattern = integer;
  });
  inst._zod.check = (payload) => {
    const input = payload.value;
    if (isInt) {
      if (!Number.isInteger(input)) {
        payload.issues.push({
          expected: origin,
          format: def.format,
          code: "invalid_type",
          input,
          inst
        });
        return;
      }
      if (!Number.isSafeInteger(input)) {
        if (input > 0) {
          payload.issues.push({
            input,
            code: "too_big",
            maximum: Number.MAX_SAFE_INTEGER,
            note: "Integers must be within the safe integer range.",
            inst,
            origin,
            continue: !def.abort
          });
        } else {
          payload.issues.push({
            input,
            code: "too_small",
            minimum: Number.MIN_SAFE_INTEGER,
            note: "Integers must be within the safe integer range.",
            inst,
            origin,
            continue: !def.abort
          });
        }
        return;
      }
    }
    if (input < minimum) {
      payload.issues.push({
        origin: "number",
        input,
        code: "too_small",
        minimum,
        inclusive: true,
        inst,
        continue: !def.abort
      });
    }
    if (input > maximum) {
      payload.issues.push({
        origin: "number",
        input,
        code: "too_big",
        maximum,
        inst
      });
    }
  };
});
var $ZodCheckBigIntFormat = $constructor("$ZodCheckBigIntFormat", (inst, def) => {
  $ZodCheck.init(inst, def);
  const [minimum, maximum] = BIGINT_FORMAT_RANGES[def.format];
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    bag.format = def.format;
    bag.minimum = minimum;
    bag.maximum = maximum;
  });
  inst._zod.check = (payload) => {
    const input = payload.value;
    if (input < minimum) {
      payload.issues.push({
        origin: "bigint",
        input,
        code: "too_small",
        minimum,
        inclusive: true,
        inst,
        continue: !def.abort
      });
    }
    if (input > maximum) {
      payload.issues.push({
        origin: "bigint",
        input,
        code: "too_big",
        maximum,
        inst
      });
    }
  };
});
var $ZodCheckMaxSize = $constructor("$ZodCheckMaxSize", (inst, def) => {
  var _a;
  $ZodCheck.init(inst, def);
  (_a = inst._zod.def).when ?? (_a.when = (payload) => {
    const val = payload.value;
    return !nullish(val) && val.size !== void 0;
  });
  inst._zod.onattach.push((inst2) => {
    const curr = inst2._zod.bag.maximum ?? Number.POSITIVE_INFINITY;
    if (def.maximum < curr)
      inst2._zod.bag.maximum = def.maximum;
  });
  inst._zod.check = (payload) => {
    const input = payload.value;
    const size = input.size;
    if (size <= def.maximum)
      return;
    payload.issues.push({
      origin: getSizableOrigin(input),
      code: "too_big",
      maximum: def.maximum,
      input,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckMinSize = $constructor("$ZodCheckMinSize", (inst, def) => {
  var _a;
  $ZodCheck.init(inst, def);
  (_a = inst._zod.def).when ?? (_a.when = (payload) => {
    const val = payload.value;
    return !nullish(val) && val.size !== void 0;
  });
  inst._zod.onattach.push((inst2) => {
    const curr = inst2._zod.bag.minimum ?? Number.NEGATIVE_INFINITY;
    if (def.minimum > curr)
      inst2._zod.bag.minimum = def.minimum;
  });
  inst._zod.check = (payload) => {
    const input = payload.value;
    const size = input.size;
    if (size >= def.minimum)
      return;
    payload.issues.push({
      origin: getSizableOrigin(input),
      code: "too_small",
      minimum: def.minimum,
      input,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckSizeEquals = $constructor("$ZodCheckSizeEquals", (inst, def) => {
  var _a;
  $ZodCheck.init(inst, def);
  (_a = inst._zod.def).when ?? (_a.when = (payload) => {
    const val = payload.value;
    return !nullish(val) && val.size !== void 0;
  });
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    bag.minimum = def.size;
    bag.maximum = def.size;
    bag.size = def.size;
  });
  inst._zod.check = (payload) => {
    const input = payload.value;
    const size = input.size;
    if (size === def.size)
      return;
    const tooBig = size > def.size;
    payload.issues.push({
      origin: getSizableOrigin(input),
      ...tooBig ? { code: "too_big", maximum: def.size } : { code: "too_small", minimum: def.size },
      inclusive: true,
      exact: true,
      input: payload.value,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckMaxLength = $constructor("$ZodCheckMaxLength", (inst, def) => {
  var _a;
  $ZodCheck.init(inst, def);
  (_a = inst._zod.def).when ?? (_a.when = (payload) => {
    const val = payload.value;
    return !nullish(val) && val.length !== void 0;
  });
  inst._zod.onattach.push((inst2) => {
    const curr = inst2._zod.bag.maximum ?? Number.POSITIVE_INFINITY;
    if (def.maximum < curr)
      inst2._zod.bag.maximum = def.maximum;
  });
  inst._zod.check = (payload) => {
    const input = payload.value;
    const length = input.length;
    if (length <= def.maximum)
      return;
    const origin = getLengthableOrigin(input);
    payload.issues.push({
      origin,
      code: "too_big",
      maximum: def.maximum,
      inclusive: true,
      input,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckMinLength = $constructor("$ZodCheckMinLength", (inst, def) => {
  var _a;
  $ZodCheck.init(inst, def);
  (_a = inst._zod.def).when ?? (_a.when = (payload) => {
    const val = payload.value;
    return !nullish(val) && val.length !== void 0;
  });
  inst._zod.onattach.push((inst2) => {
    const curr = inst2._zod.bag.minimum ?? Number.NEGATIVE_INFINITY;
    if (def.minimum > curr)
      inst2._zod.bag.minimum = def.minimum;
  });
  inst._zod.check = (payload) => {
    const input = payload.value;
    const length = input.length;
    if (length >= def.minimum)
      return;
    const origin = getLengthableOrigin(input);
    payload.issues.push({
      origin,
      code: "too_small",
      minimum: def.minimum,
      inclusive: true,
      input,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckLengthEquals = $constructor("$ZodCheckLengthEquals", (inst, def) => {
  var _a;
  $ZodCheck.init(inst, def);
  (_a = inst._zod.def).when ?? (_a.when = (payload) => {
    const val = payload.value;
    return !nullish(val) && val.length !== void 0;
  });
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    bag.minimum = def.length;
    bag.maximum = def.length;
    bag.length = def.length;
  });
  inst._zod.check = (payload) => {
    const input = payload.value;
    const length = input.length;
    if (length === def.length)
      return;
    const origin = getLengthableOrigin(input);
    const tooBig = length > def.length;
    payload.issues.push({
      origin,
      ...tooBig ? { code: "too_big", maximum: def.length } : { code: "too_small", minimum: def.length },
      inclusive: true,
      exact: true,
      input: payload.value,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckStringFormat = $constructor("$ZodCheckStringFormat", (inst, def) => {
  var _a, _b;
  $ZodCheck.init(inst, def);
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    bag.format = def.format;
    if (def.pattern) {
      bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
      bag.patterns.add(def.pattern);
    }
  });
  if (def.pattern)
    (_a = inst._zod).check ?? (_a.check = (payload) => {
      def.pattern.lastIndex = 0;
      if (def.pattern.test(payload.value))
        return;
      payload.issues.push({
        origin: "string",
        code: "invalid_format",
        format: def.format,
        input: payload.value,
        ...def.pattern ? { pattern: def.pattern.toString() } : {},
        inst,
        continue: !def.abort
      });
    });
  else
    (_b = inst._zod).check ?? (_b.check = () => {
    });
});
var $ZodCheckRegex = $constructor("$ZodCheckRegex", (inst, def) => {
  $ZodCheckStringFormat.init(inst, def);
  inst._zod.check = (payload) => {
    def.pattern.lastIndex = 0;
    if (def.pattern.test(payload.value))
      return;
    payload.issues.push({
      origin: "string",
      code: "invalid_format",
      format: "regex",
      input: payload.value,
      pattern: def.pattern.toString(),
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckLowerCase = $constructor("$ZodCheckLowerCase", (inst, def) => {
  def.pattern ?? (def.pattern = lowercase);
  $ZodCheckStringFormat.init(inst, def);
});
var $ZodCheckUpperCase = $constructor("$ZodCheckUpperCase", (inst, def) => {
  def.pattern ?? (def.pattern = uppercase);
  $ZodCheckStringFormat.init(inst, def);
});
var $ZodCheckIncludes = $constructor("$ZodCheckIncludes", (inst, def) => {
  $ZodCheck.init(inst, def);
  const escapedRegex = escapeRegex(def.includes);
  const pattern = new RegExp(typeof def.position === "number" ? `^.{${def.position}}${escapedRegex}` : escapedRegex);
  def.pattern = pattern;
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
    bag.patterns.add(pattern);
  });
  inst._zod.check = (payload) => {
    if (payload.value.includes(def.includes, def.position))
      return;
    payload.issues.push({
      origin: "string",
      code: "invalid_format",
      format: "includes",
      includes: def.includes,
      input: payload.value,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckStartsWith = $constructor("$ZodCheckStartsWith", (inst, def) => {
  $ZodCheck.init(inst, def);
  const pattern = new RegExp(`^${escapeRegex(def.prefix)}.*`);
  def.pattern ?? (def.pattern = pattern);
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
    bag.patterns.add(pattern);
  });
  inst._zod.check = (payload) => {
    if (payload.value.startsWith(def.prefix))
      return;
    payload.issues.push({
      origin: "string",
      code: "invalid_format",
      format: "starts_with",
      prefix: def.prefix,
      input: payload.value,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCheckEndsWith = $constructor("$ZodCheckEndsWith", (inst, def) => {
  $ZodCheck.init(inst, def);
  const pattern = new RegExp(`.*${escapeRegex(def.suffix)}$`);
  def.pattern ?? (def.pattern = pattern);
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
    bag.patterns.add(pattern);
  });
  inst._zod.check = (payload) => {
    if (payload.value.endsWith(def.suffix))
      return;
    payload.issues.push({
      origin: "string",
      code: "invalid_format",
      format: "ends_with",
      suffix: def.suffix,
      input: payload.value,
      inst,
      continue: !def.abort
    });
  };
});
function handleCheckPropertyResult(result, payload, property) {
  if (result.issues.length) {
    payload.issues.push(...prefixIssues(property, result.issues));
  }
}
var $ZodCheckProperty = $constructor("$ZodCheckProperty", (inst, def) => {
  $ZodCheck.init(inst, def);
  inst._zod.check = (payload) => {
    const result = def.schema._zod.run({
      value: payload.value[def.property],
      issues: []
    }, {});
    if (result instanceof Promise) {
      return result.then((result2) => handleCheckPropertyResult(result2, payload, def.property));
    }
    handleCheckPropertyResult(result, payload, def.property);
    return;
  };
});
var $ZodCheckMimeType = $constructor("$ZodCheckMimeType", (inst, def) => {
  $ZodCheck.init(inst, def);
  const mimeSet = new Set(def.mime);
  inst._zod.onattach.push((inst2) => {
    inst2._zod.bag.mime = def.mime;
  });
  inst._zod.check = (payload) => {
    if (mimeSet.has(payload.value.type))
      return;
    payload.issues.push({
      code: "invalid_value",
      values: def.mime,
      input: payload.value.type,
      inst
    });
  };
});
var $ZodCheckOverwrite = $constructor("$ZodCheckOverwrite", (inst, def) => {
  $ZodCheck.init(inst, def);
  inst._zod.check = (payload) => {
    payload.value = def.tx(payload.value);
  };
});

// node_modules/zod/v4/core/doc.js
var Doc = class {
  constructor(args = []) {
    this.content = [];
    this.indent = 0;
    if (this)
      this.args = args;
  }
  indented(fn) {
    this.indent += 1;
    fn(this);
    this.indent -= 1;
  }
  write(arg) {
    if (typeof arg === "function") {
      arg(this, { execution: "sync" });
      arg(this, { execution: "async" });
      return;
    }
    const content = arg;
    const lines = content.split("\n").filter((x) => x);
    const minIndent = Math.min(...lines.map((x) => x.length - x.trimStart().length));
    const dedented = lines.map((x) => x.slice(minIndent)).map((x) => " ".repeat(this.indent * 2) + x);
    for (const line of dedented) {
      this.content.push(line);
    }
  }
  compile() {
    const F = Function;
    const args = this == null ? void 0 : this.args;
    const content = (this == null ? void 0 : this.content) ?? [``];
    const lines = [...content.map((x) => `  ${x}`)];
    return new F(...args, lines.join("\n"));
  }
};

// node_modules/zod/v4/core/versions.js
var version = {
  major: 4,
  minor: 0,
  patch: 0
};

// node_modules/zod/v4/core/schemas.js
var $ZodType = $constructor("$ZodType", (inst, def) => {
  var _a2;
  var _a;
  inst ?? (inst = {});
  inst._zod.def = def;
  inst._zod.bag = inst._zod.bag || {};
  inst._zod.version = version;
  const checks = [...inst._zod.def.checks ?? []];
  if (inst._zod.traits.has("$ZodCheck")) {
    checks.unshift(inst);
  }
  for (const ch of checks) {
    for (const fn of ch._zod.onattach) {
      fn(inst);
    }
  }
  if (checks.length === 0) {
    (_a = inst._zod).deferred ?? (_a.deferred = []);
    (_a2 = inst._zod.deferred) == null ? void 0 : _a2.push(() => {
      inst._zod.run = inst._zod.parse;
    });
  } else {
    const runChecks = (payload, checks2, ctx) => {
      let isAborted2 = aborted(payload);
      let asyncResult;
      for (const ch of checks2) {
        if (ch._zod.def.when) {
          const shouldRun = ch._zod.def.when(payload);
          if (!shouldRun)
            continue;
        } else if (isAborted2) {
          continue;
        }
        const currLen = payload.issues.length;
        const _ = ch._zod.check(payload);
        if (_ instanceof Promise && (ctx == null ? void 0 : ctx.async) === false) {
          throw new $ZodAsyncError();
        }
        if (asyncResult || _ instanceof Promise) {
          asyncResult = (asyncResult ?? Promise.resolve()).then(async () => {
            await _;
            const nextLen = payload.issues.length;
            if (nextLen === currLen)
              return;
            if (!isAborted2)
              isAborted2 = aborted(payload, currLen);
          });
        } else {
          const nextLen = payload.issues.length;
          if (nextLen === currLen)
            continue;
          if (!isAborted2)
            isAborted2 = aborted(payload, currLen);
        }
      }
      if (asyncResult) {
        return asyncResult.then(() => {
          return payload;
        });
      }
      return payload;
    };
    inst._zod.run = (payload, ctx) => {
      const result = inst._zod.parse(payload, ctx);
      if (result instanceof Promise) {
        if (ctx.async === false)
          throw new $ZodAsyncError();
        return result.then((result2) => runChecks(result2, checks, ctx));
      }
      return runChecks(result, checks, ctx);
    };
  }
  inst["~standard"] = {
    validate: (value) => {
      var _a3;
      try {
        const r = safeParse(inst, value);
        return r.success ? { value: r.data } : { issues: (_a3 = r.error) == null ? void 0 : _a3.issues };
      } catch (_) {
        return safeParseAsync(inst, value).then((r) => {
          var _a4;
          return r.success ? { value: r.data } : { issues: (_a4 = r.error) == null ? void 0 : _a4.issues };
        });
      }
    },
    vendor: "zod",
    version: 1
  };
});
var $ZodString = $constructor("$ZodString", (inst, def) => {
  var _a;
  $ZodType.init(inst, def);
  inst._zod.pattern = [...((_a = inst == null ? void 0 : inst._zod.bag) == null ? void 0 : _a.patterns) ?? []].pop() ?? string(inst._zod.bag);
  inst._zod.parse = (payload, _) => {
    if (def.coerce)
      try {
        payload.value = String(payload.value);
      } catch (_2) {
      }
    if (typeof payload.value === "string")
      return payload;
    payload.issues.push({
      expected: "string",
      code: "invalid_type",
      input: payload.value,
      inst
    });
    return payload;
  };
});
var $ZodStringFormat = $constructor("$ZodStringFormat", (inst, def) => {
  $ZodCheckStringFormat.init(inst, def);
  $ZodString.init(inst, def);
});
var $ZodGUID = $constructor("$ZodGUID", (inst, def) => {
  def.pattern ?? (def.pattern = guid);
  $ZodStringFormat.init(inst, def);
});
var $ZodUUID = $constructor("$ZodUUID", (inst, def) => {
  if (def.version) {
    const versionMap = {
      v1: 1,
      v2: 2,
      v3: 3,
      v4: 4,
      v5: 5,
      v6: 6,
      v7: 7,
      v8: 8
    };
    const v = versionMap[def.version];
    if (v === void 0)
      throw new Error(`Invalid UUID version: "${def.version}"`);
    def.pattern ?? (def.pattern = uuid(v));
  } else
    def.pattern ?? (def.pattern = uuid());
  $ZodStringFormat.init(inst, def);
});
var $ZodEmail = $constructor("$ZodEmail", (inst, def) => {
  def.pattern ?? (def.pattern = email);
  $ZodStringFormat.init(inst, def);
});
var $ZodURL = $constructor("$ZodURL", (inst, def) => {
  $ZodStringFormat.init(inst, def);
  inst._zod.check = (payload) => {
    try {
      const orig = payload.value;
      const url2 = new URL(orig);
      const href = url2.href;
      if (def.hostname) {
        def.hostname.lastIndex = 0;
        if (!def.hostname.test(url2.hostname)) {
          payload.issues.push({
            code: "invalid_format",
            format: "url",
            note: "Invalid hostname",
            pattern: hostname.source,
            input: payload.value,
            inst,
            continue: !def.abort
          });
        }
      }
      if (def.protocol) {
        def.protocol.lastIndex = 0;
        if (!def.protocol.test(url2.protocol.endsWith(":") ? url2.protocol.slice(0, -1) : url2.protocol)) {
          payload.issues.push({
            code: "invalid_format",
            format: "url",
            note: "Invalid protocol",
            pattern: def.protocol.source,
            input: payload.value,
            inst,
            continue: !def.abort
          });
        }
      }
      if (!orig.endsWith("/") && href.endsWith("/")) {
        payload.value = href.slice(0, -1);
      } else {
        payload.value = href;
      }
      return;
    } catch (_) {
      payload.issues.push({
        code: "invalid_format",
        format: "url",
        input: payload.value,
        inst,
        continue: !def.abort
      });
    }
  };
});
var $ZodEmoji = $constructor("$ZodEmoji", (inst, def) => {
  def.pattern ?? (def.pattern = emoji());
  $ZodStringFormat.init(inst, def);
});
var $ZodNanoID = $constructor("$ZodNanoID", (inst, def) => {
  def.pattern ?? (def.pattern = nanoid);
  $ZodStringFormat.init(inst, def);
});
var $ZodCUID = $constructor("$ZodCUID", (inst, def) => {
  def.pattern ?? (def.pattern = cuid);
  $ZodStringFormat.init(inst, def);
});
var $ZodCUID2 = $constructor("$ZodCUID2", (inst, def) => {
  def.pattern ?? (def.pattern = cuid2);
  $ZodStringFormat.init(inst, def);
});
var $ZodULID = $constructor("$ZodULID", (inst, def) => {
  def.pattern ?? (def.pattern = ulid);
  $ZodStringFormat.init(inst, def);
});
var $ZodXID = $constructor("$ZodXID", (inst, def) => {
  def.pattern ?? (def.pattern = xid);
  $ZodStringFormat.init(inst, def);
});
var $ZodKSUID = $constructor("$ZodKSUID", (inst, def) => {
  def.pattern ?? (def.pattern = ksuid);
  $ZodStringFormat.init(inst, def);
});
var $ZodISODateTime = $constructor("$ZodISODateTime", (inst, def) => {
  def.pattern ?? (def.pattern = datetime(def));
  $ZodStringFormat.init(inst, def);
});
var $ZodISODate = $constructor("$ZodISODate", (inst, def) => {
  def.pattern ?? (def.pattern = date);
  $ZodStringFormat.init(inst, def);
});
var $ZodISOTime = $constructor("$ZodISOTime", (inst, def) => {
  def.pattern ?? (def.pattern = time(def));
  $ZodStringFormat.init(inst, def);
});
var $ZodISODuration = $constructor("$ZodISODuration", (inst, def) => {
  def.pattern ?? (def.pattern = duration);
  $ZodStringFormat.init(inst, def);
});
var $ZodIPv4 = $constructor("$ZodIPv4", (inst, def) => {
  def.pattern ?? (def.pattern = ipv4);
  $ZodStringFormat.init(inst, def);
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    bag.format = `ipv4`;
  });
});
var $ZodIPv6 = $constructor("$ZodIPv6", (inst, def) => {
  def.pattern ?? (def.pattern = ipv6);
  $ZodStringFormat.init(inst, def);
  inst._zod.onattach.push((inst2) => {
    const bag = inst2._zod.bag;
    bag.format = `ipv6`;
  });
  inst._zod.check = (payload) => {
    try {
      new URL(`http://[${payload.value}]`);
    } catch {
      payload.issues.push({
        code: "invalid_format",
        format: "ipv6",
        input: payload.value,
        inst,
        continue: !def.abort
      });
    }
  };
});
var $ZodCIDRv4 = $constructor("$ZodCIDRv4", (inst, def) => {
  def.pattern ?? (def.pattern = cidrv4);
  $ZodStringFormat.init(inst, def);
});
var $ZodCIDRv6 = $constructor("$ZodCIDRv6", (inst, def) => {
  def.pattern ?? (def.pattern = cidrv6);
  $ZodStringFormat.init(inst, def);
  inst._zod.check = (payload) => {
    const [address, prefix] = payload.value.split("/");
    try {
      if (!prefix)
        throw new Error();
      const prefixNum = Number(prefix);
      if (`${prefixNum}` !== prefix)
        throw new Error();
      if (prefixNum < 0 || prefixNum > 128)
        throw new Error();
      new URL(`http://[${address}]`);
    } catch {
      payload.issues.push({
        code: "invalid_format",
        format: "cidrv6",
        input: payload.value,
        inst,
        continue: !def.abort
      });
    }
  };
});
function isValidBase64(data) {
  if (data === "")
    return true;
  if (data.length % 4 !== 0)
    return false;
  try {
    atob(data);
    return true;
  } catch {
    return false;
  }
}
var $ZodBase64 = $constructor("$ZodBase64", (inst, def) => {
  def.pattern ?? (def.pattern = base64);
  $ZodStringFormat.init(inst, def);
  inst._zod.onattach.push((inst2) => {
    inst2._zod.bag.contentEncoding = "base64";
  });
  inst._zod.check = (payload) => {
    if (isValidBase64(payload.value))
      return;
    payload.issues.push({
      code: "invalid_format",
      format: "base64",
      input: payload.value,
      inst,
      continue: !def.abort
    });
  };
});
function isValidBase64URL(data) {
  if (!base64url.test(data))
    return false;
  const base643 = data.replace(/[-_]/g, (c) => c === "-" ? "+" : "/");
  const padded = base643.padEnd(Math.ceil(base643.length / 4) * 4, "=");
  return isValidBase64(padded);
}
var $ZodBase64URL = $constructor("$ZodBase64URL", (inst, def) => {
  def.pattern ?? (def.pattern = base64url);
  $ZodStringFormat.init(inst, def);
  inst._zod.onattach.push((inst2) => {
    inst2._zod.bag.contentEncoding = "base64url";
  });
  inst._zod.check = (payload) => {
    if (isValidBase64URL(payload.value))
      return;
    payload.issues.push({
      code: "invalid_format",
      format: "base64url",
      input: payload.value,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodE164 = $constructor("$ZodE164", (inst, def) => {
  def.pattern ?? (def.pattern = e164);
  $ZodStringFormat.init(inst, def);
});
function isValidJWT(token, algorithm = null) {
  try {
    const tokensParts = token.split(".");
    if (tokensParts.length !== 3)
      return false;
    const [header] = tokensParts;
    if (!header)
      return false;
    const parsedHeader = JSON.parse(atob(header));
    if ("typ" in parsedHeader && (parsedHeader == null ? void 0 : parsedHeader.typ) !== "JWT")
      return false;
    if (!parsedHeader.alg)
      return false;
    if (algorithm && (!("alg" in parsedHeader) || parsedHeader.alg !== algorithm))
      return false;
    return true;
  } catch {
    return false;
  }
}
var $ZodJWT = $constructor("$ZodJWT", (inst, def) => {
  $ZodStringFormat.init(inst, def);
  inst._zod.check = (payload) => {
    if (isValidJWT(payload.value, def.alg))
      return;
    payload.issues.push({
      code: "invalid_format",
      format: "jwt",
      input: payload.value,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodCustomStringFormat = $constructor("$ZodCustomStringFormat", (inst, def) => {
  $ZodStringFormat.init(inst, def);
  inst._zod.check = (payload) => {
    if (def.fn(payload.value))
      return;
    payload.issues.push({
      code: "invalid_format",
      format: def.format,
      input: payload.value,
      inst,
      continue: !def.abort
    });
  };
});
var $ZodNumber = $constructor("$ZodNumber", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.pattern = inst._zod.bag.pattern ?? number;
  inst._zod.parse = (payload, _ctx) => {
    if (def.coerce)
      try {
        payload.value = Number(payload.value);
      } catch (_) {
      }
    const input = payload.value;
    if (typeof input === "number" && !Number.isNaN(input) && Number.isFinite(input)) {
      return payload;
    }
    const received = typeof input === "number" ? Number.isNaN(input) ? "NaN" : !Number.isFinite(input) ? "Infinity" : void 0 : void 0;
    payload.issues.push({
      expected: "number",
      code: "invalid_type",
      input,
      inst,
      ...received ? { received } : {}
    });
    return payload;
  };
});
var $ZodNumberFormat = $constructor("$ZodNumber", (inst, def) => {
  $ZodCheckNumberFormat.init(inst, def);
  $ZodNumber.init(inst, def);
});
var $ZodBoolean = $constructor("$ZodBoolean", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.pattern = boolean;
  inst._zod.parse = (payload, _ctx) => {
    if (def.coerce)
      try {
        payload.value = Boolean(payload.value);
      } catch (_) {
      }
    const input = payload.value;
    if (typeof input === "boolean")
      return payload;
    payload.issues.push({
      expected: "boolean",
      code: "invalid_type",
      input,
      inst
    });
    return payload;
  };
});
var $ZodBigInt = $constructor("$ZodBigInt", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.pattern = bigint;
  inst._zod.parse = (payload, _ctx) => {
    if (def.coerce)
      try {
        payload.value = BigInt(payload.value);
      } catch (_) {
      }
    if (typeof payload.value === "bigint")
      return payload;
    payload.issues.push({
      expected: "bigint",
      code: "invalid_type",
      input: payload.value,
      inst
    });
    return payload;
  };
});
var $ZodBigIntFormat = $constructor("$ZodBigInt", (inst, def) => {
  $ZodCheckBigIntFormat.init(inst, def);
  $ZodBigInt.init(inst, def);
});
var $ZodSymbol = $constructor("$ZodSymbol", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, _ctx) => {
    const input = payload.value;
    if (typeof input === "symbol")
      return payload;
    payload.issues.push({
      expected: "symbol",
      code: "invalid_type",
      input,
      inst
    });
    return payload;
  };
});
var $ZodUndefined = $constructor("$ZodUndefined", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.pattern = _undefined;
  inst._zod.values = /* @__PURE__ */ new Set([void 0]);
  inst._zod.optin = "optional";
  inst._zod.optout = "optional";
  inst._zod.parse = (payload, _ctx) => {
    const input = payload.value;
    if (typeof input === "undefined")
      return payload;
    payload.issues.push({
      expected: "undefined",
      code: "invalid_type",
      input,
      inst
    });
    return payload;
  };
});
var $ZodNull = $constructor("$ZodNull", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.pattern = _null;
  inst._zod.values = /* @__PURE__ */ new Set([null]);
  inst._zod.parse = (payload, _ctx) => {
    const input = payload.value;
    if (input === null)
      return payload;
    payload.issues.push({
      expected: "null",
      code: "invalid_type",
      input,
      inst
    });
    return payload;
  };
});
var $ZodAny = $constructor("$ZodAny", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload) => payload;
});
var $ZodUnknown = $constructor("$ZodUnknown", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload) => payload;
});
var $ZodNever = $constructor("$ZodNever", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, _ctx) => {
    payload.issues.push({
      expected: "never",
      code: "invalid_type",
      input: payload.value,
      inst
    });
    return payload;
  };
});
var $ZodVoid = $constructor("$ZodVoid", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, _ctx) => {
    const input = payload.value;
    if (typeof input === "undefined")
      return payload;
    payload.issues.push({
      expected: "void",
      code: "invalid_type",
      input,
      inst
    });
    return payload;
  };
});
var $ZodDate = $constructor("$ZodDate", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, _ctx) => {
    if (def.coerce) {
      try {
        payload.value = new Date(payload.value);
      } catch (_err) {
      }
    }
    const input = payload.value;
    const isDate = input instanceof Date;
    const isValidDate = isDate && !Number.isNaN(input.getTime());
    if (isValidDate)
      return payload;
    payload.issues.push({
      expected: "date",
      code: "invalid_type",
      input,
      ...isDate ? { received: "Invalid Date" } : {},
      inst
    });
    return payload;
  };
});
function handleArrayResult(result, final, index) {
  if (result.issues.length) {
    final.issues.push(...prefixIssues(index, result.issues));
  }
  final.value[index] = result.value;
}
var $ZodArray = $constructor("$ZodArray", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, ctx) => {
    const input = payload.value;
    if (!Array.isArray(input)) {
      payload.issues.push({
        expected: "array",
        code: "invalid_type",
        input,
        inst
      });
      return payload;
    }
    payload.value = Array(input.length);
    const proms = [];
    for (let i = 0; i < input.length; i++) {
      const item = input[i];
      const result = def.element._zod.run({
        value: item,
        issues: []
      }, ctx);
      if (result instanceof Promise) {
        proms.push(result.then((result2) => handleArrayResult(result2, payload, i)));
      } else {
        handleArrayResult(result, payload, i);
      }
    }
    if (proms.length) {
      return Promise.all(proms).then(() => payload);
    }
    return payload;
  };
});
function handleObjectResult(result, final, key) {
  if (result.issues.length) {
    final.issues.push(...prefixIssues(key, result.issues));
  }
  final.value[key] = result.value;
}
function handleOptionalObjectResult(result, final, key, input) {
  if (result.issues.length) {
    if (input[key] === void 0) {
      if (key in input) {
        final.value[key] = void 0;
      } else {
        final.value[key] = result.value;
      }
    } else {
      final.issues.push(...prefixIssues(key, result.issues));
    }
  } else if (result.value === void 0) {
    if (key in input)
      final.value[key] = void 0;
  } else {
    final.value[key] = result.value;
  }
}
var $ZodObject = $constructor("$ZodObject", (inst, def) => {
  $ZodType.init(inst, def);
  const _normalized = cached(() => {
    const keys = Object.keys(def.shape);
    for (const k of keys) {
      if (!(def.shape[k] instanceof $ZodType)) {
        throw new Error(`Invalid element at key "${k}": expected a Zod schema`);
      }
    }
    const okeys = optionalKeys(def.shape);
    return {
      shape: def.shape,
      keys,
      keySet: new Set(keys),
      numKeys: keys.length,
      optionalKeys: new Set(okeys)
    };
  });
  defineLazy(inst._zod, "propValues", () => {
    const shape = def.shape;
    const propValues = {};
    for (const key in shape) {
      const field = shape[key]._zod;
      if (field.values) {
        propValues[key] ?? (propValues[key] = /* @__PURE__ */ new Set());
        for (const v of field.values)
          propValues[key].add(v);
      }
    }
    return propValues;
  });
  const generateFastpass = (shape) => {
    const doc = new Doc(["shape", "payload", "ctx"]);
    const normalized = _normalized.value;
    const parseStr = (key) => {
      const k = esc(key);
      return `shape[${k}]._zod.run({ value: input[${k}], issues: [] }, ctx)`;
    };
    doc.write(`const input = payload.value;`);
    const ids = /* @__PURE__ */ Object.create(null);
    let counter = 0;
    for (const key of normalized.keys) {
      ids[key] = `key_${counter++}`;
    }
    doc.write(`const newResult = {}`);
    for (const key of normalized.keys) {
      if (normalized.optionalKeys.has(key)) {
        const id = ids[key];
        doc.write(`const ${id} = ${parseStr(key)};`);
        const k = esc(key);
        doc.write(`
        if (${id}.issues.length) {
          if (input[${k}] === undefined) {
            if (${k} in input) {
              newResult[${k}] = undefined;
            }
          } else {
            payload.issues = payload.issues.concat(
              ${id}.issues.map((iss) => ({
                ...iss,
                path: iss.path ? [${k}, ...iss.path] : [${k}],
              }))
            );
          }
        } else if (${id}.value === undefined) {
          if (${k} in input) newResult[${k}] = undefined;
        } else {
          newResult[${k}] = ${id}.value;
        }
        `);
      } else {
        const id = ids[key];
        doc.write(`const ${id} = ${parseStr(key)};`);
        doc.write(`
          if (${id}.issues.length) payload.issues = payload.issues.concat(${id}.issues.map(iss => ({
            ...iss,
            path: iss.path ? [${esc(key)}, ...iss.path] : [${esc(key)}]
          })));`);
        doc.write(`newResult[${esc(key)}] = ${id}.value`);
      }
    }
    doc.write(`payload.value = newResult;`);
    doc.write(`return payload;`);
    const fn = doc.compile();
    return (payload, ctx) => fn(shape, payload, ctx);
  };
  let fastpass;
  const isObject3 = isObject;
  const jit = !globalConfig.jitless;
  const allowsEval2 = allowsEval;
  const fastEnabled = jit && allowsEval2.value;
  const catchall = def.catchall;
  let value;
  inst._zod.parse = (payload, ctx) => {
    value ?? (value = _normalized.value);
    const input = payload.value;
    if (!isObject3(input)) {
      payload.issues.push({
        expected: "object",
        code: "invalid_type",
        input,
        inst
      });
      return payload;
    }
    const proms = [];
    if (jit && fastEnabled && (ctx == null ? void 0 : ctx.async) === false && ctx.jitless !== true) {
      if (!fastpass)
        fastpass = generateFastpass(def.shape);
      payload = fastpass(payload, ctx);
    } else {
      payload.value = {};
      const shape = value.shape;
      for (const key of value.keys) {
        const el = shape[key];
        const r = el._zod.run({ value: input[key], issues: [] }, ctx);
        const isOptional = el._zod.optin === "optional" && el._zod.optout === "optional";
        if (r instanceof Promise) {
          proms.push(r.then((r2) => isOptional ? handleOptionalObjectResult(r2, payload, key, input) : handleObjectResult(r2, payload, key)));
        } else if (isOptional) {
          handleOptionalObjectResult(r, payload, key, input);
        } else {
          handleObjectResult(r, payload, key);
        }
      }
    }
    if (!catchall) {
      return proms.length ? Promise.all(proms).then(() => payload) : payload;
    }
    const unrecognized = [];
    const keySet = value.keySet;
    const _catchall = catchall._zod;
    const t = _catchall.def.type;
    for (const key of Object.keys(input)) {
      if (keySet.has(key))
        continue;
      if (t === "never") {
        unrecognized.push(key);
        continue;
      }
      const r = _catchall.run({ value: input[key], issues: [] }, ctx);
      if (r instanceof Promise) {
        proms.push(r.then((r2) => handleObjectResult(r2, payload, key)));
      } else {
        handleObjectResult(r, payload, key);
      }
    }
    if (unrecognized.length) {
      payload.issues.push({
        code: "unrecognized_keys",
        keys: unrecognized,
        input,
        inst
      });
    }
    if (!proms.length)
      return payload;
    return Promise.all(proms).then(() => {
      return payload;
    });
  };
});
function handleUnionResults(results, final, inst, ctx) {
  for (const result of results) {
    if (result.issues.length === 0) {
      final.value = result.value;
      return final;
    }
  }
  final.issues.push({
    code: "invalid_union",
    input: final.value,
    inst,
    errors: results.map((result) => result.issues.map((iss) => finalizeIssue(iss, ctx, config())))
  });
  return final;
}
var $ZodUnion = $constructor("$ZodUnion", (inst, def) => {
  $ZodType.init(inst, def);
  defineLazy(inst._zod, "optin", () => def.options.some((o) => o._zod.optin === "optional") ? "optional" : void 0);
  defineLazy(inst._zod, "optout", () => def.options.some((o) => o._zod.optout === "optional") ? "optional" : void 0);
  defineLazy(inst._zod, "values", () => {
    if (def.options.every((o) => o._zod.values)) {
      return new Set(def.options.flatMap((option) => Array.from(option._zod.values)));
    }
    return void 0;
  });
  defineLazy(inst._zod, "pattern", () => {
    if (def.options.every((o) => o._zod.pattern)) {
      const patterns = def.options.map((o) => o._zod.pattern);
      return new RegExp(`^(${patterns.map((p) => cleanRegex(p.source)).join("|")})$`);
    }
    return void 0;
  });
  inst._zod.parse = (payload, ctx) => {
    let async = false;
    const results = [];
    for (const option of def.options) {
      const result = option._zod.run({
        value: payload.value,
        issues: []
      }, ctx);
      if (result instanceof Promise) {
        results.push(result);
        async = true;
      } else {
        if (result.issues.length === 0)
          return result;
        results.push(result);
      }
    }
    if (!async)
      return handleUnionResults(results, payload, inst, ctx);
    return Promise.all(results).then((results2) => {
      return handleUnionResults(results2, payload, inst, ctx);
    });
  };
});
var $ZodDiscriminatedUnion = $constructor("$ZodDiscriminatedUnion", (inst, def) => {
  $ZodUnion.init(inst, def);
  const _super = inst._zod.parse;
  defineLazy(inst._zod, "propValues", () => {
    const propValues = {};
    for (const option of def.options) {
      const pv = option._zod.propValues;
      if (!pv || Object.keys(pv).length === 0)
        throw new Error(`Invalid discriminated union option at index "${def.options.indexOf(option)}"`);
      for (const [k, v] of Object.entries(pv)) {
        if (!propValues[k])
          propValues[k] = /* @__PURE__ */ new Set();
        for (const val of v) {
          propValues[k].add(val);
        }
      }
    }
    return propValues;
  });
  const disc = cached(() => {
    const opts = def.options;
    const map2 = /* @__PURE__ */ new Map();
    for (const o of opts) {
      const values = o._zod.propValues[def.discriminator];
      if (!values || values.size === 0)
        throw new Error(`Invalid discriminated union option at index "${def.options.indexOf(o)}"`);
      for (const v of values) {
        if (map2.has(v)) {
          throw new Error(`Duplicate discriminator value "${String(v)}"`);
        }
        map2.set(v, o);
      }
    }
    return map2;
  });
  inst._zod.parse = (payload, ctx) => {
    const input = payload.value;
    if (!isObject(input)) {
      payload.issues.push({
        code: "invalid_type",
        expected: "object",
        input,
        inst
      });
      return payload;
    }
    const opt = disc.value.get(input == null ? void 0 : input[def.discriminator]);
    if (opt) {
      return opt._zod.run(payload, ctx);
    }
    if (def.unionFallback) {
      return _super(payload, ctx);
    }
    payload.issues.push({
      code: "invalid_union",
      errors: [],
      note: "No matching discriminator",
      input,
      path: [def.discriminator],
      inst
    });
    return payload;
  };
});
var $ZodIntersection = $constructor("$ZodIntersection", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, ctx) => {
    const input = payload.value;
    const left = def.left._zod.run({ value: input, issues: [] }, ctx);
    const right = def.right._zod.run({ value: input, issues: [] }, ctx);
    const async = left instanceof Promise || right instanceof Promise;
    if (async) {
      return Promise.all([left, right]).then(([left2, right2]) => {
        return handleIntersectionResults(payload, left2, right2);
      });
    }
    return handleIntersectionResults(payload, left, right);
  };
});
function mergeValues(a, b) {
  if (a === b) {
    return { valid: true, data: a };
  }
  if (a instanceof Date && b instanceof Date && +a === +b) {
    return { valid: true, data: a };
  }
  if (isPlainObject(a) && isPlainObject(b)) {
    const bKeys = Object.keys(b);
    const sharedKeys = Object.keys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return {
          valid: false,
          mergeErrorPath: [key, ...sharedValue.mergeErrorPath]
        };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) {
      return { valid: false, mergeErrorPath: [] };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return {
          valid: false,
          mergeErrorPath: [index, ...sharedValue.mergeErrorPath]
        };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  }
  return { valid: false, mergeErrorPath: [] };
}
function handleIntersectionResults(result, left, right) {
  if (left.issues.length) {
    result.issues.push(...left.issues);
  }
  if (right.issues.length) {
    result.issues.push(...right.issues);
  }
  if (aborted(result))
    return result;
  const merged = mergeValues(left.value, right.value);
  if (!merged.valid) {
    throw new Error(`Unmergable intersection. Error path: ${JSON.stringify(merged.mergeErrorPath)}`);
  }
  result.value = merged.data;
  return result;
}
var $ZodTuple = $constructor("$ZodTuple", (inst, def) => {
  $ZodType.init(inst, def);
  const items = def.items;
  const optStart = items.length - [...items].reverse().findIndex((item) => item._zod.optin !== "optional");
  inst._zod.parse = (payload, ctx) => {
    const input = payload.value;
    if (!Array.isArray(input)) {
      payload.issues.push({
        input,
        inst,
        expected: "tuple",
        code: "invalid_type"
      });
      return payload;
    }
    payload.value = [];
    const proms = [];
    if (!def.rest) {
      const tooBig = input.length > items.length;
      const tooSmall = input.length < optStart - 1;
      if (tooBig || tooSmall) {
        payload.issues.push({
          input,
          inst,
          origin: "array",
          ...tooBig ? { code: "too_big", maximum: items.length } : { code: "too_small", minimum: items.length }
        });
        return payload;
      }
    }
    let i = -1;
    for (const item of items) {
      i++;
      if (i >= input.length) {
        if (i >= optStart)
          continue;
      }
      const result = item._zod.run({
        value: input[i],
        issues: []
      }, ctx);
      if (result instanceof Promise) {
        proms.push(result.then((result2) => handleTupleResult(result2, payload, i)));
      } else {
        handleTupleResult(result, payload, i);
      }
    }
    if (def.rest) {
      const rest = input.slice(items.length);
      for (const el of rest) {
        i++;
        const result = def.rest._zod.run({
          value: el,
          issues: []
        }, ctx);
        if (result instanceof Promise) {
          proms.push(result.then((result2) => handleTupleResult(result2, payload, i)));
        } else {
          handleTupleResult(result, payload, i);
        }
      }
    }
    if (proms.length)
      return Promise.all(proms).then(() => payload);
    return payload;
  };
});
function handleTupleResult(result, final, index) {
  if (result.issues.length) {
    final.issues.push(...prefixIssues(index, result.issues));
  }
  final.value[index] = result.value;
}
var $ZodRecord = $constructor("$ZodRecord", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, ctx) => {
    const input = payload.value;
    if (!isPlainObject(input)) {
      payload.issues.push({
        expected: "record",
        code: "invalid_type",
        input,
        inst
      });
      return payload;
    }
    const proms = [];
    if (def.keyType._zod.values) {
      const values = def.keyType._zod.values;
      payload.value = {};
      for (const key of values) {
        if (typeof key === "string" || typeof key === "number" || typeof key === "symbol") {
          const result = def.valueType._zod.run({ value: input[key], issues: [] }, ctx);
          if (result instanceof Promise) {
            proms.push(result.then((result2) => {
              if (result2.issues.length) {
                payload.issues.push(...prefixIssues(key, result2.issues));
              }
              payload.value[key] = result2.value;
            }));
          } else {
            if (result.issues.length) {
              payload.issues.push(...prefixIssues(key, result.issues));
            }
            payload.value[key] = result.value;
          }
        }
      }
      let unrecognized;
      for (const key in input) {
        if (!values.has(key)) {
          unrecognized = unrecognized ?? [];
          unrecognized.push(key);
        }
      }
      if (unrecognized && unrecognized.length > 0) {
        payload.issues.push({
          code: "unrecognized_keys",
          input,
          inst,
          keys: unrecognized
        });
      }
    } else {
      payload.value = {};
      for (const key of Reflect.ownKeys(input)) {
        if (key === "__proto__")
          continue;
        const keyResult = def.keyType._zod.run({ value: key, issues: [] }, ctx);
        if (keyResult instanceof Promise) {
          throw new Error("Async schemas not supported in object keys currently");
        }
        if (keyResult.issues.length) {
          payload.issues.push({
            origin: "record",
            code: "invalid_key",
            issues: keyResult.issues.map((iss) => finalizeIssue(iss, ctx, config())),
            input: key,
            path: [key],
            inst
          });
          payload.value[keyResult.value] = keyResult.value;
          continue;
        }
        const result = def.valueType._zod.run({ value: input[key], issues: [] }, ctx);
        if (result instanceof Promise) {
          proms.push(result.then((result2) => {
            if (result2.issues.length) {
              payload.issues.push(...prefixIssues(key, result2.issues));
            }
            payload.value[keyResult.value] = result2.value;
          }));
        } else {
          if (result.issues.length) {
            payload.issues.push(...prefixIssues(key, result.issues));
          }
          payload.value[keyResult.value] = result.value;
        }
      }
    }
    if (proms.length) {
      return Promise.all(proms).then(() => payload);
    }
    return payload;
  };
});
var $ZodMap = $constructor("$ZodMap", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, ctx) => {
    const input = payload.value;
    if (!(input instanceof Map)) {
      payload.issues.push({
        expected: "map",
        code: "invalid_type",
        input,
        inst
      });
      return payload;
    }
    const proms = [];
    payload.value = /* @__PURE__ */ new Map();
    for (const [key, value] of input) {
      const keyResult = def.keyType._zod.run({ value: key, issues: [] }, ctx);
      const valueResult = def.valueType._zod.run({ value, issues: [] }, ctx);
      if (keyResult instanceof Promise || valueResult instanceof Promise) {
        proms.push(Promise.all([keyResult, valueResult]).then(([keyResult2, valueResult2]) => {
          handleMapResult(keyResult2, valueResult2, payload, key, input, inst, ctx);
        }));
      } else {
        handleMapResult(keyResult, valueResult, payload, key, input, inst, ctx);
      }
    }
    if (proms.length)
      return Promise.all(proms).then(() => payload);
    return payload;
  };
});
function handleMapResult(keyResult, valueResult, final, key, input, inst, ctx) {
  if (keyResult.issues.length) {
    if (propertyKeyTypes.has(typeof key)) {
      final.issues.push(...prefixIssues(key, keyResult.issues));
    } else {
      final.issues.push({
        origin: "map",
        code: "invalid_key",
        input,
        inst,
        issues: keyResult.issues.map((iss) => finalizeIssue(iss, ctx, config()))
      });
    }
  }
  if (valueResult.issues.length) {
    if (propertyKeyTypes.has(typeof key)) {
      final.issues.push(...prefixIssues(key, valueResult.issues));
    } else {
      final.issues.push({
        origin: "map",
        code: "invalid_element",
        input,
        inst,
        key,
        issues: valueResult.issues.map((iss) => finalizeIssue(iss, ctx, config()))
      });
    }
  }
  final.value.set(keyResult.value, valueResult.value);
}
var $ZodSet = $constructor("$ZodSet", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, ctx) => {
    const input = payload.value;
    if (!(input instanceof Set)) {
      payload.issues.push({
        input,
        inst,
        expected: "set",
        code: "invalid_type"
      });
      return payload;
    }
    const proms = [];
    payload.value = /* @__PURE__ */ new Set();
    for (const item of input) {
      const result = def.valueType._zod.run({ value: item, issues: [] }, ctx);
      if (result instanceof Promise) {
        proms.push(result.then((result2) => handleSetResult(result2, payload)));
      } else
        handleSetResult(result, payload);
    }
    if (proms.length)
      return Promise.all(proms).then(() => payload);
    return payload;
  };
});
function handleSetResult(result, final) {
  if (result.issues.length) {
    final.issues.push(...result.issues);
  }
  final.value.add(result.value);
}
var $ZodEnum = $constructor("$ZodEnum", (inst, def) => {
  $ZodType.init(inst, def);
  const values = getEnumValues(def.entries);
  inst._zod.values = new Set(values);
  inst._zod.pattern = new RegExp(`^(${values.filter((k) => propertyKeyTypes.has(typeof k)).map((o) => typeof o === "string" ? escapeRegex(o) : o.toString()).join("|")})$`);
  inst._zod.parse = (payload, _ctx) => {
    const input = payload.value;
    if (inst._zod.values.has(input)) {
      return payload;
    }
    payload.issues.push({
      code: "invalid_value",
      values,
      input,
      inst
    });
    return payload;
  };
});
var $ZodLiteral = $constructor("$ZodLiteral", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.values = new Set(def.values);
  inst._zod.pattern = new RegExp(`^(${def.values.map((o) => typeof o === "string" ? escapeRegex(o) : o ? o.toString() : String(o)).join("|")})$`);
  inst._zod.parse = (payload, _ctx) => {
    const input = payload.value;
    if (inst._zod.values.has(input)) {
      return payload;
    }
    payload.issues.push({
      code: "invalid_value",
      values: def.values,
      input,
      inst
    });
    return payload;
  };
});
var $ZodFile = $constructor("$ZodFile", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, _ctx) => {
    const input = payload.value;
    if (input instanceof File)
      return payload;
    payload.issues.push({
      expected: "file",
      code: "invalid_type",
      input,
      inst
    });
    return payload;
  };
});
var $ZodTransform = $constructor("$ZodTransform", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, _ctx) => {
    const _out = def.transform(payload.value, payload);
    if (_ctx.async) {
      const output = _out instanceof Promise ? _out : Promise.resolve(_out);
      return output.then((output2) => {
        payload.value = output2;
        return payload;
      });
    }
    if (_out instanceof Promise) {
      throw new $ZodAsyncError();
    }
    payload.value = _out;
    return payload;
  };
});
var $ZodOptional = $constructor("$ZodOptional", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.optin = "optional";
  inst._zod.optout = "optional";
  defineLazy(inst._zod, "values", () => {
    return def.innerType._zod.values ? /* @__PURE__ */ new Set([...def.innerType._zod.values, void 0]) : void 0;
  });
  defineLazy(inst._zod, "pattern", () => {
    const pattern = def.innerType._zod.pattern;
    return pattern ? new RegExp(`^(${cleanRegex(pattern.source)})?$`) : void 0;
  });
  inst._zod.parse = (payload, ctx) => {
    if (def.innerType._zod.optin === "optional") {
      return def.innerType._zod.run(payload, ctx);
    }
    if (payload.value === void 0) {
      return payload;
    }
    return def.innerType._zod.run(payload, ctx);
  };
});
var $ZodNullable = $constructor("$ZodNullable", (inst, def) => {
  $ZodType.init(inst, def);
  defineLazy(inst._zod, "optin", () => def.innerType._zod.optin);
  defineLazy(inst._zod, "optout", () => def.innerType._zod.optout);
  defineLazy(inst._zod, "pattern", () => {
    const pattern = def.innerType._zod.pattern;
    return pattern ? new RegExp(`^(${cleanRegex(pattern.source)}|null)$`) : void 0;
  });
  defineLazy(inst._zod, "values", () => {
    return def.innerType._zod.values ? /* @__PURE__ */ new Set([...def.innerType._zod.values, null]) : void 0;
  });
  inst._zod.parse = (payload, ctx) => {
    if (payload.value === null)
      return payload;
    return def.innerType._zod.run(payload, ctx);
  };
});
var $ZodDefault = $constructor("$ZodDefault", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.optin = "optional";
  defineLazy(inst._zod, "values", () => def.innerType._zod.values);
  inst._zod.parse = (payload, ctx) => {
    if (payload.value === void 0) {
      payload.value = def.defaultValue;
      return payload;
    }
    const result = def.innerType._zod.run(payload, ctx);
    if (result instanceof Promise) {
      return result.then((result2) => handleDefaultResult(result2, def));
    }
    return handleDefaultResult(result, def);
  };
});
function handleDefaultResult(payload, def) {
  if (payload.value === void 0) {
    payload.value = def.defaultValue;
  }
  return payload;
}
var $ZodPrefault = $constructor("$ZodPrefault", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.optin = "optional";
  defineLazy(inst._zod, "values", () => def.innerType._zod.values);
  inst._zod.parse = (payload, ctx) => {
    if (payload.value === void 0) {
      payload.value = def.defaultValue;
    }
    return def.innerType._zod.run(payload, ctx);
  };
});
var $ZodNonOptional = $constructor("$ZodNonOptional", (inst, def) => {
  $ZodType.init(inst, def);
  defineLazy(inst._zod, "values", () => {
    const v = def.innerType._zod.values;
    return v ? new Set([...v].filter((x) => x !== void 0)) : void 0;
  });
  inst._zod.parse = (payload, ctx) => {
    const result = def.innerType._zod.run(payload, ctx);
    if (result instanceof Promise) {
      return result.then((result2) => handleNonOptionalResult(result2, inst));
    }
    return handleNonOptionalResult(result, inst);
  };
});
function handleNonOptionalResult(payload, inst) {
  if (!payload.issues.length && payload.value === void 0) {
    payload.issues.push({
      code: "invalid_type",
      expected: "nonoptional",
      input: payload.value,
      inst
    });
  }
  return payload;
}
var $ZodSuccess = $constructor("$ZodSuccess", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, ctx) => {
    const result = def.innerType._zod.run(payload, ctx);
    if (result instanceof Promise) {
      return result.then((result2) => {
        payload.value = result2.issues.length === 0;
        return payload;
      });
    }
    payload.value = result.issues.length === 0;
    return payload;
  };
});
var $ZodCatch = $constructor("$ZodCatch", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.optin = "optional";
  defineLazy(inst._zod, "optout", () => def.innerType._zod.optout);
  defineLazy(inst._zod, "values", () => def.innerType._zod.values);
  inst._zod.parse = (payload, ctx) => {
    const result = def.innerType._zod.run(payload, ctx);
    if (result instanceof Promise) {
      return result.then((result2) => {
        payload.value = result2.value;
        if (result2.issues.length) {
          payload.value = def.catchValue({
            ...payload,
            error: {
              issues: result2.issues.map((iss) => finalizeIssue(iss, ctx, config()))
            },
            input: payload.value
          });
          payload.issues = [];
        }
        return payload;
      });
    }
    payload.value = result.value;
    if (result.issues.length) {
      payload.value = def.catchValue({
        ...payload,
        error: {
          issues: result.issues.map((iss) => finalizeIssue(iss, ctx, config()))
        },
        input: payload.value
      });
      payload.issues = [];
    }
    return payload;
  };
});
var $ZodNaN = $constructor("$ZodNaN", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, _ctx) => {
    if (typeof payload.value !== "number" || !Number.isNaN(payload.value)) {
      payload.issues.push({
        input: payload.value,
        inst,
        expected: "nan",
        code: "invalid_type"
      });
      return payload;
    }
    return payload;
  };
});
var $ZodPipe = $constructor("$ZodPipe", (inst, def) => {
  $ZodType.init(inst, def);
  defineLazy(inst._zod, "values", () => def.in._zod.values);
  defineLazy(inst._zod, "optin", () => def.in._zod.optin);
  defineLazy(inst._zod, "optout", () => def.out._zod.optout);
  inst._zod.parse = (payload, ctx) => {
    const left = def.in._zod.run(payload, ctx);
    if (left instanceof Promise) {
      return left.then((left2) => handlePipeResult(left2, def, ctx));
    }
    return handlePipeResult(left, def, ctx);
  };
});
function handlePipeResult(left, def, ctx) {
  if (aborted(left)) {
    return left;
  }
  return def.out._zod.run({ value: left.value, issues: left.issues }, ctx);
}
var $ZodReadonly = $constructor("$ZodReadonly", (inst, def) => {
  $ZodType.init(inst, def);
  defineLazy(inst._zod, "propValues", () => def.innerType._zod.propValues);
  defineLazy(inst._zod, "values", () => def.innerType._zod.values);
  defineLazy(inst._zod, "optin", () => def.innerType._zod.optin);
  defineLazy(inst._zod, "optout", () => def.innerType._zod.optout);
  inst._zod.parse = (payload, ctx) => {
    const result = def.innerType._zod.run(payload, ctx);
    if (result instanceof Promise) {
      return result.then(handleReadonlyResult);
    }
    return handleReadonlyResult(result);
  };
});
function handleReadonlyResult(payload) {
  payload.value = Object.freeze(payload.value);
  return payload;
}
var $ZodTemplateLiteral = $constructor("$ZodTemplateLiteral", (inst, def) => {
  $ZodType.init(inst, def);
  const regexParts = [];
  for (const part of def.parts) {
    if (part instanceof $ZodType) {
      if (!part._zod.pattern) {
        throw new Error(`Invalid template literal part, no pattern found: ${[...part._zod.traits].shift()}`);
      }
      const source = part._zod.pattern instanceof RegExp ? part._zod.pattern.source : part._zod.pattern;
      if (!source)
        throw new Error(`Invalid template literal part: ${part._zod.traits}`);
      const start = source.startsWith("^") ? 1 : 0;
      const end = source.endsWith("$") ? source.length - 1 : source.length;
      regexParts.push(source.slice(start, end));
    } else if (part === null || primitiveTypes.has(typeof part)) {
      regexParts.push(escapeRegex(`${part}`));
    } else {
      throw new Error(`Invalid template literal part: ${part}`);
    }
  }
  inst._zod.pattern = new RegExp(`^${regexParts.join("")}$`);
  inst._zod.parse = (payload, _ctx) => {
    if (typeof payload.value !== "string") {
      payload.issues.push({
        input: payload.value,
        inst,
        expected: "template_literal",
        code: "invalid_type"
      });
      return payload;
    }
    inst._zod.pattern.lastIndex = 0;
    if (!inst._zod.pattern.test(payload.value)) {
      payload.issues.push({
        input: payload.value,
        inst,
        code: "invalid_format",
        format: "template_literal",
        pattern: inst._zod.pattern.source
      });
      return payload;
    }
    return payload;
  };
});
var $ZodPromise = $constructor("$ZodPromise", (inst, def) => {
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, ctx) => {
    return Promise.resolve(payload.value).then((inner) => def.innerType._zod.run({ value: inner, issues: [] }, ctx));
  };
});
var $ZodLazy = $constructor("$ZodLazy", (inst, def) => {
  $ZodType.init(inst, def);
  defineLazy(inst._zod, "innerType", () => def.getter());
  defineLazy(inst._zod, "pattern", () => inst._zod.innerType._zod.pattern);
  defineLazy(inst._zod, "propValues", () => inst._zod.innerType._zod.propValues);
  defineLazy(inst._zod, "optin", () => inst._zod.innerType._zod.optin);
  defineLazy(inst._zod, "optout", () => inst._zod.innerType._zod.optout);
  inst._zod.parse = (payload, ctx) => {
    const inner = inst._zod.innerType;
    return inner._zod.run(payload, ctx);
  };
});
var $ZodCustom = $constructor("$ZodCustom", (inst, def) => {
  $ZodCheck.init(inst, def);
  $ZodType.init(inst, def);
  inst._zod.parse = (payload, _) => {
    return payload;
  };
  inst._zod.check = (payload) => {
    const input = payload.value;
    const r = def.fn(input);
    if (r instanceof Promise) {
      return r.then((r2) => handleRefineResult(r2, payload, input, inst));
    }
    handleRefineResult(r, payload, input, inst);
    return;
  };
});
function handleRefineResult(result, payload, input, inst) {
  if (!result) {
    const _iss = {
      code: "custom",
      input,
      inst,
      // incorporates params.error into issue reporting
      path: [...inst._zod.def.path ?? []],
      // incorporates params.error into issue reporting
      continue: !inst._zod.def.abort
      // params: inst._zod.def.params,
    };
    if (inst._zod.def.params)
      _iss.params = inst._zod.def.params;
    payload.issues.push(issue(_iss));
  }
}

// node_modules/zod/v4/locales/index.js
var locales_exports = {};
__export(locales_exports, {
  ar: () => ar_default,
  az: () => az_default,
  be: () => be_default,
  ca: () => ca_default,
  cs: () => cs_default,
  de: () => de_default,
  en: () => en_default,
  eo: () => eo_default,
  es: () => es_default,
  fa: () => fa_default,
  fi: () => fi_default,
  fr: () => fr_default,
  frCA: () => fr_CA_default,
  he: () => he_default,
  hu: () => hu_default,
  id: () => id_default,
  it: () => it_default,
  ja: () => ja_default,
  kh: () => kh_default,
  ko: () => ko_default,
  mk: () => mk_default,
  ms: () => ms_default,
  nl: () => nl_default,
  no: () => no_default,
  ota: () => ota_default,
  pl: () => pl_default,
  ps: () => ps_default,
  pt: () => pt_default,
  ru: () => ru_default,
  sl: () => sl_default,
  sv: () => sv_default,
  ta: () => ta_default,
  th: () => th_default,
  tr: () => tr_default,
  ua: () => ua_default,
  ur: () => ur_default,
  vi: () => vi_default,
  zhCN: () => zh_CN_default,
  zhTW: () => zh_TW_default
});

// node_modules/zod/v4/locales/ar.js
var error = () => {
  const Sizable = {
    string: { unit: "حرف", verb: "أن يحوي" },
    file: { unit: "بايت", verb: "أن يحوي" },
    array: { unit: "عنصر", verb: "أن يحوي" },
    set: { unit: "عنصر", verb: "أن يحوي" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "مدخل",
    email: "بريد إلكتروني",
    url: "رابط",
    emoji: "إيموجي",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "تاريخ ووقت بمعيار ISO",
    date: "تاريخ بمعيار ISO",
    time: "وقت بمعيار ISO",
    duration: "مدة بمعيار ISO",
    ipv4: "عنوان IPv4",
    ipv6: "عنوان IPv6",
    cidrv4: "مدى عناوين بصيغة IPv4",
    cidrv6: "مدى عناوين بصيغة IPv6",
    base64: "نَص بترميز base64-encoded",
    base64url: "نَص بترميز base64url-encoded",
    json_string: "نَص على هيئة JSON",
    e164: "رقم هاتف بمعيار E.164",
    jwt: "JWT",
    template_literal: "مدخل"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `مدخلات غير مقبولة: يفترض إدخال ${issue2.expected}، ولكن تم إدخال ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `مدخلات غير مقبولة: يفترض إدخال ${stringifyPrimitive(issue2.values[0])}`;
        return `اختيار غير مقبول: يتوقع انتقاء أحد هذه الخيارات: ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return ` أكبر من اللازم: يفترض أن تكون ${issue2.origin ?? "القيمة"} ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "عنصر"}`;
        return `أكبر من اللازم: يفترض أن تكون ${issue2.origin ?? "القيمة"} ${adj} ${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `أصغر من اللازم: يفترض لـ ${issue2.origin} أن يكون ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `أصغر من اللازم: يفترض لـ ${issue2.origin} أن يكون ${adj} ${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `نَص غير مقبول: يجب أن يبدأ بـ "${issue2.prefix}"`;
        if (_issue.format === "ends_with")
          return `نَص غير مقبول: يجب أن ينتهي بـ "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `نَص غير مقبول: يجب أن يتضمَّن "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `نَص غير مقبول: يجب أن يطابق النمط ${_issue.pattern}`;
        return `${Nouns[_issue.format] ?? issue2.format} غير مقبول`;
      }
      case "not_multiple_of":
        return `رقم غير مقبول: يجب أن يكون من مضاعفات ${issue2.divisor}`;
      case "unrecognized_keys":
        return `معرف${issue2.keys.length > 1 ? "ات" : ""} غريب${issue2.keys.length > 1 ? "ة" : ""}: ${joinValues(issue2.keys, "، ")}`;
      case "invalid_key":
        return `معرف غير مقبول في ${issue2.origin}`;
      case "invalid_union":
        return "مدخل غير مقبول";
      case "invalid_element":
        return `مدخل غير مقبول في ${issue2.origin}`;
      default:
        return "مدخل غير مقبول";
    }
  };
};
function ar_default() {
  return {
    localeError: error()
  };
}

// node_modules/zod/v4/locales/az.js
var error2 = () => {
  const Sizable = {
    string: { unit: "simvol", verb: "olmalıdır" },
    file: { unit: "bayt", verb: "olmalıdır" },
    array: { unit: "element", verb: "olmalıdır" },
    set: { unit: "element", verb: "olmalıdır" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "input",
    email: "email address",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO datetime",
    date: "ISO date",
    time: "ISO time",
    duration: "ISO duration",
    ipv4: "IPv4 address",
    ipv6: "IPv6 address",
    cidrv4: "IPv4 range",
    cidrv6: "IPv6 range",
    base64: "base64-encoded string",
    base64url: "base64url-encoded string",
    json_string: "JSON string",
    e164: "E.164 number",
    jwt: "JWT",
    template_literal: "input"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Yanlış dəyər: gözlənilən ${issue2.expected}, daxil olan ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Yanlış dəyər: gözlənilən ${stringifyPrimitive(issue2.values[0])}`;
        return `Yanlış seçim: aşağıdakılardan biri olmalıdır: ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Çox böyük: gözlənilən ${issue2.origin ?? "dəyər"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "element"}`;
        return `Çox böyük: gözlənilən ${issue2.origin ?? "dəyər"} ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Çox kiçik: gözlənilən ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        return `Çox kiçik: gözlənilən ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Yanlış mətn: "${_issue.prefix}" ilə başlamalıdır`;
        if (_issue.format === "ends_with")
          return `Yanlış mətn: "${_issue.suffix}" ilə bitməlidir`;
        if (_issue.format === "includes")
          return `Yanlış mətn: "${_issue.includes}" daxil olmalıdır`;
        if (_issue.format === "regex")
          return `Yanlış mətn: ${_issue.pattern} şablonuna uyğun olmalıdır`;
        return `Yanlış ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Yanlış ədəd: ${issue2.divisor} ilə bölünə bilən olmalıdır`;
      case "unrecognized_keys":
        return `Tanınmayan açar${issue2.keys.length > 1 ? "lar" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `${issue2.origin} daxilində yanlış açar`;
      case "invalid_union":
        return "Yanlış dəyər";
      case "invalid_element":
        return `${issue2.origin} daxilində yanlış dəyər`;
      default:
        return `Yanlış dəyər`;
    }
  };
};
function az_default() {
  return {
    localeError: error2()
  };
}

// node_modules/zod/v4/locales/be.js
function getBelarusianPlural(count, one, few, many) {
  const absCount = Math.abs(count);
  const lastDigit = absCount % 10;
  const lastTwoDigits = absCount % 100;
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return many;
  }
  if (lastDigit === 1) {
    return one;
  }
  if (lastDigit >= 2 && lastDigit <= 4) {
    return few;
  }
  return many;
}
var error3 = () => {
  const Sizable = {
    string: {
      unit: {
        one: "сімвал",
        few: "сімвалы",
        many: "сімвалаў"
      },
      verb: "мець"
    },
    array: {
      unit: {
        one: "элемент",
        few: "элементы",
        many: "элементаў"
      },
      verb: "мець"
    },
    set: {
      unit: {
        one: "элемент",
        few: "элементы",
        many: "элементаў"
      },
      verb: "мець"
    },
    file: {
      unit: {
        one: "байт",
        few: "байты",
        many: "байтаў"
      },
      verb: "мець"
    }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "лік";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "масіў";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "увод",
    email: "email адрас",
    url: "URL",
    emoji: "эмодзі",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO дата і час",
    date: "ISO дата",
    time: "ISO час",
    duration: "ISO працягласць",
    ipv4: "IPv4 адрас",
    ipv6: "IPv6 адрас",
    cidrv4: "IPv4 дыяпазон",
    cidrv6: "IPv6 дыяпазон",
    base64: "радок у фармаце base64",
    base64url: "радок у фармаце base64url",
    json_string: "JSON радок",
    e164: "нумар E.164",
    jwt: "JWT",
    template_literal: "увод"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Няправільны ўвод: чакаўся ${issue2.expected}, атрымана ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Няправільны ўвод: чакалася ${stringifyPrimitive(issue2.values[0])}`;
        return `Няправільны варыянт: чакаўся адзін з ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          const maxValue = Number(issue2.maximum);
          const unit = getBelarusianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
          return `Занадта вялікі: чакалася, што ${issue2.origin ?? "значэнне"} павінна ${sizing.verb} ${adj}${issue2.maximum.toString()} ${unit}`;
        }
        return `Занадта вялікі: чакалася, што ${issue2.origin ?? "значэнне"} павінна быць ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          const minValue = Number(issue2.minimum);
          const unit = getBelarusianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
          return `Занадта малы: чакалася, што ${issue2.origin} павінна ${sizing.verb} ${adj}${issue2.minimum.toString()} ${unit}`;
        }
        return `Занадта малы: чакалася, што ${issue2.origin} павінна быць ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Няправільны радок: павінен пачынацца з "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Няправільны радок: павінен заканчвацца на "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Няправільны радок: павінен змяшчаць "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Няправільны радок: павінен адпавядаць шаблону ${_issue.pattern}`;
        return `Няправільны ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Няправільны лік: павінен быць кратным ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Нераспазнаны ${issue2.keys.length > 1 ? "ключы" : "ключ"}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Няправільны ключ у ${issue2.origin}`;
      case "invalid_union":
        return "Няправільны ўвод";
      case "invalid_element":
        return `Няправільнае значэнне ў ${issue2.origin}`;
      default:
        return `Няправільны ўвод`;
    }
  };
};
function be_default() {
  return {
    localeError: error3()
  };
}

// node_modules/zod/v4/locales/ca.js
var error4 = () => {
  const Sizable = {
    string: { unit: "caràcters", verb: "contenir" },
    file: { unit: "bytes", verb: "contenir" },
    array: { unit: "elements", verb: "contenir" },
    set: { unit: "elements", verb: "contenir" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "entrada",
    email: "adreça electrònica",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "data i hora ISO",
    date: "data ISO",
    time: "hora ISO",
    duration: "durada ISO",
    ipv4: "adreça IPv4",
    ipv6: "adreça IPv6",
    cidrv4: "rang IPv4",
    cidrv6: "rang IPv6",
    base64: "cadena codificada en base64",
    base64url: "cadena codificada en base64url",
    json_string: "cadena JSON",
    e164: "número E.164",
    jwt: "JWT",
    template_literal: "entrada"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Tipus invàlid: s'esperava ${issue2.expected}, s'ha rebut ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Valor invàlid: s'esperava ${stringifyPrimitive(issue2.values[0])}`;
        return `Opció invàlida: s'esperava una de ${joinValues(issue2.values, " o ")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "com a màxim" : "menys de";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Massa gran: s'esperava que ${issue2.origin ?? "el valor"} contingués ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "elements"}`;
        return `Massa gran: s'esperava que ${issue2.origin ?? "el valor"} fos ${adj} ${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? "com a mínim" : "més de";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Massa petit: s'esperava que ${issue2.origin} contingués ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Massa petit: s'esperava que ${issue2.origin} fos ${adj} ${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `Format invàlid: ha de començar amb "${_issue.prefix}"`;
        }
        if (_issue.format === "ends_with")
          return `Format invàlid: ha d'acabar amb "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Format invàlid: ha d'incloure "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Format invàlid: ha de coincidir amb el patró ${_issue.pattern}`;
        return `Format invàlid per a ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Número invàlid: ha de ser múltiple de ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Clau${issue2.keys.length > 1 ? "s" : ""} no reconeguda${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Clau invàlida a ${issue2.origin}`;
      case "invalid_union":
        return "Entrada invàlida";
      case "invalid_element":
        return `Element invàlid a ${issue2.origin}`;
      default:
        return `Entrada invàlida`;
    }
  };
};
function ca_default() {
  return {
    localeError: error4()
  };
}

// node_modules/zod/v4/locales/cs.js
var error5 = () => {
  const Sizable = {
    string: { unit: "znaků", verb: "mít" },
    file: { unit: "bajtů", verb: "mít" },
    array: { unit: "prvků", verb: "mít" },
    set: { unit: "prvků", verb: "mít" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "číslo";
      }
      case "string": {
        return "řetězec";
      }
      case "boolean": {
        return "boolean";
      }
      case "bigint": {
        return "bigint";
      }
      case "function": {
        return "funkce";
      }
      case "symbol": {
        return "symbol";
      }
      case "undefined": {
        return "undefined";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "pole";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "regulární výraz",
    email: "e-mailová adresa",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "datum a čas ve formátu ISO",
    date: "datum ve formátu ISO",
    time: "čas ve formátu ISO",
    duration: "doba trvání ISO",
    ipv4: "IPv4 adresa",
    ipv6: "IPv6 adresa",
    cidrv4: "rozsah IPv4",
    cidrv6: "rozsah IPv6",
    base64: "řetězec zakódovaný ve formátu base64",
    base64url: "řetězec zakódovaný ve formátu base64url",
    json_string: "řetězec ve formátu JSON",
    e164: "číslo E.164",
    jwt: "JWT",
    template_literal: "vstup"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Neplatný vstup: očekáváno ${issue2.expected}, obdrženo ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Neplatný vstup: očekáváno ${stringifyPrimitive(issue2.values[0])}`;
        return `Neplatná možnost: očekávána jedna z hodnot ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Hodnota je příliš velká: ${issue2.origin ?? "hodnota"} musí mít ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "prvků"}`;
        }
        return `Hodnota je příliš velká: ${issue2.origin ?? "hodnota"} musí být ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Hodnota je příliš malá: ${issue2.origin ?? "hodnota"} musí mít ${adj}${issue2.minimum.toString()} ${sizing.unit ?? "prvků"}`;
        }
        return `Hodnota je příliš malá: ${issue2.origin ?? "hodnota"} musí být ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Neplatný řetězec: musí začínat na "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Neplatný řetězec: musí končit na "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Neplatný řetězec: musí obsahovat "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Neplatný řetězec: musí odpovídat vzoru ${_issue.pattern}`;
        return `Neplatný formát ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Neplatné číslo: musí být násobkem ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Neznámé klíče: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Neplatný klíč v ${issue2.origin}`;
      case "invalid_union":
        return "Neplatný vstup";
      case "invalid_element":
        return `Neplatná hodnota v ${issue2.origin}`;
      default:
        return `Neplatný vstup`;
    }
  };
};
function cs_default() {
  return {
    localeError: error5()
  };
}

// node_modules/zod/v4/locales/de.js
var error6 = () => {
  const Sizable = {
    string: { unit: "Zeichen", verb: "zu haben" },
    file: { unit: "Bytes", verb: "zu haben" },
    array: { unit: "Elemente", verb: "zu haben" },
    set: { unit: "Elemente", verb: "zu haben" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "Zahl";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "Array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "Eingabe",
    email: "E-Mail-Adresse",
    url: "URL",
    emoji: "Emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO-Datum und -Uhrzeit",
    date: "ISO-Datum",
    time: "ISO-Uhrzeit",
    duration: "ISO-Dauer",
    ipv4: "IPv4-Adresse",
    ipv6: "IPv6-Adresse",
    cidrv4: "IPv4-Bereich",
    cidrv6: "IPv6-Bereich",
    base64: "Base64-codierter String",
    base64url: "Base64-URL-codierter String",
    json_string: "JSON-String",
    e164: "E.164-Nummer",
    jwt: "JWT",
    template_literal: "Eingabe"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Ungültige Eingabe: erwartet ${issue2.expected}, erhalten ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Ungültige Eingabe: erwartet ${stringifyPrimitive(issue2.values[0])}`;
        return `Ungültige Option: erwartet eine von ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Zu groß: erwartet, dass ${issue2.origin ?? "Wert"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "Elemente"} hat`;
        return `Zu groß: erwartet, dass ${issue2.origin ?? "Wert"} ${adj}${issue2.maximum.toString()} ist`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Zu klein: erwartet, dass ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit} hat`;
        }
        return `Zu klein: erwartet, dass ${issue2.origin} ${adj}${issue2.minimum.toString()} ist`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Ungültiger String: muss mit "${_issue.prefix}" beginnen`;
        if (_issue.format === "ends_with")
          return `Ungültiger String: muss mit "${_issue.suffix}" enden`;
        if (_issue.format === "includes")
          return `Ungültiger String: muss "${_issue.includes}" enthalten`;
        if (_issue.format === "regex")
          return `Ungültiger String: muss dem Muster ${_issue.pattern} entsprechen`;
        return `Ungültig: ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Ungültige Zahl: muss ein Vielfaches von ${issue2.divisor} sein`;
      case "unrecognized_keys":
        return `${issue2.keys.length > 1 ? "Unbekannte Schlüssel" : "Unbekannter Schlüssel"}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Ungültiger Schlüssel in ${issue2.origin}`;
      case "invalid_union":
        return "Ungültige Eingabe";
      case "invalid_element":
        return `Ungültiger Wert in ${issue2.origin}`;
      default:
        return `Ungültige Eingabe`;
    }
  };
};
function de_default() {
  return {
    localeError: error6()
  };
}

// node_modules/zod/v4/locales/en.js
var parsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "number": {
      return Number.isNaN(data) ? "NaN" : "number";
    }
    case "object": {
      if (Array.isArray(data)) {
        return "array";
      }
      if (data === null) {
        return "null";
      }
      if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
        return data.constructor.name;
      }
    }
  }
  return t;
};
var error7 = () => {
  const Sizable = {
    string: { unit: "characters", verb: "to have" },
    file: { unit: "bytes", verb: "to have" },
    array: { unit: "items", verb: "to have" },
    set: { unit: "items", verb: "to have" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const Nouns = {
    regex: "input",
    email: "email address",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO datetime",
    date: "ISO date",
    time: "ISO time",
    duration: "ISO duration",
    ipv4: "IPv4 address",
    ipv6: "IPv6 address",
    cidrv4: "IPv4 range",
    cidrv6: "IPv6 range",
    base64: "base64-encoded string",
    base64url: "base64url-encoded string",
    json_string: "JSON string",
    e164: "E.164 number",
    jwt: "JWT",
    template_literal: "input"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Invalid input: expected ${issue2.expected}, received ${parsedType(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Invalid input: expected ${stringifyPrimitive(issue2.values[0])}`;
        return `Invalid option: expected one of ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Too big: expected ${issue2.origin ?? "value"} to have ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elements"}`;
        return `Too big: expected ${issue2.origin ?? "value"} to be ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Too small: expected ${issue2.origin} to have ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Too small: expected ${issue2.origin} to be ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `Invalid string: must start with "${_issue.prefix}"`;
        }
        if (_issue.format === "ends_with")
          return `Invalid string: must end with "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Invalid string: must include "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Invalid string: must match pattern ${_issue.pattern}`;
        return `Invalid ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Invalid number: must be a multiple of ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Unrecognized key${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Invalid key in ${issue2.origin}`;
      case "invalid_union":
        return "Invalid input";
      case "invalid_element":
        return `Invalid value in ${issue2.origin}`;
      default:
        return `Invalid input`;
    }
  };
};
function en_default() {
  return {
    localeError: error7()
  };
}

// node_modules/zod/v4/locales/eo.js
var parsedType2 = (data) => {
  const t = typeof data;
  switch (t) {
    case "number": {
      return Number.isNaN(data) ? "NaN" : "nombro";
    }
    case "object": {
      if (Array.isArray(data)) {
        return "tabelo";
      }
      if (data === null) {
        return "senvalora";
      }
      if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
        return data.constructor.name;
      }
    }
  }
  return t;
};
var error8 = () => {
  const Sizable = {
    string: { unit: "karaktrojn", verb: "havi" },
    file: { unit: "bajtojn", verb: "havi" },
    array: { unit: "elementojn", verb: "havi" },
    set: { unit: "elementojn", verb: "havi" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const Nouns = {
    regex: "enigo",
    email: "retadreso",
    url: "URL",
    emoji: "emoĝio",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO-datotempo",
    date: "ISO-dato",
    time: "ISO-tempo",
    duration: "ISO-daŭro",
    ipv4: "IPv4-adreso",
    ipv6: "IPv6-adreso",
    cidrv4: "IPv4-rango",
    cidrv6: "IPv6-rango",
    base64: "64-ume kodita karaktraro",
    base64url: "URL-64-ume kodita karaktraro",
    json_string: "JSON-karaktraro",
    e164: "E.164-nombro",
    jwt: "JWT",
    template_literal: "enigo"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Nevalida enigo: atendiĝis ${issue2.expected}, riceviĝis ${parsedType2(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Nevalida enigo: atendiĝis ${stringifyPrimitive(issue2.values[0])}`;
        return `Nevalida opcio: atendiĝis unu el ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Tro granda: atendiĝis ke ${issue2.origin ?? "valoro"} havu ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementojn"}`;
        return `Tro granda: atendiĝis ke ${issue2.origin ?? "valoro"} havu ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Tro malgranda: atendiĝis ke ${issue2.origin} havu ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Tro malgranda: atendiĝis ke ${issue2.origin} estu ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Nevalida karaktraro: devas komenciĝi per "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Nevalida karaktraro: devas finiĝi per "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Nevalida karaktraro: devas inkluzivi "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Nevalida karaktraro: devas kongrui kun la modelo ${_issue.pattern}`;
        return `Nevalida ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Nevalida nombro: devas esti oblo de ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Nekonata${issue2.keys.length > 1 ? "j" : ""} ŝlosilo${issue2.keys.length > 1 ? "j" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Nevalida ŝlosilo en ${issue2.origin}`;
      case "invalid_union":
        return "Nevalida enigo";
      case "invalid_element":
        return `Nevalida valoro en ${issue2.origin}`;
      default:
        return `Nevalida enigo`;
    }
  };
};
function eo_default() {
  return {
    localeError: error8()
  };
}

// node_modules/zod/v4/locales/es.js
var error9 = () => {
  const Sizable = {
    string: { unit: "caracteres", verb: "tener" },
    file: { unit: "bytes", verb: "tener" },
    array: { unit: "elementos", verb: "tener" },
    set: { unit: "elementos", verb: "tener" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "número";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "arreglo";
        }
        if (data === null) {
          return "nulo";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "entrada",
    email: "dirección de correo electrónico",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "fecha y hora ISO",
    date: "fecha ISO",
    time: "hora ISO",
    duration: "duración ISO",
    ipv4: "dirección IPv4",
    ipv6: "dirección IPv6",
    cidrv4: "rango IPv4",
    cidrv6: "rango IPv6",
    base64: "cadena codificada en base64",
    base64url: "URL codificada en base64",
    json_string: "cadena JSON",
    e164: "número E.164",
    jwt: "JWT",
    template_literal: "entrada"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Entrada inválida: se esperaba ${issue2.expected}, recibido ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Entrada inválida: se esperaba ${stringifyPrimitive(issue2.values[0])}`;
        return `Opción inválida: se esperaba una de ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Demasiado grande: se esperaba que ${issue2.origin ?? "valor"} tuviera ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementos"}`;
        return `Demasiado grande: se esperaba que ${issue2.origin ?? "valor"} fuera ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Demasiado pequeño: se esperaba que ${issue2.origin} tuviera ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Demasiado pequeño: se esperaba que ${issue2.origin} fuera ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Cadena inválida: debe comenzar con "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Cadena inválida: debe terminar en "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Cadena inválida: debe incluir "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Cadena inválida: debe coincidir con el patrón ${_issue.pattern}`;
        return `Inválido ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Número inválido: debe ser múltiplo de ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Llave${issue2.keys.length > 1 ? "s" : ""} desconocida${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Llave inválida en ${issue2.origin}`;
      case "invalid_union":
        return "Entrada inválida";
      case "invalid_element":
        return `Valor inválido en ${issue2.origin}`;
      default:
        return `Entrada inválida`;
    }
  };
};
function es_default() {
  return {
    localeError: error9()
  };
}

// node_modules/zod/v4/locales/fa.js
var error10 = () => {
  const Sizable = {
    string: { unit: "کاراکتر", verb: "داشته باشد" },
    file: { unit: "بایت", verb: "داشته باشد" },
    array: { unit: "آیتم", verb: "داشته باشد" },
    set: { unit: "آیتم", verb: "داشته باشد" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "عدد";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "آرایه";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "ورودی",
    email: "آدرس ایمیل",
    url: "URL",
    emoji: "ایموجی",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "تاریخ و زمان ایزو",
    date: "تاریخ ایزو",
    time: "زمان ایزو",
    duration: "مدت زمان ایزو",
    ipv4: "IPv4 آدرس",
    ipv6: "IPv6 آدرس",
    cidrv4: "IPv4 دامنه",
    cidrv6: "IPv6 دامنه",
    base64: "base64-encoded رشته",
    base64url: "base64url-encoded رشته",
    json_string: "JSON رشته",
    e164: "E.164 عدد",
    jwt: "JWT",
    template_literal: "ورودی"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `ورودی نامعتبر: می‌بایست ${issue2.expected} می‌بود، ${parsedType4(issue2.input)} دریافت شد`;
      case "invalid_value":
        if (issue2.values.length === 1) {
          return `ورودی نامعتبر: می‌بایست ${stringifyPrimitive(issue2.values[0])} می‌بود`;
        }
        return `گزینه نامعتبر: می‌بایست یکی از ${joinValues(issue2.values, "|")} می‌بود`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `خیلی بزرگ: ${issue2.origin ?? "مقدار"} باید ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "عنصر"} باشد`;
        }
        return `خیلی بزرگ: ${issue2.origin ?? "مقدار"} باید ${adj}${issue2.maximum.toString()} باشد`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `خیلی کوچک: ${issue2.origin} باید ${adj}${issue2.minimum.toString()} ${sizing.unit} باشد`;
        }
        return `خیلی کوچک: ${issue2.origin} باید ${adj}${issue2.minimum.toString()} باشد`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `رشته نامعتبر: باید با "${_issue.prefix}" شروع شود`;
        }
        if (_issue.format === "ends_with") {
          return `رشته نامعتبر: باید با "${_issue.suffix}" تمام شود`;
        }
        if (_issue.format === "includes") {
          return `رشته نامعتبر: باید شامل "${_issue.includes}" باشد`;
        }
        if (_issue.format === "regex") {
          return `رشته نامعتبر: باید با الگوی ${_issue.pattern} مطابقت داشته باشد`;
        }
        return `${Nouns[_issue.format] ?? issue2.format} نامعتبر`;
      }
      case "not_multiple_of":
        return `عدد نامعتبر: باید مضرب ${issue2.divisor} باشد`;
      case "unrecognized_keys":
        return `کلید${issue2.keys.length > 1 ? "های" : ""} ناشناس: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `کلید ناشناس در ${issue2.origin}`;
      case "invalid_union":
        return `ورودی نامعتبر`;
      case "invalid_element":
        return `مقدار نامعتبر در ${issue2.origin}`;
      default:
        return `ورودی نامعتبر`;
    }
  };
};
function fa_default() {
  return {
    localeError: error10()
  };
}

// node_modules/zod/v4/locales/fi.js
var error11 = () => {
  const Sizable = {
    string: { unit: "merkkiä", subject: "merkkijonon" },
    file: { unit: "tavua", subject: "tiedoston" },
    array: { unit: "alkiota", subject: "listan" },
    set: { unit: "alkiota", subject: "joukon" },
    number: { unit: "", subject: "luvun" },
    bigint: { unit: "", subject: "suuren kokonaisluvun" },
    int: { unit: "", subject: "kokonaisluvun" },
    date: { unit: "", subject: "päivämäärän" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "säännöllinen lauseke",
    email: "sähköpostiosoite",
    url: "URL-osoite",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO-aikaleima",
    date: "ISO-päivämäärä",
    time: "ISO-aika",
    duration: "ISO-kesto",
    ipv4: "IPv4-osoite",
    ipv6: "IPv6-osoite",
    cidrv4: "IPv4-alue",
    cidrv6: "IPv6-alue",
    base64: "base64-koodattu merkkijono",
    base64url: "base64url-koodattu merkkijono",
    json_string: "JSON-merkkijono",
    e164: "E.164-luku",
    jwt: "JWT",
    template_literal: "templaattimerkkijono"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Virheellinen tyyppi: odotettiin ${issue2.expected}, oli ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Virheellinen syöte: täytyy olla ${stringifyPrimitive(issue2.values[0])}`;
        return `Virheellinen valinta: täytyy olla yksi seuraavista: ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Liian suuri: ${sizing.subject} täytyy olla ${adj}${issue2.maximum.toString()} ${sizing.unit}`.trim();
        }
        return `Liian suuri: arvon täytyy olla ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Liian pieni: ${sizing.subject} täytyy olla ${adj}${issue2.minimum.toString()} ${sizing.unit}`.trim();
        }
        return `Liian pieni: arvon täytyy olla ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Virheellinen syöte: täytyy alkaa "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Virheellinen syöte: täytyy loppua "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Virheellinen syöte: täytyy sisältää "${_issue.includes}"`;
        if (_issue.format === "regex") {
          return `Virheellinen syöte: täytyy vastata säännöllistä lauseketta ${_issue.pattern}`;
        }
        return `Virheellinen ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Virheellinen luku: täytyy olla luvun ${issue2.divisor} monikerta`;
      case "unrecognized_keys":
        return `${issue2.keys.length > 1 ? "Tuntemattomat avaimet" : "Tuntematon avain"}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return "Virheellinen avain tietueessa";
      case "invalid_union":
        return "Virheellinen unioni";
      case "invalid_element":
        return "Virheellinen arvo joukossa";
      default:
        return `Virheellinen syöte`;
    }
  };
};
function fi_default() {
  return {
    localeError: error11()
  };
}

// node_modules/zod/v4/locales/fr.js
var error12 = () => {
  const Sizable = {
    string: { unit: "caractères", verb: "avoir" },
    file: { unit: "octets", verb: "avoir" },
    array: { unit: "éléments", verb: "avoir" },
    set: { unit: "éléments", verb: "avoir" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "nombre";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "tableau";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "entrée",
    email: "adresse e-mail",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "date et heure ISO",
    date: "date ISO",
    time: "heure ISO",
    duration: "durée ISO",
    ipv4: "adresse IPv4",
    ipv6: "adresse IPv6",
    cidrv4: "plage IPv4",
    cidrv6: "plage IPv6",
    base64: "chaîne encodée en base64",
    base64url: "chaîne encodée en base64url",
    json_string: "chaîne JSON",
    e164: "numéro E.164",
    jwt: "JWT",
    template_literal: "entrée"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Entrée invalide : ${issue2.expected} attendu, ${parsedType4(issue2.input)} reçu`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Entrée invalide : ${stringifyPrimitive(issue2.values[0])} attendu`;
        return `Option invalide : une valeur parmi ${joinValues(issue2.values, "|")} attendue`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Trop grand : ${issue2.origin ?? "valeur"} doit ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "élément(s)"}`;
        return `Trop grand : ${issue2.origin ?? "valeur"} doit être ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Trop petit : ${issue2.origin} doit ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Trop petit : ${issue2.origin} doit être ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Chaîne invalide : doit commencer par "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Chaîne invalide : doit se terminer par "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Chaîne invalide : doit inclure "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Chaîne invalide : doit correspondre au modèle ${_issue.pattern}`;
        return `${Nouns[_issue.format] ?? issue2.format} invalide`;
      }
      case "not_multiple_of":
        return `Nombre invalide : doit être un multiple de ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Clé${issue2.keys.length > 1 ? "s" : ""} non reconnue${issue2.keys.length > 1 ? "s" : ""} : ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Clé invalide dans ${issue2.origin}`;
      case "invalid_union":
        return "Entrée invalide";
      case "invalid_element":
        return `Valeur invalide dans ${issue2.origin}`;
      default:
        return `Entrée invalide`;
    }
  };
};
function fr_default() {
  return {
    localeError: error12()
  };
}

// node_modules/zod/v4/locales/fr-CA.js
var error13 = () => {
  const Sizable = {
    string: { unit: "caractères", verb: "avoir" },
    file: { unit: "octets", verb: "avoir" },
    array: { unit: "éléments", verb: "avoir" },
    set: { unit: "éléments", verb: "avoir" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "entrée",
    email: "adresse courriel",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "date-heure ISO",
    date: "date ISO",
    time: "heure ISO",
    duration: "durée ISO",
    ipv4: "adresse IPv4",
    ipv6: "adresse IPv6",
    cidrv4: "plage IPv4",
    cidrv6: "plage IPv6",
    base64: "chaîne encodée en base64",
    base64url: "chaîne encodée en base64url",
    json_string: "chaîne JSON",
    e164: "numéro E.164",
    jwt: "JWT",
    template_literal: "entrée"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Entrée invalide : attendu ${issue2.expected}, reçu ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Entrée invalide : attendu ${stringifyPrimitive(issue2.values[0])}`;
        return `Option invalide : attendu l'une des valeurs suivantes ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "≤" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Trop grand : attendu que ${issue2.origin ?? "la valeur"} ait ${adj}${issue2.maximum.toString()} ${sizing.unit}`;
        return `Trop grand : attendu que ${issue2.origin ?? "la valeur"} soit ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? "≥" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Trop petit : attendu que ${issue2.origin} ait ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Trop petit : attendu que ${issue2.origin} soit ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `Chaîne invalide : doit commencer par "${_issue.prefix}"`;
        }
        if (_issue.format === "ends_with")
          return `Chaîne invalide : doit se terminer par "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Chaîne invalide : doit inclure "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Chaîne invalide : doit correspondre au motif ${_issue.pattern}`;
        return `${Nouns[_issue.format] ?? issue2.format} invalide`;
      }
      case "not_multiple_of":
        return `Nombre invalide : doit être un multiple de ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Clé${issue2.keys.length > 1 ? "s" : ""} non reconnue${issue2.keys.length > 1 ? "s" : ""} : ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Clé invalide dans ${issue2.origin}`;
      case "invalid_union":
        return "Entrée invalide";
      case "invalid_element":
        return `Valeur invalide dans ${issue2.origin}`;
      default:
        return `Entrée invalide`;
    }
  };
};
function fr_CA_default() {
  return {
    localeError: error13()
  };
}

// node_modules/zod/v4/locales/he.js
var error14 = () => {
  const Sizable = {
    string: { unit: "אותיות", verb: "לכלול" },
    file: { unit: "בייטים", verb: "לכלול" },
    array: { unit: "פריטים", verb: "לכלול" },
    set: { unit: "פריטים", verb: "לכלול" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "קלט",
    email: "כתובת אימייל",
    url: "כתובת רשת",
    emoji: "אימוג'י",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "תאריך וזמן ISO",
    date: "תאריך ISO",
    time: "זמן ISO",
    duration: "משך זמן ISO",
    ipv4: "כתובת IPv4",
    ipv6: "כתובת IPv6",
    cidrv4: "טווח IPv4",
    cidrv6: "טווח IPv6",
    base64: "מחרוזת בבסיס 64",
    base64url: "מחרוזת בבסיס 64 לכתובות רשת",
    json_string: "מחרוזת JSON",
    e164: "מספר E.164",
    jwt: "JWT",
    template_literal: "קלט"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `קלט לא תקין: צריך ${issue2.expected}, התקבל ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `קלט לא תקין: צריך ${stringifyPrimitive(issue2.values[0])}`;
        return `קלט לא תקין: צריך אחת מהאפשרויות  ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `גדול מדי: ${issue2.origin ?? "value"} צריך להיות ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elements"}`;
        return `גדול מדי: ${issue2.origin ?? "value"} צריך להיות ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `קטן מדי: ${issue2.origin} צריך להיות ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `קטן מדי: ${issue2.origin} צריך להיות ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `מחרוזת לא תקינה: חייבת להתחיל ב"${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `מחרוזת לא תקינה: חייבת להסתיים ב "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `מחרוזת לא תקינה: חייבת לכלול "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `מחרוזת לא תקינה: חייבת להתאים לתבנית ${_issue.pattern}`;
        return `${Nouns[_issue.format] ?? issue2.format} לא תקין`;
      }
      case "not_multiple_of":
        return `מספר לא תקין: חייב להיות מכפלה של ${issue2.divisor}`;
      case "unrecognized_keys":
        return `מפתח${issue2.keys.length > 1 ? "ות" : ""} לא מזוה${issue2.keys.length > 1 ? "ים" : "ה"}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `מפתח לא תקין ב${issue2.origin}`;
      case "invalid_union":
        return "קלט לא תקין";
      case "invalid_element":
        return `ערך לא תקין ב${issue2.origin}`;
      default:
        return `קלט לא תקין`;
    }
  };
};
function he_default() {
  return {
    localeError: error14()
  };
}

// node_modules/zod/v4/locales/hu.js
var error15 = () => {
  const Sizable = {
    string: { unit: "karakter", verb: "legyen" },
    file: { unit: "byte", verb: "legyen" },
    array: { unit: "elem", verb: "legyen" },
    set: { unit: "elem", verb: "legyen" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "szám";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "tömb";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "bemenet",
    email: "email cím",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO időbélyeg",
    date: "ISO dátum",
    time: "ISO idő",
    duration: "ISO időintervallum",
    ipv4: "IPv4 cím",
    ipv6: "IPv6 cím",
    cidrv4: "IPv4 tartomány",
    cidrv6: "IPv6 tartomány",
    base64: "base64-kódolt string",
    base64url: "base64url-kódolt string",
    json_string: "JSON string",
    e164: "E.164 szám",
    jwt: "JWT",
    template_literal: "bemenet"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Érvénytelen bemenet: a várt érték ${issue2.expected}, a kapott érték ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Érvénytelen bemenet: a várt érték ${stringifyPrimitive(issue2.values[0])}`;
        return `Érvénytelen opció: valamelyik érték várt ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Túl nagy: ${issue2.origin ?? "érték"} mérete túl nagy ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elem"}`;
        return `Túl nagy: a bemeneti érték ${issue2.origin ?? "érték"} túl nagy: ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Túl kicsi: a bemeneti érték ${issue2.origin} mérete túl kicsi ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Túl kicsi: a bemeneti érték ${issue2.origin} túl kicsi ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Érvénytelen string: "${_issue.prefix}" értékkel kell kezdődnie`;
        if (_issue.format === "ends_with")
          return `Érvénytelen string: "${_issue.suffix}" értékkel kell végződnie`;
        if (_issue.format === "includes")
          return `Érvénytelen string: "${_issue.includes}" értéket kell tartalmaznia`;
        if (_issue.format === "regex")
          return `Érvénytelen string: ${_issue.pattern} mintának kell megfelelnie`;
        return `Érvénytelen ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Érvénytelen szám: ${issue2.divisor} többszörösének kell lennie`;
      case "unrecognized_keys":
        return `Ismeretlen kulcs${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Érvénytelen kulcs ${issue2.origin}`;
      case "invalid_union":
        return "Érvénytelen bemenet";
      case "invalid_element":
        return `Érvénytelen érték: ${issue2.origin}`;
      default:
        return `Érvénytelen bemenet`;
    }
  };
};
function hu_default() {
  return {
    localeError: error15()
  };
}

// node_modules/zod/v4/locales/id.js
var error16 = () => {
  const Sizable = {
    string: { unit: "karakter", verb: "memiliki" },
    file: { unit: "byte", verb: "memiliki" },
    array: { unit: "item", verb: "memiliki" },
    set: { unit: "item", verb: "memiliki" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "input",
    email: "alamat email",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "tanggal dan waktu format ISO",
    date: "tanggal format ISO",
    time: "jam format ISO",
    duration: "durasi format ISO",
    ipv4: "alamat IPv4",
    ipv6: "alamat IPv6",
    cidrv4: "rentang alamat IPv4",
    cidrv6: "rentang alamat IPv6",
    base64: "string dengan enkode base64",
    base64url: "string dengan enkode base64url",
    json_string: "string JSON",
    e164: "angka E.164",
    jwt: "JWT",
    template_literal: "input"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Input tidak valid: diharapkan ${issue2.expected}, diterima ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Input tidak valid: diharapkan ${stringifyPrimitive(issue2.values[0])}`;
        return `Pilihan tidak valid: diharapkan salah satu dari ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Terlalu besar: diharapkan ${issue2.origin ?? "value"} memiliki ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elemen"}`;
        return `Terlalu besar: diharapkan ${issue2.origin ?? "value"} menjadi ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Terlalu kecil: diharapkan ${issue2.origin} memiliki ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Terlalu kecil: diharapkan ${issue2.origin} menjadi ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `String tidak valid: harus dimulai dengan "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `String tidak valid: harus berakhir dengan "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `String tidak valid: harus menyertakan "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `String tidak valid: harus sesuai pola ${_issue.pattern}`;
        return `${Nouns[_issue.format] ?? issue2.format} tidak valid`;
      }
      case "not_multiple_of":
        return `Angka tidak valid: harus kelipatan dari ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Kunci tidak dikenali ${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Kunci tidak valid di ${issue2.origin}`;
      case "invalid_union":
        return "Input tidak valid";
      case "invalid_element":
        return `Nilai tidak valid di ${issue2.origin}`;
      default:
        return `Input tidak valid`;
    }
  };
};
function id_default() {
  return {
    localeError: error16()
  };
}

// node_modules/zod/v4/locales/it.js
var error17 = () => {
  const Sizable = {
    string: { unit: "caratteri", verb: "avere" },
    file: { unit: "byte", verb: "avere" },
    array: { unit: "elementi", verb: "avere" },
    set: { unit: "elementi", verb: "avere" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "numero";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "vettore";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "input",
    email: "indirizzo email",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "data e ora ISO",
    date: "data ISO",
    time: "ora ISO",
    duration: "durata ISO",
    ipv4: "indirizzo IPv4",
    ipv6: "indirizzo IPv6",
    cidrv4: "intervallo IPv4",
    cidrv6: "intervallo IPv6",
    base64: "stringa codificata in base64",
    base64url: "URL codificata in base64",
    json_string: "stringa JSON",
    e164: "numero E.164",
    jwt: "JWT",
    template_literal: "input"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Input non valido: atteso ${issue2.expected}, ricevuto ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Input non valido: atteso ${stringifyPrimitive(issue2.values[0])}`;
        return `Opzione non valida: atteso uno tra ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Troppo grande: ${issue2.origin ?? "valore"} deve avere ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementi"}`;
        return `Troppo grande: ${issue2.origin ?? "valore"} deve essere ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Troppo piccolo: ${issue2.origin} deve avere ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Troppo piccolo: ${issue2.origin} deve essere ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Stringa non valida: deve iniziare con "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Stringa non valida: deve terminare con "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Stringa non valida: deve includere "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Stringa non valida: deve corrispondere al pattern ${_issue.pattern}`;
        return `Invalid ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Numero non valido: deve essere un multiplo di ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Chiav${issue2.keys.length > 1 ? "i" : "e"} non riconosciut${issue2.keys.length > 1 ? "e" : "a"}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Chiave non valida in ${issue2.origin}`;
      case "invalid_union":
        return "Input non valido";
      case "invalid_element":
        return `Valore non valido in ${issue2.origin}`;
      default:
        return `Input non valido`;
    }
  };
};
function it_default() {
  return {
    localeError: error17()
  };
}

// node_modules/zod/v4/locales/ja.js
var error18 = () => {
  const Sizable = {
    string: { unit: "文字", verb: "である" },
    file: { unit: "バイト", verb: "である" },
    array: { unit: "要素", verb: "である" },
    set: { unit: "要素", verb: "である" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "数値";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "配列";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "入力値",
    email: "メールアドレス",
    url: "URL",
    emoji: "絵文字",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO日時",
    date: "ISO日付",
    time: "ISO時刻",
    duration: "ISO期間",
    ipv4: "IPv4アドレス",
    ipv6: "IPv6アドレス",
    cidrv4: "IPv4範囲",
    cidrv6: "IPv6範囲",
    base64: "base64エンコード文字列",
    base64url: "base64urlエンコード文字列",
    json_string: "JSON文字列",
    e164: "E.164番号",
    jwt: "JWT",
    template_literal: "入力値"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `無効な入力: ${issue2.expected}が期待されましたが、${parsedType4(issue2.input)}が入力されました`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `無効な入力: ${stringifyPrimitive(issue2.values[0])}が期待されました`;
        return `無効な選択: ${joinValues(issue2.values, "、")}のいずれかである必要があります`;
      case "too_big": {
        const adj = issue2.inclusive ? "以下である" : "より小さい";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `大きすぎる値: ${issue2.origin ?? "値"}は${issue2.maximum.toString()}${sizing.unit ?? "要素"}${adj}必要があります`;
        return `大きすぎる値: ${issue2.origin ?? "値"}は${issue2.maximum.toString()}${adj}必要があります`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? "以上である" : "より大きい";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `小さすぎる値: ${issue2.origin}は${issue2.minimum.toString()}${sizing.unit}${adj}必要があります`;
        return `小さすぎる値: ${issue2.origin}は${issue2.minimum.toString()}${adj}必要があります`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `無効な文字列: "${_issue.prefix}"で始まる必要があります`;
        if (_issue.format === "ends_with")
          return `無効な文字列: "${_issue.suffix}"で終わる必要があります`;
        if (_issue.format === "includes")
          return `無効な文字列: "${_issue.includes}"を含む必要があります`;
        if (_issue.format === "regex")
          return `無効な文字列: パターン${_issue.pattern}に一致する必要があります`;
        return `無効な${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `無効な数値: ${issue2.divisor}の倍数である必要があります`;
      case "unrecognized_keys":
        return `認識されていないキー${issue2.keys.length > 1 ? "群" : ""}: ${joinValues(issue2.keys, "、")}`;
      case "invalid_key":
        return `${issue2.origin}内の無効なキー`;
      case "invalid_union":
        return "無効な入力";
      case "invalid_element":
        return `${issue2.origin}内の無効な値`;
      default:
        return `無効な入力`;
    }
  };
};
function ja_default() {
  return {
    localeError: error18()
  };
}

// node_modules/zod/v4/locales/kh.js
var error19 = () => {
  const Sizable = {
    string: { unit: "តួអក្សរ", verb: "គួរមាន" },
    file: { unit: "បៃ", verb: "គួរមាន" },
    array: { unit: "ធាតុ", verb: "គួរមាន" },
    set: { unit: "ធាតុ", verb: "គួរមាន" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "មិនមែនជាលេខ (NaN)" : "លេខ";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "អារេ (Array)";
        }
        if (data === null) {
          return "គ្មានតម្លៃ (null)";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "ទិន្នន័យបញ្ចូល",
    email: "អាសយដ្ឋានអ៊ីមែល",
    url: "URL",
    emoji: "សញ្ញាអារម្មណ៍",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "កាលបរិច្ឆេទ និងម៉ោង ISO",
    date: "កាលបរិច្ឆេទ ISO",
    time: "ម៉ោង ISO",
    duration: "រយៈពេល ISO",
    ipv4: "អាសយដ្ឋាន IPv4",
    ipv6: "អាសយដ្ឋាន IPv6",
    cidrv4: "ដែនអាសយដ្ឋាន IPv4",
    cidrv6: "ដែនអាសយដ្ឋាន IPv6",
    base64: "ខ្សែអក្សរអ៊ិកូដ base64",
    base64url: "ខ្សែអក្សរអ៊ិកូដ base64url",
    json_string: "ខ្សែអក្សរ JSON",
    e164: "លេខ E.164",
    jwt: "JWT",
    template_literal: "ទិន្នន័យបញ្ចូល"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `ទិន្នន័យបញ្ចូលមិនត្រឹមត្រូវ៖ ត្រូវការ ${issue2.expected} ប៉ុន្តែទទួលបាន ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `ទិន្នន័យបញ្ចូលមិនត្រឹមត្រូវ៖ ត្រូវការ ${stringifyPrimitive(issue2.values[0])}`;
        return `ជម្រើសមិនត្រឹមត្រូវ៖ ត្រូវជាមួយក្នុងចំណោម ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `ធំពេក៖ ត្រូវការ ${issue2.origin ?? "តម្លៃ"} ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "ធាតុ"}`;
        return `ធំពេក៖ ត្រូវការ ${issue2.origin ?? "តម្លៃ"} ${adj} ${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `តូចពេក៖ ត្រូវការ ${issue2.origin} ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `តូចពេក៖ ត្រូវការ ${issue2.origin} ${adj} ${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវចាប់ផ្តើមដោយ "${_issue.prefix}"`;
        }
        if (_issue.format === "ends_with")
          return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវបញ្ចប់ដោយ "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវមាន "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវតែផ្គូផ្គងនឹងទម្រង់ដែលបានកំណត់ ${_issue.pattern}`;
        return `មិនត្រឹមត្រូវ៖ ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `លេខមិនត្រឹមត្រូវ៖ ត្រូវតែជាពហុគុណនៃ ${issue2.divisor}`;
      case "unrecognized_keys":
        return `រកឃើញសោមិនស្គាល់៖ ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `សោមិនត្រឹមត្រូវនៅក្នុង ${issue2.origin}`;
      case "invalid_union":
        return `ទិន្នន័យមិនត្រឹមត្រូវ`;
      case "invalid_element":
        return `ទិន្នន័យមិនត្រឹមត្រូវនៅក្នុង ${issue2.origin}`;
      default:
        return `ទិន្នន័យមិនត្រឹមត្រូវ`;
    }
  };
};
function kh_default() {
  return {
    localeError: error19()
  };
}

// node_modules/zod/v4/locales/ko.js
var error20 = () => {
  const Sizable = {
    string: { unit: "문자", verb: "to have" },
    file: { unit: "바이트", verb: "to have" },
    array: { unit: "개", verb: "to have" },
    set: { unit: "개", verb: "to have" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "입력",
    email: "이메일 주소",
    url: "URL",
    emoji: "이모지",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO 날짜시간",
    date: "ISO 날짜",
    time: "ISO 시간",
    duration: "ISO 기간",
    ipv4: "IPv4 주소",
    ipv6: "IPv6 주소",
    cidrv4: "IPv4 범위",
    cidrv6: "IPv6 범위",
    base64: "base64 인코딩 문자열",
    base64url: "base64url 인코딩 문자열",
    json_string: "JSON 문자열",
    e164: "E.164 번호",
    jwt: "JWT",
    template_literal: "입력"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `잘못된 입력: 예상 타입은 ${issue2.expected}, 받은 타입은 ${parsedType4(issue2.input)}입니다`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `잘못된 입력: 값은 ${stringifyPrimitive(issue2.values[0])} 이어야 합니다`;
        return `잘못된 옵션: ${joinValues(issue2.values, "또는 ")} 중 하나여야 합니다`;
      case "too_big": {
        const adj = issue2.inclusive ? "이하" : "미만";
        const suffix = adj === "미만" ? "이어야 합니다" : "여야 합니다";
        const sizing = getSizing(issue2.origin);
        const unit = (sizing == null ? void 0 : sizing.unit) ?? "요소";
        if (sizing)
          return `${issue2.origin ?? "값"}이 너무 큽니다: ${issue2.maximum.toString()}${unit} ${adj}${suffix}`;
        return `${issue2.origin ?? "값"}이 너무 큽니다: ${issue2.maximum.toString()} ${adj}${suffix}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? "이상" : "초과";
        const suffix = adj === "이상" ? "이어야 합니다" : "여야 합니다";
        const sizing = getSizing(issue2.origin);
        const unit = (sizing == null ? void 0 : sizing.unit) ?? "요소";
        if (sizing) {
          return `${issue2.origin ?? "값"}이 너무 작습니다: ${issue2.minimum.toString()}${unit} ${adj}${suffix}`;
        }
        return `${issue2.origin ?? "값"}이 너무 작습니다: ${issue2.minimum.toString()} ${adj}${suffix}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `잘못된 문자열: "${_issue.prefix}"(으)로 시작해야 합니다`;
        }
        if (_issue.format === "ends_with")
          return `잘못된 문자열: "${_issue.suffix}"(으)로 끝나야 합니다`;
        if (_issue.format === "includes")
          return `잘못된 문자열: "${_issue.includes}"을(를) 포함해야 합니다`;
        if (_issue.format === "regex")
          return `잘못된 문자열: 정규식 ${_issue.pattern} 패턴과 일치해야 합니다`;
        return `잘못된 ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `잘못된 숫자: ${issue2.divisor}의 배수여야 합니다`;
      case "unrecognized_keys":
        return `인식할 수 없는 키: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `잘못된 키: ${issue2.origin}`;
      case "invalid_union":
        return `잘못된 입력`;
      case "invalid_element":
        return `잘못된 값: ${issue2.origin}`;
      default:
        return `잘못된 입력`;
    }
  };
};
function ko_default() {
  return {
    localeError: error20()
  };
}

// node_modules/zod/v4/locales/mk.js
var error21 = () => {
  const Sizable = {
    string: { unit: "знаци", verb: "да имаат" },
    file: { unit: "бајти", verb: "да имаат" },
    array: { unit: "ставки", verb: "да имаат" },
    set: { unit: "ставки", verb: "да имаат" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "број";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "низа";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "внес",
    email: "адреса на е-пошта",
    url: "URL",
    emoji: "емоџи",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO датум и време",
    date: "ISO датум",
    time: "ISO време",
    duration: "ISO времетраење",
    ipv4: "IPv4 адреса",
    ipv6: "IPv6 адреса",
    cidrv4: "IPv4 опсег",
    cidrv6: "IPv6 опсег",
    base64: "base64-енкодирана низа",
    base64url: "base64url-енкодирана низа",
    json_string: "JSON низа",
    e164: "E.164 број",
    jwt: "JWT",
    template_literal: "внес"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Грешен внес: се очекува ${issue2.expected}, примено ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Invalid input: expected ${stringifyPrimitive(issue2.values[0])}`;
        return `Грешана опција: се очекува една ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Премногу голем: се очекува ${issue2.origin ?? "вредноста"} да има ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "елементи"}`;
        return `Премногу голем: се очекува ${issue2.origin ?? "вредноста"} да биде ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Премногу мал: се очекува ${issue2.origin} да има ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Премногу мал: се очекува ${issue2.origin} да биде ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `Неважечка низа: мора да започнува со "${_issue.prefix}"`;
        }
        if (_issue.format === "ends_with")
          return `Неважечка низа: мора да завршува со "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Неважечка низа: мора да вклучува "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Неважечка низа: мора да одгоара на патернот ${_issue.pattern}`;
        return `Invalid ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Грешен број: мора да биде делив со ${issue2.divisor}`;
      case "unrecognized_keys":
        return `${issue2.keys.length > 1 ? "Непрепознаени клучеви" : "Непрепознаен клуч"}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Грешен клуч во ${issue2.origin}`;
      case "invalid_union":
        return "Грешен внес";
      case "invalid_element":
        return `Грешна вредност во ${issue2.origin}`;
      default:
        return `Грешен внес`;
    }
  };
};
function mk_default() {
  return {
    localeError: error21()
  };
}

// node_modules/zod/v4/locales/ms.js
var error22 = () => {
  const Sizable = {
    string: { unit: "aksara", verb: "mempunyai" },
    file: { unit: "bait", verb: "mempunyai" },
    array: { unit: "elemen", verb: "mempunyai" },
    set: { unit: "elemen", verb: "mempunyai" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "nombor";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "input",
    email: "alamat e-mel",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "tarikh masa ISO",
    date: "tarikh ISO",
    time: "masa ISO",
    duration: "tempoh ISO",
    ipv4: "alamat IPv4",
    ipv6: "alamat IPv6",
    cidrv4: "julat IPv4",
    cidrv6: "julat IPv6",
    base64: "string dikodkan base64",
    base64url: "string dikodkan base64url",
    json_string: "string JSON",
    e164: "nombor E.164",
    jwt: "JWT",
    template_literal: "input"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Input tidak sah: dijangka ${issue2.expected}, diterima ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Input tidak sah: dijangka ${stringifyPrimitive(issue2.values[0])}`;
        return `Pilihan tidak sah: dijangka salah satu daripada ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Terlalu besar: dijangka ${issue2.origin ?? "nilai"} ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elemen"}`;
        return `Terlalu besar: dijangka ${issue2.origin ?? "nilai"} adalah ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Terlalu kecil: dijangka ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Terlalu kecil: dijangka ${issue2.origin} adalah ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `String tidak sah: mesti bermula dengan "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `String tidak sah: mesti berakhir dengan "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `String tidak sah: mesti mengandungi "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `String tidak sah: mesti sepadan dengan corak ${_issue.pattern}`;
        return `${Nouns[_issue.format] ?? issue2.format} tidak sah`;
      }
      case "not_multiple_of":
        return `Nombor tidak sah: perlu gandaan ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Kunci tidak dikenali: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Kunci tidak sah dalam ${issue2.origin}`;
      case "invalid_union":
        return "Input tidak sah";
      case "invalid_element":
        return `Nilai tidak sah dalam ${issue2.origin}`;
      default:
        return `Input tidak sah`;
    }
  };
};
function ms_default() {
  return {
    localeError: error22()
  };
}

// node_modules/zod/v4/locales/nl.js
var error23 = () => {
  const Sizable = {
    string: { unit: "tekens" },
    file: { unit: "bytes" },
    array: { unit: "elementen" },
    set: { unit: "elementen" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "getal";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "invoer",
    email: "emailadres",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO datum en tijd",
    date: "ISO datum",
    time: "ISO tijd",
    duration: "ISO duur",
    ipv4: "IPv4-adres",
    ipv6: "IPv6-adres",
    cidrv4: "IPv4-bereik",
    cidrv6: "IPv6-bereik",
    base64: "base64-gecodeerde tekst",
    base64url: "base64 URL-gecodeerde tekst",
    json_string: "JSON string",
    e164: "E.164-nummer",
    jwt: "JWT",
    template_literal: "invoer"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Ongeldige invoer: verwacht ${issue2.expected}, ontving ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Ongeldige invoer: verwacht ${stringifyPrimitive(issue2.values[0])}`;
        return `Ongeldige optie: verwacht één van ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Te lang: verwacht dat ${issue2.origin ?? "waarde"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementen"} bevat`;
        return `Te lang: verwacht dat ${issue2.origin ?? "waarde"} ${adj}${issue2.maximum.toString()} is`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Te kort: verwacht dat ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit} bevat`;
        }
        return `Te kort: verwacht dat ${issue2.origin} ${adj}${issue2.minimum.toString()} is`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `Ongeldige tekst: moet met "${_issue.prefix}" beginnen`;
        }
        if (_issue.format === "ends_with")
          return `Ongeldige tekst: moet op "${_issue.suffix}" eindigen`;
        if (_issue.format === "includes")
          return `Ongeldige tekst: moet "${_issue.includes}" bevatten`;
        if (_issue.format === "regex")
          return `Ongeldige tekst: moet overeenkomen met patroon ${_issue.pattern}`;
        return `Ongeldig: ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Ongeldig getal: moet een veelvoud van ${issue2.divisor} zijn`;
      case "unrecognized_keys":
        return `Onbekende key${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Ongeldige key in ${issue2.origin}`;
      case "invalid_union":
        return "Ongeldige invoer";
      case "invalid_element":
        return `Ongeldige waarde in ${issue2.origin}`;
      default:
        return `Ongeldige invoer`;
    }
  };
};
function nl_default() {
  return {
    localeError: error23()
  };
}

// node_modules/zod/v4/locales/no.js
var error24 = () => {
  const Sizable = {
    string: { unit: "tegn", verb: "å ha" },
    file: { unit: "bytes", verb: "å ha" },
    array: { unit: "elementer", verb: "å inneholde" },
    set: { unit: "elementer", verb: "å inneholde" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "tall";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "liste";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "input",
    email: "e-postadresse",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO dato- og klokkeslett",
    date: "ISO-dato",
    time: "ISO-klokkeslett",
    duration: "ISO-varighet",
    ipv4: "IPv4-område",
    ipv6: "IPv6-område",
    cidrv4: "IPv4-spekter",
    cidrv6: "IPv6-spekter",
    base64: "base64-enkodet streng",
    base64url: "base64url-enkodet streng",
    json_string: "JSON-streng",
    e164: "E.164-nummer",
    jwt: "JWT",
    template_literal: "input"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Ugyldig input: forventet ${issue2.expected}, fikk ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Ugyldig verdi: forventet ${stringifyPrimitive(issue2.values[0])}`;
        return `Ugyldig valg: forventet en av ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `For stor(t): forventet ${issue2.origin ?? "value"} til å ha ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementer"}`;
        return `For stor(t): forventet ${issue2.origin ?? "value"} til å ha ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `For lite(n): forventet ${issue2.origin} til å ha ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `For lite(n): forventet ${issue2.origin} til å ha ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Ugyldig streng: må starte med "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Ugyldig streng: må ende med "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Ugyldig streng: må inneholde "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Ugyldig streng: må matche mønsteret ${_issue.pattern}`;
        return `Ugyldig ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Ugyldig tall: må være et multiplum av ${issue2.divisor}`;
      case "unrecognized_keys":
        return `${issue2.keys.length > 1 ? "Ukjente nøkler" : "Ukjent nøkkel"}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Ugyldig nøkkel i ${issue2.origin}`;
      case "invalid_union":
        return "Ugyldig input";
      case "invalid_element":
        return `Ugyldig verdi i ${issue2.origin}`;
      default:
        return `Ugyldig input`;
    }
  };
};
function no_default() {
  return {
    localeError: error24()
  };
}

// node_modules/zod/v4/locales/ota.js
var error25 = () => {
  const Sizable = {
    string: { unit: "harf", verb: "olmalıdır" },
    file: { unit: "bayt", verb: "olmalıdır" },
    array: { unit: "unsur", verb: "olmalıdır" },
    set: { unit: "unsur", verb: "olmalıdır" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "numara";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "saf";
        }
        if (data === null) {
          return "gayb";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "giren",
    email: "epostagâh",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO hengâmı",
    date: "ISO tarihi",
    time: "ISO zamanı",
    duration: "ISO müddeti",
    ipv4: "IPv4 nişânı",
    ipv6: "IPv6 nişânı",
    cidrv4: "IPv4 menzili",
    cidrv6: "IPv6 menzili",
    base64: "base64-şifreli metin",
    base64url: "base64url-şifreli metin",
    json_string: "JSON metin",
    e164: "E.164 sayısı",
    jwt: "JWT",
    template_literal: "giren"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Fâsit giren: umulan ${issue2.expected}, alınan ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Fâsit giren: umulan ${stringifyPrimitive(issue2.values[0])}`;
        return `Fâsit tercih: mûteberler ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Fazla büyük: ${issue2.origin ?? "value"}, ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elements"} sahip olmalıydı.`;
        return `Fazla büyük: ${issue2.origin ?? "value"}, ${adj}${issue2.maximum.toString()} olmalıydı.`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Fazla küçük: ${issue2.origin}, ${adj}${issue2.minimum.toString()} ${sizing.unit} sahip olmalıydı.`;
        }
        return `Fazla küçük: ${issue2.origin}, ${adj}${issue2.minimum.toString()} olmalıydı.`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Fâsit metin: "${_issue.prefix}" ile başlamalı.`;
        if (_issue.format === "ends_with")
          return `Fâsit metin: "${_issue.suffix}" ile bitmeli.`;
        if (_issue.format === "includes")
          return `Fâsit metin: "${_issue.includes}" ihtivâ etmeli.`;
        if (_issue.format === "regex")
          return `Fâsit metin: ${_issue.pattern} nakşına uymalı.`;
        return `Fâsit ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Fâsit sayı: ${issue2.divisor} katı olmalıydı.`;
      case "unrecognized_keys":
        return `Tanınmayan anahtar ${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `${issue2.origin} için tanınmayan anahtar var.`;
      case "invalid_union":
        return "Giren tanınamadı.";
      case "invalid_element":
        return `${issue2.origin} için tanınmayan kıymet var.`;
      default:
        return `Kıymet tanınamadı.`;
    }
  };
};
function ota_default() {
  return {
    localeError: error25()
  };
}

// node_modules/zod/v4/locales/ps.js
var error26 = () => {
  const Sizable = {
    string: { unit: "توکي", verb: "ولري" },
    file: { unit: "بایټس", verb: "ولري" },
    array: { unit: "توکي", verb: "ولري" },
    set: { unit: "توکي", verb: "ولري" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "عدد";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "ارې";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "ورودي",
    email: "بریښنالیک",
    url: "یو آر ال",
    emoji: "ایموجي",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "نیټه او وخت",
    date: "نېټه",
    time: "وخت",
    duration: "موده",
    ipv4: "د IPv4 پته",
    ipv6: "د IPv6 پته",
    cidrv4: "د IPv4 ساحه",
    cidrv6: "د IPv6 ساحه",
    base64: "base64-encoded متن",
    base64url: "base64url-encoded متن",
    json_string: "JSON متن",
    e164: "د E.164 شمېره",
    jwt: "JWT",
    template_literal: "ورودي"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `ناسم ورودي: باید ${issue2.expected} وای, مګر ${parsedType4(issue2.input)} ترلاسه شو`;
      case "invalid_value":
        if (issue2.values.length === 1) {
          return `ناسم ورودي: باید ${stringifyPrimitive(issue2.values[0])} وای`;
        }
        return `ناسم انتخاب: باید یو له ${joinValues(issue2.values, "|")} څخه وای`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `ډیر لوی: ${issue2.origin ?? "ارزښت"} باید ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "عنصرونه"} ولري`;
        }
        return `ډیر لوی: ${issue2.origin ?? "ارزښت"} باید ${adj}${issue2.maximum.toString()} وي`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `ډیر کوچنی: ${issue2.origin} باید ${adj}${issue2.minimum.toString()} ${sizing.unit} ولري`;
        }
        return `ډیر کوچنی: ${issue2.origin} باید ${adj}${issue2.minimum.toString()} وي`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `ناسم متن: باید د "${_issue.prefix}" سره پیل شي`;
        }
        if (_issue.format === "ends_with") {
          return `ناسم متن: باید د "${_issue.suffix}" سره پای ته ورسيږي`;
        }
        if (_issue.format === "includes") {
          return `ناسم متن: باید "${_issue.includes}" ولري`;
        }
        if (_issue.format === "regex") {
          return `ناسم متن: باید د ${_issue.pattern} سره مطابقت ولري`;
        }
        return `${Nouns[_issue.format] ?? issue2.format} ناسم دی`;
      }
      case "not_multiple_of":
        return `ناسم عدد: باید د ${issue2.divisor} مضرب وي`;
      case "unrecognized_keys":
        return `ناسم ${issue2.keys.length > 1 ? "کلیډونه" : "کلیډ"}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `ناسم کلیډ په ${issue2.origin} کې`;
      case "invalid_union":
        return `ناسمه ورودي`;
      case "invalid_element":
        return `ناسم عنصر په ${issue2.origin} کې`;
      default:
        return `ناسمه ورودي`;
    }
  };
};
function ps_default() {
  return {
    localeError: error26()
  };
}

// node_modules/zod/v4/locales/pl.js
var error27 = () => {
  const Sizable = {
    string: { unit: "znaków", verb: "mieć" },
    file: { unit: "bajtów", verb: "mieć" },
    array: { unit: "elementów", verb: "mieć" },
    set: { unit: "elementów", verb: "mieć" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "liczba";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "tablica";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "wyrażenie",
    email: "adres email",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "data i godzina w formacie ISO",
    date: "data w formacie ISO",
    time: "godzina w formacie ISO",
    duration: "czas trwania ISO",
    ipv4: "adres IPv4",
    ipv6: "adres IPv6",
    cidrv4: "zakres IPv4",
    cidrv6: "zakres IPv6",
    base64: "ciąg znaków zakodowany w formacie base64",
    base64url: "ciąg znaków zakodowany w formacie base64url",
    json_string: "ciąg znaków w formacie JSON",
    e164: "liczba E.164",
    jwt: "JWT",
    template_literal: "wejście"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Nieprawidłowe dane wejściowe: oczekiwano ${issue2.expected}, otrzymano ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Nieprawidłowe dane wejściowe: oczekiwano ${stringifyPrimitive(issue2.values[0])}`;
        return `Nieprawidłowa opcja: oczekiwano jednej z wartości ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Za duża wartość: oczekiwano, że ${issue2.origin ?? "wartość"} będzie mieć ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementów"}`;
        }
        return `Zbyt duż(y/a/e): oczekiwano, że ${issue2.origin ?? "wartość"} będzie wynosić ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Za mała wartość: oczekiwano, że ${issue2.origin ?? "wartość"} będzie mieć ${adj}${issue2.minimum.toString()} ${sizing.unit ?? "elementów"}`;
        }
        return `Zbyt mał(y/a/e): oczekiwano, że ${issue2.origin ?? "wartość"} będzie wynosić ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Nieprawidłowy ciąg znaków: musi zaczynać się od "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Nieprawidłowy ciąg znaków: musi kończyć się na "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Nieprawidłowy ciąg znaków: musi zawierać "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Nieprawidłowy ciąg znaków: musi odpowiadać wzorcowi ${_issue.pattern}`;
        return `Nieprawidłow(y/a/e) ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Nieprawidłowa liczba: musi być wielokrotnością ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Nierozpoznane klucze${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Nieprawidłowy klucz w ${issue2.origin}`;
      case "invalid_union":
        return "Nieprawidłowe dane wejściowe";
      case "invalid_element":
        return `Nieprawidłowa wartość w ${issue2.origin}`;
      default:
        return `Nieprawidłowe dane wejściowe`;
    }
  };
};
function pl_default() {
  return {
    localeError: error27()
  };
}

// node_modules/zod/v4/locales/pt.js
var error28 = () => {
  const Sizable = {
    string: { unit: "caracteres", verb: "ter" },
    file: { unit: "bytes", verb: "ter" },
    array: { unit: "itens", verb: "ter" },
    set: { unit: "itens", verb: "ter" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "número";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "nulo";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "padrão",
    email: "endereço de e-mail",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "data e hora ISO",
    date: "data ISO",
    time: "hora ISO",
    duration: "duração ISO",
    ipv4: "endereço IPv4",
    ipv6: "endereço IPv6",
    cidrv4: "faixa de IPv4",
    cidrv6: "faixa de IPv6",
    base64: "texto codificado em base64",
    base64url: "URL codificada em base64",
    json_string: "texto JSON",
    e164: "número E.164",
    jwt: "JWT",
    template_literal: "entrada"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Tipo inválido: esperado ${issue2.expected}, recebido ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Entrada inválida: esperado ${stringifyPrimitive(issue2.values[0])}`;
        return `Opção inválida: esperada uma das ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Muito grande: esperado que ${issue2.origin ?? "valor"} tivesse ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementos"}`;
        return `Muito grande: esperado que ${issue2.origin ?? "valor"} fosse ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Muito pequeno: esperado que ${issue2.origin} tivesse ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Muito pequeno: esperado que ${issue2.origin} fosse ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Texto inválido: deve começar com "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Texto inválido: deve terminar com "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Texto inválido: deve incluir "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Texto inválido: deve corresponder ao padrão ${_issue.pattern}`;
        return `${Nouns[_issue.format] ?? issue2.format} inválido`;
      }
      case "not_multiple_of":
        return `Número inválido: deve ser múltiplo de ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Chave${issue2.keys.length > 1 ? "s" : ""} desconhecida${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Chave inválida em ${issue2.origin}`;
      case "invalid_union":
        return "Entrada inválida";
      case "invalid_element":
        return `Valor inválido em ${issue2.origin}`;
      default:
        return `Campo inválido`;
    }
  };
};
function pt_default() {
  return {
    localeError: error28()
  };
}

// node_modules/zod/v4/locales/ru.js
function getRussianPlural(count, one, few, many) {
  const absCount = Math.abs(count);
  const lastDigit = absCount % 10;
  const lastTwoDigits = absCount % 100;
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return many;
  }
  if (lastDigit === 1) {
    return one;
  }
  if (lastDigit >= 2 && lastDigit <= 4) {
    return few;
  }
  return many;
}
var error29 = () => {
  const Sizable = {
    string: {
      unit: {
        one: "символ",
        few: "символа",
        many: "символов"
      },
      verb: "иметь"
    },
    file: {
      unit: {
        one: "байт",
        few: "байта",
        many: "байт"
      },
      verb: "иметь"
    },
    array: {
      unit: {
        one: "элемент",
        few: "элемента",
        many: "элементов"
      },
      verb: "иметь"
    },
    set: {
      unit: {
        one: "элемент",
        few: "элемента",
        many: "элементов"
      },
      verb: "иметь"
    }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "число";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "массив";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "ввод",
    email: "email адрес",
    url: "URL",
    emoji: "эмодзи",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO дата и время",
    date: "ISO дата",
    time: "ISO время",
    duration: "ISO длительность",
    ipv4: "IPv4 адрес",
    ipv6: "IPv6 адрес",
    cidrv4: "IPv4 диапазон",
    cidrv6: "IPv6 диапазон",
    base64: "строка в формате base64",
    base64url: "строка в формате base64url",
    json_string: "JSON строка",
    e164: "номер E.164",
    jwt: "JWT",
    template_literal: "ввод"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Неверный ввод: ожидалось ${issue2.expected}, получено ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Неверный ввод: ожидалось ${stringifyPrimitive(issue2.values[0])}`;
        return `Неверный вариант: ожидалось одно из ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          const maxValue = Number(issue2.maximum);
          const unit = getRussianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
          return `Слишком большое значение: ожидалось, что ${issue2.origin ?? "значение"} будет иметь ${adj}${issue2.maximum.toString()} ${unit}`;
        }
        return `Слишком большое значение: ожидалось, что ${issue2.origin ?? "значение"} будет ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          const minValue = Number(issue2.minimum);
          const unit = getRussianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
          return `Слишком маленькое значение: ожидалось, что ${issue2.origin} будет иметь ${adj}${issue2.minimum.toString()} ${unit}`;
        }
        return `Слишком маленькое значение: ожидалось, что ${issue2.origin} будет ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Неверная строка: должна начинаться с "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Неверная строка: должна заканчиваться на "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Неверная строка: должна содержать "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Неверная строка: должна соответствовать шаблону ${_issue.pattern}`;
        return `Неверный ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Неверное число: должно быть кратным ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Нераспознанн${issue2.keys.length > 1 ? "ые" : "ый"} ключ${issue2.keys.length > 1 ? "и" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Неверный ключ в ${issue2.origin}`;
      case "invalid_union":
        return "Неверные входные данные";
      case "invalid_element":
        return `Неверное значение в ${issue2.origin}`;
      default:
        return `Неверные входные данные`;
    }
  };
};
function ru_default() {
  return {
    localeError: error29()
  };
}

// node_modules/zod/v4/locales/sl.js
var error30 = () => {
  const Sizable = {
    string: { unit: "znakov", verb: "imeti" },
    file: { unit: "bajtov", verb: "imeti" },
    array: { unit: "elementov", verb: "imeti" },
    set: { unit: "elementov", verb: "imeti" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "število";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "tabela";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "vnos",
    email: "e-poštni naslov",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO datum in čas",
    date: "ISO datum",
    time: "ISO čas",
    duration: "ISO trajanje",
    ipv4: "IPv4 naslov",
    ipv6: "IPv6 naslov",
    cidrv4: "obseg IPv4",
    cidrv6: "obseg IPv6",
    base64: "base64 kodiran niz",
    base64url: "base64url kodiran niz",
    json_string: "JSON niz",
    e164: "E.164 številka",
    jwt: "JWT",
    template_literal: "vnos"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Neveljaven vnos: pričakovano ${issue2.expected}, prejeto ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Neveljaven vnos: pričakovano ${stringifyPrimitive(issue2.values[0])}`;
        return `Neveljavna možnost: pričakovano eno izmed ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Preveliko: pričakovano, da bo ${issue2.origin ?? "vrednost"} imelo ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementov"}`;
        return `Preveliko: pričakovano, da bo ${issue2.origin ?? "vrednost"} ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Premajhno: pričakovano, da bo ${issue2.origin} imelo ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Premajhno: pričakovano, da bo ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `Neveljaven niz: mora se začeti z "${_issue.prefix}"`;
        }
        if (_issue.format === "ends_with")
          return `Neveljaven niz: mora se končati z "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Neveljaven niz: mora vsebovati "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Neveljaven niz: mora ustrezati vzorcu ${_issue.pattern}`;
        return `Neveljaven ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Neveljavno število: mora biti večkratnik ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Neprepoznan${issue2.keys.length > 1 ? "i ključi" : " ključ"}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Neveljaven ključ v ${issue2.origin}`;
      case "invalid_union":
        return "Neveljaven vnos";
      case "invalid_element":
        return `Neveljavna vrednost v ${issue2.origin}`;
      default:
        return "Neveljaven vnos";
    }
  };
};
function sl_default() {
  return {
    localeError: error30()
  };
}

// node_modules/zod/v4/locales/sv.js
var error31 = () => {
  const Sizable = {
    string: { unit: "tecken", verb: "att ha" },
    file: { unit: "bytes", verb: "att ha" },
    array: { unit: "objekt", verb: "att innehålla" },
    set: { unit: "objekt", verb: "att innehålla" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "antal";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "lista";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "reguljärt uttryck",
    email: "e-postadress",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO-datum och tid",
    date: "ISO-datum",
    time: "ISO-tid",
    duration: "ISO-varaktighet",
    ipv4: "IPv4-intervall",
    ipv6: "IPv6-intervall",
    cidrv4: "IPv4-spektrum",
    cidrv6: "IPv6-spektrum",
    base64: "base64-kodad sträng",
    base64url: "base64url-kodad sträng",
    json_string: "JSON-sträng",
    e164: "E.164-nummer",
    jwt: "JWT",
    template_literal: "mall-literal"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Ogiltig inmatning: förväntat ${issue2.expected}, fick ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Ogiltig inmatning: förväntat ${stringifyPrimitive(issue2.values[0])}`;
        return `Ogiltigt val: förväntade en av ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `För stor(t): förväntade ${issue2.origin ?? "värdet"} att ha ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "element"}`;
        }
        return `För stor(t): förväntat ${issue2.origin ?? "värdet"} att ha ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `För lite(t): förväntade ${issue2.origin ?? "värdet"} att ha ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `För lite(t): förväntade ${issue2.origin ?? "värdet"} att ha ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `Ogiltig sträng: måste börja med "${_issue.prefix}"`;
        }
        if (_issue.format === "ends_with")
          return `Ogiltig sträng: måste sluta med "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Ogiltig sträng: måste innehålla "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Ogiltig sträng: måste matcha mönstret "${_issue.pattern}"`;
        return `Ogiltig(t) ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Ogiltigt tal: måste vara en multipel av ${issue2.divisor}`;
      case "unrecognized_keys":
        return `${issue2.keys.length > 1 ? "Okända nycklar" : "Okänd nyckel"}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Ogiltig nyckel i ${issue2.origin ?? "värdet"}`;
      case "invalid_union":
        return "Ogiltig input";
      case "invalid_element":
        return `Ogiltigt värde i ${issue2.origin ?? "värdet"}`;
      default:
        return `Ogiltig input`;
    }
  };
};
function sv_default() {
  return {
    localeError: error31()
  };
}

// node_modules/zod/v4/locales/ta.js
var error32 = () => {
  const Sizable = {
    string: { unit: "எழுத்துக்கள்", verb: "கொண்டிருக்க வேண்டும்" },
    file: { unit: "பைட்டுகள்", verb: "கொண்டிருக்க வேண்டும்" },
    array: { unit: "உறுப்புகள்", verb: "கொண்டிருக்க வேண்டும்" },
    set: { unit: "உறுப்புகள்", verb: "கொண்டிருக்க வேண்டும்" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "எண் அல்லாதது" : "எண்";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "அணி";
        }
        if (data === null) {
          return "வெறுமை";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "உள்ளீடு",
    email: "மின்னஞ்சல் முகவரி",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO தேதி நேரம்",
    date: "ISO தேதி",
    time: "ISO நேரம்",
    duration: "ISO கால அளவு",
    ipv4: "IPv4 முகவரி",
    ipv6: "IPv6 முகவரி",
    cidrv4: "IPv4 வரம்பு",
    cidrv6: "IPv6 வரம்பு",
    base64: "base64-encoded சரம்",
    base64url: "base64url-encoded சரம்",
    json_string: "JSON சரம்",
    e164: "E.164 எண்",
    jwt: "JWT",
    template_literal: "input"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `தவறான உள்ளீடு: எதிர்பார்க்கப்பட்டது ${issue2.expected}, பெறப்பட்டது ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `தவறான உள்ளீடு: எதிர்பார்க்கப்பட்டது ${stringifyPrimitive(issue2.values[0])}`;
        return `தவறான விருப்பம்: எதிர்பார்க்கப்பட்டது ${joinValues(issue2.values, "|")} இல் ஒன்று`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `மிக பெரியது: எதிர்பார்க்கப்பட்டது ${issue2.origin ?? "மதிப்பு"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "உறுப்புகள்"} ஆக இருக்க வேண்டும்`;
        }
        return `மிக பெரியது: எதிர்பார்க்கப்பட்டது ${issue2.origin ?? "மதிப்பு"} ${adj}${issue2.maximum.toString()} ஆக இருக்க வேண்டும்`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `மிகச் சிறியது: எதிர்பார்க்கப்பட்டது ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit} ஆக இருக்க வேண்டும்`;
        }
        return `மிகச் சிறியது: எதிர்பார்க்கப்பட்டது ${issue2.origin} ${adj}${issue2.minimum.toString()} ஆக இருக்க வேண்டும்`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `தவறான சரம்: "${_issue.prefix}" இல் தொடங்க வேண்டும்`;
        if (_issue.format === "ends_with")
          return `தவறான சரம்: "${_issue.suffix}" இல் முடிவடைய வேண்டும்`;
        if (_issue.format === "includes")
          return `தவறான சரம்: "${_issue.includes}" ஐ உள்ளடக்க வேண்டும்`;
        if (_issue.format === "regex")
          return `தவறான சரம்: ${_issue.pattern} முறைபாட்டுடன் பொருந்த வேண்டும்`;
        return `தவறான ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `தவறான எண்: ${issue2.divisor} இன் பலமாக இருக்க வேண்டும்`;
      case "unrecognized_keys":
        return `அடையாளம் தெரியாத விசை${issue2.keys.length > 1 ? "கள்" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `${issue2.origin} இல் தவறான விசை`;
      case "invalid_union":
        return "தவறான உள்ளீடு";
      case "invalid_element":
        return `${issue2.origin} இல் தவறான மதிப்பு`;
      default:
        return `தவறான உள்ளீடு`;
    }
  };
};
function ta_default() {
  return {
    localeError: error32()
  };
}

// node_modules/zod/v4/locales/th.js
var error33 = () => {
  const Sizable = {
    string: { unit: "ตัวอักษร", verb: "ควรมี" },
    file: { unit: "ไบต์", verb: "ควรมี" },
    array: { unit: "รายการ", verb: "ควรมี" },
    set: { unit: "รายการ", verb: "ควรมี" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "ไม่ใช่ตัวเลข (NaN)" : "ตัวเลข";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "อาร์เรย์ (Array)";
        }
        if (data === null) {
          return "ไม่มีค่า (null)";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "ข้อมูลที่ป้อน",
    email: "ที่อยู่อีเมล",
    url: "URL",
    emoji: "อิโมจิ",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "วันที่เวลาแบบ ISO",
    date: "วันที่แบบ ISO",
    time: "เวลาแบบ ISO",
    duration: "ช่วงเวลาแบบ ISO",
    ipv4: "ที่อยู่ IPv4",
    ipv6: "ที่อยู่ IPv6",
    cidrv4: "ช่วง IP แบบ IPv4",
    cidrv6: "ช่วง IP แบบ IPv6",
    base64: "ข้อความแบบ Base64",
    base64url: "ข้อความแบบ Base64 สำหรับ URL",
    json_string: "ข้อความแบบ JSON",
    e164: "เบอร์โทรศัพท์ระหว่างประเทศ (E.164)",
    jwt: "โทเคน JWT",
    template_literal: "ข้อมูลที่ป้อน"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `ประเภทข้อมูลไม่ถูกต้อง: ควรเป็น ${issue2.expected} แต่ได้รับ ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `ค่าไม่ถูกต้อง: ควรเป็น ${stringifyPrimitive(issue2.values[0])}`;
        return `ตัวเลือกไม่ถูกต้อง: ควรเป็นหนึ่งใน ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "ไม่เกิน" : "น้อยกว่า";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `เกินกำหนด: ${issue2.origin ?? "ค่า"} ควรมี${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "รายการ"}`;
        return `เกินกำหนด: ${issue2.origin ?? "ค่า"} ควรมี${adj} ${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? "อย่างน้อย" : "มากกว่า";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `น้อยกว่ากำหนด: ${issue2.origin} ควรมี${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `น้อยกว่ากำหนด: ${issue2.origin} ควรมี${adj} ${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `รูปแบบไม่ถูกต้อง: ข้อความต้องขึ้นต้นด้วย "${_issue.prefix}"`;
        }
        if (_issue.format === "ends_with")
          return `รูปแบบไม่ถูกต้อง: ข้อความต้องลงท้ายด้วย "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `รูปแบบไม่ถูกต้อง: ข้อความต้องมี "${_issue.includes}" อยู่ในข้อความ`;
        if (_issue.format === "regex")
          return `รูปแบบไม่ถูกต้อง: ต้องตรงกับรูปแบบที่กำหนด ${_issue.pattern}`;
        return `รูปแบบไม่ถูกต้อง: ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `ตัวเลขไม่ถูกต้อง: ต้องเป็นจำนวนที่หารด้วย ${issue2.divisor} ได้ลงตัว`;
      case "unrecognized_keys":
        return `พบคีย์ที่ไม่รู้จัก: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `คีย์ไม่ถูกต้องใน ${issue2.origin}`;
      case "invalid_union":
        return "ข้อมูลไม่ถูกต้อง: ไม่ตรงกับรูปแบบยูเนียนที่กำหนดไว้";
      case "invalid_element":
        return `ข้อมูลไม่ถูกต้องใน ${issue2.origin}`;
      default:
        return `ข้อมูลไม่ถูกต้อง`;
    }
  };
};
function th_default() {
  return {
    localeError: error33()
  };
}

// node_modules/zod/v4/locales/tr.js
var parsedType3 = (data) => {
  const t = typeof data;
  switch (t) {
    case "number": {
      return Number.isNaN(data) ? "NaN" : "number";
    }
    case "object": {
      if (Array.isArray(data)) {
        return "array";
      }
      if (data === null) {
        return "null";
      }
      if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
        return data.constructor.name;
      }
    }
  }
  return t;
};
var error34 = () => {
  const Sizable = {
    string: { unit: "karakter", verb: "olmalı" },
    file: { unit: "bayt", verb: "olmalı" },
    array: { unit: "öğe", verb: "olmalı" },
    set: { unit: "öğe", verb: "olmalı" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const Nouns = {
    regex: "girdi",
    email: "e-posta adresi",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO tarih ve saat",
    date: "ISO tarih",
    time: "ISO saat",
    duration: "ISO süre",
    ipv4: "IPv4 adresi",
    ipv6: "IPv6 adresi",
    cidrv4: "IPv4 aralığı",
    cidrv6: "IPv6 aralığı",
    base64: "base64 ile şifrelenmiş metin",
    base64url: "base64url ile şifrelenmiş metin",
    json_string: "JSON dizesi",
    e164: "E.164 sayısı",
    jwt: "JWT",
    template_literal: "Şablon dizesi"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Geçersiz değer: beklenen ${issue2.expected}, alınan ${parsedType3(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Geçersiz değer: beklenen ${stringifyPrimitive(issue2.values[0])}`;
        return `Geçersiz seçenek: aşağıdakilerden biri olmalı: ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Çok büyük: beklenen ${issue2.origin ?? "değer"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "öğe"}`;
        return `Çok büyük: beklenen ${issue2.origin ?? "değer"} ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Çok küçük: beklenen ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        return `Çok küçük: beklenen ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Geçersiz metin: "${_issue.prefix}" ile başlamalı`;
        if (_issue.format === "ends_with")
          return `Geçersiz metin: "${_issue.suffix}" ile bitmeli`;
        if (_issue.format === "includes")
          return `Geçersiz metin: "${_issue.includes}" içermeli`;
        if (_issue.format === "regex")
          return `Geçersiz metin: ${_issue.pattern} desenine uymalı`;
        return `Geçersiz ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Geçersiz sayı: ${issue2.divisor} ile tam bölünebilmeli`;
      case "unrecognized_keys":
        return `Tanınmayan anahtar${issue2.keys.length > 1 ? "lar" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `${issue2.origin} içinde geçersiz anahtar`;
      case "invalid_union":
        return "Geçersiz değer";
      case "invalid_element":
        return `${issue2.origin} içinde geçersiz değer`;
      default:
        return `Geçersiz değer`;
    }
  };
};
function tr_default() {
  return {
    localeError: error34()
  };
}

// node_modules/zod/v4/locales/ua.js
var error35 = () => {
  const Sizable = {
    string: { unit: "символів", verb: "матиме" },
    file: { unit: "байтів", verb: "матиме" },
    array: { unit: "елементів", verb: "матиме" },
    set: { unit: "елементів", verb: "матиме" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "число";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "масив";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "вхідні дані",
    email: "адреса електронної пошти",
    url: "URL",
    emoji: "емодзі",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "дата та час ISO",
    date: "дата ISO",
    time: "час ISO",
    duration: "тривалість ISO",
    ipv4: "адреса IPv4",
    ipv6: "адреса IPv6",
    cidrv4: "діапазон IPv4",
    cidrv6: "діапазон IPv6",
    base64: "рядок у кодуванні base64",
    base64url: "рядок у кодуванні base64url",
    json_string: "рядок JSON",
    e164: "номер E.164",
    jwt: "JWT",
    template_literal: "вхідні дані"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Неправильні вхідні дані: очікується ${issue2.expected}, отримано ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Неправильні вхідні дані: очікується ${stringifyPrimitive(issue2.values[0])}`;
        return `Неправильна опція: очікується одне з ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Занадто велике: очікується, що ${issue2.origin ?? "значення"} ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "елементів"}`;
        return `Занадто велике: очікується, що ${issue2.origin ?? "значення"} буде ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Занадто мале: очікується, що ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Занадто мале: очікується, що ${issue2.origin} буде ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Неправильний рядок: повинен починатися з "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Неправильний рядок: повинен закінчуватися на "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Неправильний рядок: повинен містити "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Неправильний рядок: повинен відповідати шаблону ${_issue.pattern}`;
        return `Неправильний ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `Неправильне число: повинно бути кратним ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Нерозпізнаний ключ${issue2.keys.length > 1 ? "і" : ""}: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Неправильний ключ у ${issue2.origin}`;
      case "invalid_union":
        return "Неправильні вхідні дані";
      case "invalid_element":
        return `Неправильне значення у ${issue2.origin}`;
      default:
        return `Неправильні вхідні дані`;
    }
  };
};
function ua_default() {
  return {
    localeError: error35()
  };
}

// node_modules/zod/v4/locales/ur.js
var error36 = () => {
  const Sizable = {
    string: { unit: "حروف", verb: "ہونا" },
    file: { unit: "بائٹس", verb: "ہونا" },
    array: { unit: "آئٹمز", verb: "ہونا" },
    set: { unit: "آئٹمز", verb: "ہونا" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "نمبر";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "آرے";
        }
        if (data === null) {
          return "نل";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "ان پٹ",
    email: "ای میل ایڈریس",
    url: "یو آر ایل",
    emoji: "ایموجی",
    uuid: "یو یو آئی ڈی",
    uuidv4: "یو یو آئی ڈی وی 4",
    uuidv6: "یو یو آئی ڈی وی 6",
    nanoid: "نینو آئی ڈی",
    guid: "جی یو آئی ڈی",
    cuid: "سی یو آئی ڈی",
    cuid2: "سی یو آئی ڈی 2",
    ulid: "یو ایل آئی ڈی",
    xid: "ایکس آئی ڈی",
    ksuid: "کے ایس یو آئی ڈی",
    datetime: "آئی ایس او ڈیٹ ٹائم",
    date: "آئی ایس او تاریخ",
    time: "آئی ایس او وقت",
    duration: "آئی ایس او مدت",
    ipv4: "آئی پی وی 4 ایڈریس",
    ipv6: "آئی پی وی 6 ایڈریس",
    cidrv4: "آئی پی وی 4 رینج",
    cidrv6: "آئی پی وی 6 رینج",
    base64: "بیس 64 ان کوڈڈ سٹرنگ",
    base64url: "بیس 64 یو آر ایل ان کوڈڈ سٹرنگ",
    json_string: "جے ایس او این سٹرنگ",
    e164: "ای 164 نمبر",
    jwt: "جے ڈبلیو ٹی",
    template_literal: "ان پٹ"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `غلط ان پٹ: ${issue2.expected} متوقع تھا، ${parsedType4(issue2.input)} موصول ہوا`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `غلط ان پٹ: ${stringifyPrimitive(issue2.values[0])} متوقع تھا`;
        return `غلط آپشن: ${joinValues(issue2.values, "|")} میں سے ایک متوقع تھا`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `بہت بڑا: ${issue2.origin ?? "ویلیو"} کے ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "عناصر"} ہونے متوقع تھے`;
        return `بہت بڑا: ${issue2.origin ?? "ویلیو"} کا ${adj}${issue2.maximum.toString()} ہونا متوقع تھا`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `بہت چھوٹا: ${issue2.origin} کے ${adj}${issue2.minimum.toString()} ${sizing.unit} ہونے متوقع تھے`;
        }
        return `بہت چھوٹا: ${issue2.origin} کا ${adj}${issue2.minimum.toString()} ہونا متوقع تھا`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `غلط سٹرنگ: "${_issue.prefix}" سے شروع ہونا چاہیے`;
        }
        if (_issue.format === "ends_with")
          return `غلط سٹرنگ: "${_issue.suffix}" پر ختم ہونا چاہیے`;
        if (_issue.format === "includes")
          return `غلط سٹرنگ: "${_issue.includes}" شامل ہونا چاہیے`;
        if (_issue.format === "regex")
          return `غلط سٹرنگ: پیٹرن ${_issue.pattern} سے میچ ہونا چاہیے`;
        return `غلط ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `غلط نمبر: ${issue2.divisor} کا مضاعف ہونا چاہیے`;
      case "unrecognized_keys":
        return `غیر تسلیم شدہ کی${issue2.keys.length > 1 ? "ز" : ""}: ${joinValues(issue2.keys, "، ")}`;
      case "invalid_key":
        return `${issue2.origin} میں غلط کی`;
      case "invalid_union":
        return "غلط ان پٹ";
      case "invalid_element":
        return `${issue2.origin} میں غلط ویلیو`;
      default:
        return `غلط ان پٹ`;
    }
  };
};
function ur_default() {
  return {
    localeError: error36()
  };
}

// node_modules/zod/v4/locales/vi.js
var error37 = () => {
  const Sizable = {
    string: { unit: "ký tự", verb: "có" },
    file: { unit: "byte", verb: "có" },
    array: { unit: "phần tử", verb: "có" },
    set: { unit: "phần tử", verb: "có" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "số";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "mảng";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "đầu vào",
    email: "địa chỉ email",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ngày giờ ISO",
    date: "ngày ISO",
    time: "giờ ISO",
    duration: "khoảng thời gian ISO",
    ipv4: "địa chỉ IPv4",
    ipv6: "địa chỉ IPv6",
    cidrv4: "dải IPv4",
    cidrv6: "dải IPv6",
    base64: "chuỗi mã hóa base64",
    base64url: "chuỗi mã hóa base64url",
    json_string: "chuỗi JSON",
    e164: "số E.164",
    jwt: "JWT",
    template_literal: "đầu vào"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `Đầu vào không hợp lệ: mong đợi ${issue2.expected}, nhận được ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `Đầu vào không hợp lệ: mong đợi ${stringifyPrimitive(issue2.values[0])}`;
        return `Tùy chọn không hợp lệ: mong đợi một trong các giá trị ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `Quá lớn: mong đợi ${issue2.origin ?? "giá trị"} ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "phần tử"}`;
        return `Quá lớn: mong đợi ${issue2.origin ?? "giá trị"} ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `Quá nhỏ: mong đợi ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `Quá nhỏ: mong đợi ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `Chuỗi không hợp lệ: phải bắt đầu bằng "${_issue.prefix}"`;
        if (_issue.format === "ends_with")
          return `Chuỗi không hợp lệ: phải kết thúc bằng "${_issue.suffix}"`;
        if (_issue.format === "includes")
          return `Chuỗi không hợp lệ: phải bao gồm "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `Chuỗi không hợp lệ: phải khớp với mẫu ${_issue.pattern}`;
        return `${Nouns[_issue.format] ?? issue2.format} không hợp lệ`;
      }
      case "not_multiple_of":
        return `Số không hợp lệ: phải là bội số của ${issue2.divisor}`;
      case "unrecognized_keys":
        return `Khóa không được nhận dạng: ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `Khóa không hợp lệ trong ${issue2.origin}`;
      case "invalid_union":
        return "Đầu vào không hợp lệ";
      case "invalid_element":
        return `Giá trị không hợp lệ trong ${issue2.origin}`;
      default:
        return `Đầu vào không hợp lệ`;
    }
  };
};
function vi_default() {
  return {
    localeError: error37()
  };
}

// node_modules/zod/v4/locales/zh-CN.js
var error38 = () => {
  const Sizable = {
    string: { unit: "字符", verb: "包含" },
    file: { unit: "字节", verb: "包含" },
    array: { unit: "项", verb: "包含" },
    set: { unit: "项", verb: "包含" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "非数字(NaN)" : "数字";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "数组";
        }
        if (data === null) {
          return "空值(null)";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "输入",
    email: "电子邮件",
    url: "URL",
    emoji: "表情符号",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO日期时间",
    date: "ISO日期",
    time: "ISO时间",
    duration: "ISO时长",
    ipv4: "IPv4地址",
    ipv6: "IPv6地址",
    cidrv4: "IPv4网段",
    cidrv6: "IPv6网段",
    base64: "base64编码字符串",
    base64url: "base64url编码字符串",
    json_string: "JSON字符串",
    e164: "E.164号码",
    jwt: "JWT",
    template_literal: "输入"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `无效输入：期望 ${issue2.expected}，实际接收 ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `无效输入：期望 ${stringifyPrimitive(issue2.values[0])}`;
        return `无效选项：期望以下之一 ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `数值过大：期望 ${issue2.origin ?? "值"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "个元素"}`;
        return `数值过大：期望 ${issue2.origin ?? "值"} ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `数值过小：期望 ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `数值过小：期望 ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with")
          return `无效字符串：必须以 "${_issue.prefix}" 开头`;
        if (_issue.format === "ends_with")
          return `无效字符串：必须以 "${_issue.suffix}" 结尾`;
        if (_issue.format === "includes")
          return `无效字符串：必须包含 "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `无效字符串：必须满足正则表达式 ${_issue.pattern}`;
        return `无效${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `无效数字：必须是 ${issue2.divisor} 的倍数`;
      case "unrecognized_keys":
        return `出现未知的键(key): ${joinValues(issue2.keys, ", ")}`;
      case "invalid_key":
        return `${issue2.origin} 中的键(key)无效`;
      case "invalid_union":
        return "无效输入";
      case "invalid_element":
        return `${issue2.origin} 中包含无效值(value)`;
      default:
        return `无效输入`;
    }
  };
};
function zh_CN_default() {
  return {
    localeError: error38()
  };
}

// node_modules/zod/v4/locales/zh-TW.js
var error39 = () => {
  const Sizable = {
    string: { unit: "字元", verb: "擁有" },
    file: { unit: "位元組", verb: "擁有" },
    array: { unit: "項目", verb: "擁有" },
    set: { unit: "項目", verb: "擁有" }
  };
  function getSizing(origin) {
    return Sizable[origin] ?? null;
  }
  const parsedType4 = (data) => {
    const t = typeof data;
    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };
  const Nouns = {
    regex: "輸入",
    email: "郵件地址",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO 日期時間",
    date: "ISO 日期",
    time: "ISO 時間",
    duration: "ISO 期間",
    ipv4: "IPv4 位址",
    ipv6: "IPv6 位址",
    cidrv4: "IPv4 範圍",
    cidrv6: "IPv6 範圍",
    base64: "base64 編碼字串",
    base64url: "base64url 編碼字串",
    json_string: "JSON 字串",
    e164: "E.164 數值",
    jwt: "JWT",
    template_literal: "輸入"
  };
  return (issue2) => {
    switch (issue2.code) {
      case "invalid_type":
        return `無效的輸入值：預期為 ${issue2.expected}，但收到 ${parsedType4(issue2.input)}`;
      case "invalid_value":
        if (issue2.values.length === 1)
          return `無效的輸入值：預期為 ${stringifyPrimitive(issue2.values[0])}`;
        return `無效的選項：預期為以下其中之一 ${joinValues(issue2.values, "|")}`;
      case "too_big": {
        const adj = issue2.inclusive ? "<=" : "<";
        const sizing = getSizing(issue2.origin);
        if (sizing)
          return `數值過大：預期 ${issue2.origin ?? "值"} 應為 ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "個元素"}`;
        return `數值過大：預期 ${issue2.origin ?? "值"} 應為 ${adj}${issue2.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue2.inclusive ? ">=" : ">";
        const sizing = getSizing(issue2.origin);
        if (sizing) {
          return `數值過小：預期 ${issue2.origin} 應為 ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
        }
        return `數值過小：預期 ${issue2.origin} 應為 ${adj}${issue2.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue2;
        if (_issue.format === "starts_with") {
          return `無效的字串：必須以 "${_issue.prefix}" 開頭`;
        }
        if (_issue.format === "ends_with")
          return `無效的字串：必須以 "${_issue.suffix}" 結尾`;
        if (_issue.format === "includes")
          return `無效的字串：必須包含 "${_issue.includes}"`;
        if (_issue.format === "regex")
          return `無效的字串：必須符合格式 ${_issue.pattern}`;
        return `無效的 ${Nouns[_issue.format] ?? issue2.format}`;
      }
      case "not_multiple_of":
        return `無效的數字：必須為 ${issue2.divisor} 的倍數`;
      case "unrecognized_keys":
        return `無法識別的鍵值${issue2.keys.length > 1 ? "們" : ""}：${joinValues(issue2.keys, "、")}`;
      case "invalid_key":
        return `${issue2.origin} 中有無效的鍵值`;
      case "invalid_union":
        return "無效的輸入值";
      case "invalid_element":
        return `${issue2.origin} 中有無效的值`;
      default:
        return `無效的輸入值`;
    }
  };
};
function zh_TW_default() {
  return {
    localeError: error39()
  };
}

// node_modules/zod/v4/core/registries.js
var $output = Symbol("ZodOutput");
var $input = Symbol("ZodInput");
var $ZodRegistry = class {
  constructor() {
    this._map = /* @__PURE__ */ new Map();
    this._idmap = /* @__PURE__ */ new Map();
  }
  add(schema, ..._meta) {
    const meta = _meta[0];
    this._map.set(schema, meta);
    if (meta && typeof meta === "object" && "id" in meta) {
      if (this._idmap.has(meta.id)) {
        throw new Error(`ID ${meta.id} already exists in the registry`);
      }
      this._idmap.set(meta.id, schema);
    }
    return this;
  }
  clear() {
    this._map = /* @__PURE__ */ new Map();
    this._idmap = /* @__PURE__ */ new Map();
    return this;
  }
  remove(schema) {
    const meta = this._map.get(schema);
    if (meta && typeof meta === "object" && "id" in meta) {
      this._idmap.delete(meta.id);
    }
    this._map.delete(schema);
    return this;
  }
  get(schema) {
    const p = schema._zod.parent;
    if (p) {
      const pm = { ...this.get(p) ?? {} };
      delete pm.id;
      return { ...pm, ...this._map.get(schema) };
    }
    return this._map.get(schema);
  }
  has(schema) {
    return this._map.has(schema);
  }
};
function registry() {
  return new $ZodRegistry();
}
var globalRegistry = registry();

// node_modules/zod/v4/core/api.js
function _string(Class2, params) {
  return new Class2({
    type: "string",
    ...normalizeParams(params)
  });
}
function _coercedString(Class2, params) {
  return new Class2({
    type: "string",
    coerce: true,
    ...normalizeParams(params)
  });
}
function _email(Class2, params) {
  return new Class2({
    type: "string",
    format: "email",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _guid(Class2, params) {
  return new Class2({
    type: "string",
    format: "guid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _uuid(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _uuidv4(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    version: "v4",
    ...normalizeParams(params)
  });
}
function _uuidv6(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    version: "v6",
    ...normalizeParams(params)
  });
}
function _uuidv7(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    version: "v7",
    ...normalizeParams(params)
  });
}
function _url(Class2, params) {
  return new Class2({
    type: "string",
    format: "url",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _emoji2(Class2, params) {
  return new Class2({
    type: "string",
    format: "emoji",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _nanoid(Class2, params) {
  return new Class2({
    type: "string",
    format: "nanoid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _cuid(Class2, params) {
  return new Class2({
    type: "string",
    format: "cuid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _cuid2(Class2, params) {
  return new Class2({
    type: "string",
    format: "cuid2",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _ulid(Class2, params) {
  return new Class2({
    type: "string",
    format: "ulid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _xid(Class2, params) {
  return new Class2({
    type: "string",
    format: "xid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _ksuid(Class2, params) {
  return new Class2({
    type: "string",
    format: "ksuid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _ipv4(Class2, params) {
  return new Class2({
    type: "string",
    format: "ipv4",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _ipv6(Class2, params) {
  return new Class2({
    type: "string",
    format: "ipv6",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _cidrv4(Class2, params) {
  return new Class2({
    type: "string",
    format: "cidrv4",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _cidrv6(Class2, params) {
  return new Class2({
    type: "string",
    format: "cidrv6",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _base64(Class2, params) {
  return new Class2({
    type: "string",
    format: "base64",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _base64url(Class2, params) {
  return new Class2({
    type: "string",
    format: "base64url",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _e164(Class2, params) {
  return new Class2({
    type: "string",
    format: "e164",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _jwt(Class2, params) {
  return new Class2({
    type: "string",
    format: "jwt",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
var TimePrecision = {
  Any: null,
  Minute: -1,
  Second: 0,
  Millisecond: 3,
  Microsecond: 6
};
function _isoDateTime(Class2, params) {
  return new Class2({
    type: "string",
    format: "datetime",
    check: "string_format",
    offset: false,
    local: false,
    precision: null,
    ...normalizeParams(params)
  });
}
function _isoDate(Class2, params) {
  return new Class2({
    type: "string",
    format: "date",
    check: "string_format",
    ...normalizeParams(params)
  });
}
function _isoTime(Class2, params) {
  return new Class2({
    type: "string",
    format: "time",
    check: "string_format",
    precision: null,
    ...normalizeParams(params)
  });
}
function _isoDuration(Class2, params) {
  return new Class2({
    type: "string",
    format: "duration",
    check: "string_format",
    ...normalizeParams(params)
  });
}
function _number(Class2, params) {
  return new Class2({
    type: "number",
    checks: [],
    ...normalizeParams(params)
  });
}
function _coercedNumber(Class2, params) {
  return new Class2({
    type: "number",
    coerce: true,
    checks: [],
    ...normalizeParams(params)
  });
}
function _int(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "safeint",
    ...normalizeParams(params)
  });
}
function _float32(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "float32",
    ...normalizeParams(params)
  });
}
function _float64(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "float64",
    ...normalizeParams(params)
  });
}
function _int32(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "int32",
    ...normalizeParams(params)
  });
}
function _uint32(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "uint32",
    ...normalizeParams(params)
  });
}
function _boolean(Class2, params) {
  return new Class2({
    type: "boolean",
    ...normalizeParams(params)
  });
}
function _coercedBoolean(Class2, params) {
  return new Class2({
    type: "boolean",
    coerce: true,
    ...normalizeParams(params)
  });
}
function _bigint(Class2, params) {
  return new Class2({
    type: "bigint",
    ...normalizeParams(params)
  });
}
function _coercedBigint(Class2, params) {
  return new Class2({
    type: "bigint",
    coerce: true,
    ...normalizeParams(params)
  });
}
function _int64(Class2, params) {
  return new Class2({
    type: "bigint",
    check: "bigint_format",
    abort: false,
    format: "int64",
    ...normalizeParams(params)
  });
}
function _uint64(Class2, params) {
  return new Class2({
    type: "bigint",
    check: "bigint_format",
    abort: false,
    format: "uint64",
    ...normalizeParams(params)
  });
}
function _symbol(Class2, params) {
  return new Class2({
    type: "symbol",
    ...normalizeParams(params)
  });
}
function _undefined2(Class2, params) {
  return new Class2({
    type: "undefined",
    ...normalizeParams(params)
  });
}
function _null2(Class2, params) {
  return new Class2({
    type: "null",
    ...normalizeParams(params)
  });
}
function _any(Class2) {
  return new Class2({
    type: "any"
  });
}
function _unknown(Class2) {
  return new Class2({
    type: "unknown"
  });
}
function _never(Class2, params) {
  return new Class2({
    type: "never",
    ...normalizeParams(params)
  });
}
function _void(Class2, params) {
  return new Class2({
    type: "void",
    ...normalizeParams(params)
  });
}
function _date(Class2, params) {
  return new Class2({
    type: "date",
    ...normalizeParams(params)
  });
}
function _coercedDate(Class2, params) {
  return new Class2({
    type: "date",
    coerce: true,
    ...normalizeParams(params)
  });
}
function _nan(Class2, params) {
  return new Class2({
    type: "nan",
    ...normalizeParams(params)
  });
}
function _lt(value, params) {
  return new $ZodCheckLessThan({
    check: "less_than",
    ...normalizeParams(params),
    value,
    inclusive: false
  });
}
function _lte(value, params) {
  return new $ZodCheckLessThan({
    check: "less_than",
    ...normalizeParams(params),
    value,
    inclusive: true
  });
}
function _gt(value, params) {
  return new $ZodCheckGreaterThan({
    check: "greater_than",
    ...normalizeParams(params),
    value,
    inclusive: false
  });
}
function _gte(value, params) {
  return new $ZodCheckGreaterThan({
    check: "greater_than",
    ...normalizeParams(params),
    value,
    inclusive: true
  });
}
function _positive(params) {
  return _gt(0, params);
}
function _negative(params) {
  return _lt(0, params);
}
function _nonpositive(params) {
  return _lte(0, params);
}
function _nonnegative(params) {
  return _gte(0, params);
}
function _multipleOf(value, params) {
  return new $ZodCheckMultipleOf({
    check: "multiple_of",
    ...normalizeParams(params),
    value
  });
}
function _maxSize(maximum, params) {
  return new $ZodCheckMaxSize({
    check: "max_size",
    ...normalizeParams(params),
    maximum
  });
}
function _minSize(minimum, params) {
  return new $ZodCheckMinSize({
    check: "min_size",
    ...normalizeParams(params),
    minimum
  });
}
function _size(size, params) {
  return new $ZodCheckSizeEquals({
    check: "size_equals",
    ...normalizeParams(params),
    size
  });
}
function _maxLength(maximum, params) {
  const ch = new $ZodCheckMaxLength({
    check: "max_length",
    ...normalizeParams(params),
    maximum
  });
  return ch;
}
function _minLength(minimum, params) {
  return new $ZodCheckMinLength({
    check: "min_length",
    ...normalizeParams(params),
    minimum
  });
}
function _length(length, params) {
  return new $ZodCheckLengthEquals({
    check: "length_equals",
    ...normalizeParams(params),
    length
  });
}
function _regex(pattern, params) {
  return new $ZodCheckRegex({
    check: "string_format",
    format: "regex",
    ...normalizeParams(params),
    pattern
  });
}
function _lowercase(params) {
  return new $ZodCheckLowerCase({
    check: "string_format",
    format: "lowercase",
    ...normalizeParams(params)
  });
}
function _uppercase(params) {
  return new $ZodCheckUpperCase({
    check: "string_format",
    format: "uppercase",
    ...normalizeParams(params)
  });
}
function _includes(includes, params) {
  return new $ZodCheckIncludes({
    check: "string_format",
    format: "includes",
    ...normalizeParams(params),
    includes
  });
}
function _startsWith(prefix, params) {
  return new $ZodCheckStartsWith({
    check: "string_format",
    format: "starts_with",
    ...normalizeParams(params),
    prefix
  });
}
function _endsWith(suffix, params) {
  return new $ZodCheckEndsWith({
    check: "string_format",
    format: "ends_with",
    ...normalizeParams(params),
    suffix
  });
}
function _property(property, schema, params) {
  return new $ZodCheckProperty({
    check: "property",
    property,
    schema,
    ...normalizeParams(params)
  });
}
function _mime(types, params) {
  return new $ZodCheckMimeType({
    check: "mime_type",
    mime: types,
    ...normalizeParams(params)
  });
}
function _overwrite(tx) {
  return new $ZodCheckOverwrite({
    check: "overwrite",
    tx
  });
}
function _normalize(form) {
  return _overwrite((input) => input.normalize(form));
}
function _trim() {
  return _overwrite((input) => input.trim());
}
function _toLowerCase() {
  return _overwrite((input) => input.toLowerCase());
}
function _toUpperCase() {
  return _overwrite((input) => input.toUpperCase());
}
function _array(Class2, element, params) {
  return new Class2({
    type: "array",
    element,
    // get element() {
    //   return element;
    // },
    ...normalizeParams(params)
  });
}
function _union(Class2, options, params) {
  return new Class2({
    type: "union",
    options,
    ...normalizeParams(params)
  });
}
function _discriminatedUnion(Class2, discriminator, options, params) {
  return new Class2({
    type: "union",
    options,
    discriminator,
    ...normalizeParams(params)
  });
}
function _intersection(Class2, left, right) {
  return new Class2({
    type: "intersection",
    left,
    right
  });
}
function _tuple(Class2, items, _paramsOrRest, _params) {
  const hasRest = _paramsOrRest instanceof $ZodType;
  const params = hasRest ? _params : _paramsOrRest;
  const rest = hasRest ? _paramsOrRest : null;
  return new Class2({
    type: "tuple",
    items,
    rest,
    ...normalizeParams(params)
  });
}
function _record(Class2, keyType, valueType, params) {
  return new Class2({
    type: "record",
    keyType,
    valueType,
    ...normalizeParams(params)
  });
}
function _map(Class2, keyType, valueType, params) {
  return new Class2({
    type: "map",
    keyType,
    valueType,
    ...normalizeParams(params)
  });
}
function _set(Class2, valueType, params) {
  return new Class2({
    type: "set",
    valueType,
    ...normalizeParams(params)
  });
}
function _enum(Class2, values, params) {
  const entries = Array.isArray(values) ? Object.fromEntries(values.map((v) => [v, v])) : values;
  return new Class2({
    type: "enum",
    entries,
    ...normalizeParams(params)
  });
}
function _nativeEnum(Class2, entries, params) {
  return new Class2({
    type: "enum",
    entries,
    ...normalizeParams(params)
  });
}
function _literal(Class2, value, params) {
  return new Class2({
    type: "literal",
    values: Array.isArray(value) ? value : [value],
    ...normalizeParams(params)
  });
}
function _file(Class2, params) {
  return new Class2({
    type: "file",
    ...normalizeParams(params)
  });
}
function _transform(Class2, fn) {
  return new Class2({
    type: "transform",
    transform: fn
  });
}
function _optional(Class2, innerType) {
  return new Class2({
    type: "optional",
    innerType
  });
}
function _nullable(Class2, innerType) {
  return new Class2({
    type: "nullable",
    innerType
  });
}
function _default(Class2, innerType, defaultValue) {
  return new Class2({
    type: "default",
    innerType,
    get defaultValue() {
      return typeof defaultValue === "function" ? defaultValue() : defaultValue;
    }
  });
}
function _nonoptional(Class2, innerType, params) {
  return new Class2({
    type: "nonoptional",
    innerType,
    ...normalizeParams(params)
  });
}
function _success(Class2, innerType) {
  return new Class2({
    type: "success",
    innerType
  });
}
function _catch(Class2, innerType, catchValue) {
  return new Class2({
    type: "catch",
    innerType,
    catchValue: typeof catchValue === "function" ? catchValue : () => catchValue
  });
}
function _pipe(Class2, in_, out) {
  return new Class2({
    type: "pipe",
    in: in_,
    out
  });
}
function _readonly(Class2, innerType) {
  return new Class2({
    type: "readonly",
    innerType
  });
}
function _templateLiteral(Class2, parts, params) {
  return new Class2({
    type: "template_literal",
    parts,
    ...normalizeParams(params)
  });
}
function _lazy(Class2, getter) {
  return new Class2({
    type: "lazy",
    getter
  });
}
function _promise(Class2, innerType) {
  return new Class2({
    type: "promise",
    innerType
  });
}
function _custom(Class2, fn, _params) {
  const norm = normalizeParams(_params);
  norm.abort ?? (norm.abort = true);
  const schema = new Class2({
    type: "custom",
    check: "custom",
    fn,
    ...norm
  });
  return schema;
}
function _refine(Class2, fn, _params) {
  const schema = new Class2({
    type: "custom",
    check: "custom",
    fn,
    ...normalizeParams(_params)
  });
  return schema;
}
function _stringbool(Classes, _params) {
  const params = normalizeParams(_params);
  let truthyArray = params.truthy ?? ["true", "1", "yes", "on", "y", "enabled"];
  let falsyArray = params.falsy ?? ["false", "0", "no", "off", "n", "disabled"];
  if (params.case !== "sensitive") {
    truthyArray = truthyArray.map((v) => typeof v === "string" ? v.toLowerCase() : v);
    falsyArray = falsyArray.map((v) => typeof v === "string" ? v.toLowerCase() : v);
  }
  const truthySet = new Set(truthyArray);
  const falsySet = new Set(falsyArray);
  const _Pipe = Classes.Pipe ?? $ZodPipe;
  const _Boolean = Classes.Boolean ?? $ZodBoolean;
  const _String = Classes.String ?? $ZodString;
  const _Transform = Classes.Transform ?? $ZodTransform;
  const tx = new _Transform({
    type: "transform",
    transform: (input, payload) => {
      let data = input;
      if (params.case !== "sensitive")
        data = data.toLowerCase();
      if (truthySet.has(data)) {
        return true;
      } else if (falsySet.has(data)) {
        return false;
      } else {
        payload.issues.push({
          code: "invalid_value",
          expected: "stringbool",
          values: [...truthySet, ...falsySet],
          input: payload.value,
          inst: tx
        });
        return {};
      }
    },
    error: params.error
  });
  const innerPipe = new _Pipe({
    type: "pipe",
    in: new _String({ type: "string", error: params.error }),
    out: tx,
    error: params.error
  });
  const outerPipe = new _Pipe({
    type: "pipe",
    in: innerPipe,
    out: new _Boolean({
      type: "boolean",
      error: params.error
    }),
    error: params.error
  });
  return outerPipe;
}
function _stringFormat(Class2, format, fnOrRegex, _params = {}) {
  const params = normalizeParams(_params);
  const def = {
    ...normalizeParams(_params),
    check: "string_format",
    type: "string",
    format,
    fn: typeof fnOrRegex === "function" ? fnOrRegex : (val) => fnOrRegex.test(val),
    ...params
  };
  if (fnOrRegex instanceof RegExp) {
    def.pattern = fnOrRegex;
  }
  const inst = new Class2(def);
  return inst;
}

// node_modules/zod/v4/core/function.js
var $ZodFunction = class {
  constructor(def) {
    this._def = def;
    this.def = def;
  }
  implement(func) {
    if (typeof func !== "function") {
      throw new Error("implement() must be called with a function");
    }
    const impl = (...args) => {
      const parsedArgs = this._def.input ? parse(this._def.input, args, void 0, { callee: impl }) : args;
      if (!Array.isArray(parsedArgs)) {
        throw new Error("Invalid arguments schema: not an array or tuple schema.");
      }
      const output = func(...parsedArgs);
      return this._def.output ? parse(this._def.output, output, void 0, { callee: impl }) : output;
    };
    return impl;
  }
  implementAsync(func) {
    if (typeof func !== "function") {
      throw new Error("implement() must be called with a function");
    }
    const impl = async (...args) => {
      const parsedArgs = this._def.input ? await parseAsync(this._def.input, args, void 0, { callee: impl }) : args;
      if (!Array.isArray(parsedArgs)) {
        throw new Error("Invalid arguments schema: not an array or tuple schema.");
      }
      const output = await func(...parsedArgs);
      return this._def.output ? parseAsync(this._def.output, output, void 0, { callee: impl }) : output;
    };
    return impl;
  }
  input(...args) {
    const F = this.constructor;
    if (Array.isArray(args[0])) {
      return new F({
        type: "function",
        input: new $ZodTuple({
          type: "tuple",
          items: args[0],
          rest: args[1]
        }),
        output: this._def.output
      });
    }
    return new F({
      type: "function",
      input: args[0],
      output: this._def.output
    });
  }
  output(output) {
    const F = this.constructor;
    return new F({
      type: "function",
      input: this._def.input,
      output
    });
  }
};
function _function(params) {
  return new $ZodFunction({
    type: "function",
    input: Array.isArray(params == null ? void 0 : params.input) ? _tuple($ZodTuple, params == null ? void 0 : params.input) : (params == null ? void 0 : params.input) ?? _array($ZodArray, _unknown($ZodUnknown)),
    output: (params == null ? void 0 : params.output) ?? _unknown($ZodUnknown)
  });
}

// node_modules/zod/v4/core/to-json-schema.js
var JSONSchemaGenerator = class {
  constructor(params) {
    this.counter = 0;
    this.metadataRegistry = (params == null ? void 0 : params.metadata) ?? globalRegistry;
    this.target = (params == null ? void 0 : params.target) ?? "draft-2020-12";
    this.unrepresentable = (params == null ? void 0 : params.unrepresentable) ?? "throw";
    this.override = (params == null ? void 0 : params.override) ?? (() => {
    });
    this.io = (params == null ? void 0 : params.io) ?? "output";
    this.seen = /* @__PURE__ */ new Map();
  }
  process(schema, _params = { path: [], schemaPath: [] }) {
    var _a2, _b, _c;
    var _a;
    const def = schema._zod.def;
    const formatMap = {
      guid: "uuid",
      url: "uri",
      datetime: "date-time",
      json_string: "json-string",
      regex: ""
      // do not set
    };
    const seen = this.seen.get(schema);
    if (seen) {
      seen.count++;
      const isCycle = _params.schemaPath.includes(schema);
      if (isCycle) {
        seen.cycle = _params.path;
      }
      return seen.schema;
    }
    const result = { schema: {}, count: 1, cycle: void 0, path: _params.path };
    this.seen.set(schema, result);
    const overrideSchema = (_b = (_a2 = schema._zod).toJSONSchema) == null ? void 0 : _b.call(_a2);
    if (overrideSchema) {
      result.schema = overrideSchema;
    } else {
      const params = {
        ..._params,
        schemaPath: [..._params.schemaPath, schema],
        path: _params.path
      };
      const parent = schema._zod.parent;
      if (parent) {
        result.ref = parent;
        this.process(parent, params);
        this.seen.get(parent).isParent = true;
      } else {
        const _json = result.schema;
        switch (def.type) {
          case "string": {
            const json2 = _json;
            json2.type = "string";
            const { minimum, maximum, format, patterns, contentEncoding } = schema._zod.bag;
            if (typeof minimum === "number")
              json2.minLength = minimum;
            if (typeof maximum === "number")
              json2.maxLength = maximum;
            if (format) {
              json2.format = formatMap[format] ?? format;
              if (json2.format === "")
                delete json2.format;
            }
            if (contentEncoding)
              json2.contentEncoding = contentEncoding;
            if (patterns && patterns.size > 0) {
              const regexes = [...patterns];
              if (regexes.length === 1)
                json2.pattern = regexes[0].source;
              else if (regexes.length > 1) {
                result.schema.allOf = [
                  ...regexes.map((regex) => ({
                    ...this.target === "draft-7" ? { type: "string" } : {},
                    pattern: regex.source
                  }))
                ];
              }
            }
            break;
          }
          case "number": {
            const json2 = _json;
            const { minimum, maximum, format, multipleOf, exclusiveMaximum, exclusiveMinimum } = schema._zod.bag;
            if (typeof format === "string" && format.includes("int"))
              json2.type = "integer";
            else
              json2.type = "number";
            if (typeof exclusiveMinimum === "number")
              json2.exclusiveMinimum = exclusiveMinimum;
            if (typeof minimum === "number") {
              json2.minimum = minimum;
              if (typeof exclusiveMinimum === "number") {
                if (exclusiveMinimum >= minimum)
                  delete json2.minimum;
                else
                  delete json2.exclusiveMinimum;
              }
            }
            if (typeof exclusiveMaximum === "number")
              json2.exclusiveMaximum = exclusiveMaximum;
            if (typeof maximum === "number") {
              json2.maximum = maximum;
              if (typeof exclusiveMaximum === "number") {
                if (exclusiveMaximum <= maximum)
                  delete json2.maximum;
                else
                  delete json2.exclusiveMaximum;
              }
            }
            if (typeof multipleOf === "number")
              json2.multipleOf = multipleOf;
            break;
          }
          case "boolean": {
            const json2 = _json;
            json2.type = "boolean";
            break;
          }
          case "bigint": {
            if (this.unrepresentable === "throw") {
              throw new Error("BigInt cannot be represented in JSON Schema");
            }
            break;
          }
          case "symbol": {
            if (this.unrepresentable === "throw") {
              throw new Error("Symbols cannot be represented in JSON Schema");
            }
            break;
          }
          case "null": {
            _json.type = "null";
            break;
          }
          case "any": {
            break;
          }
          case "unknown": {
            break;
          }
          case "undefined": {
            if (this.unrepresentable === "throw") {
              throw new Error("Undefined cannot be represented in JSON Schema");
            }
            break;
          }
          case "void": {
            if (this.unrepresentable === "throw") {
              throw new Error("Void cannot be represented in JSON Schema");
            }
            break;
          }
          case "never": {
            _json.not = {};
            break;
          }
          case "date": {
            if (this.unrepresentable === "throw") {
              throw new Error("Date cannot be represented in JSON Schema");
            }
            break;
          }
          case "array": {
            const json2 = _json;
            const { minimum, maximum } = schema._zod.bag;
            if (typeof minimum === "number")
              json2.minItems = minimum;
            if (typeof maximum === "number")
              json2.maxItems = maximum;
            json2.type = "array";
            json2.items = this.process(def.element, { ...params, path: [...params.path, "items"] });
            break;
          }
          case "object": {
            const json2 = _json;
            json2.type = "object";
            json2.properties = {};
            const shape = def.shape;
            for (const key in shape) {
              json2.properties[key] = this.process(shape[key], {
                ...params,
                path: [...params.path, "properties", key]
              });
            }
            const allKeys = new Set(Object.keys(shape));
            const requiredKeys = new Set([...allKeys].filter((key) => {
              const v = def.shape[key]._zod;
              if (this.io === "input") {
                return v.optin === void 0;
              } else {
                return v.optout === void 0;
              }
            }));
            if (requiredKeys.size > 0) {
              json2.required = Array.from(requiredKeys);
            }
            if (((_c = def.catchall) == null ? void 0 : _c._zod.def.type) === "never") {
              json2.additionalProperties = false;
            } else if (!def.catchall) {
              if (this.io === "output")
                json2.additionalProperties = false;
            } else if (def.catchall) {
              json2.additionalProperties = this.process(def.catchall, {
                ...params,
                path: [...params.path, "additionalProperties"]
              });
            }
            break;
          }
          case "union": {
            const json2 = _json;
            json2.anyOf = def.options.map((x, i) => this.process(x, {
              ...params,
              path: [...params.path, "anyOf", i]
            }));
            break;
          }
          case "intersection": {
            const json2 = _json;
            const a = this.process(def.left, {
              ...params,
              path: [...params.path, "allOf", 0]
            });
            const b = this.process(def.right, {
              ...params,
              path: [...params.path, "allOf", 1]
            });
            const isSimpleIntersection = (val) => "allOf" in val && Object.keys(val).length === 1;
            const allOf = [
              ...isSimpleIntersection(a) ? a.allOf : [a],
              ...isSimpleIntersection(b) ? b.allOf : [b]
            ];
            json2.allOf = allOf;
            break;
          }
          case "tuple": {
            const json2 = _json;
            json2.type = "array";
            const prefixItems = def.items.map((x, i) => this.process(x, { ...params, path: [...params.path, "prefixItems", i] }));
            if (this.target === "draft-2020-12") {
              json2.prefixItems = prefixItems;
            } else {
              json2.items = prefixItems;
            }
            if (def.rest) {
              const rest = this.process(def.rest, {
                ...params,
                path: [...params.path, "items"]
              });
              if (this.target === "draft-2020-12") {
                json2.items = rest;
              } else {
                json2.additionalItems = rest;
              }
            }
            if (def.rest) {
              json2.items = this.process(def.rest, {
                ...params,
                path: [...params.path, "items"]
              });
            }
            const { minimum, maximum } = schema._zod.bag;
            if (typeof minimum === "number")
              json2.minItems = minimum;
            if (typeof maximum === "number")
              json2.maxItems = maximum;
            break;
          }
          case "record": {
            const json2 = _json;
            json2.type = "object";
            json2.propertyNames = this.process(def.keyType, { ...params, path: [...params.path, "propertyNames"] });
            json2.additionalProperties = this.process(def.valueType, {
              ...params,
              path: [...params.path, "additionalProperties"]
            });
            break;
          }
          case "map": {
            if (this.unrepresentable === "throw") {
              throw new Error("Map cannot be represented in JSON Schema");
            }
            break;
          }
          case "set": {
            if (this.unrepresentable === "throw") {
              throw new Error("Set cannot be represented in JSON Schema");
            }
            break;
          }
          case "enum": {
            const json2 = _json;
            const values = getEnumValues(def.entries);
            if (values.every((v) => typeof v === "number"))
              json2.type = "number";
            if (values.every((v) => typeof v === "string"))
              json2.type = "string";
            json2.enum = values;
            break;
          }
          case "literal": {
            const json2 = _json;
            const vals = [];
            for (const val of def.values) {
              if (val === void 0) {
                if (this.unrepresentable === "throw") {
                  throw new Error("Literal `undefined` cannot be represented in JSON Schema");
                } else {
                }
              } else if (typeof val === "bigint") {
                if (this.unrepresentable === "throw") {
                  throw new Error("BigInt literals cannot be represented in JSON Schema");
                } else {
                  vals.push(Number(val));
                }
              } else {
                vals.push(val);
              }
            }
            if (vals.length === 0) {
            } else if (vals.length === 1) {
              const val = vals[0];
              json2.type = val === null ? "null" : typeof val;
              json2.const = val;
            } else {
              if (vals.every((v) => typeof v === "number"))
                json2.type = "number";
              if (vals.every((v) => typeof v === "string"))
                json2.type = "string";
              if (vals.every((v) => typeof v === "boolean"))
                json2.type = "string";
              if (vals.every((v) => v === null))
                json2.type = "null";
              json2.enum = vals;
            }
            break;
          }
          case "file": {
            const json2 = _json;
            const file2 = {
              type: "string",
              format: "binary",
              contentEncoding: "binary"
            };
            const { minimum, maximum, mime } = schema._zod.bag;
            if (minimum !== void 0)
              file2.minLength = minimum;
            if (maximum !== void 0)
              file2.maxLength = maximum;
            if (mime) {
              if (mime.length === 1) {
                file2.contentMediaType = mime[0];
                Object.assign(json2, file2);
              } else {
                json2.anyOf = mime.map((m) => {
                  const mFile = { ...file2, contentMediaType: m };
                  return mFile;
                });
              }
            } else {
              Object.assign(json2, file2);
            }
            break;
          }
          case "transform": {
            if (this.unrepresentable === "throw") {
              throw new Error("Transforms cannot be represented in JSON Schema");
            }
            break;
          }
          case "nullable": {
            const inner = this.process(def.innerType, params);
            _json.anyOf = [inner, { type: "null" }];
            break;
          }
          case "nonoptional": {
            this.process(def.innerType, params);
            result.ref = def.innerType;
            break;
          }
          case "success": {
            const json2 = _json;
            json2.type = "boolean";
            break;
          }
          case "default": {
            this.process(def.innerType, params);
            result.ref = def.innerType;
            _json.default = JSON.parse(JSON.stringify(def.defaultValue));
            break;
          }
          case "prefault": {
            this.process(def.innerType, params);
            result.ref = def.innerType;
            if (this.io === "input")
              _json._prefault = JSON.parse(JSON.stringify(def.defaultValue));
            break;
          }
          case "catch": {
            this.process(def.innerType, params);
            result.ref = def.innerType;
            let catchValue;
            try {
              catchValue = def.catchValue(void 0);
            } catch {
              throw new Error("Dynamic catch values are not supported in JSON Schema");
            }
            _json.default = catchValue;
            break;
          }
          case "nan": {
            if (this.unrepresentable === "throw") {
              throw new Error("NaN cannot be represented in JSON Schema");
            }
            break;
          }
          case "template_literal": {
            const json2 = _json;
            const pattern = schema._zod.pattern;
            if (!pattern)
              throw new Error("Pattern not found in template literal");
            json2.type = "string";
            json2.pattern = pattern.source;
            break;
          }
          case "pipe": {
            const innerType = this.io === "input" ? def.in._zod.def.type === "transform" ? def.out : def.in : def.out;
            this.process(innerType, params);
            result.ref = innerType;
            break;
          }
          case "readonly": {
            this.process(def.innerType, params);
            result.ref = def.innerType;
            _json.readOnly = true;
            break;
          }
          case "promise": {
            this.process(def.innerType, params);
            result.ref = def.innerType;
            break;
          }
          case "optional": {
            this.process(def.innerType, params);
            result.ref = def.innerType;
            break;
          }
          case "lazy": {
            const innerType = schema._zod.innerType;
            this.process(innerType, params);
            result.ref = innerType;
            break;
          }
          case "custom": {
            if (this.unrepresentable === "throw") {
              throw new Error("Custom types cannot be represented in JSON Schema");
            }
            break;
          }
          default: {
            def;
          }
        }
      }
    }
    const meta = this.metadataRegistry.get(schema);
    if (meta)
      Object.assign(result.schema, meta);
    if (this.io === "input" && isTransforming(schema)) {
      delete result.schema.examples;
      delete result.schema.default;
    }
    if (this.io === "input" && result.schema._prefault)
      (_a = result.schema).default ?? (_a.default = result.schema._prefault);
    delete result.schema._prefault;
    const _result = this.seen.get(schema);
    return _result.schema;
  }
  emit(schema, _params) {
    var _a, _b, _c, _d, _e, _f;
    const params = {
      cycles: (_params == null ? void 0 : _params.cycles) ?? "ref",
      reused: (_params == null ? void 0 : _params.reused) ?? "inline",
      // unrepresentable: _params?.unrepresentable ?? "throw",
      // uri: _params?.uri ?? ((id) => `${id}`),
      external: (_params == null ? void 0 : _params.external) ?? void 0
    };
    const root = this.seen.get(schema);
    if (!root)
      throw new Error("Unprocessed schema. This is a bug in Zod.");
    const makeURI = (entry) => {
      var _a2;
      const defsSegment = this.target === "draft-2020-12" ? "$defs" : "definitions";
      if (params.external) {
        const externalId = (_a2 = params.external.registry.get(entry[0])) == null ? void 0 : _a2.id;
        const uriGenerator = params.external.uri ?? ((id2) => id2);
        if (externalId) {
          return { ref: uriGenerator(externalId) };
        }
        const id = entry[1].defId ?? entry[1].schema.id ?? `schema${this.counter++}`;
        entry[1].defId = id;
        return { defId: id, ref: `${uriGenerator("__shared")}#/${defsSegment}/${id}` };
      }
      if (entry[1] === root) {
        return { ref: "#" };
      }
      const uriPrefix = `#`;
      const defUriPrefix = `${uriPrefix}/${defsSegment}/`;
      const defId = entry[1].schema.id ?? `__schema${this.counter++}`;
      return { defId, ref: defUriPrefix + defId };
    };
    const extractToDef = (entry) => {
      if (entry[1].schema.$ref) {
        return;
      }
      const seen = entry[1];
      const { ref, defId } = makeURI(entry);
      seen.def = { ...seen.schema };
      if (defId)
        seen.defId = defId;
      const schema2 = seen.schema;
      for (const key in schema2) {
        delete schema2[key];
      }
      schema2.$ref = ref;
    };
    if (params.cycles === "throw") {
      for (const entry of this.seen.entries()) {
        const seen = entry[1];
        if (seen.cycle) {
          throw new Error(`Cycle detected: #/${(_a = seen.cycle) == null ? void 0 : _a.join("/")}/<root>

Set the \`cycles\` parameter to \`"ref"\` to resolve cyclical schemas with defs.`);
        }
      }
    }
    for (const entry of this.seen.entries()) {
      const seen = entry[1];
      if (schema === entry[0]) {
        extractToDef(entry);
        continue;
      }
      if (params.external) {
        const ext = (_b = params.external.registry.get(entry[0])) == null ? void 0 : _b.id;
        if (schema !== entry[0] && ext) {
          extractToDef(entry);
          continue;
        }
      }
      const id = (_c = this.metadataRegistry.get(entry[0])) == null ? void 0 : _c.id;
      if (id) {
        extractToDef(entry);
        continue;
      }
      if (seen.cycle) {
        extractToDef(entry);
        continue;
      }
      if (seen.count > 1) {
        if (params.reused === "ref") {
          extractToDef(entry);
          continue;
        }
      }
    }
    const flattenRef = (zodSchema, params2) => {
      const seen = this.seen.get(zodSchema);
      const schema2 = seen.def ?? seen.schema;
      const _cached = { ...schema2 };
      if (seen.ref === null) {
        return;
      }
      const ref = seen.ref;
      seen.ref = null;
      if (ref) {
        flattenRef(ref, params2);
        const refSchema = this.seen.get(ref).schema;
        if (refSchema.$ref && params2.target === "draft-7") {
          schema2.allOf = schema2.allOf ?? [];
          schema2.allOf.push(refSchema);
        } else {
          Object.assign(schema2, refSchema);
          Object.assign(schema2, _cached);
        }
      }
      if (!seen.isParent)
        this.override({
          zodSchema,
          jsonSchema: schema2,
          path: seen.path ?? []
        });
    };
    for (const entry of [...this.seen.entries()].reverse()) {
      flattenRef(entry[0], { target: this.target });
    }
    const result = {};
    if (this.target === "draft-2020-12") {
      result.$schema = "https://json-schema.org/draft/2020-12/schema";
    } else if (this.target === "draft-7") {
      result.$schema = "http://json-schema.org/draft-07/schema#";
    } else {
      console.warn(`Invalid target: ${this.target}`);
    }
    if ((_d = params.external) == null ? void 0 : _d.uri) {
      const id = (_e = params.external.registry.get(schema)) == null ? void 0 : _e.id;
      if (!id)
        throw new Error("Schema is missing an `id` property");
      result.$id = params.external.uri(id);
    }
    Object.assign(result, root.def);
    const defs = ((_f = params.external) == null ? void 0 : _f.defs) ?? {};
    for (const entry of this.seen.entries()) {
      const seen = entry[1];
      if (seen.def && seen.defId) {
        defs[seen.defId] = seen.def;
      }
    }
    if (params.external) {
    } else {
      if (Object.keys(defs).length > 0) {
        if (this.target === "draft-2020-12") {
          result.$defs = defs;
        } else {
          result.definitions = defs;
        }
      }
    }
    try {
      return JSON.parse(JSON.stringify(result));
    } catch (_err) {
      throw new Error("Error converting schema to JSON.");
    }
  }
};
function toJSONSchema(input, _params) {
  if (input instanceof $ZodRegistry) {
    const gen2 = new JSONSchemaGenerator(_params);
    const defs = {};
    for (const entry of input._idmap.entries()) {
      const [_, schema] = entry;
      gen2.process(schema);
    }
    const schemas = {};
    const external = {
      registry: input,
      uri: _params == null ? void 0 : _params.uri,
      defs
    };
    for (const entry of input._idmap.entries()) {
      const [key, schema] = entry;
      schemas[key] = gen2.emit(schema, {
        ..._params,
        external
      });
    }
    if (Object.keys(defs).length > 0) {
      const defsSegment = gen2.target === "draft-2020-12" ? "$defs" : "definitions";
      schemas.__shared = {
        [defsSegment]: defs
      };
    }
    return { schemas };
  }
  const gen = new JSONSchemaGenerator(_params);
  gen.process(input);
  return gen.emit(input, _params);
}
function isTransforming(_schema, _ctx) {
  const ctx = _ctx ?? { seen: /* @__PURE__ */ new Set() };
  if (ctx.seen.has(_schema))
    return false;
  ctx.seen.add(_schema);
  const schema = _schema;
  const def = schema._zod.def;
  switch (def.type) {
    case "string":
    case "number":
    case "bigint":
    case "boolean":
    case "date":
    case "symbol":
    case "undefined":
    case "null":
    case "any":
    case "unknown":
    case "never":
    case "void":
    case "literal":
    case "enum":
    case "nan":
    case "file":
    case "template_literal":
      return false;
    case "array": {
      return isTransforming(def.element, ctx);
    }
    case "object": {
      for (const key in def.shape) {
        if (isTransforming(def.shape[key], ctx))
          return true;
      }
      return false;
    }
    case "union": {
      for (const option of def.options) {
        if (isTransforming(option, ctx))
          return true;
      }
      return false;
    }
    case "intersection": {
      return isTransforming(def.left, ctx) || isTransforming(def.right, ctx);
    }
    case "tuple": {
      for (const item of def.items) {
        if (isTransforming(item, ctx))
          return true;
      }
      if (def.rest && isTransforming(def.rest, ctx))
        return true;
      return false;
    }
    case "record": {
      return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);
    }
    case "map": {
      return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);
    }
    case "set": {
      return isTransforming(def.valueType, ctx);
    }
    case "promise":
    case "optional":
    case "nonoptional":
    case "nullable":
    case "readonly":
      return isTransforming(def.innerType, ctx);
    case "lazy":
      return isTransforming(def.getter(), ctx);
    case "default": {
      return isTransforming(def.innerType, ctx);
    }
    case "prefault": {
      return isTransforming(def.innerType, ctx);
    }
    case "custom": {
      return false;
    }
    case "transform": {
      return true;
    }
    case "pipe": {
      return isTransforming(def.in, ctx) || isTransforming(def.out, ctx);
    }
    case "success": {
      return false;
    }
    case "catch": {
      return false;
    }
    default:
      def;
  }
  throw new Error(`Unknown schema type: ${def.type}`);
}

// node_modules/zod/v4/core/json-schema.js
var json_schema_exports = {};

// node_modules/zod/v4/classic/iso.js
var iso_exports = {};
__export(iso_exports, {
  ZodISODate: () => ZodISODate,
  ZodISODateTime: () => ZodISODateTime,
  ZodISODuration: () => ZodISODuration,
  ZodISOTime: () => ZodISOTime,
  date: () => date2,
  datetime: () => datetime2,
  duration: () => duration2,
  time: () => time2
});
var ZodISODateTime = $constructor("ZodISODateTime", (inst, def) => {
  $ZodISODateTime.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function datetime2(params) {
  return _isoDateTime(ZodISODateTime, params);
}
var ZodISODate = $constructor("ZodISODate", (inst, def) => {
  $ZodISODate.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function date2(params) {
  return _isoDate(ZodISODate, params);
}
var ZodISOTime = $constructor("ZodISOTime", (inst, def) => {
  $ZodISOTime.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function time2(params) {
  return _isoTime(ZodISOTime, params);
}
var ZodISODuration = $constructor("ZodISODuration", (inst, def) => {
  $ZodISODuration.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function duration2(params) {
  return _isoDuration(ZodISODuration, params);
}

// node_modules/zod/v4/classic/errors.js
var initializer2 = (inst, issues) => {
  $ZodError.init(inst, issues);
  inst.name = "ZodError";
  Object.defineProperties(inst, {
    format: {
      value: (mapper) => formatError(inst, mapper)
      // enumerable: false,
    },
    flatten: {
      value: (mapper) => flattenError(inst, mapper)
      // enumerable: false,
    },
    addIssue: {
      value: (issue2) => inst.issues.push(issue2)
      // enumerable: false,
    },
    addIssues: {
      value: (issues2) => inst.issues.push(...issues2)
      // enumerable: false,
    },
    isEmpty: {
      get() {
        return inst.issues.length === 0;
      }
      // enumerable: false,
    }
  });
};
var ZodError = $constructor("ZodError", initializer2);
var ZodRealError = $constructor("ZodError", initializer2, {
  Parent: Error
});

// node_modules/zod/v4/classic/parse.js
var parse2 = _parse(ZodRealError);
var parseAsync2 = _parseAsync(ZodRealError);
var safeParse2 = _safeParse(ZodRealError);
var safeParseAsync2 = _safeParseAsync(ZodRealError);

// node_modules/zod/v4/classic/schemas.js
var ZodType = $constructor("ZodType", (inst, def) => {
  $ZodType.init(inst, def);
  inst.def = def;
  Object.defineProperty(inst, "_def", { value: def });
  inst.check = (...checks) => {
    return inst.clone(
      {
        ...def,
        checks: [
          ...def.checks ?? [],
          ...checks.map((ch) => typeof ch === "function" ? { _zod: { check: ch, def: { check: "custom" }, onattach: [] } } : ch)
        ]
      }
      // { parent: true }
    );
  };
  inst.clone = (def2, params) => clone(inst, def2, params);
  inst.brand = () => inst;
  inst.register = (reg, meta) => {
    reg.add(inst, meta);
    return inst;
  };
  inst.parse = (data, params) => parse2(inst, data, params, { callee: inst.parse });
  inst.safeParse = (data, params) => safeParse2(inst, data, params);
  inst.parseAsync = async (data, params) => parseAsync2(inst, data, params, { callee: inst.parseAsync });
  inst.safeParseAsync = async (data, params) => safeParseAsync2(inst, data, params);
  inst.spa = inst.safeParseAsync;
  inst.refine = (check2, params) => inst.check(refine(check2, params));
  inst.superRefine = (refinement) => inst.check(superRefine(refinement));
  inst.overwrite = (fn) => inst.check(_overwrite(fn));
  inst.optional = () => optional(inst);
  inst.nullable = () => nullable(inst);
  inst.nullish = () => optional(nullable(inst));
  inst.nonoptional = (params) => nonoptional(inst, params);
  inst.array = () => array(inst);
  inst.or = (arg) => union([inst, arg]);
  inst.and = (arg) => intersection(inst, arg);
  inst.transform = (tx) => pipe(inst, transform(tx));
  inst.default = (def2) => _default2(inst, def2);
  inst.prefault = (def2) => prefault(inst, def2);
  inst.catch = (params) => _catch2(inst, params);
  inst.pipe = (target) => pipe(inst, target);
  inst.readonly = () => readonly(inst);
  inst.describe = (description) => {
    const cl = inst.clone();
    globalRegistry.add(cl, { description });
    return cl;
  };
  Object.defineProperty(inst, "description", {
    get() {
      var _a;
      return (_a = globalRegistry.get(inst)) == null ? void 0 : _a.description;
    },
    configurable: true
  });
  inst.meta = (...args) => {
    if (args.length === 0) {
      return globalRegistry.get(inst);
    }
    const cl = inst.clone();
    globalRegistry.add(cl, args[0]);
    return cl;
  };
  inst.isOptional = () => inst.safeParse(void 0).success;
  inst.isNullable = () => inst.safeParse(null).success;
  return inst;
});
var _ZodString = $constructor("_ZodString", (inst, def) => {
  $ZodString.init(inst, def);
  ZodType.init(inst, def);
  const bag = inst._zod.bag;
  inst.format = bag.format ?? null;
  inst.minLength = bag.minimum ?? null;
  inst.maxLength = bag.maximum ?? null;
  inst.regex = (...args) => inst.check(_regex(...args));
  inst.includes = (...args) => inst.check(_includes(...args));
  inst.startsWith = (...args) => inst.check(_startsWith(...args));
  inst.endsWith = (...args) => inst.check(_endsWith(...args));
  inst.min = (...args) => inst.check(_minLength(...args));
  inst.max = (...args) => inst.check(_maxLength(...args));
  inst.length = (...args) => inst.check(_length(...args));
  inst.nonempty = (...args) => inst.check(_minLength(1, ...args));
  inst.lowercase = (params) => inst.check(_lowercase(params));
  inst.uppercase = (params) => inst.check(_uppercase(params));
  inst.trim = () => inst.check(_trim());
  inst.normalize = (...args) => inst.check(_normalize(...args));
  inst.toLowerCase = () => inst.check(_toLowerCase());
  inst.toUpperCase = () => inst.check(_toUpperCase());
});
var ZodString = $constructor("ZodString", (inst, def) => {
  $ZodString.init(inst, def);
  _ZodString.init(inst, def);
  inst.email = (params) => inst.check(_email(ZodEmail, params));
  inst.url = (params) => inst.check(_url(ZodURL, params));
  inst.jwt = (params) => inst.check(_jwt(ZodJWT, params));
  inst.emoji = (params) => inst.check(_emoji2(ZodEmoji, params));
  inst.guid = (params) => inst.check(_guid(ZodGUID, params));
  inst.uuid = (params) => inst.check(_uuid(ZodUUID, params));
  inst.uuidv4 = (params) => inst.check(_uuidv4(ZodUUID, params));
  inst.uuidv6 = (params) => inst.check(_uuidv6(ZodUUID, params));
  inst.uuidv7 = (params) => inst.check(_uuidv7(ZodUUID, params));
  inst.nanoid = (params) => inst.check(_nanoid(ZodNanoID, params));
  inst.guid = (params) => inst.check(_guid(ZodGUID, params));
  inst.cuid = (params) => inst.check(_cuid(ZodCUID, params));
  inst.cuid2 = (params) => inst.check(_cuid2(ZodCUID2, params));
  inst.ulid = (params) => inst.check(_ulid(ZodULID, params));
  inst.base64 = (params) => inst.check(_base64(ZodBase64, params));
  inst.base64url = (params) => inst.check(_base64url(ZodBase64URL, params));
  inst.xid = (params) => inst.check(_xid(ZodXID, params));
  inst.ksuid = (params) => inst.check(_ksuid(ZodKSUID, params));
  inst.ipv4 = (params) => inst.check(_ipv4(ZodIPv4, params));
  inst.ipv6 = (params) => inst.check(_ipv6(ZodIPv6, params));
  inst.cidrv4 = (params) => inst.check(_cidrv4(ZodCIDRv4, params));
  inst.cidrv6 = (params) => inst.check(_cidrv6(ZodCIDRv6, params));
  inst.e164 = (params) => inst.check(_e164(ZodE164, params));
  inst.datetime = (params) => inst.check(datetime2(params));
  inst.date = (params) => inst.check(date2(params));
  inst.time = (params) => inst.check(time2(params));
  inst.duration = (params) => inst.check(duration2(params));
});
function string2(params) {
  return _string(ZodString, params);
}
var ZodStringFormat = $constructor("ZodStringFormat", (inst, def) => {
  $ZodStringFormat.init(inst, def);
  _ZodString.init(inst, def);
});
var ZodEmail = $constructor("ZodEmail", (inst, def) => {
  $ZodEmail.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function email2(params) {
  return _email(ZodEmail, params);
}
var ZodGUID = $constructor("ZodGUID", (inst, def) => {
  $ZodGUID.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function guid2(params) {
  return _guid(ZodGUID, params);
}
var ZodUUID = $constructor("ZodUUID", (inst, def) => {
  $ZodUUID.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function uuid2(params) {
  return _uuid(ZodUUID, params);
}
function uuidv4(params) {
  return _uuidv4(ZodUUID, params);
}
function uuidv6(params) {
  return _uuidv6(ZodUUID, params);
}
function uuidv7(params) {
  return _uuidv7(ZodUUID, params);
}
var ZodURL = $constructor("ZodURL", (inst, def) => {
  $ZodURL.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function url(params) {
  return _url(ZodURL, params);
}
var ZodEmoji = $constructor("ZodEmoji", (inst, def) => {
  $ZodEmoji.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function emoji2(params) {
  return _emoji2(ZodEmoji, params);
}
var ZodNanoID = $constructor("ZodNanoID", (inst, def) => {
  $ZodNanoID.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function nanoid2(params) {
  return _nanoid(ZodNanoID, params);
}
var ZodCUID = $constructor("ZodCUID", (inst, def) => {
  $ZodCUID.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function cuid3(params) {
  return _cuid(ZodCUID, params);
}
var ZodCUID2 = $constructor("ZodCUID2", (inst, def) => {
  $ZodCUID2.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function cuid22(params) {
  return _cuid2(ZodCUID2, params);
}
var ZodULID = $constructor("ZodULID", (inst, def) => {
  $ZodULID.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function ulid2(params) {
  return _ulid(ZodULID, params);
}
var ZodXID = $constructor("ZodXID", (inst, def) => {
  $ZodXID.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function xid2(params) {
  return _xid(ZodXID, params);
}
var ZodKSUID = $constructor("ZodKSUID", (inst, def) => {
  $ZodKSUID.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function ksuid2(params) {
  return _ksuid(ZodKSUID, params);
}
var ZodIPv4 = $constructor("ZodIPv4", (inst, def) => {
  $ZodIPv4.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function ipv42(params) {
  return _ipv4(ZodIPv4, params);
}
var ZodIPv6 = $constructor("ZodIPv6", (inst, def) => {
  $ZodIPv6.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function ipv62(params) {
  return _ipv6(ZodIPv6, params);
}
var ZodCIDRv4 = $constructor("ZodCIDRv4", (inst, def) => {
  $ZodCIDRv4.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function cidrv42(params) {
  return _cidrv4(ZodCIDRv4, params);
}
var ZodCIDRv6 = $constructor("ZodCIDRv6", (inst, def) => {
  $ZodCIDRv6.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function cidrv62(params) {
  return _cidrv6(ZodCIDRv6, params);
}
var ZodBase64 = $constructor("ZodBase64", (inst, def) => {
  $ZodBase64.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function base642(params) {
  return _base64(ZodBase64, params);
}
var ZodBase64URL = $constructor("ZodBase64URL", (inst, def) => {
  $ZodBase64URL.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function base64url2(params) {
  return _base64url(ZodBase64URL, params);
}
var ZodE164 = $constructor("ZodE164", (inst, def) => {
  $ZodE164.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function e1642(params) {
  return _e164(ZodE164, params);
}
var ZodJWT = $constructor("ZodJWT", (inst, def) => {
  $ZodJWT.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function jwt(params) {
  return _jwt(ZodJWT, params);
}
var ZodCustomStringFormat = $constructor("ZodCustomStringFormat", (inst, def) => {
  $ZodCustomStringFormat.init(inst, def);
  ZodStringFormat.init(inst, def);
});
function stringFormat(format, fnOrRegex, _params = {}) {
  return _stringFormat(ZodCustomStringFormat, format, fnOrRegex, _params);
}
var ZodNumber = $constructor("ZodNumber", (inst, def) => {
  $ZodNumber.init(inst, def);
  ZodType.init(inst, def);
  inst.gt = (value, params) => inst.check(_gt(value, params));
  inst.gte = (value, params) => inst.check(_gte(value, params));
  inst.min = (value, params) => inst.check(_gte(value, params));
  inst.lt = (value, params) => inst.check(_lt(value, params));
  inst.lte = (value, params) => inst.check(_lte(value, params));
  inst.max = (value, params) => inst.check(_lte(value, params));
  inst.int = (params) => inst.check(int(params));
  inst.safe = (params) => inst.check(int(params));
  inst.positive = (params) => inst.check(_gt(0, params));
  inst.nonnegative = (params) => inst.check(_gte(0, params));
  inst.negative = (params) => inst.check(_lt(0, params));
  inst.nonpositive = (params) => inst.check(_lte(0, params));
  inst.multipleOf = (value, params) => inst.check(_multipleOf(value, params));
  inst.step = (value, params) => inst.check(_multipleOf(value, params));
  inst.finite = () => inst;
  const bag = inst._zod.bag;
  inst.minValue = Math.max(bag.minimum ?? Number.NEGATIVE_INFINITY, bag.exclusiveMinimum ?? Number.NEGATIVE_INFINITY) ?? null;
  inst.maxValue = Math.min(bag.maximum ?? Number.POSITIVE_INFINITY, bag.exclusiveMaximum ?? Number.POSITIVE_INFINITY) ?? null;
  inst.isInt = (bag.format ?? "").includes("int") || Number.isSafeInteger(bag.multipleOf ?? 0.5);
  inst.isFinite = true;
  inst.format = bag.format ?? null;
});
function number2(params) {
  return _number(ZodNumber, params);
}
var ZodNumberFormat = $constructor("ZodNumberFormat", (inst, def) => {
  $ZodNumberFormat.init(inst, def);
  ZodNumber.init(inst, def);
});
function int(params) {
  return _int(ZodNumberFormat, params);
}
function float32(params) {
  return _float32(ZodNumberFormat, params);
}
function float64(params) {
  return _float64(ZodNumberFormat, params);
}
function int32(params) {
  return _int32(ZodNumberFormat, params);
}
function uint32(params) {
  return _uint32(ZodNumberFormat, params);
}
var ZodBoolean = $constructor("ZodBoolean", (inst, def) => {
  $ZodBoolean.init(inst, def);
  ZodType.init(inst, def);
});
function boolean2(params) {
  return _boolean(ZodBoolean, params);
}
var ZodBigInt = $constructor("ZodBigInt", (inst, def) => {
  $ZodBigInt.init(inst, def);
  ZodType.init(inst, def);
  inst.gte = (value, params) => inst.check(_gte(value, params));
  inst.min = (value, params) => inst.check(_gte(value, params));
  inst.gt = (value, params) => inst.check(_gt(value, params));
  inst.gte = (value, params) => inst.check(_gte(value, params));
  inst.min = (value, params) => inst.check(_gte(value, params));
  inst.lt = (value, params) => inst.check(_lt(value, params));
  inst.lte = (value, params) => inst.check(_lte(value, params));
  inst.max = (value, params) => inst.check(_lte(value, params));
  inst.positive = (params) => inst.check(_gt(BigInt(0), params));
  inst.negative = (params) => inst.check(_lt(BigInt(0), params));
  inst.nonpositive = (params) => inst.check(_lte(BigInt(0), params));
  inst.nonnegative = (params) => inst.check(_gte(BigInt(0), params));
  inst.multipleOf = (value, params) => inst.check(_multipleOf(value, params));
  const bag = inst._zod.bag;
  inst.minValue = bag.minimum ?? null;
  inst.maxValue = bag.maximum ?? null;
  inst.format = bag.format ?? null;
});
function bigint2(params) {
  return _bigint(ZodBigInt, params);
}
var ZodBigIntFormat = $constructor("ZodBigIntFormat", (inst, def) => {
  $ZodBigIntFormat.init(inst, def);
  ZodBigInt.init(inst, def);
});
function int64(params) {
  return _int64(ZodBigIntFormat, params);
}
function uint64(params) {
  return _uint64(ZodBigIntFormat, params);
}
var ZodSymbol = $constructor("ZodSymbol", (inst, def) => {
  $ZodSymbol.init(inst, def);
  ZodType.init(inst, def);
});
function symbol(params) {
  return _symbol(ZodSymbol, params);
}
var ZodUndefined = $constructor("ZodUndefined", (inst, def) => {
  $ZodUndefined.init(inst, def);
  ZodType.init(inst, def);
});
function _undefined3(params) {
  return _undefined2(ZodUndefined, params);
}
var ZodNull = $constructor("ZodNull", (inst, def) => {
  $ZodNull.init(inst, def);
  ZodType.init(inst, def);
});
function _null3(params) {
  return _null2(ZodNull, params);
}
var ZodAny = $constructor("ZodAny", (inst, def) => {
  $ZodAny.init(inst, def);
  ZodType.init(inst, def);
});
function any() {
  return _any(ZodAny);
}
var ZodUnknown = $constructor("ZodUnknown", (inst, def) => {
  $ZodUnknown.init(inst, def);
  ZodType.init(inst, def);
});
function unknown() {
  return _unknown(ZodUnknown);
}
var ZodNever = $constructor("ZodNever", (inst, def) => {
  $ZodNever.init(inst, def);
  ZodType.init(inst, def);
});
function never(params) {
  return _never(ZodNever, params);
}
var ZodVoid = $constructor("ZodVoid", (inst, def) => {
  $ZodVoid.init(inst, def);
  ZodType.init(inst, def);
});
function _void2(params) {
  return _void(ZodVoid, params);
}
var ZodDate = $constructor("ZodDate", (inst, def) => {
  $ZodDate.init(inst, def);
  ZodType.init(inst, def);
  inst.min = (value, params) => inst.check(_gte(value, params));
  inst.max = (value, params) => inst.check(_lte(value, params));
  const c = inst._zod.bag;
  inst.minDate = c.minimum ? new Date(c.minimum) : null;
  inst.maxDate = c.maximum ? new Date(c.maximum) : null;
});
function date3(params) {
  return _date(ZodDate, params);
}
var ZodArray = $constructor("ZodArray", (inst, def) => {
  $ZodArray.init(inst, def);
  ZodType.init(inst, def);
  inst.element = def.element;
  inst.min = (minLength, params) => inst.check(_minLength(minLength, params));
  inst.nonempty = (params) => inst.check(_minLength(1, params));
  inst.max = (maxLength, params) => inst.check(_maxLength(maxLength, params));
  inst.length = (len, params) => inst.check(_length(len, params));
  inst.unwrap = () => inst.element;
});
function array(element, params) {
  return _array(ZodArray, element, params);
}
function keyof(schema) {
  const shape = schema._zod.def.shape;
  return literal(Object.keys(shape));
}
var ZodObject = $constructor("ZodObject", (inst, def) => {
  $ZodObject.init(inst, def);
  ZodType.init(inst, def);
  util_exports.defineLazy(inst, "shape", () => def.shape);
  inst.keyof = () => _enum2(Object.keys(inst._zod.def.shape));
  inst.catchall = (catchall) => inst.clone({ ...inst._zod.def, catchall });
  inst.passthrough = () => inst.clone({ ...inst._zod.def, catchall: unknown() });
  inst.loose = () => inst.clone({ ...inst._zod.def, catchall: unknown() });
  inst.strict = () => inst.clone({ ...inst._zod.def, catchall: never() });
  inst.strip = () => inst.clone({ ...inst._zod.def, catchall: void 0 });
  inst.extend = (incoming) => {
    return util_exports.extend(inst, incoming);
  };
  inst.merge = (other) => util_exports.merge(inst, other);
  inst.pick = (mask) => util_exports.pick(inst, mask);
  inst.omit = (mask) => util_exports.omit(inst, mask);
  inst.partial = (...args) => util_exports.partial(ZodOptional, inst, args[0]);
  inst.required = (...args) => util_exports.required(ZodNonOptional, inst, args[0]);
});
function object(shape, params) {
  const def = {
    type: "object",
    get shape() {
      util_exports.assignProp(this, "shape", { ...shape });
      return this.shape;
    },
    ...util_exports.normalizeParams(params)
  };
  return new ZodObject(def);
}
function strictObject(shape, params) {
  return new ZodObject({
    type: "object",
    get shape() {
      util_exports.assignProp(this, "shape", { ...shape });
      return this.shape;
    },
    catchall: never(),
    ...util_exports.normalizeParams(params)
  });
}
function looseObject(shape, params) {
  return new ZodObject({
    type: "object",
    get shape() {
      util_exports.assignProp(this, "shape", { ...shape });
      return this.shape;
    },
    catchall: unknown(),
    ...util_exports.normalizeParams(params)
  });
}
var ZodUnion = $constructor("ZodUnion", (inst, def) => {
  $ZodUnion.init(inst, def);
  ZodType.init(inst, def);
  inst.options = def.options;
});
function union(options, params) {
  return new ZodUnion({
    type: "union",
    options,
    ...util_exports.normalizeParams(params)
  });
}
var ZodDiscriminatedUnion = $constructor("ZodDiscriminatedUnion", (inst, def) => {
  ZodUnion.init(inst, def);
  $ZodDiscriminatedUnion.init(inst, def);
});
function discriminatedUnion(discriminator, options, params) {
  return new ZodDiscriminatedUnion({
    type: "union",
    options,
    discriminator,
    ...util_exports.normalizeParams(params)
  });
}
var ZodIntersection = $constructor("ZodIntersection", (inst, def) => {
  $ZodIntersection.init(inst, def);
  ZodType.init(inst, def);
});
function intersection(left, right) {
  return new ZodIntersection({
    type: "intersection",
    left,
    right
  });
}
var ZodTuple = $constructor("ZodTuple", (inst, def) => {
  $ZodTuple.init(inst, def);
  ZodType.init(inst, def);
  inst.rest = (rest) => inst.clone({
    ...inst._zod.def,
    rest
  });
});
function tuple(items, _paramsOrRest, _params) {
  const hasRest = _paramsOrRest instanceof $ZodType;
  const params = hasRest ? _params : _paramsOrRest;
  const rest = hasRest ? _paramsOrRest : null;
  return new ZodTuple({
    type: "tuple",
    items,
    rest,
    ...util_exports.normalizeParams(params)
  });
}
var ZodRecord = $constructor("ZodRecord", (inst, def) => {
  $ZodRecord.init(inst, def);
  ZodType.init(inst, def);
  inst.keyType = def.keyType;
  inst.valueType = def.valueType;
});
function record(keyType, valueType, params) {
  return new ZodRecord({
    type: "record",
    keyType,
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
function partialRecord(keyType, valueType, params) {
  return new ZodRecord({
    type: "record",
    keyType: union([keyType, never()]),
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
var ZodMap = $constructor("ZodMap", (inst, def) => {
  $ZodMap.init(inst, def);
  ZodType.init(inst, def);
  inst.keyType = def.keyType;
  inst.valueType = def.valueType;
});
function map(keyType, valueType, params) {
  return new ZodMap({
    type: "map",
    keyType,
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
var ZodSet = $constructor("ZodSet", (inst, def) => {
  $ZodSet.init(inst, def);
  ZodType.init(inst, def);
  inst.min = (...args) => inst.check(_minSize(...args));
  inst.nonempty = (params) => inst.check(_minSize(1, params));
  inst.max = (...args) => inst.check(_maxSize(...args));
  inst.size = (...args) => inst.check(_size(...args));
});
function set(valueType, params) {
  return new ZodSet({
    type: "set",
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
var ZodEnum = $constructor("ZodEnum", (inst, def) => {
  $ZodEnum.init(inst, def);
  ZodType.init(inst, def);
  inst.enum = def.entries;
  inst.options = Object.values(def.entries);
  const keys = new Set(Object.keys(def.entries));
  inst.extract = (values, params) => {
    const newEntries = {};
    for (const value of values) {
      if (keys.has(value)) {
        newEntries[value] = def.entries[value];
      } else
        throw new Error(`Key ${value} not found in enum`);
    }
    return new ZodEnum({
      ...def,
      checks: [],
      ...util_exports.normalizeParams(params),
      entries: newEntries
    });
  };
  inst.exclude = (values, params) => {
    const newEntries = { ...def.entries };
    for (const value of values) {
      if (keys.has(value)) {
        delete newEntries[value];
      } else
        throw new Error(`Key ${value} not found in enum`);
    }
    return new ZodEnum({
      ...def,
      checks: [],
      ...util_exports.normalizeParams(params),
      entries: newEntries
    });
  };
});
function _enum2(values, params) {
  const entries = Array.isArray(values) ? Object.fromEntries(values.map((v) => [v, v])) : values;
  return new ZodEnum({
    type: "enum",
    entries,
    ...util_exports.normalizeParams(params)
  });
}
function nativeEnum(entries, params) {
  return new ZodEnum({
    type: "enum",
    entries,
    ...util_exports.normalizeParams(params)
  });
}
var ZodLiteral = $constructor("ZodLiteral", (inst, def) => {
  $ZodLiteral.init(inst, def);
  ZodType.init(inst, def);
  inst.values = new Set(def.values);
  Object.defineProperty(inst, "value", {
    get() {
      if (def.values.length > 1) {
        throw new Error("This schema contains multiple valid literal values. Use `.values` instead.");
      }
      return def.values[0];
    }
  });
});
function literal(value, params) {
  return new ZodLiteral({
    type: "literal",
    values: Array.isArray(value) ? value : [value],
    ...util_exports.normalizeParams(params)
  });
}
var ZodFile = $constructor("ZodFile", (inst, def) => {
  $ZodFile.init(inst, def);
  ZodType.init(inst, def);
  inst.min = (size, params) => inst.check(_minSize(size, params));
  inst.max = (size, params) => inst.check(_maxSize(size, params));
  inst.mime = (types, params) => inst.check(_mime(Array.isArray(types) ? types : [types], params));
});
function file(params) {
  return _file(ZodFile, params);
}
var ZodTransform = $constructor("ZodTransform", (inst, def) => {
  $ZodTransform.init(inst, def);
  ZodType.init(inst, def);
  inst._zod.parse = (payload, _ctx) => {
    payload.addIssue = (issue2) => {
      if (typeof issue2 === "string") {
        payload.issues.push(util_exports.issue(issue2, payload.value, def));
      } else {
        const _issue = issue2;
        if (_issue.fatal)
          _issue.continue = false;
        _issue.code ?? (_issue.code = "custom");
        _issue.input ?? (_issue.input = payload.value);
        _issue.inst ?? (_issue.inst = inst);
        _issue.continue ?? (_issue.continue = true);
        payload.issues.push(util_exports.issue(_issue));
      }
    };
    const output = def.transform(payload.value, payload);
    if (output instanceof Promise) {
      return output.then((output2) => {
        payload.value = output2;
        return payload;
      });
    }
    payload.value = output;
    return payload;
  };
});
function transform(fn) {
  return new ZodTransform({
    type: "transform",
    transform: fn
  });
}
var ZodOptional = $constructor("ZodOptional", (inst, def) => {
  $ZodOptional.init(inst, def);
  ZodType.init(inst, def);
  inst.unwrap = () => inst._zod.def.innerType;
});
function optional(innerType) {
  return new ZodOptional({
    type: "optional",
    innerType
  });
}
var ZodNullable = $constructor("ZodNullable", (inst, def) => {
  $ZodNullable.init(inst, def);
  ZodType.init(inst, def);
  inst.unwrap = () => inst._zod.def.innerType;
});
function nullable(innerType) {
  return new ZodNullable({
    type: "nullable",
    innerType
  });
}
function nullish2(innerType) {
  return optional(nullable(innerType));
}
var ZodDefault = $constructor("ZodDefault", (inst, def) => {
  $ZodDefault.init(inst, def);
  ZodType.init(inst, def);
  inst.unwrap = () => inst._zod.def.innerType;
  inst.removeDefault = inst.unwrap;
});
function _default2(innerType, defaultValue) {
  return new ZodDefault({
    type: "default",
    innerType,
    get defaultValue() {
      return typeof defaultValue === "function" ? defaultValue() : defaultValue;
    }
  });
}
var ZodPrefault = $constructor("ZodPrefault", (inst, def) => {
  $ZodPrefault.init(inst, def);
  ZodType.init(inst, def);
  inst.unwrap = () => inst._zod.def.innerType;
});
function prefault(innerType, defaultValue) {
  return new ZodPrefault({
    type: "prefault",
    innerType,
    get defaultValue() {
      return typeof defaultValue === "function" ? defaultValue() : defaultValue;
    }
  });
}
var ZodNonOptional = $constructor("ZodNonOptional", (inst, def) => {
  $ZodNonOptional.init(inst, def);
  ZodType.init(inst, def);
  inst.unwrap = () => inst._zod.def.innerType;
});
function nonoptional(innerType, params) {
  return new ZodNonOptional({
    type: "nonoptional",
    innerType,
    ...util_exports.normalizeParams(params)
  });
}
var ZodSuccess = $constructor("ZodSuccess", (inst, def) => {
  $ZodSuccess.init(inst, def);
  ZodType.init(inst, def);
  inst.unwrap = () => inst._zod.def.innerType;
});
function success(innerType) {
  return new ZodSuccess({
    type: "success",
    innerType
  });
}
var ZodCatch = $constructor("ZodCatch", (inst, def) => {
  $ZodCatch.init(inst, def);
  ZodType.init(inst, def);
  inst.unwrap = () => inst._zod.def.innerType;
  inst.removeCatch = inst.unwrap;
});
function _catch2(innerType, catchValue) {
  return new ZodCatch({
    type: "catch",
    innerType,
    catchValue: typeof catchValue === "function" ? catchValue : () => catchValue
  });
}
var ZodNaN = $constructor("ZodNaN", (inst, def) => {
  $ZodNaN.init(inst, def);
  ZodType.init(inst, def);
});
function nan(params) {
  return _nan(ZodNaN, params);
}
var ZodPipe = $constructor("ZodPipe", (inst, def) => {
  $ZodPipe.init(inst, def);
  ZodType.init(inst, def);
  inst.in = def.in;
  inst.out = def.out;
});
function pipe(in_, out) {
  return new ZodPipe({
    type: "pipe",
    in: in_,
    out
    // ...util.normalizeParams(params),
  });
}
var ZodReadonly = $constructor("ZodReadonly", (inst, def) => {
  $ZodReadonly.init(inst, def);
  ZodType.init(inst, def);
});
function readonly(innerType) {
  return new ZodReadonly({
    type: "readonly",
    innerType
  });
}
var ZodTemplateLiteral = $constructor("ZodTemplateLiteral", (inst, def) => {
  $ZodTemplateLiteral.init(inst, def);
  ZodType.init(inst, def);
});
function templateLiteral(parts, params) {
  return new ZodTemplateLiteral({
    type: "template_literal",
    parts,
    ...util_exports.normalizeParams(params)
  });
}
var ZodLazy = $constructor("ZodLazy", (inst, def) => {
  $ZodLazy.init(inst, def);
  ZodType.init(inst, def);
  inst.unwrap = () => inst._zod.def.getter();
});
function lazy(getter) {
  return new ZodLazy({
    type: "lazy",
    getter
  });
}
var ZodPromise = $constructor("ZodPromise", (inst, def) => {
  $ZodPromise.init(inst, def);
  ZodType.init(inst, def);
  inst.unwrap = () => inst._zod.def.innerType;
});
function promise(innerType) {
  return new ZodPromise({
    type: "promise",
    innerType
  });
}
var ZodCustom = $constructor("ZodCustom", (inst, def) => {
  $ZodCustom.init(inst, def);
  ZodType.init(inst, def);
});
function check(fn) {
  const ch = new $ZodCheck({
    check: "custom"
    // ...util.normalizeParams(params),
  });
  ch._zod.check = fn;
  return ch;
}
function custom(fn, _params) {
  return _custom(ZodCustom, fn ?? (() => true), _params);
}
function refine(fn, _params = {}) {
  return _refine(ZodCustom, fn, _params);
}
function superRefine(fn) {
  const ch = check((payload) => {
    payload.addIssue = (issue2) => {
      if (typeof issue2 === "string") {
        payload.issues.push(util_exports.issue(issue2, payload.value, ch._zod.def));
      } else {
        const _issue = issue2;
        if (_issue.fatal)
          _issue.continue = false;
        _issue.code ?? (_issue.code = "custom");
        _issue.input ?? (_issue.input = payload.value);
        _issue.inst ?? (_issue.inst = ch);
        _issue.continue ?? (_issue.continue = !ch._zod.def.abort);
        payload.issues.push(util_exports.issue(_issue));
      }
    };
    return fn(payload.value, payload);
  });
  return ch;
}
function _instanceof(cls, params = {
  error: `Input not instance of ${cls.name}`
}) {
  const inst = new ZodCustom({
    type: "custom",
    check: "custom",
    fn: (data) => data instanceof cls,
    abort: true,
    ...util_exports.normalizeParams(params)
  });
  inst._zod.bag.Class = cls;
  return inst;
}
var stringbool = (...args) => _stringbool({
  Pipe: ZodPipe,
  Boolean: ZodBoolean,
  String: ZodString,
  Transform: ZodTransform
}, ...args);
function json(params) {
  const jsonSchema = lazy(() => {
    return union([string2(params), number2(), boolean2(), _null3(), array(jsonSchema), record(string2(), jsonSchema)]);
  });
  return jsonSchema;
}
function preprocess(fn, schema) {
  return pipe(transform(fn), schema);
}

// node_modules/zod/v4/classic/compat.js
var ZodIssueCode = {
  invalid_type: "invalid_type",
  too_big: "too_big",
  too_small: "too_small",
  invalid_format: "invalid_format",
  not_multiple_of: "not_multiple_of",
  unrecognized_keys: "unrecognized_keys",
  invalid_union: "invalid_union",
  invalid_key: "invalid_key",
  invalid_element: "invalid_element",
  invalid_value: "invalid_value",
  custom: "custom"
};
function setErrorMap(map2) {
  config({
    customError: map2
  });
}
function getErrorMap() {
  return config().customError;
}

// node_modules/zod/v4/classic/coerce.js
var coerce_exports = {};
__export(coerce_exports, {
  bigint: () => bigint3,
  boolean: () => boolean3,
  date: () => date4,
  number: () => number3,
  string: () => string3
});
function string3(params) {
  return _coercedString(ZodString, params);
}
function number3(params) {
  return _coercedNumber(ZodNumber, params);
}
function boolean3(params) {
  return _coercedBoolean(ZodBoolean, params);
}
function bigint3(params) {
  return _coercedBigint(ZodBigInt, params);
}
function date4(params) {
  return _coercedDate(ZodDate, params);
}

// node_modules/zod/v4/classic/external.js
config(en_default());

// node_modules/openai/_vendor/zod-to-json-schema/Options.mjs
var ignoreOverride = Symbol("Let zodToJsonSchema decide on which parser to use");
var defaultOptions = {
  name: void 0,
  $refStrategy: "root",
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  nullableStrategy: "from-target",
  removeAdditionalStrategy: "passthrough",
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: false,
  errorMessages: false,
  markdownDescription: false,
  patternStrategy: "escape",
  applyRegexFlags: false,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref"
};
var getDefaultOptions = (options) => {
  return typeof options === "string" ? {
    ...defaultOptions,
    basePath: ["#"],
    definitions: {},
    name: options
  } : {
    ...defaultOptions,
    basePath: ["#"],
    definitions: {},
    ...options
  };
};

// node_modules/openai/_vendor/zod-to-json-schema/util.mjs
var zodDef = (zodSchema) => {
  return "_def" in zodSchema ? zodSchema._def : zodSchema;
};
function isEmptyObj(obj) {
  if (!obj)
    return true;
  for (const _k in obj)
    return false;
  return true;
}

// node_modules/openai/_vendor/zod-to-json-schema/Refs.mjs
var getRefs = (options) => {
  const _options3 = getDefaultOptions(options);
  const currentPath = _options3.name !== void 0 ? [..._options3.basePath, _options3.definitionPath, _options3.name] : _options3.basePath;
  return {
    ..._options3,
    currentPath,
    propertyPath: void 0,
    seenRefs: /* @__PURE__ */ new Set(),
    seen: new Map(Object.entries(_options3.definitions).map(([name, def]) => [
      zodDef(def),
      {
        def: zodDef(def),
        path: [..._options3.basePath, _options3.definitionPath, name],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};

// node_modules/openai/_vendor/zod-to-json-schema/errorMessages.mjs
function addErrorMessage(res, key, errorMessage, refs) {
  if (!(refs == null ? void 0 : refs.errorMessages))
    return;
  if (errorMessage) {
    res.errorMessage = {
      ...res.errorMessage,
      [key]: errorMessage
    };
  }
}
function setResponseValueAndErrors(res, key, value, errorMessage, refs) {
  res[key] = value;
  addErrorMessage(res, key, errorMessage, refs);
}

// node_modules/zod/v3/external.js
var external_exports2 = {};
__export(external_exports2, {
  BRAND: () => BRAND,
  DIRTY: () => DIRTY,
  EMPTY_PATH: () => EMPTY_PATH,
  INVALID: () => INVALID,
  NEVER: () => NEVER2,
  OK: () => OK,
  ParseStatus: () => ParseStatus,
  Schema: () => ZodType2,
  ZodAny: () => ZodAny2,
  ZodArray: () => ZodArray2,
  ZodBigInt: () => ZodBigInt2,
  ZodBoolean: () => ZodBoolean2,
  ZodBranded: () => ZodBranded,
  ZodCatch: () => ZodCatch2,
  ZodDate: () => ZodDate2,
  ZodDefault: () => ZodDefault2,
  ZodDiscriminatedUnion: () => ZodDiscriminatedUnion2,
  ZodEffects: () => ZodEffects,
  ZodEnum: () => ZodEnum2,
  ZodError: () => ZodError2,
  ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,
  ZodFunction: () => ZodFunction,
  ZodIntersection: () => ZodIntersection2,
  ZodIssueCode: () => ZodIssueCode2,
  ZodLazy: () => ZodLazy2,
  ZodLiteral: () => ZodLiteral2,
  ZodMap: () => ZodMap2,
  ZodNaN: () => ZodNaN2,
  ZodNativeEnum: () => ZodNativeEnum,
  ZodNever: () => ZodNever2,
  ZodNull: () => ZodNull2,
  ZodNullable: () => ZodNullable2,
  ZodNumber: () => ZodNumber2,
  ZodObject: () => ZodObject2,
  ZodOptional: () => ZodOptional2,
  ZodParsedType: () => ZodParsedType,
  ZodPipeline: () => ZodPipeline,
  ZodPromise: () => ZodPromise2,
  ZodReadonly: () => ZodReadonly2,
  ZodRecord: () => ZodRecord2,
  ZodSchema: () => ZodType2,
  ZodSet: () => ZodSet2,
  ZodString: () => ZodString2,
  ZodSymbol: () => ZodSymbol2,
  ZodTransformer: () => ZodEffects,
  ZodTuple: () => ZodTuple2,
  ZodType: () => ZodType2,
  ZodUndefined: () => ZodUndefined2,
  ZodUnion: () => ZodUnion2,
  ZodUnknown: () => ZodUnknown2,
  ZodVoid: () => ZodVoid2,
  addIssueToContext: () => addIssueToContext,
  any: () => anyType,
  array: () => arrayType,
  bigint: () => bigIntType,
  boolean: () => booleanType,
  coerce: () => coerce,
  custom: () => custom2,
  date: () => dateType,
  datetimeRegex: () => datetimeRegex,
  defaultErrorMap: () => en_default2,
  discriminatedUnion: () => discriminatedUnionType,
  effect: () => effectsType,
  enum: () => enumType,
  function: () => functionType,
  getErrorMap: () => getErrorMap2,
  getParsedType: () => getParsedType2,
  instanceof: () => instanceOfType,
  intersection: () => intersectionType,
  isAborted: () => isAborted,
  isAsync: () => isAsync,
  isDirty: () => isDirty,
  isValid: () => isValid,
  late: () => late,
  lazy: () => lazyType,
  literal: () => literalType,
  makeIssue: () => makeIssue,
  map: () => mapType,
  nan: () => nanType,
  nativeEnum: () => nativeEnumType,
  never: () => neverType,
  null: () => nullType,
  nullable: () => nullableType,
  number: () => numberType,
  object: () => objectType,
  objectUtil: () => objectUtil,
  oboolean: () => oboolean,
  onumber: () => onumber,
  optional: () => optionalType,
  ostring: () => ostring,
  pipeline: () => pipelineType,
  preprocess: () => preprocessType,
  promise: () => promiseType,
  quotelessJson: () => quotelessJson,
  record: () => recordType,
  set: () => setType,
  setErrorMap: () => setErrorMap2,
  strictObject: () => strictObjectType,
  string: () => stringType,
  symbol: () => symbolType,
  transformer: () => effectsType,
  tuple: () => tupleType,
  undefined: () => undefinedType,
  union: () => unionType,
  unknown: () => unknownType,
  util: () => util,
  void: () => voidType
});

// node_modules/zod/v3/helpers/util.js
var util;
(function(util2) {
  util2.assertEqual = (_) => {
  };
  function assertIs2(_arg) {
  }
  util2.assertIs = assertIs2;
  function assertNever2(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever2;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object2) => {
    const keys = [];
    for (const key in object2) {
      if (Object.prototype.hasOwnProperty.call(object2, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
  function joinValues2(array2, separator = " | ") {
    return array2.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues2;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType2 = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};

// node_modules/zod/v3/ZodError.js
var ZodIssueCode2 = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json2 = JSON.stringify(obj, null, 2);
  return json2.replace(/"([^"]+)":/g, "$1:");
};
var ZodError2 = class _ZodError extends Error {
  get errors() {
    return this.issues;
  }
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue2) {
      return issue2.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error40) => {
      for (const issue2 of error40.issues) {
        if (issue2.code === "invalid_union") {
          issue2.unionErrors.map(processError);
        } else if (issue2.code === "invalid_return_type") {
          processError(issue2.returnTypeError);
        } else if (issue2.code === "invalid_arguments") {
          processError(issue2.argumentsError);
        } else if (issue2.path.length === 0) {
          fieldErrors._errors.push(mapper(issue2));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue2.path.length) {
            const el = issue2.path[i];
            const terminal = i === issue2.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue2));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof _ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue2) => issue2.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        const firstEl = sub.path[0];
        fieldErrors[firstEl] = fieldErrors[firstEl] || [];
        fieldErrors[firstEl].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError2.create = (issues) => {
  const error40 = new ZodError2(issues);
  return error40;
};

// node_modules/zod/v3/locales/en.js
var errorMap = (issue2, _ctx) => {
  let message;
  switch (issue2.code) {
    case ZodIssueCode2.invalid_type:
      if (issue2.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue2.expected}, received ${issue2.received}`;
      }
      break;
    case ZodIssueCode2.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue2.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode2.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue2.keys, ", ")}`;
      break;
    case ZodIssueCode2.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode2.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue2.options)}`;
      break;
    case ZodIssueCode2.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue2.options)}, received '${issue2.received}'`;
      break;
    case ZodIssueCode2.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode2.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode2.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode2.invalid_string:
      if (typeof issue2.validation === "object") {
        if ("includes" in issue2.validation) {
          message = `Invalid input: must include "${issue2.validation.includes}"`;
          if (typeof issue2.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue2.validation.position}`;
          }
        } else if ("startsWith" in issue2.validation) {
          message = `Invalid input: must start with "${issue2.validation.startsWith}"`;
        } else if ("endsWith" in issue2.validation) {
          message = `Invalid input: must end with "${issue2.validation.endsWith}"`;
        } else {
          util.assertNever(issue2.validation);
        }
      } else if (issue2.validation !== "regex") {
        message = `Invalid ${issue2.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode2.too_small:
      if (issue2.type === "array")
        message = `Array must contain ${issue2.exact ? "exactly" : issue2.inclusive ? `at least` : `more than`} ${issue2.minimum} element(s)`;
      else if (issue2.type === "string")
        message = `String must contain ${issue2.exact ? "exactly" : issue2.inclusive ? `at least` : `over`} ${issue2.minimum} character(s)`;
      else if (issue2.type === "number")
        message = `Number must be ${issue2.exact ? `exactly equal to ` : issue2.inclusive ? `greater than or equal to ` : `greater than `}${issue2.minimum}`;
      else if (issue2.type === "bigint")
        message = `Number must be ${issue2.exact ? `exactly equal to ` : issue2.inclusive ? `greater than or equal to ` : `greater than `}${issue2.minimum}`;
      else if (issue2.type === "date")
        message = `Date must be ${issue2.exact ? `exactly equal to ` : issue2.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue2.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode2.too_big:
      if (issue2.type === "array")
        message = `Array must contain ${issue2.exact ? `exactly` : issue2.inclusive ? `at most` : `less than`} ${issue2.maximum} element(s)`;
      else if (issue2.type === "string")
        message = `String must contain ${issue2.exact ? `exactly` : issue2.inclusive ? `at most` : `under`} ${issue2.maximum} character(s)`;
      else if (issue2.type === "number")
        message = `Number must be ${issue2.exact ? `exactly` : issue2.inclusive ? `less than or equal to` : `less than`} ${issue2.maximum}`;
      else if (issue2.type === "bigint")
        message = `BigInt must be ${issue2.exact ? `exactly` : issue2.inclusive ? `less than or equal to` : `less than`} ${issue2.maximum}`;
      else if (issue2.type === "date")
        message = `Date must be ${issue2.exact ? `exactly` : issue2.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue2.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode2.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode2.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode2.not_multiple_of:
      message = `Number must be a multiple of ${issue2.multipleOf}`;
      break;
    case ZodIssueCode2.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue2);
  }
  return { message };
};
var en_default2 = errorMap;

// node_modules/zod/v3/errors.js
var overrideErrorMap = en_default2;
function setErrorMap2(map2) {
  overrideErrorMap = map2;
}
function getErrorMap2() {
  return overrideErrorMap;
}

// node_modules/zod/v3/helpers/parseUtil.js
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== void 0) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map2 of maps) {
    errorMessage = map2(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap2();
  const issue2 = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      // contextual error map is first priority
      ctx.schemaErrorMap,
      // then schema-bound map if available
      overrideMap,
      // then global override map
      overrideMap === en_default2 ? void 0 : en_default2
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue2);
}
var ParseStatus = class _ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return _ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

// node_modules/zod/v3/helpers/errorUtil.js
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message == null ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));

// node_modules/zod/v3/types.js
var ParseInputLazyPath = class {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (Array.isArray(this._key)) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error40 = new ZodError2(ctx.common.issues);
        this._error = error40;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message ?? ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: message ?? required_error ?? ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: message ?? invalid_type_error ?? ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType2 = class {
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType2(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType2(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType2(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    const ctx = {
      common: {
        issues: [],
        async: (params == null ? void 0 : params.async) ?? false,
        contextualErrorMap: params == null ? void 0 : params.errorMap
      },
      path: (params == null ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType2(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  "~validate"(data) {
    var _a, _b;
    const ctx = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType2(data)
    };
    if (!this["~standard"].async) {
      try {
        const result = this._parseSync({ data, path: [], parent: ctx });
        return isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        };
      } catch (err) {
        if ((_b = (_a = err == null ? void 0 : err.message) == null ? void 0 : _a.toLowerCase()) == null ? void 0 : _b.includes("encountered")) {
          this["~standard"].async = true;
        }
        ctx.common = {
          issues: [],
          async: true
        };
      }
    }
    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
      value: result.value
    } : {
      issues: ctx.common.issues
    });
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params == null ? void 0 : params.errorMap,
        async: true
      },
      path: (params == null ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType2(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check2, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check2(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode2.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check2, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check2(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
    this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (data) => this["~validate"](data)
    };
  }
  optional() {
    return ZodOptional2.create(this, this._def);
  }
  nullable() {
    return ZodNullable2.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray2.create(this);
  }
  promise() {
    return ZodPromise2.create(this, this._def);
  }
  or(option) {
    return ZodUnion2.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection2.create(this, incoming, this._def);
  }
  transform(transform2) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform: transform2 }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault2({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch2({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly2.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let secondsRegexSource = `[0-5]\\d`;
  if (args.precision) {
    secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
  }
  const secondsQuantifier = args.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT2(jwt2, alg) {
  if (!jwtRegex.test(jwt2))
    return false;
  try {
    const [header] = jwt2.split(".");
    if (!header)
      return false;
    const base643 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base643));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if ("typ" in decoded && (decoded == null ? void 0 : decoded.typ) !== "JWT")
      return false;
    if (!decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch {
    return false;
  }
}
function isValidCidr(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString2 = class _ZodString2 extends ZodType2 {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check2 of this._def.checks) {
      if (check2.kind === "min") {
        if (input.data.length < check2.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.too_small,
            minimum: check2.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "max") {
        if (input.data.length > check2.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.too_big,
            maximum: check2.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "length") {
        const tooBig = input.data.length > check2.value;
        const tooSmall = input.data.length < check2.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode2.too_big,
              maximum: check2.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check2.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode2.too_small,
              minimum: check2.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check2.message
            });
          }
          status.dirty();
        }
      } else if (check2.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "url") {
        try {
          new URL(input.data);
        } catch {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "regex") {
        check2.regex.lastIndex = 0;
        const testResult = check2.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "trim") {
        input.data = input.data.trim();
      } else if (check2.kind === "includes") {
        if (!input.data.includes(check2.value, check2.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.invalid_string,
            validation: { includes: check2.value, position: check2.position },
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check2.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check2.kind === "startsWith") {
        if (!input.data.startsWith(check2.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.invalid_string,
            validation: { startsWith: check2.value },
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "endsWith") {
        if (!input.data.endsWith(check2.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.invalid_string,
            validation: { endsWith: check2.value },
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "datetime") {
        const regex = datetimeRegex(check2);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.invalid_string,
            validation: "datetime",
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.invalid_string,
            validation: "date",
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "time") {
        const regex = timeRegex(check2);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.invalid_string,
            validation: "time",
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "ip") {
        if (!isValidIP(input.data, check2.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "jwt") {
        if (!isValidJWT2(input.data, check2.alg)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "jwt",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "cidr") {
        if (!isValidCidr(input.data, check2.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cidr",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "base64url") {
        if (!base64urlRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64url",
            code: ZodIssueCode2.invalid_string,
            message: check2.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check2);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode2.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check2) {
    return new _ZodString2({
      ...this._def,
      checks: [...this._def.checks, check2]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  base64url(message) {
    return this._addCheck({
      kind: "base64url",
      ...errorUtil.errToObj(message)
    });
  }
  jwt(options) {
    return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  cidr(options) {
    return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options == null ? void 0 : options.precision) === "undefined" ? null : options == null ? void 0 : options.precision,
      offset: (options == null ? void 0 : options.offset) ?? false,
      local: (options == null ? void 0 : options.local) ?? false,
      ...errorUtil.errToObj(options == null ? void 0 : options.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof (options == null ? void 0 : options.precision) === "undefined" ? null : options == null ? void 0 : options.precision,
      ...errorUtil.errToObj(options == null ? void 0 : options.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options == null ? void 0 : options.position,
      ...errorUtil.errToObj(options == null ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new _ZodString2({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new _ZodString2({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new _ZodString2({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((ch) => ch.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((ch) => ch.kind === "base64url");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodString2.create = (params) => {
  return new ZodString2({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (params == null ? void 0 : params.coerce) ?? false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder2(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}
var ZodNumber2 = class _ZodNumber extends ZodType2 {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check2 of this._def.checks) {
      if (check2.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: "integer",
            received: "float",
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "min") {
        const tooSmall = check2.inclusive ? input.data < check2.value : input.data <= check2.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.too_small,
            minimum: check2.value,
            type: "number",
            inclusive: check2.inclusive,
            exact: false,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "max") {
        const tooBig = check2.inclusive ? input.data > check2.value : input.data >= check2.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.too_big,
            maximum: check2.value,
            type: "number",
            inclusive: check2.inclusive,
            exact: false,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "multipleOf") {
        if (floatSafeRemainder2(input.data, check2.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.not_multiple_of,
            multipleOf: check2.value,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.not_finite,
            message: check2.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check2);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check2) {
    return new _ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check2]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null;
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
};
ZodNumber2.create = (params) => {
  return new ZodNumber2({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params == null ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt2 = class _ZodBigInt extends ZodType2 {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      try {
        input.data = BigInt(input.data);
      } catch {
        return this._getInvalidInput(input);
      }
    }
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.bigint) {
      return this._getInvalidInput(input);
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check2 of this._def.checks) {
      if (check2.kind === "min") {
        const tooSmall = check2.inclusive ? input.data < check2.value : input.data <= check2.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.too_small,
            type: "bigint",
            minimum: check2.value,
            inclusive: check2.inclusive,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "max") {
        const tooBig = check2.inclusive ? input.data > check2.value : input.data >= check2.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.too_big,
            type: "bigint",
            maximum: check2.value,
            inclusive: check2.inclusive,
            message: check2.message
          });
          status.dirty();
        }
      } else if (check2.kind === "multipleOf") {
        if (input.data % check2.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.not_multiple_of,
            multipleOf: check2.value,
            message: check2.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check2);
      }
    }
    return { status: status.value, value: input.data };
  }
  _getInvalidInput(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode2.invalid_type,
      expected: ZodParsedType.bigint,
      received: ctx.parsedType
    });
    return INVALID;
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check2) {
    return new _ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check2]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodBigInt2.create = (params) => {
  return new ZodBigInt2({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (params == null ? void 0 : params.coerce) ?? false,
    ...processCreateParams(params)
  });
};
var ZodBoolean2 = class extends ZodType2 {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean2.create = (params) => {
  return new ZodBoolean2({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params == null ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodDate2 = class _ZodDate extends ZodType2 {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (Number.isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode2.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check2 of this._def.checks) {
      if (check2.kind === "min") {
        if (input.data.getTime() < check2.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.too_small,
            message: check2.message,
            inclusive: true,
            exact: false,
            minimum: check2.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check2.kind === "max") {
        if (input.data.getTime() > check2.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode2.too_big,
            message: check2.message,
            inclusive: true,
            exact: false,
            maximum: check2.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check2);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check2) {
    return new _ZodDate({
      ...this._def,
      checks: [...this._def.checks, check2]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate2.create = (params) => {
  return new ZodDate2({
    checks: [],
    coerce: (params == null ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol2 = class extends ZodType2 {
  _parse(input) {
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol2.create = (params) => {
  return new ZodSymbol2({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined2 = class extends ZodType2 {
  _parse(input) {
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined2.create = (params) => {
  return new ZodUndefined2({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull2 = class extends ZodType2 {
  _parse(input) {
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull2.create = (params) => {
  return new ZodNull2({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny2 = class extends ZodType2 {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny2.create = (params) => {
  return new ZodAny2({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown2 = class extends ZodType2 {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown2.create = (params) => {
  return new ZodUnknown2({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever2 = class extends ZodType2 {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode2.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever2.create = (params) => {
  return new ZodNever2({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid2 = class extends ZodType2 {
  _parse(input) {
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid2.create = (params) => {
  return new ZodVoid2({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray2 = class _ZodArray extends ZodType2 {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode2.too_big : ZodIssueCode2.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode2.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode2.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new _ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new _ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new _ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray2.create = (schema, params) => {
  return new ZodArray2({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject2) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional2.create(deepPartialify(fieldSchema));
    }
    return new ZodObject2({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray2) {
    return new ZodArray2({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional2) {
    return ZodOptional2.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable2) {
    return ZodNullable2.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple2) {
    return ZodTuple2.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject2 = class _ZodObject extends ZodType2 {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    this._cached = { shape, keys };
    return this._cached;
  }
  _parse(input) {
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever2 && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever2) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode2.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip") {
      } else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue2, ctx) => {
          var _a, _b;
          const defaultError = ((_b = (_a = this._def).errorMap) == null ? void 0 : _b.call(_a, issue2, ctx).message) ?? ctx.defaultError;
          if (issue2.code === "unrecognized_keys")
            return {
              message: errorUtil.errToObj(message).message ?? defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new _ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new _ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new _ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    for (const key of util.objectKeys(mask)) {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional2) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject2.create = (shape, params) => {
  return new ZodObject2({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever2.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject2.strictCreate = (shape, params) => {
  return new ZodObject2({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever2.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject2.lazycreate = (shape, params) => {
  return new ZodObject2({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever2.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion2 = class extends ZodType2 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError2(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError2(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion2.create = (types, params) => {
  return new ZodUnion2({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy2) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral2) {
    return [type.value];
  } else if (type instanceof ZodEnum2) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault2) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined2) {
    return [void 0];
  } else if (type instanceof ZodNull2) {
    return [null];
  } else if (type instanceof ZodOptional2) {
    return [void 0, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable2) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly2) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch2) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
};
var ZodDiscriminatedUnion2 = class _ZodDiscriminatedUnion extends ZodType2 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new _ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
};
function mergeValues2(a, b) {
  const aType = getParsedType2(a);
  const bType = getParsedType2(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues2(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues2(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection2 = class extends ZodType2 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues2(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode2.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection2.create = (left, right, params) => {
  return new ZodIntersection2({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple2 = class _ZodTuple extends ZodType2 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new _ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple2.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple2({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord2 = class _ZodRecord extends ZodType2 {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType2) {
      return new _ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new _ZodRecord({
      keyType: ZodString2.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap2 = class extends ZodType2 {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap2.create = (keyType, valueType, params) => {
  return new ZodMap2({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet2 = class _ZodSet extends ZodType2 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode2.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode2.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new _ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new _ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet2.create = (valueType, params) => {
  return new ZodSet2({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class _ZodFunction extends ZodType2 {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error40) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap2(), en_default2].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode2.invalid_arguments,
          argumentsError: error40
        }
      });
    }
    function makeReturnsIssue(returns, error40) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap2(), en_default2].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode2.invalid_return_type,
          returnTypeError: error40
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise2) {
      const me = this;
      return OK(async function(...args) {
        const error40 = new ZodError2([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error40.addIssue(makeArgsIssue(args, e));
          throw error40;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error40.addIssue(makeReturnsIssue(result, e));
          throw error40;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError2([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError2([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new _ZodFunction({
      ...this._def,
      args: ZodTuple2.create(items).rest(ZodUnknown2.create())
    });
  }
  returns(returnType) {
    return new _ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new _ZodFunction({
      args: args ? args : ZodTuple2.create([]).rest(ZodUnknown2.create()),
      returns: returns || ZodUnknown2.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
};
var ZodLazy2 = class extends ZodType2 {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy2.create = (getter, params) => {
  return new ZodLazy2({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral2 = class extends ZodType2 {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode2.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral2.create = (value, params) => {
  return new ZodLiteral2({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum2({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum2 = class _ZodEnum extends ZodType2 {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode2.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(this._def.values);
    }
    if (!this._cache.has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode2.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return _ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
};
ZodEnum2.create = createZodEnum;
var ZodNativeEnum = class extends ZodType2 {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode2.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(util.getValidEnumValues(this._def.values));
    }
    if (!this._cache.has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode2.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise2 = class extends ZodType2 {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise2.create = (schema, params) => {
  return new ZodPromise2({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType2 {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return INVALID;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return INVALID;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
            status: status.value,
            value: result
          }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess2, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess2 },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional2 = class extends ZodType2 {
  _parse(input) {
    const parsedType4 = this._getType(input);
    if (parsedType4 === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional2.create = (type, params) => {
  return new ZodOptional2({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable2 = class extends ZodType2 {
  _parse(input) {
    const parsedType4 = this._getType(input);
    if (parsedType4 === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable2.create = (type, params) => {
  return new ZodNullable2({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault2 = class extends ZodType2 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault2.create = (type, params) => {
  return new ZodDefault2({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch2 = class extends ZodType2 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError2(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError2(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch2.create = (type, params) => {
  return new ZodCatch2({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN2 = class extends ZodType2 {
  _parse(input) {
    const parsedType4 = this._getType(input);
    if (parsedType4 !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode2.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN2.create = (params) => {
  return new ZodNaN2({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType2 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class _ZodPipeline extends ZodType2 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new _ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var ZodReadonly2 = class extends ZodType2 {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodReadonly2.create = (type, params) => {
  return new ZodReadonly2({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function cleanParams(params, data) {
  const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
  const p2 = typeof p === "string" ? { message: p } : p;
  return p2;
}
function custom2(check2, _params = {}, fatal) {
  if (check2)
    return ZodAny2.create().superRefine((data, ctx) => {
      const r = check2(data);
      if (r instanceof Promise) {
        return r.then((r2) => {
          if (!r2) {
            const params = cleanParams(_params, data);
            const _fatal = params.fatal ?? fatal ?? true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
        });
      }
      if (!r) {
        const params = cleanParams(_params, data);
        const _fatal = params.fatal ?? fatal ?? true;
        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
      }
      return;
    });
  return ZodAny2.create();
}
var late = {
  object: ZodObject2.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom2((data) => data instanceof cls, params);
var stringType = ZodString2.create;
var numberType = ZodNumber2.create;
var nanType = ZodNaN2.create;
var bigIntType = ZodBigInt2.create;
var booleanType = ZodBoolean2.create;
var dateType = ZodDate2.create;
var symbolType = ZodSymbol2.create;
var undefinedType = ZodUndefined2.create;
var nullType = ZodNull2.create;
var anyType = ZodAny2.create;
var unknownType = ZodUnknown2.create;
var neverType = ZodNever2.create;
var voidType = ZodVoid2.create;
var arrayType = ZodArray2.create;
var objectType = ZodObject2.create;
var strictObjectType = ZodObject2.strictCreate;
var unionType = ZodUnion2.create;
var discriminatedUnionType = ZodDiscriminatedUnion2.create;
var intersectionType = ZodIntersection2.create;
var tupleType = ZodTuple2.create;
var recordType = ZodRecord2.create;
var mapType = ZodMap2.create;
var setType = ZodSet2.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy2.create;
var literalType = ZodLiteral2.create;
var enumType = ZodEnum2.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise2.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional2.create;
var nullableType = ZodNullable2.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString2.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber2.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean2.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt2.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate2.create({ ...arg, coerce: true })
};
var NEVER2 = INVALID;

// node_modules/openai/_vendor/zod-to-json-schema/parsers/any.mjs
function parseAnyDef() {
  return {};
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/array.mjs
function parseArrayDef(def, refs) {
  var _a, _b;
  const res = {
    type: "array"
  };
  if (((_b = (_a = def.type) == null ? void 0 : _a._def) == null ? void 0 : _b.typeName) !== ZodFirstPartyTypeKind.ZodAny) {
    res.items = parseDef(def.type._def, {
      ...refs,
      currentPath: [...refs.currentPath, "items"]
    });
  }
  if (def.minLength) {
    setResponseValueAndErrors(res, "minItems", def.minLength.value, def.minLength.message, refs);
  }
  if (def.maxLength) {
    setResponseValueAndErrors(res, "maxItems", def.maxLength.value, def.maxLength.message, refs);
  }
  if (def.exactLength) {
    setResponseValueAndErrors(res, "minItems", def.exactLength.value, def.exactLength.message, refs);
    setResponseValueAndErrors(res, "maxItems", def.exactLength.value, def.exactLength.message, refs);
  }
  return res;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/bigint.mjs
function parseBigintDef(def, refs) {
  const res = {
    type: "integer",
    format: "int64"
  };
  if (!def.checks)
    return res;
  for (const check2 of def.checks) {
    switch (check2.kind) {
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check2.inclusive) {
            setResponseValueAndErrors(res, "minimum", check2.value, check2.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check2.value, check2.message, refs);
          }
        } else {
          if (!check2.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check2.value, check2.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check2.inclusive) {
            setResponseValueAndErrors(res, "maximum", check2.value, check2.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check2.value, check2.message, refs);
          }
        } else {
          if (!check2.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check2.value, check2.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check2.value, check2.message, refs);
        break;
    }
  }
  return res;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/boolean.mjs
function parseBooleanDef() {
  return {
    type: "boolean"
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/branded.mjs
function parseBrandedDef(_def, refs) {
  return parseDef(_def.type._def, refs);
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/catch.mjs
var parseCatchDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/date.mjs
function parseDateDef(def, refs, overrideDateStrategy) {
  const strategy = overrideDateStrategy ?? refs.dateStrategy;
  if (Array.isArray(strategy)) {
    return {
      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))
    };
  }
  switch (strategy) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return integerDateParser(def, refs);
  }
}
var integerDateParser = (def, refs) => {
  const res = {
    type: "integer",
    format: "unix-time"
  };
  if (refs.target === "openApi3") {
    return res;
  }
  for (const check2 of def.checks) {
    switch (check2.kind) {
      case "min":
        setResponseValueAndErrors(
          res,
          "minimum",
          check2.value,
          // This is in milliseconds
          check2.message,
          refs
        );
        break;
      case "max":
        setResponseValueAndErrors(
          res,
          "maximum",
          check2.value,
          // This is in milliseconds
          check2.message,
          refs
        );
        break;
    }
  }
  return res;
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/default.mjs
function parseDefaultDef(_def, refs) {
  return {
    ...parseDef(_def.innerType._def, refs),
    default: _def.defaultValue()
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/effects.mjs
function parseEffectsDef(_def, refs, forceResolution) {
  return refs.effectStrategy === "input" ? parseDef(_def.schema._def, refs, forceResolution) : {};
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/enum.mjs
function parseEnumDef(def) {
  return {
    type: "string",
    enum: [...def.values]
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/intersection.mjs
var isJsonSchema7AllOfType = (type) => {
  if ("type" in type && type.type === "string")
    return false;
  return "allOf" in type;
};
function parseIntersectionDef(def, refs) {
  const allOf = [
    parseDef(def.left._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "0"]
    }),
    parseDef(def.right._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "1"]
    })
  ].filter((x) => !!x);
  let unevaluatedProperties = refs.target === "jsonSchema2019-09" ? { unevaluatedProperties: false } : void 0;
  const mergedAllOf = [];
  allOf.forEach((schema) => {
    if (isJsonSchema7AllOfType(schema)) {
      mergedAllOf.push(...schema.allOf);
      if (schema.unevaluatedProperties === void 0) {
        unevaluatedProperties = void 0;
      }
    } else {
      let nestedSchema = schema;
      if ("additionalProperties" in schema && schema.additionalProperties === false) {
        const { additionalProperties, ...rest } = schema;
        nestedSchema = rest;
      } else {
        unevaluatedProperties = void 0;
      }
      mergedAllOf.push(nestedSchema);
    }
  });
  return mergedAllOf.length ? {
    allOf: mergedAllOf,
    ...unevaluatedProperties
  } : void 0;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/literal.mjs
function parseLiteralDef(def, refs) {
  const parsedType4 = typeof def.value;
  if (parsedType4 !== "bigint" && parsedType4 !== "number" && parsedType4 !== "boolean" && parsedType4 !== "string") {
    return {
      type: Array.isArray(def.value) ? "array" : "object"
    };
  }
  if (refs.target === "openApi3") {
    return {
      type: parsedType4 === "bigint" ? "integer" : parsedType4,
      enum: [def.value]
    };
  }
  return {
    type: parsedType4 === "bigint" ? "integer" : parsedType4,
    const: def.value
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/string.mjs
var emojiRegex2;
var zodPatterns = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => {
    if (emojiRegex2 === void 0) {
      emojiRegex2 = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u");
    }
    return emojiRegex2;
  },
  /**
   * Unused
   */
  uuid: /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,
  /**
   * Unused
   */
  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
  /**
   * Unused
   */
  ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/
};
function parseStringDef(def, refs) {
  const res = {
    type: "string"
  };
  function processPattern(value) {
    return refs.patternStrategy === "escape" ? escapeNonAlphaNumeric(value) : value;
  }
  if (def.checks) {
    for (const check2 of def.checks) {
      switch (check2.kind) {
        case "min":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check2.value) : check2.value, check2.message, refs);
          break;
        case "max":
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check2.value) : check2.value, check2.message, refs);
          break;
        case "email":
          switch (refs.emailStrategy) {
            case "format:email":
              addFormat(res, "email", check2.message, refs);
              break;
            case "format:idn-email":
              addFormat(res, "idn-email", check2.message, refs);
              break;
            case "pattern:zod":
              addPattern(res, zodPatterns.email, check2.message, refs);
              break;
          }
          break;
        case "url":
          addFormat(res, "uri", check2.message, refs);
          break;
        case "uuid":
          addFormat(res, "uuid", check2.message, refs);
          break;
        case "regex":
          addPattern(res, check2.regex, check2.message, refs);
          break;
        case "cuid":
          addPattern(res, zodPatterns.cuid, check2.message, refs);
          break;
        case "cuid2":
          addPattern(res, zodPatterns.cuid2, check2.message, refs);
          break;
        case "startsWith":
          addPattern(res, RegExp(`^${processPattern(check2.value)}`), check2.message, refs);
          break;
        case "endsWith":
          addPattern(res, RegExp(`${processPattern(check2.value)}$`), check2.message, refs);
          break;
        case "datetime":
          addFormat(res, "date-time", check2.message, refs);
          break;
        case "date":
          addFormat(res, "date", check2.message, refs);
          break;
        case "time":
          addFormat(res, "time", check2.message, refs);
          break;
        case "duration":
          addFormat(res, "duration", check2.message, refs);
          break;
        case "length":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check2.value) : check2.value, check2.message, refs);
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check2.value) : check2.value, check2.message, refs);
          break;
        case "includes": {
          addPattern(res, RegExp(processPattern(check2.value)), check2.message, refs);
          break;
        }
        case "ip": {
          if (check2.version !== "v6") {
            addFormat(res, "ipv4", check2.message, refs);
          }
          if (check2.version !== "v4") {
            addFormat(res, "ipv6", check2.message, refs);
          }
          break;
        }
        case "emoji":
          addPattern(res, zodPatterns.emoji, check2.message, refs);
          break;
        case "ulid": {
          addPattern(res, zodPatterns.ulid, check2.message, refs);
          break;
        }
        case "base64": {
          switch (refs.base64Strategy) {
            case "format:binary": {
              addFormat(res, "binary", check2.message, refs);
              break;
            }
            case "contentEncoding:base64": {
              setResponseValueAndErrors(res, "contentEncoding", "base64", check2.message, refs);
              break;
            }
            case "pattern:zod": {
              addPattern(res, zodPatterns.base64, check2.message, refs);
              break;
            }
          }
          break;
        }
        case "nanoid": {
          addPattern(res, zodPatterns.nanoid, check2.message, refs);
        }
        case "toLowerCase":
        case "toUpperCase":
        case "trim":
          break;
        default:
          /* @__PURE__ */ ((_) => {
          })(check2);
      }
    }
  }
  return res;
}
var escapeNonAlphaNumeric = (value) => Array.from(value).map((c) => /[a-zA-Z0-9]/.test(c) ? c : `\\${c}`).join("");
var addFormat = (schema, value, message, refs) => {
  var _a;
  if (schema.format || ((_a = schema.anyOf) == null ? void 0 : _a.some((x) => x.format))) {
    if (!schema.anyOf) {
      schema.anyOf = [];
    }
    if (schema.format) {
      schema.anyOf.push({
        format: schema.format,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { format: schema.errorMessage.format }
        }
      });
      delete schema.format;
      if (schema.errorMessage) {
        delete schema.errorMessage.format;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.anyOf.push({
      format: value,
      ...message && refs.errorMessages && { errorMessage: { format: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "format", value, message, refs);
  }
};
var addPattern = (schema, regex, message, refs) => {
  var _a;
  if (schema.pattern || ((_a = schema.allOf) == null ? void 0 : _a.some((x) => x.pattern))) {
    if (!schema.allOf) {
      schema.allOf = [];
    }
    if (schema.pattern) {
      schema.allOf.push({
        pattern: schema.pattern,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { pattern: schema.errorMessage.pattern }
        }
      });
      delete schema.pattern;
      if (schema.errorMessage) {
        delete schema.errorMessage.pattern;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.allOf.push({
      pattern: processRegExp(regex, refs),
      ...message && refs.errorMessages && { errorMessage: { pattern: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "pattern", processRegExp(regex, refs), message, refs);
  }
};
var processRegExp = (regexOrFunction, refs) => {
  var _a;
  const regex = typeof regexOrFunction === "function" ? regexOrFunction() : regexOrFunction;
  if (!refs.applyRegexFlags || !regex.flags)
    return regex.source;
  const flags = {
    i: regex.flags.includes("i"),
    // Case-insensitive
    m: regex.flags.includes("m"),
    // `^` and `$` matches adjacent to newline characters
    s: regex.flags.includes("s")
    // `.` matches newlines
  };
  const source = flags.i ? regex.source.toLowerCase() : regex.source;
  let pattern = "";
  let isEscaped = false;
  let inCharGroup = false;
  let inCharRange = false;
  for (let i = 0; i < source.length; i++) {
    if (isEscaped) {
      pattern += source[i];
      isEscaped = false;
      continue;
    }
    if (flags.i) {
      if (inCharGroup) {
        if (source[i].match(/[a-z]/)) {
          if (inCharRange) {
            pattern += source[i];
            pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();
            inCharRange = false;
          } else if (source[i + 1] === "-" && ((_a = source[i + 2]) == null ? void 0 : _a.match(/[a-z]/))) {
            pattern += source[i];
            inCharRange = true;
          } else {
            pattern += `${source[i]}${source[i].toUpperCase()}`;
          }
          continue;
        }
      } else if (source[i].match(/[a-z]/)) {
        pattern += `[${source[i]}${source[i].toUpperCase()}]`;
        continue;
      }
    }
    if (flags.m) {
      if (source[i] === "^") {
        pattern += `(^|(?<=[\r
]))`;
        continue;
      } else if (source[i] === "$") {
        pattern += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (flags.s && source[i] === ".") {
      pattern += inCharGroup ? `${source[i]}\r
` : `[${source[i]}\r
]`;
      continue;
    }
    pattern += source[i];
    if (source[i] === "\\") {
      isEscaped = true;
    } else if (inCharGroup && source[i] === "]") {
      inCharGroup = false;
    } else if (!inCharGroup && source[i] === "[") {
      inCharGroup = true;
    }
  }
  try {
    const regexTest = new RegExp(pattern);
  } catch {
    console.warn(`Could not convert regex pattern at ${refs.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`);
    return regex.source;
  }
  return pattern;
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/record.mjs
function parseRecordDef(def, refs) {
  var _a, _b, _c, _d;
  if (refs.target === "openApi3" && ((_a = def.keyType) == null ? void 0 : _a._def.typeName) === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      type: "object",
      required: def.keyType._def.values,
      properties: def.keyType._def.values.reduce((acc, key) => ({
        ...acc,
        [key]: parseDef(def.valueType._def, {
          ...refs,
          currentPath: [...refs.currentPath, "properties", key]
        }) ?? {}
      }), {}),
      additionalProperties: false
    };
  }
  const schema = {
    type: "object",
    additionalProperties: parseDef(def.valueType._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    }) ?? {}
  };
  if (refs.target === "openApi3") {
    return schema;
  }
  if (((_b = def.keyType) == null ? void 0 : _b._def.typeName) === ZodFirstPartyTypeKind.ZodString && ((_c = def.keyType._def.checks) == null ? void 0 : _c.length)) {
    const keyType = Object.entries(parseStringDef(def.keyType._def, refs)).reduce((acc, [key, value]) => key === "type" ? acc : { ...acc, [key]: value }, {});
    return {
      ...schema,
      propertyNames: keyType
    };
  } else if (((_d = def.keyType) == null ? void 0 : _d._def.typeName) === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      ...schema,
      propertyNames: {
        enum: def.keyType._def.values
      }
    };
  }
  return schema;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/map.mjs
function parseMapDef(def, refs) {
  if (refs.mapStrategy === "record") {
    return parseRecordDef(def, refs);
  }
  const keys = parseDef(def.keyType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "0"]
  }) || {};
  const values = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "1"]
  }) || {};
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [keys, values],
      minItems: 2,
      maxItems: 2
    }
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/nativeEnum.mjs
function parseNativeEnumDef(def) {
  const object2 = def.values;
  const actualKeys = Object.keys(def.values).filter((key) => {
    return typeof object2[object2[key]] !== "number";
  });
  const actualValues = actualKeys.map((key) => object2[key]);
  const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));
  return {
    type: parsedTypes.length === 1 ? parsedTypes[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: actualValues
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/never.mjs
function parseNeverDef() {
  return {
    not: {}
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/null.mjs
function parseNullDef(refs) {
  return refs.target === "openApi3" ? {
    enum: ["null"],
    nullable: true
  } : {
    type: "null"
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/union.mjs
var primitiveMappings = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function parseUnionDef(def, refs) {
  if (refs.target === "openApi3")
    return asAnyOf(def, refs);
  const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;
  if (options.every((x) => x._def.typeName in primitiveMappings && (!x._def.checks || !x._def.checks.length))) {
    const types = options.reduce((types2, x) => {
      const type = primitiveMappings[x._def.typeName];
      return type && !types2.includes(type) ? [...types2, type] : types2;
    }, []);
    return {
      type: types.length > 1 ? types : types[0]
    };
  } else if (options.every((x) => x._def.typeName === "ZodLiteral" && !x.description)) {
    const types = options.reduce((acc, x) => {
      const type = typeof x._def.value;
      switch (type) {
        case "string":
        case "number":
        case "boolean":
          return [...acc, type];
        case "bigint":
          return [...acc, "integer"];
        case "object":
          if (x._def.value === null)
            return [...acc, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return acc;
      }
    }, []);
    if (types.length === options.length) {
      const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);
      return {
        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],
        enum: options.reduce((acc, x) => {
          return acc.includes(x._def.value) ? acc : [...acc, x._def.value];
        }, [])
      };
    }
  } else if (options.every((x) => x._def.typeName === "ZodEnum")) {
    return {
      type: "string",
      enum: options.reduce((acc, x) => [...acc, ...x._def.values.filter((x2) => !acc.includes(x2))], [])
    };
  }
  return asAnyOf(def, refs);
}
var asAnyOf = (def, refs) => {
  const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map((x, i) => parseDef(x._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", `${i}`]
  })).filter((x) => !!x && (!refs.strictUnions || typeof x === "object" && Object.keys(x).length > 0));
  return anyOf.length ? { anyOf } : void 0;
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/nullable.mjs
function parseNullableDef(def, refs) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(def.innerType._def.typeName) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {
    if (refs.target === "openApi3" || refs.nullableStrategy === "property") {
      return {
        type: primitiveMappings[def.innerType._def.typeName],
        nullable: true
      };
    }
    return {
      type: [primitiveMappings[def.innerType._def.typeName], "null"]
    };
  }
  if (refs.target === "openApi3") {
    const base2 = parseDef(def.innerType._def, {
      ...refs,
      currentPath: [...refs.currentPath]
    });
    if (base2 && "$ref" in base2)
      return { allOf: [base2], nullable: true };
    return base2 && { ...base2, nullable: true };
  }
  const base = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "0"]
  });
  return base && { anyOf: [base, { type: "null" }] };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/number.mjs
function parseNumberDef(def, refs) {
  const res = {
    type: "number"
  };
  if (!def.checks)
    return res;
  for (const check2 of def.checks) {
    switch (check2.kind) {
      case "int":
        res.type = "integer";
        addErrorMessage(res, "type", check2.message, refs);
        break;
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check2.inclusive) {
            setResponseValueAndErrors(res, "minimum", check2.value, check2.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check2.value, check2.message, refs);
          }
        } else {
          if (!check2.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check2.value, check2.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check2.inclusive) {
            setResponseValueAndErrors(res, "maximum", check2.value, check2.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check2.value, check2.message, refs);
          }
        } else {
          if (!check2.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check2.value, check2.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check2.value, check2.message, refs);
        break;
    }
  }
  return res;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/object.mjs
function decideAdditionalProperties(def, refs) {
  if (refs.removeAdditionalStrategy === "strict") {
    return def.catchall._def.typeName === "ZodNever" ? def.unknownKeys !== "strict" : parseDef(def.catchall._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    }) ?? true;
  } else {
    return def.catchall._def.typeName === "ZodNever" ? def.unknownKeys === "passthrough" : parseDef(def.catchall._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    }) ?? true;
  }
}
function parseObjectDef(def, refs) {
  const result = {
    type: "object",
    ...Object.entries(def.shape()).reduce((acc, [propName, propDef]) => {
      var _a;
      if (propDef === void 0 || propDef._def === void 0)
        return acc;
      const propertyPath = [...refs.currentPath, "properties", propName];
      const parsedDef = parseDef(propDef._def, {
        ...refs,
        currentPath: propertyPath,
        propertyPath
      });
      if (parsedDef === void 0)
        return acc;
      if (refs.openaiStrictMode && propDef.isOptional() && !propDef.isNullable() && typeof ((_a = propDef._def) == null ? void 0 : _a.defaultValue) === "undefined") {
        throw new Error(`Zod field at \`${propertyPath.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
      }
      return {
        properties: {
          ...acc.properties,
          [propName]: parsedDef
        },
        required: propDef.isOptional() && !refs.openaiStrictMode ? acc.required : [...acc.required, propName]
      };
    }, { properties: {}, required: [] }),
    additionalProperties: decideAdditionalProperties(def, refs)
  };
  if (!result.required.length)
    delete result.required;
  return result;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/optional.mjs
var parseOptionalDef = (def, refs) => {
  if (refs.propertyPath && refs.currentPath.slice(0, refs.propertyPath.length).toString() === refs.propertyPath.toString()) {
    return parseDef(def.innerType._def, { ...refs, currentPath: refs.currentPath });
  }
  const innerSchema = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "1"]
  });
  return innerSchema ? {
    anyOf: [
      {
        not: {}
      },
      innerSchema
    ]
  } : {};
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/pipeline.mjs
var parsePipelineDef = (def, refs) => {
  if (refs.pipeStrategy === "input") {
    return parseDef(def.in._def, refs);
  } else if (refs.pipeStrategy === "output") {
    return parseDef(def.out._def, refs);
  }
  const a = parseDef(def.in._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", "0"]
  });
  const b = parseDef(def.out._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", a ? "1" : "0"]
  });
  return {
    allOf: [a, b].filter((x) => x !== void 0)
  };
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/promise.mjs
function parsePromiseDef(def, refs) {
  return parseDef(def.type._def, refs);
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/set.mjs
function parseSetDef(def, refs) {
  const items = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items"]
  });
  const schema = {
    type: "array",
    uniqueItems: true,
    items
  };
  if (def.minSize) {
    setResponseValueAndErrors(schema, "minItems", def.minSize.value, def.minSize.message, refs);
  }
  if (def.maxSize) {
    setResponseValueAndErrors(schema, "maxItems", def.maxSize.value, def.maxSize.message, refs);
  }
  return schema;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/tuple.mjs
function parseTupleDef(def, refs) {
  if (def.rest) {
    return {
      type: "array",
      minItems: def.items.length,
      items: def.items.map((x, i) => parseDef(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i}`]
      })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], []),
      additionalItems: parseDef(def.rest._def, {
        ...refs,
        currentPath: [...refs.currentPath, "additionalItems"]
      })
    };
  } else {
    return {
      type: "array",
      minItems: def.items.length,
      maxItems: def.items.length,
      items: def.items.map((x, i) => parseDef(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i}`]
      })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], [])
    };
  }
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/undefined.mjs
function parseUndefinedDef() {
  return {
    not: {}
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/unknown.mjs
function parseUnknownDef() {
  return {};
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/readonly.mjs
var parseReadonlyDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};

// node_modules/openai/_vendor/zod-to-json-schema/parseDef.mjs
function parseDef(def, refs, forceResolution = false) {
  var _a;
  const seenItem = refs.seen.get(def);
  if (refs.override) {
    const overrideResult = (_a = refs.override) == null ? void 0 : _a.call(refs, def, refs, seenItem, forceResolution);
    if (overrideResult !== ignoreOverride) {
      return overrideResult;
    }
  }
  if (seenItem && !forceResolution) {
    const seenSchema = get$ref(seenItem, refs);
    if (seenSchema !== void 0) {
      if ("$ref" in seenSchema) {
        refs.seenRefs.add(seenSchema.$ref);
      }
      return seenSchema;
    }
  }
  const newItem = { def, path: refs.currentPath, jsonSchema: void 0 };
  refs.seen.set(def, newItem);
  const jsonSchema = selectParser(def, def.typeName, refs, forceResolution);
  if (jsonSchema) {
    addMeta(def, refs, jsonSchema);
  }
  newItem.jsonSchema = jsonSchema;
  return jsonSchema;
}
var get$ref = (item, refs) => {
  switch (refs.$refStrategy) {
    case "root":
      return { $ref: item.path.join("/") };
    case "extract-to-root":
      const name = item.path.slice(refs.basePath.length + 1).join("_");
      if (name !== refs.name && refs.nameStrategy === "duplicate-ref") {
        refs.definitions[name] = item.def;
      }
      return { $ref: [...refs.basePath, refs.definitionPath, name].join("/") };
    case "relative":
      return { $ref: getRelativePath(refs.currentPath, item.path) };
    case "none":
    case "seen": {
      if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {
        console.warn(`Recursive reference detected at ${refs.currentPath.join("/")}! Defaulting to any`);
        return {};
      }
      return refs.$refStrategy === "seen" ? {} : void 0;
    }
  }
};
var getRelativePath = (pathA, pathB) => {
  let i = 0;
  for (; i < pathA.length && i < pathB.length; i++) {
    if (pathA[i] !== pathB[i])
      break;
  }
  return [(pathA.length - i).toString(), ...pathB.slice(i)].join("/");
};
var selectParser = (def, typeName, refs, forceResolution) => {
  switch (typeName) {
    case ZodFirstPartyTypeKind.ZodString:
      return parseStringDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNumber:
      return parseNumberDef(def, refs);
    case ZodFirstPartyTypeKind.ZodObject:
      return parseObjectDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBigInt:
      return parseBigintDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBoolean:
      return parseBooleanDef();
    case ZodFirstPartyTypeKind.ZodDate:
      return parseDateDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUndefined:
      return parseUndefinedDef();
    case ZodFirstPartyTypeKind.ZodNull:
      return parseNullDef(refs);
    case ZodFirstPartyTypeKind.ZodArray:
      return parseArrayDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUnion:
    case ZodFirstPartyTypeKind.ZodDiscriminatedUnion:
      return parseUnionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodIntersection:
      return parseIntersectionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodTuple:
      return parseTupleDef(def, refs);
    case ZodFirstPartyTypeKind.ZodRecord:
      return parseRecordDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLiteral:
      return parseLiteralDef(def, refs);
    case ZodFirstPartyTypeKind.ZodEnum:
      return parseEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNativeEnum:
      return parseNativeEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNullable:
      return parseNullableDef(def, refs);
    case ZodFirstPartyTypeKind.ZodOptional:
      return parseOptionalDef(def, refs);
    case ZodFirstPartyTypeKind.ZodMap:
      return parseMapDef(def, refs);
    case ZodFirstPartyTypeKind.ZodSet:
      return parseSetDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLazy:
      return parseDef(def.getter()._def, refs);
    case ZodFirstPartyTypeKind.ZodPromise:
      return parsePromiseDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNaN:
    case ZodFirstPartyTypeKind.ZodNever:
      return parseNeverDef();
    case ZodFirstPartyTypeKind.ZodEffects:
      return parseEffectsDef(def, refs, forceResolution);
    case ZodFirstPartyTypeKind.ZodAny:
      return parseAnyDef();
    case ZodFirstPartyTypeKind.ZodUnknown:
      return parseUnknownDef();
    case ZodFirstPartyTypeKind.ZodDefault:
      return parseDefaultDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBranded:
      return parseBrandedDef(def, refs);
    case ZodFirstPartyTypeKind.ZodReadonly:
      return parseReadonlyDef(def, refs);
    case ZodFirstPartyTypeKind.ZodCatch:
      return parseCatchDef(def, refs);
    case ZodFirstPartyTypeKind.ZodPipeline:
      return parsePipelineDef(def, refs);
    case ZodFirstPartyTypeKind.ZodFunction:
    case ZodFirstPartyTypeKind.ZodVoid:
    case ZodFirstPartyTypeKind.ZodSymbol:
      return void 0;
    default:
      return /* @__PURE__ */ ((_) => void 0)(typeName);
  }
};
var addMeta = (def, refs, jsonSchema) => {
  if (def.description) {
    jsonSchema.description = def.description;
    if (refs.markdownDescription) {
      jsonSchema.markdownDescription = def.description;
    }
  }
  return jsonSchema;
};

// node_modules/openai/_vendor/zod-to-json-schema/zodToJsonSchema.mjs
var zodToJsonSchema = (schema, options) => {
  const refs = getRefs(options);
  const name = typeof options === "string" ? options : (options == null ? void 0 : options.nameStrategy) === "title" ? void 0 : options == null ? void 0 : options.name;
  const main = parseDef(schema._def, name === void 0 ? refs : {
    ...refs,
    currentPath: [...refs.basePath, refs.definitionPath, name]
  }, false) ?? {};
  const title = typeof options === "object" && options.name !== void 0 && options.nameStrategy === "title" ? options.name : void 0;
  if (title !== void 0) {
    main.title = title;
  }
  const definitions = (() => {
    if (isEmptyObj(refs.definitions)) {
      return void 0;
    }
    const definitions2 = {};
    const processedDefinitions = /* @__PURE__ */ new Set();
    for (let i = 0; i < 500; i++) {
      const newDefinitions = Object.entries(refs.definitions).filter(([key]) => !processedDefinitions.has(key));
      if (newDefinitions.length === 0)
        break;
      for (const [key, schema2] of newDefinitions) {
        definitions2[key] = parseDef(zodDef(schema2), { ...refs, currentPath: [...refs.basePath, refs.definitionPath, key] }, true) ?? {};
        processedDefinitions.add(key);
      }
    }
    return definitions2;
  })();
  const combined = name === void 0 ? definitions ? {
    ...main,
    [refs.definitionPath]: definitions
  } : main : refs.nameStrategy === "duplicate-ref" ? {
    ...main,
    ...definitions || refs.seenRefs.size ? {
      [refs.definitionPath]: {
        ...definitions,
        // only actually duplicate the schema definition if it was ever referenced
        // otherwise the duplication is completely pointless
        ...refs.seenRefs.size ? { [name]: main } : void 0
      }
    } : void 0
  } : {
    $ref: [...refs.$refStrategy === "relative" ? [] : refs.basePath, refs.definitionPath, name].join("/"),
    [refs.definitionPath]: {
      ...definitions,
      [name]: main
    }
  };
  if (refs.target === "jsonSchema7") {
    combined.$schema = "http://json-schema.org/draft-07/schema#";
  } else if (refs.target === "jsonSchema2019-09") {
    combined.$schema = "https://json-schema.org/draft/2019-09/schema#";
  }
  return combined;
};

// node_modules/openai/lib/transform.mjs
function toStrictJsonSchema(schema) {
  if (schema.type !== "object") {
    throw new Error(`Root schema must have type: 'object' but got type: ${schema.type ? `'${schema.type}'` : "undefined"}`);
  }
  const schemaCopy = structuredClone(schema);
  return ensureStrictJsonSchema(schemaCopy, [], schemaCopy);
}
function isNullable(schema) {
  if (typeof schema === "boolean") {
    return false;
  }
  if (schema.type === "null") {
    return true;
  }
  for (const oneOfVariant of schema.oneOf ?? []) {
    if (isNullable(oneOfVariant)) {
      return true;
    }
  }
  for (const allOfVariant of schema.anyOf ?? []) {
    if (isNullable(allOfVariant)) {
      return true;
    }
  }
  return false;
}
function ensureStrictJsonSchema(jsonSchema, path, root) {
  if (typeof jsonSchema === "boolean") {
    throw new TypeError(`Expected object schema but got boolean; path=${path.join("/")}`);
  }
  if (!isObject2(jsonSchema)) {
    throw new TypeError(`Expected ${JSON.stringify(jsonSchema)} to be an object; path=${path.join("/")}`);
  }
  const defs = jsonSchema.$defs;
  if (isObject2(defs)) {
    for (const [defName, defSchema] of Object.entries(defs)) {
      ensureStrictJsonSchema(defSchema, [...path, "$defs", defName], root);
    }
  }
  const definitions = jsonSchema.definitions;
  if (isObject2(definitions)) {
    for (const [definitionName, definitionSchema] of Object.entries(definitions)) {
      ensureStrictJsonSchema(definitionSchema, [...path, "definitions", definitionName], root);
    }
  }
  const typ = jsonSchema.type;
  if (typ === "object" && !("additionalProperties" in jsonSchema)) {
    jsonSchema.additionalProperties = false;
  }
  const required2 = jsonSchema.required ?? [];
  const properties = jsonSchema.properties;
  if (isObject2(properties)) {
    for (const [key, value] of Object.entries(properties)) {
      if (!isNullable(value) && !required2.includes(key)) {
        throw new Error(`Zod field at \`${[...path, "properties", key].join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
      }
    }
    jsonSchema.required = Object.keys(properties);
    jsonSchema.properties = Object.fromEntries(Object.entries(properties).map(([key, propSchema]) => [
      key,
      ensureStrictJsonSchema(propSchema, [...path, "properties", key], root)
    ]));
  }
  const items = jsonSchema.items;
  if (isObject2(items)) {
    jsonSchema.items = ensureStrictJsonSchema(items, [...path, "items"], root);
  }
  const anyOf = jsonSchema.anyOf;
  if (Array.isArray(anyOf)) {
    jsonSchema.anyOf = anyOf.map((variant, i) => ensureStrictJsonSchema(variant, [...path, "anyOf", String(i)], root));
  }
  const allOf = jsonSchema.allOf;
  if (Array.isArray(allOf)) {
    if (allOf.length === 1) {
      const resolved = ensureStrictJsonSchema(allOf[0], [...path, "allOf", "0"], root);
      Object.assign(jsonSchema, resolved);
      delete jsonSchema.allOf;
    } else {
      jsonSchema.allOf = allOf.map((entry, i) => ensureStrictJsonSchema(entry, [...path, "allOf", String(i)], root));
    }
  }
  if (jsonSchema.default === null) {
    delete jsonSchema.default;
  }
  const ref = jsonSchema.$ref;
  if (ref && hasMoreThanNKeys(jsonSchema, 1)) {
    if (typeof ref !== "string") {
      throw new TypeError(`Received non-string $ref - ${ref}; path=${path.join("/")}`);
    }
    const resolved = resolveRef(root, ref);
    if (typeof resolved === "boolean") {
      throw new Error(`Expected \`$ref: ${ref}\` to resolve to an object schema but got boolean`);
    }
    if (!isObject2(resolved)) {
      throw new Error(`Expected \`$ref: ${ref}\` to resolve to an object but got ${JSON.stringify(resolved)}`);
    }
    Object.assign(jsonSchema, { ...resolved, ...jsonSchema });
    delete jsonSchema.$ref;
    return ensureStrictJsonSchema(jsonSchema, path, root);
  }
  return jsonSchema;
}
function resolveRef(root, ref) {
  if (!ref.startsWith("#/")) {
    throw new Error(`Unexpected $ref format ${JSON.stringify(ref)}; Does not start with #/`);
  }
  const pathParts = ref.slice(2).split("/");
  let resolved = root;
  for (const key of pathParts) {
    if (!isObject2(resolved)) {
      throw new Error(`encountered non-object entry while resolving ${ref} - ${JSON.stringify(resolved)}`);
    }
    const value = resolved[key];
    if (value === void 0) {
      throw new Error(`Key ${key} not found while resolving ${ref}`);
    }
    resolved = value;
  }
  return resolved;
}
function isObject2(obj) {
  return typeof obj === "object" && obj !== null && !Array.isArray(obj);
}
function hasMoreThanNKeys(obj, n) {
  let i = 0;
  for (const _ in obj) {
    i++;
    if (i > n) {
      return true;
    }
  }
  return false;
}

// node_modules/openai/helpers/zod.mjs
function zodV3ToJsonSchema(schema, options) {
  return zodToJsonSchema(schema, {
    openaiStrictMode: true,
    name: options.name,
    nameStrategy: "duplicate-ref",
    $refStrategy: "extract-to-root",
    nullableStrategy: "property"
  });
}
function zodV4ToJsonSchema(schema) {
  return toStrictJsonSchema(external_exports.toJSONSchema(schema, {
    target: "draft-7"
  }));
}
function isZodV4(zodObject) {
  return "_zod" in zodObject;
}
function zodTextFormat(zodObject, name, props) {
  return makeParseableTextFormat({
    type: "json_schema",
    ...props,
    name,
    strict: true,
    schema: isZodV4(zodObject) ? zodV4ToJsonSchema(zodObject) : zodV3ToJsonSchema(zodObject, { name })
  }, (content) => zodObject.parse(JSON.parse(content)));
}
function zodResponsesFunction(options) {
  return makeParseableResponseTool({
    type: "function",
    name: options.name,
    parameters: isZodV4(options.parameters) ? zodV4ToJsonSchema(options.parameters) : zodV3ToJsonSchema(options.parameters, { name: options.name }),
    strict: true,
    ...options.description ? { description: options.description } : void 0
  }, {
    callback: options.function,
    parser: (args) => options.parameters.parse(JSON.parse(args))
  });
}

// node_modules/@openai/agents-core/dist/errors.mjs
var AgentsError = class extends Error {
  constructor(message, state) {
    super(message);
    __publicField(this, "state");
    this.state = state;
  }
};
var SystemError = class extends AgentsError {
};
var MaxTurnsExceededError = class extends AgentsError {
};
var ModelBehaviorError = class extends AgentsError {
};
var UserError = class extends AgentsError {
};
var GuardrailExecutionError = class extends AgentsError {
  constructor(message, error40, state) {
    super(message, state);
    __publicField(this, "error");
    this.error = error40;
  }
};
var ToolCallError = class extends AgentsError {
  constructor(message, error40, state) {
    super(message, state);
    __publicField(this, "error");
    this.error = error40;
  }
};
var InputGuardrailTripwireTriggered = class extends AgentsError {
  constructor(message, result, state) {
    super(message, state);
    __publicField(this, "result");
    this.result = result;
  }
};
var OutputGuardrailTripwireTriggered = class extends AgentsError {
  constructor(message, result, state) {
    super(message, state);
    __publicField(this, "result");
    this.result = result;
  }
};

// node_modules/@openai/agents-core/dist/utils/zodCompat.mjs
function asZodType(schema) {
  return schema;
}
function readZodDefinition(input) {
  var _a;
  if (typeof input !== "object" || input === null) {
    return void 0;
  }
  const candidate = input;
  return ((_a = candidate._zod) == null ? void 0 : _a.def) || candidate._def || candidate.def;
}
function readZodType(input) {
  const def = readZodDefinition(input);
  if (!def) {
    return void 0;
  }
  const rawType = typeof def.typeName === "string" && def.typeName || typeof def.type === "string" && def.type;
  if (typeof rawType !== "string") {
    return void 0;
  }
  const lower = rawType.toLowerCase();
  return lower.startsWith("zod") ? lower.slice(3) : lower;
}

// node_modules/@openai/agents-core/dist/utils/typeGuards.mjs
function isZodObject(input) {
  const definition = readZodDefinition(input);
  if (!definition) {
    return false;
  }
  const type = readZodType(input);
  return type === "object";
}
function isAgentToolInput(input) {
  return typeof input === "object" && input !== null && "input" in input && typeof input.input === "string";
}

// node_modules/@openai/agents-core/dist/utils/zodJsonSchemaCompat.mjs
var JSON_SCHEMA_DRAFT_07 = "http://json-schema.org/draft-07/schema#";
var OPTIONAL_WRAPPERS = /* @__PURE__ */ new Set(["optional"]);
var DECORATOR_WRAPPERS = /* @__PURE__ */ new Set([
  "brand",
  "branded",
  "catch",
  "default",
  "effects",
  "pipeline",
  "pipe",
  "prefault",
  "readonly",
  "refinement",
  "transform"
]);
var SIMPLE_TYPE_MAPPING = {
  string: { type: "string" },
  number: { type: "number" },
  bigint: { type: "integer" },
  boolean: { type: "boolean" },
  date: { type: "string", format: "date-time" }
};
function hasJsonSchemaObjectShape(value) {
  return typeof value === "object" && value !== null && value.type === "object" && "properties" in value && "additionalProperties" in value;
}
function zodJsonSchemaCompat(input) {
  const schema = buildObjectSchema(input);
  if (!schema) {
    return void 0;
  }
  if (!Array.isArray(schema.required)) {
    schema.required = [];
  }
  if (typeof schema.additionalProperties === "undefined") {
    schema.additionalProperties = false;
  }
  if (typeof schema.$schema !== "string") {
    schema.$schema = JSON_SCHEMA_DRAFT_07;
  }
  return schema;
}
function buildObjectSchema(value) {
  const shape = readShape(value);
  if (!shape) {
    return void 0;
  }
  const properties = {};
  const required2 = [];
  for (const [key, field] of Object.entries(shape)) {
    const { schema, optional: optional2 } = convertProperty(field);
    if (!schema) {
      return void 0;
    }
    properties[key] = schema;
    if (!optional2) {
      required2.push(key);
    }
  }
  return { type: "object", properties, required: required2, additionalProperties: false };
}
function convertProperty(value) {
  let current = unwrapDecorators(value);
  let optional2 = false;
  while (OPTIONAL_WRAPPERS.has(readZodType(current) ?? "")) {
    optional2 = true;
    const def = readZodDefinition(current);
    const next = unwrapDecorators(def == null ? void 0 : def.innerType);
    if (!next || next === current) {
      break;
    }
    current = next;
  }
  return { schema: convertSchema(current), optional: optional2 };
}
function convertSchema(value) {
  if (value === void 0) {
    return void 0;
  }
  const unwrapped = unwrapDecorators(value);
  const type = readZodType(unwrapped);
  const def = readZodDefinition(unwrapped);
  if (!type) {
    return void 0;
  }
  if (type in SIMPLE_TYPE_MAPPING) {
    return SIMPLE_TYPE_MAPPING[type];
  }
  switch (type) {
    case "object":
      return buildObjectSchema(unwrapped);
    case "array":
      return buildArraySchema(def);
    case "tuple":
      return buildTupleSchema(def);
    case "union":
      return buildUnionSchema(def);
    case "intersection":
      return buildIntersectionSchema(def);
    case "literal":
      return buildLiteral(def);
    case "enum":
    case "nativeenum":
      return buildEnum(def);
    case "record":
      return buildRecordSchema(def);
    case "map":
      return buildMapSchema(def);
    case "set":
      return buildSetSchema(def);
    case "nullable":
      return buildNullableSchema(def);
    default:
      return void 0;
  }
}
function buildArraySchema(def) {
  const items = convertSchema(extractFirst(def, "element", "items", "type"));
  return items ? { type: "array", items } : void 0;
}
function buildTupleSchema(def) {
  const items = coerceArray(def == null ? void 0 : def.items).map((item) => convertSchema(item)).filter(Boolean);
  if (!items.length) {
    return void 0;
  }
  const schema = {
    type: "array",
    items,
    minItems: items.length
  };
  if (!(def == null ? void 0 : def.rest)) {
    schema.maxItems = items.length;
  }
  return schema;
}
function buildUnionSchema(def) {
  const options = coerceArray((def == null ? void 0 : def.options) ?? (def == null ? void 0 : def.schemas)).map((option) => convertSchema(option)).filter(Boolean);
  return options.length ? { anyOf: options } : void 0;
}
function buildIntersectionSchema(def) {
  const left = convertSchema(def == null ? void 0 : def.left);
  const right = convertSchema(def == null ? void 0 : def.right);
  return left && right ? { allOf: [left, right] } : void 0;
}
function buildRecordSchema(def) {
  const valueSchema = convertSchema((def == null ? void 0 : def.valueType) ?? (def == null ? void 0 : def.values));
  return valueSchema ? { type: "object", additionalProperties: valueSchema } : void 0;
}
function buildMapSchema(def) {
  const valueSchema = convertSchema((def == null ? void 0 : def.valueType) ?? (def == null ? void 0 : def.values));
  return valueSchema ? { type: "array", items: valueSchema } : void 0;
}
function buildSetSchema(def) {
  const valueSchema = convertSchema(def == null ? void 0 : def.valueType);
  return valueSchema ? { type: "array", items: valueSchema, uniqueItems: true } : void 0;
}
function buildNullableSchema(def) {
  const inner = convertSchema((def == null ? void 0 : def.innerType) ?? (def == null ? void 0 : def.type));
  return inner ? { anyOf: [inner, { type: "null" }] } : void 0;
}
function unwrapDecorators(value) {
  let current = value;
  while (DECORATOR_WRAPPERS.has(readZodType(current) ?? "")) {
    const def = readZodDefinition(current);
    const next = (def == null ? void 0 : def.innerType) ?? (def == null ? void 0 : def.schema) ?? (def == null ? void 0 : def.base) ?? (def == null ? void 0 : def.type) ?? (def == null ? void 0 : def.wrapped) ?? (def == null ? void 0 : def.underlying);
    if (!next || next === current) {
      return current;
    }
    current = next;
  }
  return current;
}
function extractFirst(def, ...keys) {
  if (!def) {
    return void 0;
  }
  for (const key of keys) {
    if (key in def && def[key] !== void 0) {
      return def[key];
    }
  }
  return void 0;
}
function coerceArray(value) {
  if (Array.isArray(value)) {
    return value;
  }
  return value === void 0 ? [] : [value];
}
function buildLiteral(def) {
  if (!def) {
    return void 0;
  }
  const literal2 = extractFirst(def, "value", "literal");
  if (literal2 === void 0) {
    return void 0;
  }
  return {
    const: literal2,
    type: literal2 === null ? "null" : typeof literal2
  };
}
function buildEnum(def) {
  if (!def) {
    return void 0;
  }
  if (Array.isArray(def.values)) {
    return { enum: def.values };
  }
  if (Array.isArray(def.options)) {
    return { enum: def.options };
  }
  if (def.values && typeof def.values === "object") {
    return { enum: Object.values(def.values) };
  }
  if (def.enum && typeof def.enum === "object") {
    return { enum: Object.values(def.enum) };
  }
  return void 0;
}
function readShape(input) {
  if (typeof input !== "object" || input === null) {
    return void 0;
  }
  const candidate = input;
  if (candidate.shape && typeof candidate.shape === "object") {
    return candidate.shape;
  }
  if (typeof candidate.shape === "function") {
    try {
      return candidate.shape();
    } catch (_error3) {
      return void 0;
    }
  }
  const def = readZodDefinition(candidate);
  const shape = def == null ? void 0 : def.shape;
  if (shape && typeof shape === "object") {
    return shape;
  }
  if (typeof shape === "function") {
    try {
      return shape();
    } catch (_error3) {
      return void 0;
    }
  }
  return void 0;
}

// node_modules/@openai/agents-core/dist/utils/tools.mjs
var zodResponsesFunctionCompat = zodResponsesFunction;
var zodTextFormatCompat = zodTextFormat;
function buildJsonSchemaFromZod(inputType) {
  return zodJsonSchemaCompat(inputType);
}
function toFunctionToolName(name) {
  name = name.replace(/\s/g, "_");
  name = name.replace(/[^a-zA-Z0-9]/g, "_");
  if (name.length === 0) {
    throw new Error("Tool name cannot be empty");
  }
  return name;
}
function getSchemaAndParserFromInputType(inputType, name) {
  const parser = (input) => JSON.parse(input);
  if (isZodObject(inputType)) {
    const useFallback = (originalError) => {
      const fallbackSchema = buildJsonSchemaFromZod(inputType);
      if (fallbackSchema) {
        return {
          schema: fallbackSchema,
          parser: (rawInput) => inputType.parse(JSON.parse(rawInput))
        };
      }
      const errorMessage = originalError instanceof Error ? ` Upstream helper error: ${originalError.message}` : "";
      throw new UserError(`Unable to convert the provided Zod schema to JSON Schema. Ensure that the \`zod\` package is available at runtime or provide a JSON schema object instead.${errorMessage}`);
    };
    let formattedFunction;
    try {
      formattedFunction = zodResponsesFunctionCompat({
        name,
        parameters: asZodType(inputType),
        function: () => {
        },
        // empty function here to satisfy the OpenAI helper
        description: ""
      });
    } catch (error40) {
      return useFallback(error40);
    }
    if (hasJsonSchemaObjectShape(formattedFunction.parameters)) {
      return {
        schema: formattedFunction.parameters,
        parser: formattedFunction.$parseRaw
      };
    }
    return useFallback();
  } else if (typeof inputType === "object" && inputType !== null) {
    return {
      schema: inputType,
      parser
    };
  }
  throw new UserError("Input type is not a ZodObject or a valid JSON schema");
}
function convertAgentOutputTypeToSerializable(outputType) {
  if (outputType === "text") {
    return "text";
  }
  if (isZodObject(outputType)) {
    const useFallback = (existing, originalError) => {
      const fallbackSchema = buildJsonSchemaFromZod(outputType);
      if (fallbackSchema) {
        return {
          type: (existing == null ? void 0 : existing.type) ?? "json_schema",
          name: (existing == null ? void 0 : existing.name) ?? "output",
          strict: (existing == null ? void 0 : existing.strict) ?? false,
          schema: fallbackSchema
        };
      }
      const errorMessage = originalError instanceof Error ? ` Upstream helper error: ${originalError.message}` : "";
      throw new UserError(`Unable to convert the provided Zod schema to JSON Schema. Ensure that the \`zod\` package is available at runtime or provide a JSON schema object instead.${errorMessage}`);
    };
    let output;
    try {
      output = zodTextFormatCompat(asZodType(outputType), "output");
    } catch (error40) {
      return useFallback(void 0, error40);
    }
    if (hasJsonSchemaObjectShape(output.schema)) {
      return {
        type: output.type,
        name: output.name,
        strict: output.strict || false,
        schema: output.schema
      };
    }
    return useFallback(output);
  }
  return outputType;
}

// node_modules/@openai/agents-core/dist/logger.mjs
var import_debug = __toESM(require_browser(), 1);

// node_modules/@openai/agents-core/dist/config.mjs
function loadEnv2() {
  return loadEnv();
}
function isEnabled(flagName) {
  const env = loadEnv2();
  return typeof env !== "undefined" && (env[flagName] === "true" || env[flagName] === "1");
}
var tracing = {
  get disabled() {
    if (isBrowserEnvironment()) {
      return true;
    } else if (loadEnv2().NODE_ENV === "test") {
      return true;
    }
    return isEnabled("OPENAI_AGENTS_DISABLE_TRACING");
  }
};
var logging = {
  get dontLogModelData() {
    return isEnabled("OPENAI_AGENTS_DONT_LOG_MODEL_DATA");
  },
  get dontLogToolData() {
    return isEnabled("OPENAI_AGENTS_DONT_LOG_TOOL_DATA");
  }
};

// node_modules/@openai/agents-core/dist/logger.mjs
var dontLogModelData = logging.dontLogModelData;
var dontLogToolData = logging.dontLogToolData;
function getLogger(namespace = "openai-agents") {
  return {
    namespace,
    debug: (0, import_debug.default)(namespace),
    error: console.error,
    warn: console.warn,
    dontLogModelData,
    dontLogToolData
  };
}
var logger = getLogger("openai-agents:core");
var logger_default = logger;

// node_modules/@openai/agents-core/dist/utils/smartString.mjs
var BYTE_PREVIEW_LIMIT = 20;
function toSmartString(value) {
  if (value === null || value === void 0) {
    return String(value);
  }
  if (isArrayBufferLike(value)) {
    return formatByteArray(new Uint8Array(value));
  }
  if (isArrayBufferView(value)) {
    const view = value;
    return formatByteArray(new Uint8Array(view.buffer, view.byteOffset, view.byteLength));
  }
  if (typeof value === "string") {
    return value;
  }
  if (typeof value === "object") {
    try {
      return JSON.stringify(value, smartStringReplacer);
    } catch (_e) {
      return "[object with circular references]";
    }
  }
  return String(value);
}
function isArrayBufferLike(value) {
  if (value instanceof ArrayBuffer) {
    return true;
  }
  const sharedArrayBufferCtor = globalThis.SharedArrayBuffer;
  return Boolean(sharedArrayBufferCtor && value instanceof sharedArrayBufferCtor);
}
function isArrayBufferView(value) {
  return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
}
function isSerializedBufferSnapshot(value) {
  return typeof value === "object" && value !== null && value.type === "Buffer" && Array.isArray(value.data);
}
function formatByteArray(bytes) {
  if (bytes.length === 0) {
    return "[byte array (0 bytes)]";
  }
  const previewLength = Math.min(bytes.length, BYTE_PREVIEW_LIMIT);
  const previewParts = [];
  for (let i = 0; i < previewLength; i++) {
    previewParts.push(formatByte(bytes[i]));
  }
  const ellipsis = bytes.length > BYTE_PREVIEW_LIMIT ? " …" : "";
  const preview = previewParts.join(" ");
  return `[byte array ${preview}${ellipsis} (${bytes.length} bytes)]`;
}
function formatByte(byte) {
  return `0x${byte.toString(16).padStart(2, "0")}`;
}
function smartStringReplacer(_key, nestedValue) {
  if (isArrayBufferLike(nestedValue)) {
    return formatByteArray(new Uint8Array(nestedValue));
  }
  if (isArrayBufferView(nestedValue)) {
    const view = nestedValue;
    return formatByteArray(new Uint8Array(view.buffer, view.byteOffset, view.byteLength));
  }
  if (isSerializedBufferSnapshot(nestedValue)) {
    return formatByteArray(Uint8Array.from(nestedValue.data));
  }
  return nestedValue;
}

// node_modules/@openai/agents-core/dist/tool.mjs
function computerTool(options) {
  return {
    type: "computer",
    name: options.name ?? "computer_use_preview",
    computer: options.computer
  };
}
function hostedMcpTool(options) {
  if ("serverUrl" in options) {
    const providerData = typeof options.requireApproval === "undefined" || options.requireApproval === "never" ? {
      type: "mcp",
      server_label: options.serverLabel,
      server_url: options.serverUrl,
      authorization: options.authorization,
      require_approval: "never",
      allowed_tools: toMcpAllowedToolsFilter(options.allowedTools),
      headers: options.headers
    } : {
      type: "mcp",
      server_label: options.serverLabel,
      server_url: options.serverUrl,
      authorization: options.authorization,
      allowed_tools: toMcpAllowedToolsFilter(options.allowedTools),
      headers: options.headers,
      require_approval: typeof options.requireApproval === "string" ? "always" : buildRequireApproval(options.requireApproval),
      on_approval: options.onApproval
    };
    return {
      type: "hosted_tool",
      name: "hosted_mcp",
      providerData
    };
  } else if ("connectorId" in options) {
    const providerData = typeof options.requireApproval === "undefined" || options.requireApproval === "never" ? {
      type: "mcp",
      server_label: options.serverLabel,
      connector_id: options.connectorId,
      authorization: options.authorization,
      require_approval: "never",
      allowed_tools: toMcpAllowedToolsFilter(options.allowedTools),
      headers: options.headers
    } : {
      type: "mcp",
      server_label: options.serverLabel,
      connector_id: options.connectorId,
      authorization: options.authorization,
      allowed_tools: toMcpAllowedToolsFilter(options.allowedTools),
      headers: options.headers,
      require_approval: typeof options.requireApproval === "string" ? "always" : buildRequireApproval(options.requireApproval),
      on_approval: options.onApproval
    };
    return {
      type: "hosted_tool",
      name: "hosted_mcp",
      providerData
    };
  } else {
    const providerData = typeof options.requireApproval === "undefined" || options.requireApproval === "never" ? {
      type: "mcp",
      server_label: options.serverLabel,
      require_approval: "never",
      allowed_tools: toMcpAllowedToolsFilter(options.allowedTools)
    } : {
      type: "mcp",
      server_label: options.serverLabel,
      allowed_tools: toMcpAllowedToolsFilter(options.allowedTools),
      require_approval: typeof options.requireApproval === "string" ? "always" : buildRequireApproval(options.requireApproval),
      on_approval: options.onApproval
    };
    return {
      type: "hosted_tool",
      name: "hosted_mcp",
      providerData
    };
  }
}
function defaultToolErrorFunction(context, error40) {
  const details = error40 instanceof Error ? error40.toString() : String(error40);
  return `An error occurred while running the tool. Please try again. Error: ${details}`;
}
function tool(options) {
  const name = options.name ? toFunctionToolName(options.name) : toFunctionToolName(options.execute.name);
  const toolErrorFunction = typeof options.errorFunction === "undefined" ? defaultToolErrorFunction : options.errorFunction;
  if (!name) {
    throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");
  }
  const strictMode = options.strict ?? true;
  if (!strictMode && isZodObject(options.parameters)) {
    throw new UserError("Strict mode is required for Zod parameters");
  }
  const { parser, schema: parameters } = getSchemaAndParserFromInputType(options.parameters, name);
  async function _invoke(runContext, input, details) {
    const [error40, parsed] = await safeExecute(() => parser(input));
    if (error40 !== null) {
      if (logger_default.dontLogToolData) {
        logger_default.debug(`Invalid JSON input for tool ${name}`);
      } else {
        logger_default.debug(`Invalid JSON input for tool ${name}: ${input}`);
      }
      throw new ModelBehaviorError("Invalid JSON input for tool");
    }
    if (logger_default.dontLogToolData) {
      logger_default.debug(`Invoking tool ${name}`);
    } else {
      logger_default.debug(`Invoking tool ${name} with input ${input}`);
    }
    const result = await options.execute(parsed, runContext, details);
    const stringResult = toSmartString(result);
    if (logger_default.dontLogToolData) {
      logger_default.debug(`Tool ${name} completed`);
    } else {
      logger_default.debug(`Tool ${name} returned: ${stringResult}`);
    }
    return result;
  }
  async function invoke(runContext, input, details) {
    return _invoke(runContext, input, details).catch((error40) => {
      if (toolErrorFunction) {
        const currentSpan = getCurrentSpan();
        currentSpan == null ? void 0 : currentSpan.setError({
          message: "Error running tool (non-fatal)",
          data: {
            tool_name: name,
            error: error40.toString()
          }
        });
        return toolErrorFunction(runContext, error40);
      }
      throw error40;
    });
  }
  const needsApproval = typeof options.needsApproval === "function" ? options.needsApproval : async () => typeof options.needsApproval === "boolean" ? options.needsApproval : false;
  const isEnabled2 = typeof options.isEnabled === "function" ? async (runContext, agent) => {
    const predicate = options.isEnabled;
    const result = await predicate({ runContext, agent });
    return Boolean(result);
  } : async () => typeof options.isEnabled === "boolean" ? options.isEnabled : true;
  return {
    type: "function",
    name,
    description: options.description,
    parameters,
    strict: strictMode,
    invoke,
    needsApproval,
    isEnabled: isEnabled2
  };
}
function buildRequireApproval(requireApproval) {
  const result = {};
  if (requireApproval.always) {
    result.always = { tool_names: requireApproval.always.toolNames };
  }
  if (requireApproval.never) {
    result.never = { tool_names: requireApproval.never.toolNames };
  }
  return result;
}
function toMcpAllowedToolsFilter(allowedTools) {
  if (typeof allowedTools === "undefined") {
    return void 0;
  }
  if (Array.isArray(allowedTools)) {
    return { tool_names: allowedTools };
  }
  return { tool_names: (allowedTools == null ? void 0 : allowedTools.toolNames) ?? [] };
}

// node_modules/@openai/agents-core/dist/mcp.mjs
var import_debug2 = __toESM(require_browser(), 1);
var DEFAULT_STDIO_MCP_CLIENT_LOGGER_NAME = "openai-agents:stdio-mcp-client";
var DEFAULT_STREAMABLE_HTTP_MCP_CLIENT_LOGGER_NAME = "openai-agents:streamable-http-mcp-client";
var DEFAULT_SSE_MCP_CLIENT_LOGGER_NAME = "openai-agents:sse-mcp-client";
var BaseMCPServerStdio = class {
  constructor(options) {
    __publicField(this, "cacheToolsList");
    __publicField(this, "_cachedTools");
    __publicField(this, "toolFilter");
    __publicField(this, "logger");
    this.logger = options.logger ?? getLogger(DEFAULT_STDIO_MCP_CLIENT_LOGGER_NAME);
    this.cacheToolsList = options.cacheToolsList ?? false;
    this.toolFilter = options.toolFilter;
  }
  /**
   * Logs a debug message when debug logging is enabled.
   * @param buildMessage A function that returns the message to log.
   */
  debugLog(buildMessage) {
    if (import_debug2.default.enabled(this.logger.namespace)) {
      this.logger.debug(buildMessage());
    }
  }
};
var BaseMCPServerStreamableHttp = class {
  constructor(options) {
    __publicField(this, "cacheToolsList");
    __publicField(this, "_cachedTools");
    __publicField(this, "toolFilter");
    __publicField(this, "logger");
    this.logger = options.logger ?? getLogger(DEFAULT_STREAMABLE_HTTP_MCP_CLIENT_LOGGER_NAME);
    this.cacheToolsList = options.cacheToolsList ?? false;
    this.toolFilter = options.toolFilter;
  }
  /**
   * Logs a debug message when debug logging is enabled.
   * @param buildMessage A function that returns the message to log.
   */
  debugLog(buildMessage) {
    if (import_debug2.default.enabled(this.logger.namespace)) {
      this.logger.debug(buildMessage());
    }
  }
};
var BaseMCPServerSSE = class {
  constructor(options) {
    __publicField(this, "cacheToolsList");
    __publicField(this, "_cachedTools");
    __publicField(this, "toolFilter");
    __publicField(this, "logger");
    this.logger = options.logger ?? getLogger(DEFAULT_SSE_MCP_CLIENT_LOGGER_NAME);
    this.cacheToolsList = options.cacheToolsList ?? false;
    this.toolFilter = options.toolFilter;
  }
  /**
   * Logs a debug message when debug logging is enabled.
   * @param buildMessage A function that returns the message to log.
   */
  debugLog(buildMessage) {
    if (import_debug2.default.enabled(this.logger.namespace)) {
      this.logger.debug(buildMessage());
    }
  }
};
var MCPTool = external_exports2.object({
  name: external_exports2.string(),
  description: external_exports2.string().optional(),
  inputSchema: external_exports2.object({
    type: external_exports2.literal("object"),
    properties: external_exports2.record(external_exports2.string(), external_exports2.any()),
    required: external_exports2.array(external_exports2.string()),
    additionalProperties: external_exports2.boolean()
  })
});
var MCPServerStdio2 = class extends BaseMCPServerStdio {
  constructor(options) {
    super(options);
    __publicField(this, "underlying");
    this.underlying = new MCPServerStdio(options);
  }
  get name() {
    return this.underlying.name;
  }
  connect() {
    return this.underlying.connect();
  }
  close() {
    return this.underlying.close();
  }
  async listTools() {
    if (this.cacheToolsList && this._cachedTools) {
      return this._cachedTools;
    }
    const tools = await this.underlying.listTools();
    if (this.cacheToolsList) {
      this._cachedTools = tools;
    }
    return tools;
  }
  callTool(toolName, args) {
    return this.underlying.callTool(toolName, args);
  }
  invalidateToolsCache() {
    return this.underlying.invalidateToolsCache();
  }
};
var MCPServerStreamableHttp2 = class extends BaseMCPServerStreamableHttp {
  constructor(options) {
    super(options);
    __publicField(this, "underlying");
    this.underlying = new MCPServerStreamableHttp(options);
  }
  get name() {
    return this.underlying.name;
  }
  connect() {
    return this.underlying.connect();
  }
  close() {
    return this.underlying.close();
  }
  async listTools() {
    if (this.cacheToolsList && this._cachedTools) {
      return this._cachedTools;
    }
    const tools = await this.underlying.listTools();
    if (this.cacheToolsList) {
      this._cachedTools = tools;
    }
    return tools;
  }
  callTool(toolName, args) {
    return this.underlying.callTool(toolName, args);
  }
  invalidateToolsCache() {
    return this.underlying.invalidateToolsCache();
  }
};
var MCPServerSSE2 = class extends BaseMCPServerSSE {
  constructor(options) {
    super(options);
    __publicField(this, "underlying");
    this.underlying = new MCPServerSSE(options);
  }
  get name() {
    return this.underlying.name;
  }
  connect() {
    return this.underlying.connect();
  }
  close() {
    return this.underlying.close();
  }
  async listTools() {
    if (this.cacheToolsList && this._cachedTools) {
      return this._cachedTools;
    }
    const tools = await this.underlying.listTools();
    if (this.cacheToolsList) {
      this._cachedTools = tools;
    }
    return tools;
  }
  callTool(toolName, args) {
    return this.underlying.callTool(toolName, args);
  }
  invalidateToolsCache() {
    return this.underlying.invalidateToolsCache();
  }
};
var _cachedTools = {};
async function invalidateServerToolsCache(serverName) {
  delete _cachedTools[serverName];
}
async function getFunctionToolsFromServer({ server, convertSchemasToStrict, runContext, agent }) {
  if (server.cacheToolsList && _cachedTools[server.name]) {
    return _cachedTools[server.name].map((t) => mcpToFunctionTool(t, server, convertSchemasToStrict));
  }
  return withMCPListToolsSpan(async (span) => {
    const fetchedMcpTools = await server.listTools();
    let mcpTools = fetchedMcpTools;
    if (runContext && agent) {
      const context = { runContext, agent, serverName: server.name };
      const filteredTools = [];
      for (const tool2 of fetchedMcpTools) {
        const filter = server.toolFilter;
        if (filter) {
          if (typeof filter === "function") {
            const filtered = await filter(context, tool2);
            if (!filtered) {
              logger.debug(`MCP Tool (server: ${server.name}, tool: ${tool2.name}) is blocked by the callable filter.`);
              continue;
            }
          } else {
            const allowedToolNames = filter.allowedToolNames ?? [];
            const blockedToolNames = filter.blockedToolNames ?? [];
            if (allowedToolNames.length > 0 || blockedToolNames.length > 0) {
              const allowed = allowedToolNames.length > 0 ? allowedToolNames.includes(tool2.name) : true;
              const blocked = blockedToolNames.length > 0 ? blockedToolNames.includes(tool2.name) : false;
              if (!allowed || blocked) {
                if (blocked) {
                  logger.debug(`MCP Tool (server: ${server.name}, tool: ${tool2.name}) is blocked by the static filter.`);
                } else if (!allowed) {
                  logger.debug(`MCP Tool (server: ${server.name}, tool: ${tool2.name}) is not allowed by the static filter.`);
                }
                continue;
              }
            }
          }
        }
        filteredTools.push(tool2);
      }
      mcpTools = filteredTools;
    }
    span.spanData.result = mcpTools.map((t) => t.name);
    const tools = mcpTools.map((t) => mcpToFunctionTool(t, server, convertSchemasToStrict));
    if (server.cacheToolsList) {
      _cachedTools[server.name] = mcpTools;
    }
    return tools;
  }, { data: { server: server.name } });
}
async function getAllMcpTools(mcpServersOrOpts, runContext, agent, convertSchemasToStrict = false) {
  const opts = Array.isArray(mcpServersOrOpts) ? {
    mcpServers: mcpServersOrOpts,
    runContext,
    agent,
    convertSchemasToStrict
  } : mcpServersOrOpts;
  const { mcpServers, convertSchemasToStrict: convertSchemasToStrictFromOpts = false, runContext: runContextFromOpts, agent: agentFromOpts } = opts;
  const allTools = [];
  const toolNames = /* @__PURE__ */ new Set();
  for (const server of mcpServers) {
    const serverTools = await getFunctionToolsFromServer({
      server,
      convertSchemasToStrict: convertSchemasToStrictFromOpts,
      runContext: runContextFromOpts,
      agent: agentFromOpts
    });
    const serverToolNames = new Set(serverTools.map((t) => t.name));
    const intersection2 = [...serverToolNames].filter((n) => toolNames.has(n));
    if (intersection2.length > 0) {
      throw new UserError(`Duplicate tool names found across MCP servers: ${intersection2.join(", ")}`);
    }
    for (const t of serverTools) {
      toolNames.add(t.name);
      allTools.push(t);
    }
  }
  return allTools;
}
function mcpToFunctionTool(mcpTool, server, convertSchemasToStrict) {
  var _a, _b, _c, _d;
  async function invoke(input, _context2) {
    let args = {};
    if (typeof input === "string" && input) {
      args = JSON.parse(input);
    } else if (typeof input === "object" && input != null) {
      args = input;
    }
    const currentSpan = getCurrentSpan();
    if (currentSpan) {
      currentSpan.spanData["mcp_data"] = { server: server.name };
    }
    const content = await server.callTool(mcpTool.name, args);
    return content.length === 1 ? content[0] : content;
  }
  const schema = {
    ...mcpTool.inputSchema,
    type: ((_a = mcpTool.inputSchema) == null ? void 0 : _a.type) ?? "object",
    properties: ((_b = mcpTool.inputSchema) == null ? void 0 : _b.properties) ?? {},
    required: ((_c = mcpTool.inputSchema) == null ? void 0 : _c.required) ?? [],
    additionalProperties: ((_d = mcpTool.inputSchema) == null ? void 0 : _d.additionalProperties) ?? false
  };
  if (convertSchemasToStrict || schema.additionalProperties === true) {
    try {
      const strictSchema = ensureStrictJsonSchema2(schema);
      return tool({
        name: mcpTool.name,
        description: mcpTool.description || "",
        parameters: strictSchema,
        strict: true,
        execute: invoke
      });
    } catch (e) {
      logger.warn(`Error converting MCP schema to strict mode: ${e}`);
    }
  }
  const nonStrictSchema = {
    ...schema,
    additionalProperties: true
  };
  return tool({
    name: mcpTool.name,
    description: mcpTool.description || "",
    parameters: nonStrictSchema,
    strict: false,
    execute: invoke
  });
}
function ensureStrictJsonSchema2(schema) {
  const out = {
    ...schema,
    additionalProperties: false
  };
  if (!out.required)
    out.required = [];
  return out;
}

// node_modules/@openai/agents-core/dist/shims/mcp-server/browser.mjs
var MCPServerStdio = class extends BaseMCPServerStdio {
  constructor(params) {
    super(params);
  }
  get name() {
    return "MCPServerStdio";
  }
  connect() {
    throw new Error("Method not implemented.");
  }
  close() {
    throw new Error("Method not implemented.");
  }
  listTools() {
    throw new Error("Method not implemented.");
  }
  callTool(_toolName, _args) {
    throw new Error("Method not implemented.");
  }
  invalidateToolsCache() {
    throw new Error("Method not implemented.");
  }
};
var MCPServerStreamableHttp = class extends BaseMCPServerStreamableHttp {
  constructor(params) {
    super(params);
  }
  get name() {
    return "MCPServerStdio";
  }
  connect() {
    throw new Error("Method not implemented.");
  }
  close() {
    throw new Error("Method not implemented.");
  }
  listTools() {
    throw new Error("Method not implemented.");
  }
  callTool(_toolName, _args) {
    throw new Error("Method not implemented.");
  }
  invalidateToolsCache() {
    throw new Error("Method not implemented.");
  }
};
var MCPServerSSE = class extends BaseMCPServerSSE {
  constructor(params) {
    super(params);
  }
  get name() {
    return "MCPServerSSE";
  }
  connect() {
    throw new Error("Method not implemented.");
  }
  close() {
    throw new Error("Method not implemented.");
  }
  listTools() {
    throw new Error("Method not implemented.");
  }
  callTool(_toolName, _args) {
    throw new Error("Method not implemented.");
  }
  invalidateToolsCache() {
    throw new Error("Method not implemented.");
  }
};

// node_modules/@openai/agents-core/dist/shims/shims-browser.mjs
function loadEnv() {
  return {};
}
var _target, _listenerWrappers;
var BrowserEventEmitter = class {
  constructor() {
    __privateAdd(this, _target, new EventTarget());
    __privateAdd(this, _listenerWrappers, /* @__PURE__ */ new Map());
  }
  on(type, listener) {
    const eventType = type;
    let listenersForType = __privateGet(this, _listenerWrappers).get(eventType);
    if (!listenersForType) {
      listenersForType = /* @__PURE__ */ new Map();
      __privateGet(this, _listenerWrappers).set(eventType, listenersForType);
    }
    let wrappers = listenersForType.get(listener);
    if (!wrappers) {
      wrappers = /* @__PURE__ */ new Set();
      listenersForType.set(listener, wrappers);
    }
    const wrapper = (event) => listener(...event.detail ?? []);
    wrappers.add(wrapper);
    __privateGet(this, _target).addEventListener(eventType, wrapper);
    return this;
  }
  off(type, listener) {
    const eventType = type;
    const listenersForType = __privateGet(this, _listenerWrappers).get(eventType);
    const wrappers = listenersForType == null ? void 0 : listenersForType.get(listener);
    if (wrappers == null ? void 0 : wrappers.size) {
      for (const wrapper of wrappers) {
        __privateGet(this, _target).removeEventListener(eventType, wrapper);
      }
      listenersForType == null ? void 0 : listenersForType.delete(listener);
      if ((listenersForType == null ? void 0 : listenersForType.size) === 0) {
        __privateGet(this, _listenerWrappers).delete(eventType);
      }
    }
    return this;
  }
  emit(type, ...args) {
    const event = new CustomEvent(type, { detail: args });
    return __privateGet(this, _target).dispatchEvent(event);
  }
  once(type, listener) {
    const handler = (...args) => {
      this.off(type, handler);
      listener(...args);
    };
    this.on(type, handler);
    return this;
  }
};
_target = new WeakMap();
_listenerWrappers = new WeakMap();
var randomUUID = () => {
  if (typeof crypto !== "undefined" && crypto.randomUUID) {
    return crypto.randomUUID();
  }
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
};
var Readable = class Readable2 {
  constructor() {
  }
  pipeTo(_destination, _options3) {
  }
  pipeThrough(_transform2, _options3) {
  }
};
var ReadableStream = globalThis.ReadableStream;
var ReadableStreamController = globalThis.ReadableStreamDefaultController;
var TransformStream = globalThis.TransformStream;
var AsyncLocalStorage = class {
  constructor() {
    __publicField(this, "context", null);
  }
  run(context, fn) {
    this.context = context;
    return fn();
  }
  getStore() {
    return this.context;
  }
  enterWith(context) {
    this.context = context;
  }
};
function isBrowserEnvironment() {
  return true;
}
function isTracingLoopRunningByDefault() {
  return false;
}
var BrowserTimer = class {
  constructor() {
  }
  setTimeout(callback, ms) {
    const timeout = setTimeout(callback, ms);
    timeout.ref = typeof timeout.ref === "function" ? timeout.ref : () => timeout;
    timeout.unref = typeof timeout.unref === "function" ? timeout.unref : () => timeout;
    timeout.hasRef = typeof timeout.hasRef === "function" ? timeout.hasRef : () => true;
    timeout.refresh = typeof timeout.refresh === "function" ? timeout.refresh : () => timeout;
    return timeout;
  }
  clearTimeout(timeoutId) {
    window.clearTimeout(timeoutId);
  }
};
var timer = new BrowserTimer();

// node_modules/@openai/agents-core/dist/lifecycle.mjs
var EventEmitterDelegate = class {
  on(type, listener) {
    this.eventEmitter.on(type, listener);
    return this.eventEmitter;
  }
  off(type, listener) {
    this.eventEmitter.off(type, listener);
    return this.eventEmitter;
  }
  emit(type, ...args) {
    return this.eventEmitter.emit(type, ...args);
  }
  once(type, listener) {
    this.eventEmitter.once(type, listener);
    return this.eventEmitter;
  }
};
var AgentHooks = class extends EventEmitterDelegate {
  constructor() {
    super(...arguments);
    __publicField(this, "eventEmitter", new BrowserEventEmitter());
  }
};
var RunHooks = class extends EventEmitterDelegate {
  constructor() {
    super(...arguments);
    __publicField(this, "eventEmitter", new BrowserEventEmitter());
  }
};

// node_modules/@openai/agents-core/dist/defaultModel.mjs
var OPENAI_DEFAULT_MODEL_ENV_VARIABLE_NAME = "OPENAI_DEFAULT_MODEL";
function gpt5ReasoningSettingsRequired(modelName) {
  if (modelName.startsWith("gpt-5-chat")) {
    return false;
  }
  return modelName.startsWith("gpt-5");
}
function isGpt5Default() {
  return gpt5ReasoningSettingsRequired(getDefaultModel());
}
function getDefaultModel() {
  var _a;
  const env = loadEnv2();
  return ((_a = env[OPENAI_DEFAULT_MODEL_ENV_VARIABLE_NAME]) == null ? void 0 : _a.toLowerCase()) ?? "gpt-4.1";
}
function getDefaultModelSettings(model) {
  const _model4 = model ?? getDefaultModel();
  if (gpt5ReasoningSettingsRequired(_model4)) {
    return {
      // We chose "low" instead of "minimal" because some of the built-in tools
      // (e.g., file search, image generation, etc.) do not support "minimal"
      // If you want to use "minimal" reasoning effort, you can pass your own model settings
      reasoning: { effort: "low" },
      text: { verbosity: "low" }
    };
  }
  return {};
}

// node_modules/@openai/agents-core/dist/handoff.mjs
function getTransferMessage(agent) {
  return JSON.stringify({ assistant: agent.name });
}
function defaultHandoffToolName(agent) {
  return `transfer_to_${toFunctionToolName(agent.name)}`;
}
function defaultHandoffToolDescription(agent) {
  return `Handoff to the ${agent.name} agent to handle the request. ${agent.handoffDescription ?? ""}`;
}
var Handoff = class {
  constructor(agent, onInvokeHandoff) {
    /**
     * The name of the tool that represents the handoff.
     */
    __publicField(this, "toolName");
    /**
     * The description of the tool that represents the handoff.
     */
    __publicField(this, "toolDescription");
    /**
     * The JSON schema for the handoff input. Can be empty if the handoff does not take an input
     */
    __publicField(this, "inputJsonSchema", {
      type: "object",
      properties: {},
      required: [],
      additionalProperties: false
    });
    /**
     * Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to
     * true, as it increases the likelihood of correct JSON input.
     */
    __publicField(this, "strictJsonSchema", true);
    /**
     * The function that invokes the handoff. The parameters passed are:
     * 1. The handoff run context
     * 2. The arguments from the LLM, as a JSON string. Empty string if inputJsonSchema is empty.
     *
     * Must return an agent
     */
    __publicField(this, "onInvokeHandoff");
    /**
     * The name of the agent that is being handed off to.
     */
    __publicField(this, "agentName");
    /**
     * A function that filters the inputs that are passed to the next agent. By default, the new agent
     * sees the entire conversation history. In some cases, you may want to filter inputs e.g. to
     * remove older inputs, or remove tools from existing inputs.
     *
     * The function will receive the entire conversation hisstory so far, including the input item
     * that triggered the handoff and a tool call output item representing the handoff tool's output.
     *
     * You are free to modify the input history or new items as you see fit. The next agent that runs
     * will receive `handoffInputData.allItems
     */
    __publicField(this, "inputFilter");
    /**
     * The agent that is being handed off to.
     */
    __publicField(this, "agent");
    __publicField(this, "isEnabled", async () => true);
    this.agentName = agent.name;
    this.onInvokeHandoff = onInvokeHandoff;
    this.toolName = defaultHandoffToolName(agent);
    this.toolDescription = defaultHandoffToolDescription(agent);
    this.agent = agent;
  }
  /**
   * Returns a function tool definition that can be used to invoke the handoff.
   */
  getHandoffAsFunctionTool() {
    return {
      type: "function",
      name: this.toolName,
      description: this.toolDescription,
      parameters: this.inputJsonSchema,
      strict: this.strictJsonSchema
    };
  }
};
function handoff(agent, config2 = {}) {
  let parser = void 0;
  const hasOnHandoff = !!config2.onHandoff;
  const hasInputType = !!config2.inputType;
  const hasBothOrNeitherHandoffAndInputType = hasOnHandoff === hasInputType;
  if (!hasBothOrNeitherHandoffAndInputType) {
    throw new UserError("You must provide either both `onHandoff` and `inputType` or neither.");
  }
  async function onInvokeHandoff(context, inputJsonString) {
    var _a;
    if (parser) {
      if (!inputJsonString) {
        addErrorToCurrentSpan({
          message: `Handoff function expected non empty input but got: ${inputJsonString}`,
          data: {
            details: `input is empty`
          }
        });
        throw new ModelBehaviorError("Handoff function expected non empty input");
      }
      try {
        const parsed = await parser(inputJsonString);
        if (config2.onHandoff) {
          await config2.onHandoff(context, parsed);
        }
      } catch (error40) {
        addErrorToCurrentSpan({
          message: `Invalid JSON provided`,
          data: {}
        });
        if (!logger_default.dontLogToolData) {
          logger_default.error(`Invalid JSON when parsing: ${inputJsonString}. Error: ${error40}`);
        }
        throw new ModelBehaviorError("Invalid JSON provided");
      }
    } else {
      await ((_a = config2.onHandoff) == null ? void 0 : _a.call(config2, context));
    }
    return agent;
  }
  const handoff2 = new Handoff(agent, onInvokeHandoff);
  if (typeof config2.isEnabled === "function") {
    const predicate = config2.isEnabled;
    handoff2.isEnabled = async ({ runContext, agent: agent2 }) => {
      const result = await predicate({ runContext, agent: agent2 });
      return Boolean(result);
    };
  } else if (typeof config2.isEnabled === "boolean") {
    handoff2.isEnabled = async () => config2.isEnabled;
  }
  if (config2.inputType) {
    const result = getSchemaAndParserFromInputType(config2.inputType, handoff2.toolName);
    handoff2.inputJsonSchema = result.schema;
    handoff2.strictJsonSchema = true;
    parser = result.parser;
  }
  if (config2.toolNameOverride) {
    handoff2.toolName = config2.toolNameOverride;
  }
  if (config2.toolDescriptionOverride) {
    handoff2.toolDescription = config2.toolDescriptionOverride;
  }
  if (config2.inputFilter) {
    handoff2.inputFilter = config2.inputFilter;
  }
  return handoff2;
}
function getHandoff(agent) {
  if (agent instanceof Handoff) {
    return agent;
  }
  return handoff(agent);
}

// node_modules/@openai/agents-core/dist/utils/messages.mjs
function getLastTextFromOutputMessage(outputMessage) {
  if (outputMessage.type !== "message") {
    return void 0;
  }
  if (outputMessage.role !== "assistant") {
    return void 0;
  }
  const lastItem = outputMessage.content[outputMessage.content.length - 1];
  if (lastItem.type !== "output_text") {
    return void 0;
  }
  return lastItem.text;
}
function getOutputText(output) {
  if (output.output.length === 0) {
    return "";
  }
  return getLastTextFromOutputMessage(output.output[output.output.length - 1]) || "";
}

// node_modules/@openai/agents-core/dist/agent.mjs
var agentToolRunResults = /* @__PURE__ */ new WeakMap();
function saveAgentToolRunResult(toolCall, runResult) {
  if (toolCall) {
    agentToolRunResults.set(toolCall, runResult);
  }
}
function consumeAgentToolRunResult(toolCall) {
  const runResult = agentToolRunResults.get(toolCall);
  if (runResult) {
    agentToolRunResults.delete(toolCall);
  }
  return runResult;
}
var AgentAsToolNeedApprovalSchame = external_exports2.object({ input: external_exports2.string() });
var _Agent = class _Agent extends AgentHooks {
  constructor(config2) {
    super();
    __publicField(this, "name");
    __publicField(this, "instructions");
    __publicField(this, "prompt");
    __publicField(this, "handoffDescription");
    __publicField(this, "handoffs");
    __publicField(this, "model");
    __publicField(this, "modelSettings");
    __publicField(this, "tools");
    __publicField(this, "mcpServers");
    __publicField(this, "inputGuardrails");
    __publicField(this, "outputGuardrails");
    __publicField(this, "outputType", "text");
    __publicField(this, "toolUseBehavior");
    __publicField(this, "resetToolChoice");
    if (typeof config2.name !== "string" || config2.name.trim() === "") {
      throw new UserError("Agent must have a name.");
    }
    this.name = config2.name;
    this.instructions = config2.instructions ?? _Agent.DEFAULT_MODEL_PLACEHOLDER;
    this.prompt = config2.prompt;
    this.handoffDescription = config2.handoffDescription ?? "";
    this.handoffs = config2.handoffs ?? [];
    this.model = config2.model ?? "";
    this.modelSettings = config2.modelSettings ?? getDefaultModelSettings();
    this.tools = config2.tools ?? [];
    this.mcpServers = config2.mcpServers ?? [];
    this.inputGuardrails = config2.inputGuardrails ?? [];
    this.outputGuardrails = config2.outputGuardrails ?? [];
    if (config2.outputType) {
      this.outputType = config2.outputType;
    }
    this.toolUseBehavior = config2.toolUseBehavior ?? "run_llm_again";
    this.resetToolChoice = config2.resetToolChoice ?? true;
    if (
      // The user sets a non-default model
      config2.model !== void 0 && // The default model is gpt-5
      isGpt5Default() && // However, the specified model is not a gpt-5 model
      (typeof config2.model !== "string" || !gpt5ReasoningSettingsRequired(config2.model)) && // The model settings are not customized for the specified model
      config2.modelSettings === void 0
    ) {
      this.modelSettings = {};
    }
    if (config2.handoffOutputTypeWarningEnabled === void 0 || config2.handoffOutputTypeWarningEnabled) {
      if (this.handoffs && this.outputType) {
        const outputTypes = /* @__PURE__ */ new Set([JSON.stringify(this.outputType)]);
        for (const h of this.handoffs) {
          if ("outputType" in h && h.outputType) {
            outputTypes.add(JSON.stringify(h.outputType));
          } else if ("agent" in h && h.agent.outputType) {
            outputTypes.add(JSON.stringify(h.agent.outputType));
          }
        }
        if (outputTypes.size > 1) {
          logger_default.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(outputTypes).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`);
        }
      }
    }
  }
  /**
   * Create an Agent with handoffs and automatically infer the union type for TOutput from the handoff agents' output types.
   */
  static create(config2) {
    return new _Agent({
      ...config2,
      handoffs: config2.handoffs,
      outputType: config2.outputType,
      handoffOutputTypeWarningEnabled: false
    });
  }
  /**
   * Output schema name.
   */
  get outputSchemaName() {
    if (this.outputType === "text") {
      return "text";
    } else if (isZodObject(this.outputType)) {
      return "ZodOutput";
    } else if (typeof this.outputType === "object") {
      return this.outputType.name;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Makes a copy of the agent, with the given arguments changed. For example, you could do:
   *
   * ```
   * const newAgent = agent.clone({ instructions: 'New instructions' })
   * ```
   *
   * @param config - A partial configuration to change.
   * @returns A new agent with the given changes.
   */
  clone(config2) {
    return new _Agent({
      ...this,
      ...config2
    });
  }
  /**
   * Transform this agent into a tool, callable by other agents.
   *
   * This is different from handoffs in two ways:
   * 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent
   *    receives generated input.
   * 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is
   *    called as a tool, and the conversation is continued by the original agent.
   *
   * @param options - Options for the tool.
   * @returns A tool that runs the agent and returns the output text.
   */
  asTool(options) {
    const { toolName, toolDescription, customOutputExtractor, needsApproval, runConfig, runOptions, isEnabled: isEnabled2 } = options;
    return tool({
      name: toolName ?? toFunctionToolName(this.name),
      description: toolDescription ?? "",
      parameters: AgentAsToolNeedApprovalSchame,
      strict: true,
      needsApproval,
      isEnabled: isEnabled2,
      execute: async (data, context, details) => {
        if (!isAgentToolInput(data)) {
          throw new ModelBehaviorError("Agent tool called with invalid input");
        }
        const runner = new Runner(runConfig ?? {});
        const result = await runner.run(this, data.input, {
          context,
          ...runOptions ?? {}
        });
        const completedResult = result;
        const usesStopAtToolNames = typeof this.toolUseBehavior === "object" && this.toolUseBehavior !== null && "stopAtToolNames" in this.toolUseBehavior;
        if (typeof customOutputExtractor !== "function" && usesStopAtToolNames) {
          logger_default.debug(`You're passing the agent (name: ${this.name}) with toolUseBehavior.stopAtToolNames configured as a tool to a different agent; this may not work as you expect. You may want to have a wrapper function tool to consistently return the final output.`);
        }
        const outputText = typeof customOutputExtractor === "function" ? await customOutputExtractor(completedResult) : getOutputText(completedResult.rawResponses[completedResult.rawResponses.length - 1]);
        if (details == null ? void 0 : details.toolCall) {
          saveAgentToolRunResult(details.toolCall, completedResult);
        }
        return outputText;
      }
    });
  }
  /**
   * Returns the system prompt for the agent.
   *
   * If the agent has a function as its instructions, this function will be called with the
   * runContext and the agent instance.
   */
  async getSystemPrompt(runContext) {
    if (typeof this.instructions === "function") {
      return await this.instructions(runContext, this);
    }
    return this.instructions;
  }
  /**
   * Returns the prompt template for the agent, if defined.
   *
   * If the agent has a function as its prompt, this function will be called with the
   * runContext and the agent instance.
   */
  async getPrompt(runContext) {
    if (typeof this.prompt === "function") {
      return await this.prompt(runContext, this);
    }
    return this.prompt;
  }
  /**
   * Fetches the available tools from the MCP servers.
   * @returns the MCP powered tools
   */
  async getMcpTools(runContext) {
    if (this.mcpServers.length > 0) {
      return getAllMcpTools({
        mcpServers: this.mcpServers,
        runContext,
        agent: this,
        convertSchemasToStrict: false
      });
    }
    return [];
  }
  /**
   * ALl agent tools, including the MCPl and function tools.
   *
   * @returns all configured tools
   */
  async getAllTools(runContext) {
    const mcpTools = await this.getMcpTools(runContext);
    const enabledTools = [];
    for (const candidate of this.tools) {
      if (candidate.type === "function") {
        const maybeIsEnabled = candidate.isEnabled;
        const enabled = typeof maybeIsEnabled === "function" ? await maybeIsEnabled(runContext, this) : typeof maybeIsEnabled === "boolean" ? maybeIsEnabled : true;
        if (!enabled) {
          continue;
        }
      }
      enabledTools.push(candidate);
    }
    return [...mcpTools, ...enabledTools];
  }
  /**
   * Returns the handoffs that should be exposed to the model for the current run.
   *
   * Handoffs that provide an `isEnabled` function returning `false` are omitted.
   */
  async getEnabledHandoffs(runContext) {
    var _a;
    const handoffs = ((_a = this.handoffs) == null ? void 0 : _a.map((h) => getHandoff(h))) ?? [];
    const enabled = [];
    for (const handoff2 of handoffs) {
      if (await handoff2.isEnabled({ runContext, agent: this })) {
        enabled.push(handoff2);
      }
    }
    return enabled;
  }
  /**
   * Processes the final output of the agent.
   *
   * @param output - The output of the agent.
   * @returns The parsed out.
   */
  processFinalOutput(output) {
    if (this.outputType === "text") {
      return output;
    }
    if (typeof this.outputType === "object") {
      const parsed = JSON.parse(output);
      if (isZodObject(this.outputType)) {
        return this.outputType.parse(parsed);
      }
      return parsed;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Returns a JSON representation of the agent, which is serializable.
   *
   * @returns A JSON object containing the agent's name.
   */
  toJSON() {
    return {
      name: this.name
    };
  }
};
__publicField(_Agent, "DEFAULT_MODEL_PLACEHOLDER", "");
var Agent = _Agent;

// node_modules/@openai/agents-core/dist/guardrail.mjs
function defineInputGuardrail({ name, execute }) {
  return {
    type: "input",
    name,
    guardrailFunction: execute,
    async run(args) {
      return {
        guardrail: { type: "input", name },
        output: await execute(args)
      };
    }
  };
}
function defineOutputGuardrail({ name, execute }) {
  return {
    type: "output",
    name,
    guardrailFunction: execute,
    async run(args) {
      return {
        guardrail: { type: "output", name },
        agent: args.agent,
        agentOutput: args.agentOutput,
        output: await execute(args)
      };
    }
  };
}

// node_modules/@openai/agents-core/dist/providers.mjs
var DEFAULT_PROVIDER;
function setDefaultModelProvider(provider) {
  DEFAULT_PROVIDER = provider;
}
function getDefaultModelProvider() {
  if (typeof DEFAULT_PROVIDER === "undefined") {
    throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.");
  }
  return DEFAULT_PROVIDER;
}

// node_modules/@openai/agents-core/dist/types/protocol.mjs
var protocol_exports = {};
__export(protocol_exports, {
  AssistantContent: () => AssistantContent,
  AssistantMessageItem: () => AssistantMessageItem,
  AudioContent: () => AudioContent,
  ComputerCallResultItem: () => ComputerCallResultItem,
  ComputerToolOutput: () => ComputerToolOutput,
  ComputerUseCallItem: () => ComputerUseCallItem,
  FunctionCallItem: () => FunctionCallItem,
  FunctionCallResultItem: () => FunctionCallResultItem,
  HostedToolCallItem: () => HostedToolCallItem,
  ImageContent: () => ImageContent,
  InputFile: () => InputFile,
  InputImage: () => InputImage,
  InputText: () => InputText,
  ItemBase: () => ItemBase,
  MessageItem: () => MessageItem,
  ModelItem: () => ModelItem,
  OutputModelItem: () => OutputModelItem,
  OutputText: () => OutputText,
  ReasoningItem: () => ReasoningItem,
  ReasoningText: () => ReasoningText,
  Refusal: () => Refusal,
  SharedBase: () => SharedBase,
  StreamEvent: () => StreamEvent,
  StreamEventGenericItem: () => StreamEventGenericItem,
  StreamEventResponseCompleted: () => StreamEventResponseCompleted,
  StreamEventResponseStarted: () => StreamEventResponseStarted,
  StreamEventTextStream: () => StreamEventTextStream,
  ToolCallItem: () => ToolCallItem,
  ToolCallOutputContent: () => ToolCallOutputContent,
  ToolCallStructuredOutput: () => ToolCallStructuredOutput,
  ToolOutputFileContent: () => ToolOutputFileContent,
  ToolOutputImage: () => ToolOutputImage,
  ToolOutputText: () => ToolOutputText,
  UnknownItem: () => UnknownItem,
  UsageData: () => UsageData,
  UserContent: () => UserContent,
  UserMessageItem: () => UserMessageItem,
  computerActions: () => computerActions
});
var SharedBase = external_exports2.object({
  /**
   * Additional optional provider specific data. Used for custom functionality or model provider
   * specific fields.
   */
  providerData: external_exports2.record(external_exports2.string(), external_exports2.any()).optional()
});
var ItemBase = SharedBase.extend({
  /**
   * An ID to identify the item. This is optional by default. If a model provider absolutely
   * requires this field, it will be validated on the model level.
   */
  id: external_exports2.string().optional()
});
var Refusal = SharedBase.extend({
  type: external_exports2.literal("refusal"),
  /**
   * The refusal explanation from the model.
   */
  refusal: external_exports2.string()
});
var OutputText = SharedBase.extend({
  type: external_exports2.literal("output_text"),
  /**
   * The text output from the model.
   */
  text: external_exports2.string()
});
var InputText = SharedBase.extend({
  type: external_exports2.literal("input_text"),
  /**
   * A text input for example a message from a user
   */
  text: external_exports2.string()
});
var ReasoningText = SharedBase.extend({
  type: external_exports2.literal("reasoning_text"),
  /**
   * A text input for example a message from a user
   */
  text: external_exports2.string()
});
var InputImage = SharedBase.extend({
  type: external_exports2.literal("input_image"),
  /**
   * The image input to the model. Could be provided inline (`image`), as a URL, or by reference to a
   * previously uploaded OpenAI file.
   */
  image: external_exports2.string().or(external_exports2.object({ id: external_exports2.string().describe("OpenAI file ID") })).describe("Either base64 encoded image data, a data URL, or an object with a file ID.").optional(),
  /**
   * Controls the level of detail requested for image understanding tasks.
   * Future models may add new values, therefore this accepts any string.
   */
  detail: external_exports2.string().optional()
});
var InputFile = SharedBase.extend({
  type: external_exports2.literal("input_file"),
  /**
   * The file input to the model. Could be raw data, a URL, or an OpenAI file ID.
   */
  file: external_exports2.string().describe("Either base64 encoded file data or a publicly accessible file URL").or(external_exports2.object({ id: external_exports2.string().describe("OpenAI file ID") })).or(external_exports2.object({ url: external_exports2.string().describe("Publicly accessible file URL") })).describe("Contents of the file or an object with a file ID.").optional(),
  /**
   * Optional filename metadata when uploading file data inline.
   */
  filename: external_exports2.string().optional()
});
var AudioContent = SharedBase.extend({
  type: external_exports2.literal("audio"),
  /**
   * The audio input to the model. Could be base64 encoded audio data or an object with a file ID.
   */
  audio: external_exports2.string().or(external_exports2.object({
    id: external_exports2.string()
  })).describe("Base64 encoded audio data or file id"),
  /**
   * The format of the audio.
   */
  format: external_exports2.string().nullable().optional(),
  /**
   * The transcript of the audio.
   */
  transcript: external_exports2.string().nullable().optional()
});
var ImageContent = SharedBase.extend({
  type: external_exports2.literal("image"),
  /**
   * The image input to the model. Could be base64 encoded image data or an object with a file ID.
   */
  image: external_exports2.string().describe("Base64 encoded image data")
});
var ToolOutputText = SharedBase.extend({
  type: external_exports2.literal("text"),
  /**
   * The text output from the model.
   */
  text: external_exports2.string()
});
var ImageDataObjectSchema = external_exports2.object({
  data: external_exports2.union([external_exports2.string(), external_exports2.instanceof(Uint8Array)]).describe("Base64 image data, or raw bytes that will be base64 encoded automatically."),
  mediaType: external_exports2.string().optional()
});
var ImageUrlObjectSchema = external_exports2.object({
  url: external_exports2.string().describe("Publicly accessible URL pointing to the image content")
});
var ImageFileIdObjectSchema = external_exports2.object({
  fileId: external_exports2.string().describe("OpenAI file ID referencing uploaded image content")
});
var ImageObjectSchema = external_exports2.union([ImageDataObjectSchema, ImageUrlObjectSchema, ImageFileIdObjectSchema]).describe("Inline image data or references to uploaded content.");
var FileDataObjectSchema = external_exports2.object({
  data: external_exports2.union([external_exports2.string(), external_exports2.instanceof(Uint8Array)]).describe("Base64 encoded file data, or raw bytes that will be encoded automatically."),
  mediaType: external_exports2.string().describe("IANA media type describing the file contents"),
  filename: external_exports2.string().describe("Filename associated with the inline data")
});
var FileUrlObjectSchema = external_exports2.object({
  url: external_exports2.string().describe("Publicly accessible URL for the file content"),
  filename: external_exports2.string().optional()
});
var FileIdObjectSchema = external_exports2.object({
  id: external_exports2.string().describe("OpenAI file ID referencing uploaded content"),
  filename: external_exports2.string().optional()
});
var FileReferenceSchema = external_exports2.union([
  external_exports2.string().describe("Existing data URL or base64 string"),
  FileDataObjectSchema,
  FileUrlObjectSchema,
  FileIdObjectSchema
]).describe("Inline data (with metadata) or references pointing to file contents.");
var zStringWithHints = (..._hints) => external_exports2.string();
var ToolOutputImage = SharedBase.extend({
  type: external_exports2.literal("image"),
  /**
   * Inline image content or a reference to an uploaded file. Accepts a URL/data URL string or an
   * object describing the data/url/fileId source.
   */
  image: external_exports2.string().or(ImageObjectSchema).optional(),
  /**
   * Controls the requested level of detail for vision models.
   * Use a string to avoid constraining future model capabilities.
   */
  detail: zStringWithHints("low", "high", "auto").optional()
});
var ToolOutputFileContent = SharedBase.extend({
  type: external_exports2.literal("file"),
  /**
   * File output reference. Provide either a string (data URL / base64), a data object (requires
   * mediaType + filename), or an object pointing to an uploaded file/URL.
   */
  file: FileReferenceSchema
});
var ComputerToolOutput = SharedBase.extend({
  type: external_exports2.literal("computer_screenshot"),
  /**
   * A base64 encoded image data or a URL representing the screenshot.
   */
  data: external_exports2.string().describe("Base64 encoded image data or URL")
});
var computerActions = external_exports2.discriminatedUnion("type", [
  external_exports2.object({ type: external_exports2.literal("screenshot") }),
  external_exports2.object({
    type: external_exports2.literal("click"),
    x: external_exports2.number(),
    y: external_exports2.number(),
    button: external_exports2.enum(["left", "right", "wheel", "back", "forward"])
  }),
  external_exports2.object({
    type: external_exports2.literal("double_click"),
    x: external_exports2.number(),
    y: external_exports2.number()
  }),
  external_exports2.object({
    type: external_exports2.literal("scroll"),
    x: external_exports2.number(),
    y: external_exports2.number(),
    scroll_x: external_exports2.number(),
    scroll_y: external_exports2.number()
  }),
  external_exports2.object({
    type: external_exports2.literal("type"),
    text: external_exports2.string()
  }),
  external_exports2.object({ type: external_exports2.literal("wait") }),
  external_exports2.object({
    type: external_exports2.literal("move"),
    x: external_exports2.number(),
    y: external_exports2.number()
  }),
  external_exports2.object({
    type: external_exports2.literal("keypress"),
    keys: external_exports2.array(external_exports2.string())
  }),
  external_exports2.object({
    type: external_exports2.literal("drag"),
    path: external_exports2.array(external_exports2.object({ x: external_exports2.number(), y: external_exports2.number() }))
  })
]);
var AssistantContent = external_exports2.discriminatedUnion("type", [
  OutputText,
  Refusal,
  AudioContent,
  ImageContent
]);
var MessageBase = ItemBase.extend({
  /**
   * Any item without a type is treated as a message
   */
  type: external_exports2.literal("message").optional()
});
var AssistantMessageItem = MessageBase.extend({
  /**
   * Representing a message from the assistant (i.e. the model)
   */
  role: external_exports2.literal("assistant"),
  /**
   * The status of the message.
   */
  status: external_exports2.enum(["in_progress", "completed", "incomplete"]),
  /**
   * The content of the message.
   */
  content: external_exports2.array(AssistantContent)
});
var UserContent = external_exports2.discriminatedUnion("type", [
  InputText,
  InputImage,
  InputFile,
  AudioContent
]);
var UserMessageItem = MessageBase.extend({
  // type: z.literal('message'),
  /**
   * Representing a message from the user
   */
  role: external_exports2.literal("user"),
  /**
   * The content of the message.
   */
  content: external_exports2.array(UserContent).or(external_exports2.string())
});
var SystemMessageItem = MessageBase.extend({
  // type: z.literal('message'),
  /**
   * Representing a system message to the user
   */
  role: external_exports2.literal("system"),
  /**
   * The content of the message.
   */
  content: external_exports2.string()
});
var MessageItem = external_exports2.discriminatedUnion("role", [
  SystemMessageItem,
  AssistantMessageItem,
  UserMessageItem
]);
var HostedToolCallItem = ItemBase.extend({
  type: external_exports2.literal("hosted_tool_call"),
  /**
   * The name of the hosted tool. For example `web_search_call` or `file_search_call`
   */
  name: external_exports2.string().describe("The name of the hosted tool"),
  /**
   * The arguments of the hosted tool call.
   */
  arguments: external_exports2.string().describe("The arguments of the hosted tool call").optional(),
  /**
   * The status of the tool call.
   */
  status: external_exports2.string().optional(),
  /**
   * The primary output of the tool call. Additional output might be in the `providerData` field.
   */
  output: external_exports2.string().optional()
});
var FunctionCallItem = ItemBase.extend({
  type: external_exports2.literal("function_call"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: external_exports2.string().describe("The ID of the tool call"),
  /**
   * The name of the function.
   */
  name: external_exports2.string().describe("The name of the function"),
  /**
   * The status of the function call.
   */
  status: external_exports2.enum(["in_progress", "completed", "incomplete"]).optional(),
  /**
   * The arguments of the function call.
   */
  arguments: external_exports2.string()
});
var ToolCallOutputContent = external_exports2.discriminatedUnion("type", [
  ToolOutputText,
  ToolOutputImage,
  ToolOutputFileContent
]);
var ToolCallStructuredOutput = external_exports2.discriminatedUnion("type", [
  InputText,
  InputImage,
  InputFile
]);
var FunctionCallResultItem = ItemBase.extend({
  type: external_exports2.literal("function_call_result"),
  /**
   * The name of the tool that was called
   */
  name: external_exports2.string().describe("The name of the tool"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: external_exports2.string().describe("The ID of the tool call"),
  /**
   * The status of the tool call.
   */
  status: external_exports2.enum(["in_progress", "completed", "incomplete"]),
  /**
   * The output of the tool call.
   */
  output: external_exports2.union([
    external_exports2.string(),
    ToolCallOutputContent,
    external_exports2.array(ToolCallStructuredOutput)
  ]).describe("Output returned by the tool call. Supports plain strings, legacy ToolOutput items, or structured input_* items.")
});
var ComputerUseCallItem = ItemBase.extend({
  type: external_exports2.literal("computer_call"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: external_exports2.string().describe("The ID of the computer call"),
  /**
   * The status of the computer call.
   */
  status: external_exports2.enum(["in_progress", "completed", "incomplete"]),
  /**
   * The action to be performed by the computer.
   */
  action: computerActions
});
var ComputerCallResultItem = ItemBase.extend({
  type: external_exports2.literal("computer_call_result"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: external_exports2.string().describe("The ID of the computer call"),
  /**
   * The output of the computer call.
   */
  output: ComputerToolOutput
});
var ToolCallItem = external_exports2.discriminatedUnion("type", [
  ComputerUseCallItem,
  FunctionCallItem,
  HostedToolCallItem
]);
var ReasoningItem = SharedBase.extend({
  id: external_exports2.string().optional(),
  type: external_exports2.literal("reasoning"),
  /**
   * The user facing representation of the reasoning. Additional information might be in the `providerData` field.
   */
  content: external_exports2.array(InputText),
  /**
   * The raw reasoning text from the model.
   */
  rawContent: external_exports2.array(ReasoningText).optional()
});
var UnknownItem = ItemBase.extend({
  type: external_exports2.literal("unknown")
});
var OutputModelItem = external_exports2.discriminatedUnion("type", [
  AssistantMessageItem,
  HostedToolCallItem,
  FunctionCallItem,
  ComputerUseCallItem,
  ReasoningItem,
  UnknownItem
]);
var ModelItem = external_exports2.union([
  UserMessageItem,
  AssistantMessageItem,
  SystemMessageItem,
  HostedToolCallItem,
  FunctionCallItem,
  ComputerUseCallItem,
  FunctionCallResultItem,
  ComputerCallResultItem,
  ReasoningItem,
  UnknownItem
]);
var UsageData = external_exports2.object({
  requests: external_exports2.number().optional(),
  inputTokens: external_exports2.number(),
  outputTokens: external_exports2.number(),
  totalTokens: external_exports2.number(),
  inputTokensDetails: external_exports2.record(external_exports2.string(), external_exports2.number()).optional(),
  outputTokensDetails: external_exports2.record(external_exports2.string(), external_exports2.number()).optional()
});
var StreamEventTextStream = SharedBase.extend({
  type: external_exports2.literal("output_text_delta"),
  /**
   * The delta text that was streamed by the modelto the user.
   */
  delta: external_exports2.string()
});
var StreamEventResponseStarted = SharedBase.extend({
  type: external_exports2.literal("response_started")
});
var StreamEventResponseCompleted = SharedBase.extend({
  type: external_exports2.literal("response_done"),
  /**
   * The response from the model.
   */
  response: SharedBase.extend({
    /**
     * The ID of the response.
     */
    id: external_exports2.string(),
    /**
     * The usage data for the response.
     */
    usage: UsageData,
    /**
     * The output from the model.
     */
    output: external_exports2.array(OutputModelItem)
  })
});
var StreamEventGenericItem = SharedBase.extend({
  type: external_exports2.literal("model"),
  event: external_exports2.any().describe("The event from the model")
});
var StreamEvent = external_exports2.discriminatedUnion("type", [
  StreamEventTextStream,
  StreamEventResponseCompleted,
  StreamEventResponseStarted,
  StreamEventGenericItem
]);

// node_modules/@openai/agents-core/dist/usage.mjs
var Usage = class {
  constructor(input) {
    /**
     * The number of requests made to the LLM API.
     */
    __publicField(this, "requests");
    /**
     * The number of input tokens used across all requests.
     */
    __publicField(this, "inputTokens");
    /**
     * The number of output tokens used across all requests.
     */
    __publicField(this, "outputTokens");
    /**
     * The total number of tokens sent and received, across all requests.
     */
    __publicField(this, "totalTokens");
    /**
     * Details about the input tokens used across all requests.
     */
    __publicField(this, "inputTokensDetails", []);
    /**
     * Details about the output tokens used across all requests.
     */
    __publicField(this, "outputTokensDetails", []);
    if (typeof input === "undefined") {
      this.requests = 0;
      this.inputTokens = 0;
      this.outputTokens = 0;
      this.totalTokens = 0;
      this.inputTokensDetails = [];
      this.outputTokensDetails = [];
    } else {
      this.requests = (input == null ? void 0 : input.requests) ?? 1;
      this.inputTokens = (input == null ? void 0 : input.inputTokens) ?? (input == null ? void 0 : input.input_tokens) ?? 0;
      this.outputTokens = (input == null ? void 0 : input.outputTokens) ?? (input == null ? void 0 : input.output_tokens) ?? 0;
      this.totalTokens = (input == null ? void 0 : input.totalTokens) ?? (input == null ? void 0 : input.total_tokens) ?? 0;
      const inputTokensDetails = (input == null ? void 0 : input.inputTokensDetails) ?? (input == null ? void 0 : input.input_tokens_details);
      this.inputTokensDetails = inputTokensDetails ? [inputTokensDetails] : [];
      const outputTokensDetails = (input == null ? void 0 : input.outputTokensDetails) ?? (input == null ? void 0 : input.output_tokens_details);
      this.outputTokensDetails = outputTokensDetails ? [outputTokensDetails] : [];
    }
  }
  add(newUsage) {
    this.requests += newUsage.requests;
    this.inputTokens += newUsage.inputTokens;
    this.outputTokens += newUsage.outputTokens;
    this.totalTokens += newUsage.totalTokens;
    if (newUsage.inputTokensDetails) {
      this.inputTokensDetails.push(...newUsage.inputTokensDetails);
    }
    if (newUsage.outputTokensDetails) {
      this.outputTokensDetails.push(...newUsage.outputTokensDetails);
    }
  }
};

// node_modules/@openai/agents-core/dist/runContext.mjs
var _approvals;
var RunContext = class {
  constructor(context = {}) {
    /**
     * The context object you passed to the `Runner.run()` method.
     */
    __publicField(this, "context");
    /**
     * The usage of the agent run so far. For streamed responses, the usage will be stale until the
     * last chunk of the stream is processed.
     */
    __publicField(this, "usage");
    /**
     * A map of tool names to whether they have been approved.
     */
    __privateAdd(this, _approvals);
    this.context = context;
    this.usage = new Usage();
    __privateSet(this, _approvals, /* @__PURE__ */ new Map());
  }
  /**
   * Rebuild the approvals map from a serialized state.
   * @internal
   *
   * @param approvals - The approvals map to rebuild.
   */
  _rebuildApprovals(approvals) {
    __privateSet(this, _approvals, new Map(Object.entries(approvals)));
  }
  /**
   * Check if a tool call has been approved.
   *
   * @param approval - Details about the tool call being evaluated.
   * @returns `true` if the tool call has been approved, `false` if blocked and `undefined` if not yet approved or rejected.
   */
  isToolApproved(approval) {
    const { toolName, callId } = approval;
    const approvalEntry = __privateGet(this, _approvals).get(toolName);
    if ((approvalEntry == null ? void 0 : approvalEntry.approved) === true && approvalEntry.rejected === true) {
      logger_default.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence");
      return true;
    }
    if ((approvalEntry == null ? void 0 : approvalEntry.approved) === true) {
      return true;
    }
    if ((approvalEntry == null ? void 0 : approvalEntry.rejected) === true) {
      return false;
    }
    const individualCallApproval = Array.isArray(approvalEntry == null ? void 0 : approvalEntry.approved) ? approvalEntry.approved.includes(callId) : false;
    const individualCallRejection = Array.isArray(approvalEntry == null ? void 0 : approvalEntry.rejected) ? approvalEntry.rejected.includes(callId) : false;
    if (individualCallApproval && individualCallRejection) {
      logger_default.warn(`Tool call ${callId} is both approved and rejected at the same time. Approval takes precedence`);
      return true;
    }
    if (individualCallApproval) {
      return true;
    }
    if (individualCallRejection) {
      return false;
    }
    return void 0;
  }
  /**
   * Approve a tool call.
   *
   * @param approvalItem - The tool approval item to approve.
   * @param options - Additional approval behavior options.
   */
  approveTool(approvalItem, { alwaysApprove = false } = {}) {
    const toolName = approvalItem.rawItem.name;
    if (alwaysApprove) {
      __privateGet(this, _approvals).set(toolName, {
        approved: true,
        rejected: []
      });
      return;
    }
    const approvalEntry = __privateGet(this, _approvals).get(toolName) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(approvalEntry.approved)) {
      const callId = "callId" in approvalItem.rawItem ? approvalItem.rawItem.callId : approvalItem.rawItem.id;
      approvalEntry.approved.push(callId);
    }
    __privateGet(this, _approvals).set(toolName, approvalEntry);
  }
  /**
   * Reject a tool call.
   *
   * @param approvalItem - The tool approval item to reject.
   */
  rejectTool(approvalItem, { alwaysReject = false } = {}) {
    const toolName = approvalItem.rawItem.name;
    if (alwaysReject) {
      __privateGet(this, _approvals).set(toolName, {
        approved: false,
        rejected: true
      });
      return;
    }
    const approvalEntry = __privateGet(this, _approvals).get(toolName) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(approvalEntry.rejected)) {
      const callId = "callId" in approvalItem.rawItem ? approvalItem.rawItem.callId : approvalItem.rawItem.id;
      approvalEntry.rejected.push(callId);
    }
    __privateGet(this, _approvals).set(toolName, approvalEntry);
  }
  toJSON() {
    return {
      context: this.context,
      usage: this.usage,
      approvals: Object.fromEntries(__privateGet(this, _approvals).entries())
    };
  }
};
_approvals = new WeakMap();

// node_modules/@openai/agents-core/dist/utils/serialize.mjs
function serializeTool(tool2) {
  if (tool2.type === "function") {
    return {
      type: "function",
      name: tool2.name,
      description: tool2.description,
      parameters: tool2.parameters,
      strict: tool2.strict
    };
  }
  if (tool2.type === "computer") {
    return {
      type: "computer",
      name: tool2.name,
      environment: tool2.computer.environment,
      dimensions: tool2.computer.dimensions
    };
  }
  return {
    type: "hosted_tool",
    name: tool2.name,
    providerData: tool2.providerData
  };
}
function serializeHandoff(h) {
  return {
    toolName: h.toolName,
    toolDescription: h.toolDescription,
    inputJsonSchema: h.inputJsonSchema,
    strictJsonSchema: h.strictJsonSchema
  };
}

// node_modules/@openai/agents-core/dist/items.mjs
var RunItemBase = class {
  constructor() {
    __publicField(this, "type", "base_item");
    __publicField(this, "rawItem");
  }
  toJSON() {
    return {
      type: this.type,
      rawItem: this.rawItem
    };
  }
};
var RunMessageOutputItem = class extends RunItemBase {
  constructor(rawItem, agent) {
    super();
    __publicField(this, "rawItem");
    __publicField(this, "agent");
    __publicField(this, "type", "message_output_item");
    this.rawItem = rawItem;
    this.agent = agent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
  get content() {
    let content = "";
    for (const part of this.rawItem.content) {
      if (part.type === "output_text") {
        content += part.text;
      }
    }
    return content;
  }
};
var RunToolCallItem = class extends RunItemBase {
  constructor(rawItem, agent) {
    super();
    __publicField(this, "rawItem");
    __publicField(this, "agent");
    __publicField(this, "type", "tool_call_item");
    this.rawItem = rawItem;
    this.agent = agent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
};
var RunToolCallOutputItem = class extends RunItemBase {
  constructor(rawItem, agent, output) {
    super();
    __publicField(this, "rawItem");
    __publicField(this, "agent");
    __publicField(this, "output");
    __publicField(this, "type", "tool_call_output_item");
    this.rawItem = rawItem;
    this.agent = agent;
    this.output = output;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON(),
      output: toSmartString(this.output)
    };
  }
};
var RunReasoningItem = class extends RunItemBase {
  constructor(rawItem, agent) {
    super();
    __publicField(this, "rawItem");
    __publicField(this, "agent");
    __publicField(this, "type", "reasoning_item");
    this.rawItem = rawItem;
    this.agent = agent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
};
var RunHandoffCallItem = class extends RunItemBase {
  constructor(rawItem, agent) {
    super();
    __publicField(this, "rawItem");
    __publicField(this, "agent");
    __publicField(this, "type", "handoff_call_item");
    this.rawItem = rawItem;
    this.agent = agent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
};
var RunHandoffOutputItem = class extends RunItemBase {
  constructor(rawItem, sourceAgent, targetAgent) {
    super();
    __publicField(this, "rawItem");
    __publicField(this, "sourceAgent");
    __publicField(this, "targetAgent");
    __publicField(this, "type", "handoff_output_item");
    this.rawItem = rawItem;
    this.sourceAgent = sourceAgent;
    this.targetAgent = targetAgent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      sourceAgent: this.sourceAgent.toJSON(),
      targetAgent: this.targetAgent.toJSON()
    };
  }
};
var RunToolApprovalItem = class extends RunItemBase {
  constructor(rawItem, agent) {
    super();
    __publicField(this, "rawItem");
    __publicField(this, "agent");
    __publicField(this, "type", "tool_approval_item");
    this.rawItem = rawItem;
    this.agent = agent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
};
function extractAllTextOutput(items) {
  return items.filter((item) => item.type === "message_output_item").map((item) => item.content).join("");
}

// node_modules/@openai/agents-core/dist/tracing/createSpans.mjs
function _withSpanFactory(createSpan) {
  return async (fn, ...args) => {
    return withNewSpanContext(async () => {
      const span = createSpan(...args);
      setCurrentSpan(span);
      try {
        span.start();
        return await fn(span);
      } catch (error40) {
        span.setError({
          message: error40.message,
          data: error40.data
        });
        throw error40;
      } finally {
        span.end();
        resetCurrentSpan();
      }
    });
  };
}
function createResponseSpan(options, parent) {
  options = {};
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "response",
      ...options.data
    }
  }, parent);
}
var withResponseSpan = _withSpanFactory(createResponseSpan);
function createAgentSpan(options, parent) {
  var _a;
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "agent",
      name: ((_a = options == null ? void 0 : options.data) == null ? void 0 : _a.name) ?? "Agent",
      ...options == null ? void 0 : options.data
    }
  }, parent);
}
var withAgentSpan = _withSpanFactory(createAgentSpan);
function createFunctionSpan(options, parent) {
  var _a, _b;
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "function",
      input: ((_a = options == null ? void 0 : options.data) == null ? void 0 : _a.input) ?? "",
      output: ((_b = options == null ? void 0 : options.data) == null ? void 0 : _b.output) ?? "",
      ...options == null ? void 0 : options.data
    }
  }, parent);
}
var withFunctionSpan = _withSpanFactory(createFunctionSpan);
function createHandoffSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: { type: "handoff", ...options == null ? void 0 : options.data }
  }, parent);
}
var withHandoffSpan = _withSpanFactory(createHandoffSpan);
function createGenerationSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "generation",
      ...options == null ? void 0 : options.data
    }
  }, parent);
}
var withGenerationSpan = _withSpanFactory(createGenerationSpan);
function createCustomSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "custom",
      data: {},
      ...options == null ? void 0 : options.data
    }
  }, parent);
}
var withCustomSpan = _withSpanFactory(createCustomSpan);
function createGuardrailSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "guardrail",
      triggered: false,
      ...options == null ? void 0 : options.data
    }
  }, parent);
}
var withGuardrailSpan = _withSpanFactory(createGuardrailSpan);
function createTranscriptionSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "transcription",
      ...options.data
    }
  }, parent);
}
var withTranscriptionSpan = _withSpanFactory(createTranscriptionSpan);
function createSpeechSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "speech",
      ...options.data
    }
  }, parent);
}
var withSpeechSpan = _withSpanFactory(createSpeechSpan);
function createSpeechGroupSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "speech_group",
      ...options == null ? void 0 : options.data
    }
  }, parent);
}
var withSpeechGroupSpan = _withSpanFactory(createSpeechGroupSpan);
function createMCPListToolsSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "mcp_tools",
      ...options == null ? void 0 : options.data
    }
  }, parent);
}
var withMCPListToolsSpan = _withSpanFactory(createMCPListToolsSpan);

// node_modules/@openai/agents-core/dist/utils/base64.mjs
function encodeUint8ArrayToBase64(data) {
  if (data.length === 0) {
    return "";
  }
  const globalBuffer = typeof globalThis !== "undefined" && globalThis.Buffer ? globalThis.Buffer : void 0;
  if (globalBuffer) {
    return globalBuffer.from(data).toString("base64");
  }
  let binary = "";
  for (let i2 = 0; i2 < data.length; i2 += 1) {
    binary += String.fromCharCode(data[i2]);
  }
  if (typeof globalThis.btoa === "function") {
    return globalThis.btoa(binary);
  }
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  let result = "";
  let i = 0;
  while (i < binary.length) {
    const c1 = binary.charCodeAt(i++);
    const c2 = binary.charCodeAt(i++);
    const c3 = binary.charCodeAt(i++);
    const enc1 = c1 >> 2;
    const enc2 = (c1 & 3) << 4 | c2 >> 4;
    const enc3 = isNaN(c2) ? 64 : (c2 & 15) << 2 | c3 >> 6;
    const enc4 = isNaN(c3) ? 64 : c3 & 63;
    result += chars.charAt(enc1) + chars.charAt(enc2) + chars.charAt(enc3) + chars.charAt(enc4);
  }
  return result;
}

// node_modules/@openai/agents-core/dist/events.mjs
var RunRawModelStreamEvent = class {
  /**
   * @param data The raw responses stream events from the LLM.
   */
  constructor(data) {
    __publicField(this, "data");
    /**
     * The type of the event.
     */
    __publicField(this, "type", "raw_model_stream_event");
    this.data = data;
  }
};
var RunItemStreamEvent = class {
  /**
   * @param name The name of the event.
   * @param item The item that was created.
   */
  constructor(name, item) {
    __publicField(this, "name");
    __publicField(this, "item");
    __publicField(this, "type", "run_item_stream_event");
    this.name = name;
    this.item = item;
  }
};
var RunAgentUpdatedStreamEvent = class {
  /**
   * @param agent The new agent
   */
  constructor(agent) {
    __publicField(this, "agent");
    __publicField(this, "type", "agent_updated_stream_event");
    this.agent = agent;
  }
};

// node_modules/@openai/agents-core/dist/runImplementation.mjs
function processModelResponse(modelResponse, agent, tools, handoffs) {
  var _a;
  const items = [];
  const runHandoffs = [];
  const runFunctions = [];
  const runComputerActions = [];
  const runMCPApprovalRequests = [];
  const toolsUsed = [];
  const handoffMap = new Map(handoffs.map((h) => [h.toolName, h]));
  const functionMap = new Map(tools.filter((t) => t.type === "function").map((t) => [t.name, t]));
  const computerTool2 = tools.find((t) => t.type === "computer");
  const mcpToolMap = new Map(tools.filter((t) => {
    var _a2;
    return t.type === "hosted_tool" && ((_a2 = t.providerData) == null ? void 0 : _a2.type) === "mcp";
  }).map((t) => t).map((t) => [t.providerData.server_label, t]));
  for (const output of modelResponse.output) {
    if (output.type === "message") {
      if (output.role === "assistant") {
        items.push(new RunMessageOutputItem(output, agent));
      }
    } else if (output.type === "hosted_tool_call") {
      items.push(new RunToolCallItem(output, agent));
      const toolName = output.name;
      toolsUsed.push(toolName);
      if (((_a = output.providerData) == null ? void 0 : _a.type) === "mcp_approval_request" || output.name === "mcp_approval_request") {
        const providerData = output.providerData;
        const mcpServerLabel = providerData.server_label;
        const mcpServerTool = mcpToolMap.get(mcpServerLabel);
        if (typeof mcpServerTool === "undefined") {
          const message = `MCP server (${mcpServerLabel}) not found in Agent (${agent.name})`;
          addErrorToCurrentSpan({
            message,
            data: { mcp_server_label: mcpServerLabel }
          });
          throw new ModelBehaviorError(message);
        }
        const approvalItem = new RunToolApprovalItem({
          type: "hosted_tool_call",
          // We must use this name to align with the name sent from the servers
          name: providerData.name,
          id: providerData.id,
          status: "in_progress",
          providerData
        }, agent);
        runMCPApprovalRequests.push({
          requestItem: approvalItem,
          mcpTool: mcpServerTool
        });
        if (!mcpServerTool.providerData.on_approval) {
          items.push(approvalItem);
        }
      }
    } else if (output.type === "reasoning") {
      items.push(new RunReasoningItem(output, agent));
    } else if (output.type === "computer_call") {
      items.push(new RunToolCallItem(output, agent));
      toolsUsed.push("computer_use");
      if (!computerTool2) {
        addErrorToCurrentSpan({
          message: "Model produced computer action without a computer tool.",
          data: {
            agent_name: agent.name
          }
        });
        throw new ModelBehaviorError("Model produced computer action without a computer tool.");
      }
      runComputerActions.push({
        toolCall: output,
        computer: computerTool2
      });
    }
    if (output.type !== "function_call") {
      continue;
    }
    toolsUsed.push(output.name);
    const handoff2 = handoffMap.get(output.name);
    if (handoff2) {
      items.push(new RunHandoffCallItem(output, agent));
      runHandoffs.push({
        toolCall: output,
        handoff: handoff2
      });
    } else {
      const functionTool = functionMap.get(output.name);
      if (!functionTool) {
        addErrorToCurrentSpan({
          message: `Tool ${output.name} not found in agent ${agent.name}.`,
          data: {
            tool_name: output.name,
            agent_name: agent.name
          }
        });
        throw new ModelBehaviorError(`Tool ${output.name} not found in agent ${agent.name}.`);
      }
      items.push(new RunToolCallItem(output, agent));
      runFunctions.push({
        toolCall: output,
        tool: functionTool
      });
    }
  }
  return {
    newItems: items,
    handoffs: runHandoffs,
    functions: runFunctions,
    computerActions: runComputerActions,
    mcpApprovalRequests: runMCPApprovalRequests,
    toolsUsed,
    hasToolsOrApprovalsToRun() {
      return runHandoffs.length > 0 || runFunctions.length > 0 || runMCPApprovalRequests.length > 0 || runComputerActions.length > 0;
    }
  };
}
var nextStepSchema = external_exports2.discriminatedUnion("type", [
  external_exports2.object({
    type: external_exports2.literal("next_step_handoff"),
    newAgent: external_exports2.any()
  }),
  external_exports2.object({
    type: external_exports2.literal("next_step_final_output"),
    output: external_exports2.string()
  }),
  external_exports2.object({
    type: external_exports2.literal("next_step_run_again")
  }),
  external_exports2.object({
    type: external_exports2.literal("next_step_interruption"),
    data: external_exports2.record(external_exports2.string(), external_exports2.any())
  })
]);
var SingleStepResult = class {
  constructor(originalInput, modelResponse, preStepItems, newStepItems, nextStep) {
    __publicField(this, "originalInput");
    __publicField(this, "modelResponse");
    __publicField(this, "preStepItems");
    __publicField(this, "newStepItems");
    __publicField(this, "nextStep");
    this.originalInput = originalInput;
    this.modelResponse = modelResponse;
    this.preStepItems = preStepItems;
    this.newStepItems = newStepItems;
    this.nextStep = nextStep;
  }
  /**
   * The items generated during the agent run (i.e. everything generated after originalInput)
   */
  get generatedItems() {
    return this.preStepItems.concat(this.newStepItems);
  }
};
function maybeResetToolChoice(agent, toolUseTracker, modelSettings) {
  if (agent.resetToolChoice && toolUseTracker.hasUsedTools(agent)) {
    return { ...modelSettings, toolChoice: void 0 };
  }
  return modelSettings;
}
async function executeInterruptedToolsAndSideEffects(agent, originalInput, originalPreStepItems, newResponse, processedResponse, runner, state) {
  const functionCallIds = originalPreStepItems.filter((item) => item instanceof RunToolApprovalItem && "callId" in item.rawItem && item.rawItem.type === "function_call").map((item) => item.rawItem.callId);
  const functionToolRuns = processedResponse.functions.filter((run2) => {
    return functionCallIds.includes(run2.toolCall.callId);
  });
  const functionResults = await executeFunctionToolCalls(agent, functionToolRuns, runner, state);
  const newItems = functionResults.map((r) => r.runItem);
  const mcpApprovalRuns = processedResponse.mcpApprovalRequests.filter((run2) => {
    var _a;
    return run2.requestItem.type === "tool_approval_item" && run2.requestItem.rawItem.type === "hosted_tool_call" && ((_a = run2.requestItem.rawItem.providerData) == null ? void 0 : _a.type) === "mcp_approval_request";
  });
  for (const run2 of mcpApprovalRuns) {
    const approvalRequestId = run2.requestItem.rawItem.id;
    const approved = state._context.isToolApproved({
      // Since this item name must be the same with the one sent from Responses API server
      toolName: run2.requestItem.rawItem.name,
      callId: approvalRequestId
    });
    if (typeof approved !== "undefined") {
      const providerData = {
        approve: approved,
        approval_request_id: approvalRequestId,
        reason: void 0
      };
      newItems.push(new RunToolCallItem({
        type: "hosted_tool_call",
        name: "mcp_approval_response",
        providerData
      }, agent));
    }
  }
  const checkToolOutput = await checkForFinalOutputFromTools(agent, functionResults, state);
  const preStepItems = originalPreStepItems.filter((item) => {
    return !(item instanceof RunToolApprovalItem);
  });
  if (checkToolOutput.isFinalOutput) {
    runner.emit("agent_end", state._context, agent, checkToolOutput.finalOutput);
    agent.emit("agent_end", state._context, checkToolOutput.finalOutput);
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, {
      type: "next_step_final_output",
      output: checkToolOutput.finalOutput
    });
  } else if (checkToolOutput.isInterrupted) {
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, {
      type: "next_step_interruption",
      data: {
        interruptions: checkToolOutput.interruptions
      }
    });
  }
  return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, { type: "next_step_run_again" });
}
async function executeToolsAndSideEffects(agent, originalInput, originalPreStepItems, newResponse, processedResponse, runner, state) {
  var _a, _b, _c, _d;
  const preStepItems = originalPreStepItems;
  let newItems = processedResponse.newItems;
  const [functionResults, computerResults] = await Promise.all([
    executeFunctionToolCalls(agent, processedResponse.functions, runner, state),
    executeComputerActions(agent, processedResponse.computerActions, runner, state._context)
  ]);
  newItems = newItems.concat(functionResults.map((r) => r.runItem));
  newItems = newItems.concat(computerResults);
  if (processedResponse.mcpApprovalRequests.length > 0) {
    for (const approvalRequest of processedResponse.mcpApprovalRequests) {
      const toolData = approvalRequest.mcpTool.providerData;
      const requestData = approvalRequest.requestItem.rawItem.providerData;
      if (toolData.on_approval) {
        const approvalResult = await toolData.on_approval(state._context, approvalRequest.requestItem);
        const approvalResponseData = {
          approve: approvalResult.approve,
          approval_request_id: requestData.id,
          reason: approvalResult.reason
        };
        newItems.push(new RunToolCallItem({
          type: "hosted_tool_call",
          name: "mcp_approval_response",
          providerData: approvalResponseData
        }, agent));
      } else {
        newItems.push(approvalRequest.requestItem);
        const approvalItem = {
          type: "hosted_mcp_tool_approval",
          tool: approvalRequest.mcpTool,
          runItem: new RunToolApprovalItem({
            type: "hosted_tool_call",
            name: requestData.name,
            id: requestData.id,
            arguments: requestData.arguments,
            status: "in_progress",
            providerData: requestData
          }, agent)
        };
        functionResults.push(approvalItem);
      }
    }
  }
  if (processedResponse.handoffs.length > 0) {
    return await executeHandoffCalls(agent, originalInput, preStepItems, newItems, newResponse, processedResponse.handoffs, runner, state._context);
  }
  const checkToolOutput = await checkForFinalOutputFromTools(agent, functionResults, state);
  if (checkToolOutput.isFinalOutput) {
    runner.emit("agent_end", state._context, agent, checkToolOutput.finalOutput);
    agent.emit("agent_end", state._context, checkToolOutput.finalOutput);
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, {
      type: "next_step_final_output",
      output: checkToolOutput.finalOutput
    });
  } else if (checkToolOutput.isInterrupted) {
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, {
      type: "next_step_interruption",
      data: {
        interruptions: checkToolOutput.interruptions
      }
    });
  }
  const hadToolCallsOrActions = (((_a = processedResponse.functions) == null ? void 0 : _a.length) ?? 0) > 0 || (((_b = processedResponse.computerActions) == null ? void 0 : _b.length) ?? 0) > 0 || (((_c = processedResponse.mcpApprovalRequests) == null ? void 0 : _c.length) ?? 0) > 0 || (((_d = processedResponse.handoffs) == null ? void 0 : _d.length) ?? 0) > 0;
  if (hadToolCallsOrActions) {
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, { type: "next_step_run_again" });
  }
  const messageItems = newItems.filter((item) => item instanceof RunMessageOutputItem);
  const potentialFinalOutput = messageItems.length > 0 ? getLastTextFromOutputMessage(messageItems[messageItems.length - 1].rawItem) : void 0;
  if (typeof potentialFinalOutput === "undefined") {
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, { type: "next_step_run_again" });
  }
  const hasPendingToolsOrApprovals = functionResults.some((result) => result.runItem instanceof RunToolApprovalItem);
  if (!hasPendingToolsOrApprovals) {
    if (agent.outputType === "text") {
      return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, {
        type: "next_step_final_output",
        output: potentialFinalOutput
      });
    }
    if (agent.outputType !== "text" && potentialFinalOutput) {
      const { parser } = getSchemaAndParserFromInputType(agent.outputType, "final_output");
      const [error40] = await safeExecute(() => parser(potentialFinalOutput));
      if (error40) {
        addErrorToCurrentSpan({
          message: "Invalid output type",
          data: {
            error: String(error40)
          }
        });
        throw new ModelBehaviorError("Invalid output type");
      }
      return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, { type: "next_step_final_output", output: potentialFinalOutput });
    }
  }
  return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, { type: "next_step_run_again" });
}
function getToolCallOutputItem(toolCall, output) {
  const maybeStructuredOutputs = normalizeStructuredToolOutputs(output);
  if (maybeStructuredOutputs) {
    const structuredItems = maybeStructuredOutputs.map(convertStructuredToolOutputToInputItem);
    return {
      type: "function_call_result",
      name: toolCall.name,
      callId: toolCall.callId,
      status: "completed",
      output: structuredItems
    };
  }
  return {
    type: "function_call_result",
    name: toolCall.name,
    callId: toolCall.callId,
    status: "completed",
    output: {
      type: "text",
      text: toSmartString(output)
    }
  };
}
function normalizeStructuredToolOutputs(output) {
  if (Array.isArray(output)) {
    const structured = [];
    for (const item of output) {
      const normalized2 = normalizeStructuredToolOutput(item);
      if (!normalized2) {
        return null;
      }
      structured.push(normalized2);
    }
    return structured;
  }
  const normalized = normalizeStructuredToolOutput(output);
  return normalized ? [normalized] : null;
}
function normalizeStructuredToolOutput(value) {
  if (!isRecord(value)) {
    return null;
  }
  const type = value.type;
  if (type === "text" && typeof value.text === "string") {
    const output = { type: "text", text: value.text };
    if (isRecord(value.providerData)) {
      output.providerData = value.providerData;
    }
    return output;
  }
  if (type === "image") {
    const output = { type: "image" };
    let imageString;
    let imageFileId;
    const fallbackImageMediaType = isNonEmptyString(value.mediaType) ? value.mediaType : void 0;
    const imageField = value.image;
    if (typeof imageField === "string" && imageField.length > 0) {
      imageString = imageField;
    } else if (isRecord(imageField)) {
      const imageObj = imageField;
      const inlineMediaType = isNonEmptyString(imageObj.mediaType) ? imageObj.mediaType : fallbackImageMediaType;
      if (isNonEmptyString(imageObj.url)) {
        imageString = imageObj.url;
      } else if (isNonEmptyString(imageObj.data)) {
        imageString = toInlineImageString(imageObj.data, inlineMediaType);
      } else if (imageObj.data instanceof Uint8Array && imageObj.data.length > 0) {
        imageString = toInlineImageString(imageObj.data, inlineMediaType);
      }
      if (!imageString) {
        const candidateId = isNonEmptyString(imageObj.fileId) && imageObj.fileId || isNonEmptyString(imageObj.id) && imageObj.id || void 0;
        if (candidateId) {
          imageFileId = candidateId;
        }
      }
    }
    if (!imageString && typeof value.imageUrl === "string" && value.imageUrl.length > 0) {
      imageString = value.imageUrl;
    }
    if (!imageFileId && typeof value.fileId === "string" && value.fileId.length > 0) {
      imageFileId = value.fileId;
    }
    if (!imageString && typeof value.data === "string" && value.data.length > 0) {
      imageString = fallbackImageMediaType ? toInlineImageString(value.data, fallbackImageMediaType) : value.data;
    } else if (!imageString && value.data instanceof Uint8Array && value.data.length > 0) {
      imageString = toInlineImageString(value.data, fallbackImageMediaType);
    }
    if (typeof value.detail === "string" && value.detail.length > 0) {
      output.detail = value.detail;
    }
    if (imageString) {
      output.image = imageString;
    } else if (imageFileId) {
      output.image = { fileId: imageFileId };
    } else {
      return null;
    }
    if (isRecord(value.providerData)) {
      output.providerData = value.providerData;
    }
    return output;
  }
  if (type === "file") {
    const fileValue = normalizeFileValue(value);
    if (!fileValue) {
      return null;
    }
    const output = { type: "file", file: fileValue };
    if (isRecord(value.providerData)) {
      output.providerData = value.providerData;
    }
    return output;
  }
  return null;
}
function convertStructuredToolOutputToInputItem(output) {
  if (output.type === "text") {
    const result = {
      type: "input_text",
      text: output.text
    };
    if (output.providerData) {
      result.providerData = output.providerData;
    }
    return result;
  }
  if (output.type === "image") {
    const result = { type: "input_image" };
    if (typeof output.detail === "string" && output.detail.length > 0) {
      result.detail = output.detail;
    }
    if (typeof output.image === "string" && output.image.length > 0) {
      result.image = output.image;
    } else if (isRecord(output.image)) {
      const imageObj = output.image;
      const inlineMediaType = isNonEmptyString(imageObj.mediaType) ? imageObj.mediaType : void 0;
      if (isNonEmptyString(imageObj.url)) {
        result.image = imageObj.url;
      } else if (isNonEmptyString(imageObj.data)) {
        result.image = inlineMediaType && !imageObj.data.startsWith("data:") ? asDataUrl(imageObj.data, inlineMediaType) : imageObj.data;
      } else if (imageObj.data instanceof Uint8Array && imageObj.data.length > 0) {
        const base643 = encodeUint8ArrayToBase64(imageObj.data);
        result.image = asDataUrl(base643, inlineMediaType);
      } else {
        const referencedId = isNonEmptyString(imageObj.fileId) && imageObj.fileId || isNonEmptyString(imageObj.id) && imageObj.id || void 0;
        if (referencedId) {
          result.image = { id: referencedId };
        }
      }
    }
    if (output.providerData) {
      result.providerData = output.providerData;
    }
    return result;
  }
  if (output.type === "file") {
    const result = { type: "input_file" };
    const fileValue = output.file;
    if (typeof fileValue === "string") {
      result.file = fileValue;
    } else if (fileValue && typeof fileValue === "object") {
      const record2 = fileValue;
      if ("data" in record2 && record2.data) {
        const mediaType = record2.mediaType ?? "text/plain";
        if (typeof record2.data === "string") {
          result.file = asDataUrl(record2.data, mediaType);
        } else {
          const base643 = encodeUint8ArrayToBase64(record2.data);
          result.file = asDataUrl(base643, mediaType);
        }
      } else if (typeof record2.url === "string" && record2.url.length > 0) {
        result.file = { url: record2.url };
      } else {
        const referencedId = typeof record2.id === "string" && record2.id.length > 0 && record2.id || (typeof record2.fileId === "string" && record2.fileId.length > 0 ? record2.fileId : void 0);
        if (referencedId) {
          result.file = { id: referencedId };
        }
      }
      if (typeof record2.filename === "string" && record2.filename.length > 0) {
        result.filename = record2.filename;
      }
    }
    if (output.providerData) {
      result.providerData = output.providerData;
    }
    return result;
  }
  const exhaustiveCheck = output;
  return exhaustiveCheck;
}
function normalizeFileValue(value) {
  const directFile = value.file;
  if (typeof directFile === "string" && directFile.length > 0) {
    return directFile;
  }
  const normalizedObject = normalizeFileObjectCandidate(directFile);
  if (normalizedObject) {
    return normalizedObject;
  }
  const legacyValue = normalizeLegacyFileValue(value);
  if (legacyValue) {
    return legacyValue;
  }
  return null;
}
function normalizeFileObjectCandidate(value) {
  if (!isRecord(value)) {
    return null;
  }
  if ("data" in value && value.data !== void 0) {
    const dataValue = value.data;
    const hasStringData = typeof dataValue === "string" && dataValue.length > 0;
    const hasBinaryData = dataValue instanceof Uint8Array && dataValue.length > 0;
    if (!hasStringData && !hasBinaryData) {
      return null;
    }
    if (!isNonEmptyString(value.mediaType) || !isNonEmptyString(value.filename)) {
      return null;
    }
    return {
      data: typeof dataValue === "string" ? dataValue : new Uint8Array(dataValue),
      mediaType: value.mediaType,
      filename: value.filename
    };
  }
  if (isNonEmptyString(value.url)) {
    const result = { url: value.url };
    if (isNonEmptyString(value.filename)) {
      result.filename = value.filename;
    }
    return result;
  }
  const referencedId = isNonEmptyString(value.id) && value.id || isNonEmptyString(value.fileId) && value.fileId;
  if (referencedId) {
    const result = { id: referencedId };
    if (isNonEmptyString(value.filename)) {
      result.filename = value.filename;
    }
    return result;
  }
  return null;
}
function normalizeLegacyFileValue(value) {
  const filename = typeof value.filename === "string" && value.filename.length > 0 ? value.filename : void 0;
  const mediaType = typeof value.mediaType === "string" && value.mediaType.length > 0 ? value.mediaType : void 0;
  if (typeof value.fileData === "string" && value.fileData.length > 0) {
    if (!mediaType || !filename) {
      return null;
    }
    return { data: value.fileData, mediaType, filename };
  }
  if (value.fileData instanceof Uint8Array && value.fileData.length > 0) {
    if (!mediaType || !filename) {
      return null;
    }
    return { data: new Uint8Array(value.fileData), mediaType, filename };
  }
  if (typeof value.fileUrl === "string" && value.fileUrl.length > 0) {
    const result = { url: value.fileUrl };
    if (filename) {
      result.filename = filename;
    }
    return result;
  }
  if (typeof value.fileId === "string" && value.fileId.length > 0) {
    const result = { id: value.fileId };
    if (filename) {
      result.filename = filename;
    }
    return result;
  }
  return null;
}
function isRecord(value) {
  return typeof value === "object" && value !== null;
}
function isNonEmptyString(value) {
  return typeof value === "string" && value.length > 0;
}
function toInlineImageString(data, mediaType) {
  if (typeof data === "string") {
    if (mediaType && !data.startsWith("data:")) {
      return asDataUrl(data, mediaType);
    }
    return data;
  }
  const base643 = encodeUint8ArrayToBase64(data);
  return asDataUrl(base643, mediaType);
}
function asDataUrl(base643, mediaType) {
  return mediaType ? `data:${mediaType};base64,${base643}` : base643;
}
async function executeFunctionToolCalls(agent, toolRuns, runner, state) {
  async function runSingleTool(toolRun) {
    let parsedArgs = toolRun.toolCall.arguments;
    if (toolRun.tool.parameters) {
      if (isZodObject(toolRun.tool.parameters)) {
        parsedArgs = toolRun.tool.parameters.parse(parsedArgs);
      } else {
        parsedArgs = JSON.parse(parsedArgs);
      }
    }
    const needsApproval = await toolRun.tool.needsApproval(state._context, parsedArgs, toolRun.toolCall.callId);
    if (needsApproval) {
      const approval = state._context.isToolApproved({
        toolName: toolRun.tool.name,
        callId: toolRun.toolCall.callId
      });
      if (approval === false) {
        return withFunctionSpan(async (span) => {
          const response = "Tool execution was not approved.";
          span.setError({
            message: response,
            data: {
              tool_name: toolRun.tool.name,
              error: `Tool execution for ${toolRun.toolCall.callId} was manually rejected by user.`
            }
          });
          span.spanData.output = response;
          return {
            type: "function_output",
            tool: toolRun.tool,
            output: response,
            runItem: new RunToolCallOutputItem(getToolCallOutputItem(toolRun.toolCall, response), agent, response)
          };
        }, {
          data: {
            name: toolRun.tool.name
          }
        });
      }
      if (approval !== true) {
        return {
          type: "function_approval",
          tool: toolRun.tool,
          runItem: new RunToolApprovalItem(toolRun.toolCall, agent)
        };
      }
    }
    return withFunctionSpan(async (span) => {
      if (runner.config.traceIncludeSensitiveData) {
        span.spanData.input = toolRun.toolCall.arguments;
      }
      try {
        runner.emit("agent_tool_start", state._context, agent, toolRun.tool, {
          toolCall: toolRun.toolCall
        });
        agent.emit("agent_tool_start", state._context, toolRun.tool, {
          toolCall: toolRun.toolCall
        });
        const toolOutput = await toolRun.tool.invoke(state._context, toolRun.toolCall.arguments, { toolCall: toolRun.toolCall });
        const stringResult = toSmartString(toolOutput);
        runner.emit("agent_tool_end", state._context, agent, toolRun.tool, stringResult, { toolCall: toolRun.toolCall });
        agent.emit("agent_tool_end", state._context, toolRun.tool, stringResult, { toolCall: toolRun.toolCall });
        if (runner.config.traceIncludeSensitiveData) {
          span.spanData.output = stringResult;
        }
        const functionResult = {
          type: "function_output",
          tool: toolRun.tool,
          output: toolOutput,
          runItem: new RunToolCallOutputItem(getToolCallOutputItem(toolRun.toolCall, toolOutput), agent, toolOutput)
        };
        const nestedRunResult = consumeAgentToolRunResult(toolRun.toolCall);
        if (nestedRunResult) {
          functionResult.agentRunResult = nestedRunResult;
          const nestedInterruptions = nestedRunResult.interruptions;
          if (nestedInterruptions.length > 0) {
            functionResult.interruptions = nestedInterruptions;
          }
        }
        return functionResult;
      } catch (error40) {
        span.setError({
          message: "Error running tool",
          data: {
            tool_name: toolRun.tool.name,
            error: String(error40)
          }
        });
        throw error40;
      }
    }, {
      data: {
        name: toolRun.tool.name
      }
    });
  }
  try {
    const results = await Promise.all(toolRuns.map(runSingleTool));
    return results;
  } catch (e) {
    throw new ToolCallError(`Failed to run function tools: ${e}`, e, state);
  }
}
async function _runComputerActionAndScreenshot(computer, toolCall) {
  const action = toolCall.action;
  let screenshot;
  switch (action.type) {
    case "click":
      await computer.click(action.x, action.y, action.button);
      break;
    case "double_click":
      await computer.doubleClick(action.x, action.y);
      break;
    case "drag":
      await computer.drag(action.path.map((p) => [p.x, p.y]));
      break;
    case "keypress":
      await computer.keypress(action.keys);
      break;
    case "move":
      await computer.move(action.x, action.y);
      break;
    case "screenshot":
      screenshot = await computer.screenshot();
      break;
    case "scroll":
      await computer.scroll(action.x, action.y, action.scroll_x, action.scroll_y);
      break;
    case "type":
      await computer.type(action.text);
      break;
    case "wait":
      await computer.wait();
      break;
    default:
      action;
      break;
  }
  if (typeof screenshot !== "undefined") {
    return screenshot;
  }
  if (typeof computer.screenshot === "function") {
    screenshot = await computer.screenshot();
    if (typeof screenshot !== "undefined") {
      return screenshot;
    }
  }
  throw new Error("Computer does not implement screenshot()");
}
async function executeComputerActions(agent, actions, runner, runContext, customLogger = void 0) {
  const _logger = customLogger ?? logger_default;
  const results = [];
  for (const action of actions) {
    const computer = action.computer.computer;
    const toolCall = action.toolCall;
    runner.emit("agent_tool_start", runContext, agent, action.computer, {
      toolCall
    });
    if (typeof agent.emit === "function") {
      agent.emit("agent_tool_start", runContext, action.computer, { toolCall });
    }
    let output;
    try {
      output = await _runComputerActionAndScreenshot(computer, toolCall);
    } catch (err) {
      _logger.error("Failed to execute computer action:", err);
      output = "";
    }
    runner.emit("agent_tool_end", runContext, agent, action.computer, output, {
      toolCall
    });
    if (typeof agent.emit === "function") {
      agent.emit("agent_tool_end", runContext, action.computer, output, {
        toolCall
      });
    }
    const imageUrl = output ? `data:image/png;base64,${output}` : "";
    const rawItem = {
      type: "computer_call_result",
      callId: toolCall.callId,
      output: { type: "computer_screenshot", data: imageUrl }
    };
    results.push(new RunToolCallOutputItem(rawItem, agent, imageUrl));
  }
  return results;
}
async function executeHandoffCalls(agent, originalInput, preStepItems, newStepItems, newResponse, runHandoffs, runner, runContext) {
  newStepItems = [...newStepItems];
  if (runHandoffs.length === 0) {
    logger_default.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on.");
    return new SingleStepResult(originalInput, newResponse, preStepItems, newStepItems, { type: "next_step_run_again" });
  }
  if (runHandoffs.length > 1) {
    const outputMessage = "Multiple handoffs detected, ignoring this one.";
    for (let i = 1; i < runHandoffs.length; i++) {
      newStepItems.push(new RunToolCallOutputItem(getToolCallOutputItem(runHandoffs[i].toolCall, outputMessage), agent, outputMessage));
    }
  }
  const actualHandoff = runHandoffs[0];
  return withHandoffSpan(async (handoffSpan) => {
    const handoff2 = actualHandoff.handoff;
    const newAgent = await handoff2.onInvokeHandoff(runContext, actualHandoff.toolCall.arguments);
    handoffSpan.spanData.to_agent = newAgent.name;
    if (runHandoffs.length > 1) {
      const requestedAgents = runHandoffs.map((h) => h.handoff.agentName);
      handoffSpan.setError({
        message: "Multiple handoffs requested",
        data: {
          requested_agents: requestedAgents
        }
      });
    }
    newStepItems.push(new RunHandoffOutputItem(getToolCallOutputItem(actualHandoff.toolCall, getTransferMessage(newAgent)), agent, newAgent));
    runner.emit("agent_handoff", runContext, agent, newAgent);
    agent.emit("agent_handoff", runContext, newAgent);
    const inputFilter = handoff2.inputFilter ?? runner.config.handoffInputFilter;
    if (inputFilter) {
      logger_default.debug("Filtering inputs for handoff");
      if (typeof inputFilter !== "function") {
        handoffSpan.setError({
          message: "Invalid input filter",
          data: {
            details: "not callable"
          }
        });
      }
      const handoffInputData = {
        inputHistory: Array.isArray(originalInput) ? [...originalInput] : originalInput,
        preHandoffItems: [...preStepItems],
        newItems: [...newStepItems],
        runContext
      };
      const filtered = inputFilter(handoffInputData);
      originalInput = filtered.inputHistory;
      preStepItems = filtered.preHandoffItems;
      newStepItems = filtered.newItems;
    }
    return new SingleStepResult(originalInput, newResponse, preStepItems, newStepItems, { type: "next_step_handoff", newAgent });
  }, {
    data: {
      from_agent: agent.name
    }
  });
}
var NOT_FINAL_OUTPUT = {
  isFinalOutput: false,
  isInterrupted: void 0
};
async function checkForFinalOutputFromTools(agent, toolResults, state) {
  if (toolResults.length === 0) {
    return NOT_FINAL_OUTPUT;
  }
  const interruptions = [];
  for (const result of toolResults) {
    if (result.runItem instanceof RunToolApprovalItem) {
      interruptions.push(result.runItem);
    }
    if (result.type === "function_output") {
      if (Array.isArray(result.interruptions)) {
        interruptions.push(...result.interruptions);
      } else if (result.agentRunResult) {
        const nestedInterruptions = result.agentRunResult.interruptions;
        if (nestedInterruptions.length > 0) {
          interruptions.push(...nestedInterruptions);
        }
      }
    }
  }
  if (interruptions.length > 0) {
    return {
      isFinalOutput: false,
      isInterrupted: true,
      interruptions
    };
  }
  if (agent.toolUseBehavior === "run_llm_again") {
    return NOT_FINAL_OUTPUT;
  }
  const firstToolResult = toolResults[0];
  if (agent.toolUseBehavior === "stop_on_first_tool") {
    if ((firstToolResult == null ? void 0 : firstToolResult.type) === "function_output") {
      const stringOutput = toSmartString(firstToolResult.output);
      return {
        isFinalOutput: true,
        isInterrupted: void 0,
        finalOutput: stringOutput
      };
    }
    return NOT_FINAL_OUTPUT;
  }
  const toolUseBehavior = agent.toolUseBehavior;
  if (typeof toolUseBehavior === "object") {
    const stoppingTool = toolResults.find((r) => toolUseBehavior.stopAtToolNames.includes(r.tool.name));
    if ((stoppingTool == null ? void 0 : stoppingTool.type) === "function_output") {
      const stringOutput = toSmartString(stoppingTool.output);
      return {
        isFinalOutput: true,
        isInterrupted: void 0,
        finalOutput: stringOutput
      };
    }
    return NOT_FINAL_OUTPUT;
  }
  if (typeof toolUseBehavior === "function") {
    return toolUseBehavior(state._context, toolResults);
  }
  throw new UserError(`Invalid toolUseBehavior: ${toolUseBehavior}`, state);
}
function getRunItemStreamEventName(item) {
  if (item instanceof RunMessageOutputItem) {
    return "message_output_created";
  }
  if (item instanceof RunHandoffCallItem) {
    return "handoff_requested";
  }
  if (item instanceof RunHandoffOutputItem) {
    return "handoff_occurred";
  }
  if (item instanceof RunToolCallItem) {
    return "tool_called";
  }
  if (item instanceof RunToolCallOutputItem) {
    return "tool_output";
  }
  if (item instanceof RunReasoningItem) {
    return "reasoning_item_created";
  }
  if (item instanceof RunToolApprovalItem) {
    return "tool_approval_requested";
  }
  return void 0;
}
function enqueueRunItemStreamEvent(result, item) {
  const itemName = getRunItemStreamEventName(item);
  if (!itemName) {
    logger_default.warn("Unknown item type: ", item);
    return;
  }
  result._addItem(new RunItemStreamEvent(itemName, item));
}
function streamStepItemsToRunResult(result, items) {
  for (const item of items) {
    enqueueRunItemStreamEvent(result, item);
  }
}
function addStepToRunResult(result, step, options) {
  const skippedItems = options == null ? void 0 : options.skipItems;
  for (const item of step.newStepItems) {
    if (skippedItems == null ? void 0 : skippedItems.has(item)) {
      continue;
    }
    enqueueRunItemStreamEvent(result, item);
  }
}
var _agentToTools;
var AgentToolUseTracker = class {
  constructor() {
    __privateAdd(this, _agentToTools, /* @__PURE__ */ new Map());
  }
  addToolUse(agent, toolNames) {
    __privateGet(this, _agentToTools).set(agent, toolNames);
  }
  hasUsedTools(agent) {
    return __privateGet(this, _agentToTools).has(agent);
  }
  toJSON() {
    return Object.fromEntries(Array.from(__privateGet(this, _agentToTools).entries()).map(([agent, toolNames]) => {
      return [agent.name, toolNames];
    }));
  }
};
_agentToTools = new WeakMap();

// node_modules/@openai/agents-core/dist/runState.mjs
var CURRENT_SCHEMA_VERSION = "1.0";
var $schemaVersion = external_exports2.literal(CURRENT_SCHEMA_VERSION);
var serializedAgentSchema = external_exports2.object({
  name: external_exports2.string()
});
var serializedSpanBase = external_exports2.object({
  object: external_exports2.literal("trace.span"),
  id: external_exports2.string(),
  trace_id: external_exports2.string(),
  parent_id: external_exports2.string().nullable(),
  started_at: external_exports2.string().nullable(),
  ended_at: external_exports2.string().nullable(),
  error: external_exports2.object({
    message: external_exports2.string(),
    data: external_exports2.record(external_exports2.string(), external_exports2.any()).optional()
  }).nullable(),
  span_data: external_exports2.record(external_exports2.string(), external_exports2.any())
});
var SerializedSpan = serializedSpanBase.extend({
  previous_span: external_exports2.lazy(() => SerializedSpan).optional()
});
var usageSchema = external_exports2.object({
  requests: external_exports2.number(),
  inputTokens: external_exports2.number(),
  outputTokens: external_exports2.number(),
  totalTokens: external_exports2.number()
});
var modelResponseSchema = external_exports2.object({
  usage: usageSchema,
  output: external_exports2.array(OutputModelItem),
  responseId: external_exports2.string().optional(),
  providerData: external_exports2.record(external_exports2.string(), external_exports2.any()).optional()
});
var itemSchema = external_exports2.discriminatedUnion("type", [
  external_exports2.object({
    type: external_exports2.literal("message_output_item"),
    rawItem: AssistantMessageItem,
    agent: serializedAgentSchema
  }),
  external_exports2.object({
    type: external_exports2.literal("tool_call_item"),
    rawItem: ToolCallItem.or(HostedToolCallItem),
    agent: serializedAgentSchema
  }),
  external_exports2.object({
    type: external_exports2.literal("tool_call_output_item"),
    rawItem: FunctionCallResultItem,
    agent: serializedAgentSchema,
    output: external_exports2.string()
  }),
  external_exports2.object({
    type: external_exports2.literal("reasoning_item"),
    rawItem: ReasoningItem,
    agent: serializedAgentSchema
  }),
  external_exports2.object({
    type: external_exports2.literal("handoff_call_item"),
    rawItem: FunctionCallItem,
    agent: serializedAgentSchema
  }),
  external_exports2.object({
    type: external_exports2.literal("handoff_output_item"),
    rawItem: FunctionCallResultItem,
    sourceAgent: serializedAgentSchema,
    targetAgent: serializedAgentSchema
  }),
  external_exports2.object({
    type: external_exports2.literal("tool_approval_item"),
    rawItem: FunctionCallItem.or(HostedToolCallItem),
    agent: serializedAgentSchema
  })
]);
var serializedTraceSchema = external_exports2.object({
  object: external_exports2.literal("trace"),
  id: external_exports2.string(),
  workflow_name: external_exports2.string(),
  group_id: external_exports2.string().nullable(),
  metadata: external_exports2.record(external_exports2.string(), external_exports2.any())
});
var serializedProcessedResponseSchema = external_exports2.object({
  newItems: external_exports2.array(itemSchema),
  toolsUsed: external_exports2.array(external_exports2.string()),
  handoffs: external_exports2.array(external_exports2.object({
    toolCall: external_exports2.any(),
    handoff: external_exports2.any()
  })),
  functions: external_exports2.array(external_exports2.object({
    toolCall: external_exports2.any(),
    tool: external_exports2.any()
  })),
  computerActions: external_exports2.array(external_exports2.object({
    toolCall: external_exports2.any(),
    computer: external_exports2.any()
  })),
  mcpApprovalRequests: external_exports2.array(external_exports2.object({
    requestItem: external_exports2.object({
      // protocol.HostedToolCallItem
      rawItem: external_exports2.object({
        type: external_exports2.literal("hosted_tool_call"),
        name: external_exports2.string(),
        arguments: external_exports2.string().optional(),
        status: external_exports2.string().optional(),
        output: external_exports2.string().optional(),
        // this always exists but marked as optional for early version compatibility; when releasing 1.0, we can remove the nullable and optional
        providerData: external_exports2.record(external_exports2.string(), external_exports2.any()).nullable().optional()
      })
    }),
    // HostedMCPTool
    mcpTool: external_exports2.object({
      type: external_exports2.literal("hosted_tool"),
      name: external_exports2.literal("hosted_mcp"),
      providerData: external_exports2.record(external_exports2.string(), external_exports2.any())
    })
  })).optional()
});
var guardrailFunctionOutputSchema = external_exports2.object({
  tripwireTriggered: external_exports2.boolean(),
  outputInfo: external_exports2.any()
});
var inputGuardrailResultSchema = external_exports2.object({
  guardrail: external_exports2.object({
    type: external_exports2.literal("input"),
    name: external_exports2.string()
  }),
  output: guardrailFunctionOutputSchema
});
var outputGuardrailResultSchema = external_exports2.object({
  guardrail: external_exports2.object({
    type: external_exports2.literal("output"),
    name: external_exports2.string()
  }),
  agentOutput: external_exports2.any(),
  agent: serializedAgentSchema,
  output: guardrailFunctionOutputSchema
});
var SerializedRunState = external_exports2.object({
  $schemaVersion,
  currentTurn: external_exports2.number(),
  currentAgent: serializedAgentSchema,
  originalInput: external_exports2.string().or(external_exports2.array(ModelItem)),
  modelResponses: external_exports2.array(modelResponseSchema),
  context: external_exports2.object({
    usage: usageSchema,
    approvals: external_exports2.record(external_exports2.string(), external_exports2.object({
      approved: external_exports2.array(external_exports2.string()).or(external_exports2.boolean()),
      rejected: external_exports2.array(external_exports2.string()).or(external_exports2.boolean())
    })),
    context: external_exports2.record(external_exports2.string(), external_exports2.any())
  }),
  toolUseTracker: external_exports2.record(external_exports2.string(), external_exports2.array(external_exports2.string())),
  maxTurns: external_exports2.number(),
  currentAgentSpan: SerializedSpan.nullable().optional(),
  noActiveAgentRun: external_exports2.boolean(),
  inputGuardrailResults: external_exports2.array(inputGuardrailResultSchema),
  outputGuardrailResults: external_exports2.array(outputGuardrailResultSchema),
  currentStep: nextStepSchema.optional(),
  lastModelResponse: modelResponseSchema.optional(),
  generatedItems: external_exports2.array(itemSchema),
  lastProcessedResponse: serializedProcessedResponseSchema.optional(),
  trace: serializedTraceSchema.nullable()
});
var RunState = class _RunState {
  constructor(context, originalInput, startingAgent, maxTurns) {
    /**
     * Current turn number in the conversation.
     */
    __publicField(this, "_currentTurn", 0);
    /**
     * The agent currently handling the conversation.
     */
    __publicField(this, "_currentAgent");
    /**
     * Original user input prior to any processing.
     */
    __publicField(this, "_originalInput");
    /**
     * Responses from the model so far.
     */
    __publicField(this, "_modelResponses");
    /**
     * Active tracing span for the current agent if tracing is enabled.
     */
    __publicField(this, "_currentAgentSpan");
    /**
     * Run context tracking approvals, usage, and other metadata.
     */
    __publicField(this, "_context");
    /**
     * Tracks what tools each agent has used.
     */
    __publicField(this, "_toolUseTracker");
    /**
     * Items generated by the agent during the run.
     */
    __publicField(this, "_generatedItems");
    /**
     * Maximum allowed turns before forcing termination.
     */
    __publicField(this, "_maxTurns");
    /**
     * Whether the run has an active agent step in progress.
     */
    __publicField(this, "_noActiveAgentRun", true);
    /**
     * Last model response for the previous turn.
     */
    __publicField(this, "_lastTurnResponse");
    /**
     * Results from input guardrails applied to the run.
     */
    __publicField(this, "_inputGuardrailResults");
    /**
     * Results from output guardrails applied to the run.
     */
    __publicField(this, "_outputGuardrailResults");
    /**
     * Next step computed for the agent to take.
     */
    __publicField(this, "_currentStep");
    /**
     * Parsed model response after applying guardrails and tools.
     */
    __publicField(this, "_lastProcessedResponse");
    /**
     * Trace associated with this run if tracing is enabled.
     */
    __publicField(this, "_trace", null);
    this._context = context;
    this._originalInput = structuredClone(originalInput);
    this._modelResponses = [];
    this._currentAgentSpan = void 0;
    this._currentAgent = startingAgent;
    this._toolUseTracker = new AgentToolUseTracker();
    this._generatedItems = [];
    this._maxTurns = maxTurns;
    this._inputGuardrailResults = [];
    this._outputGuardrailResults = [];
    this._trace = getCurrentTrace();
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during the run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return getTurnInput(this._originalInput, this._generatedItems);
  }
  /**
   * Returns all interruptions if the current step is an interruption otherwise returns an empty array.
   */
  getInterruptions() {
    var _a;
    if (((_a = this._currentStep) == null ? void 0 : _a.type) !== "next_step_interruption") {
      return [];
    }
    return this._currentStep.data.interruptions;
  }
  /**
   * Approves a tool call requested by the agent through an interruption and approval item request.
   *
   * To approve the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only approve the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysApprove` option to `true`.
   *
   * @param approvalItem - The tool call approval item to approve.
   * @param options - Options for the approval.
   */
  approve(approvalItem, options = { alwaysApprove: false }) {
    this._context.approveTool(approvalItem, options);
  }
  /**
   * Rejects a tool call requested by the agent through an interruption and approval item request.
   *
   * To reject the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only reject the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysReject` option to `true`.
   *
   * @param approvalItem - The tool call approval item to reject.
   * @param options - Options for the rejection.
   */
  reject(approvalItem, options = { alwaysReject: false }) {
    this._context.rejectTool(approvalItem, options);
  }
  /**
   * Serializes the run state to a JSON object.
   *
   * This method is used to serialize the run state to a JSON object that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toJSON() {
    var _a;
    const output = {
      $schemaVersion: CURRENT_SCHEMA_VERSION,
      currentTurn: this._currentTurn,
      currentAgent: {
        name: this._currentAgent.name
      },
      originalInput: this._originalInput,
      modelResponses: this._modelResponses.map((response) => {
        return {
          usage: {
            requests: response.usage.requests,
            inputTokens: response.usage.inputTokens,
            outputTokens: response.usage.outputTokens,
            totalTokens: response.usage.totalTokens
          },
          output: response.output,
          responseId: response.responseId,
          providerData: response.providerData
        };
      }),
      context: this._context.toJSON(),
      toolUseTracker: this._toolUseTracker.toJSON(),
      maxTurns: this._maxTurns,
      currentAgentSpan: (_a = this._currentAgentSpan) == null ? void 0 : _a.toJSON(),
      noActiveAgentRun: this._noActiveAgentRun,
      inputGuardrailResults: this._inputGuardrailResults,
      outputGuardrailResults: this._outputGuardrailResults.map((r) => ({
        ...r,
        agent: r.agent.toJSON()
      })),
      currentStep: this._currentStep,
      lastModelResponse: this._lastTurnResponse,
      generatedItems: this._generatedItems.map((item) => item.toJSON()),
      lastProcessedResponse: this._lastProcessedResponse,
      trace: this._trace ? this._trace.toJSON() : null
    };
    const parsed = SerializedRunState.safeParse(output);
    if (!parsed.success) {
      throw new SystemError(`Failed to serialize run state. ${parsed.error.message}`);
    }
    return parsed.data;
  }
  /**
   * Serializes the run state to a string.
   *
   * This method is used to serialize the run state to a string that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
  /**
   * Deserializes a run state from a string.
   *
   * This method is used to deserialize a run state from a string that was serialized using the
   * `toString` method.
   */
  static async fromString(initialAgent, str) {
    var _a, _b, _c, _d, _e;
    const [parsingError, jsonResult] = await safeExecute(() => JSON.parse(str));
    if (parsingError) {
      throw new UserError(`Failed to parse run state. ${parsingError instanceof Error ? parsingError.message : String(parsingError)}`);
    }
    const currentSchemaVersion = jsonResult.$schemaVersion;
    if (!currentSchemaVersion) {
      throw new UserError("Run state is missing schema version");
    }
    if (currentSchemaVersion !== CURRENT_SCHEMA_VERSION) {
      throw new UserError(`Run state schema version ${currentSchemaVersion} is not supported. Please use version ${CURRENT_SCHEMA_VERSION}`);
    }
    const stateJson = SerializedRunState.parse(JSON.parse(str));
    const agentMap = buildAgentMap(initialAgent);
    const context = new RunContext(stateJson.context.context);
    context._rebuildApprovals(stateJson.context.approvals);
    const currentAgent = agentMap.get(stateJson.currentAgent.name);
    if (!currentAgent) {
      throw new UserError(`Agent ${stateJson.currentAgent.name} not found`);
    }
    const state = new _RunState(context, "", currentAgent, stateJson.maxTurns);
    state._currentTurn = stateJson.currentTurn;
    state._toolUseTracker = new AgentToolUseTracker();
    for (const [agentName, toolNames] of Object.entries(stateJson.toolUseTracker)) {
      state._toolUseTracker.addToolUse(agentMap.get(agentName), toolNames);
    }
    if (stateJson.currentAgentSpan) {
      if (!stateJson.trace) {
        logger_default.warn("Trace is not set, skipping tracing setup");
      }
      const trace = getGlobalTraceProvider().createTrace({
        traceId: (_a = stateJson.trace) == null ? void 0 : _a.id,
        name: (_b = stateJson.trace) == null ? void 0 : _b.workflow_name,
        groupId: ((_c = stateJson.trace) == null ? void 0 : _c.group_id) ?? void 0,
        metadata: (_d = stateJson.trace) == null ? void 0 : _d.metadata
      });
      state._currentAgentSpan = deserializeSpan(trace, stateJson.currentAgentSpan);
      state._trace = trace;
    }
    state._noActiveAgentRun = stateJson.noActiveAgentRun;
    state._inputGuardrailResults = stateJson.inputGuardrailResults;
    state._outputGuardrailResults = stateJson.outputGuardrailResults.map((r) => ({
      ...r,
      agent: agentMap.get(r.agent.name)
    }));
    state._currentStep = stateJson.currentStep;
    state._originalInput = stateJson.originalInput;
    state._modelResponses = stateJson.modelResponses.map(deserializeModelResponse);
    state._lastTurnResponse = stateJson.lastModelResponse ? deserializeModelResponse(stateJson.lastModelResponse) : void 0;
    state._generatedItems = stateJson.generatedItems.map((item) => deserializeItem(item, agentMap));
    state._lastProcessedResponse = stateJson.lastProcessedResponse ? await deserializeProcessedResponse(agentMap, state._currentAgent, state._context, stateJson.lastProcessedResponse) : void 0;
    if (((_e = stateJson.currentStep) == null ? void 0 : _e.type) === "next_step_handoff") {
      state._currentStep = {
        type: "next_step_handoff",
        newAgent: agentMap.get(stateJson.currentStep.newAgent.name)
      };
    }
    return state;
  }
};
function buildAgentMap(initialAgent) {
  const map2 = /* @__PURE__ */ new Map();
  const queue = [initialAgent];
  while (queue.length > 0) {
    const currentAgent = queue.shift();
    if (map2.has(currentAgent.name)) {
      continue;
    }
    map2.set(currentAgent.name, currentAgent);
    for (const handoff2 of currentAgent.handoffs) {
      if (handoff2 instanceof Agent) {
        if (!map2.has(handoff2.name)) {
          queue.push(handoff2);
        }
      } else if (handoff2.agent) {
        if (!map2.has(handoff2.agent.name)) {
          queue.push(handoff2.agent);
        }
      }
    }
  }
  return map2;
}
function deserializeSpan(trace, serializedSpan) {
  const spanData = serializedSpan.span_data;
  const previousSpan = serializedSpan.previous_span ? deserializeSpan(trace, serializedSpan.previous_span) : void 0;
  const span = getGlobalTraceProvider().createSpan({
    spanId: serializedSpan.id,
    traceId: serializedSpan.trace_id,
    parentId: serializedSpan.parent_id ?? void 0,
    startedAt: serializedSpan.started_at ?? void 0,
    endedAt: serializedSpan.ended_at ?? void 0,
    data: spanData
  }, trace);
  span.previousSpan = previousSpan;
  return span;
}
function deserializeModelResponse(serializedModelResponse) {
  const usage = new Usage();
  usage.requests = serializedModelResponse.usage.requests;
  usage.inputTokens = serializedModelResponse.usage.inputTokens;
  usage.outputTokens = serializedModelResponse.usage.outputTokens;
  usage.totalTokens = serializedModelResponse.usage.totalTokens;
  return {
    usage,
    output: serializedModelResponse.output.map((item) => OutputModelItem.parse(item)),
    responseId: serializedModelResponse.responseId,
    providerData: serializedModelResponse.providerData
  };
}
function deserializeItem(serializedItem, agentMap) {
  switch (serializedItem.type) {
    case "message_output_item":
      return new RunMessageOutputItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name));
    case "tool_call_item":
      return new RunToolCallItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name));
    case "tool_call_output_item":
      return new RunToolCallOutputItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name), serializedItem.output);
    case "reasoning_item":
      return new RunReasoningItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name));
    case "handoff_call_item":
      return new RunHandoffCallItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name));
    case "handoff_output_item":
      return new RunHandoffOutputItem(serializedItem.rawItem, agentMap.get(serializedItem.sourceAgent.name), agentMap.get(serializedItem.targetAgent.name));
    case "tool_approval_item":
      return new RunToolApprovalItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name));
  }
}
async function deserializeProcessedResponse(agentMap, currentAgent, context, serializedProcessedResponse) {
  const allTools = await currentAgent.getAllTools(context);
  const tools = new Map(allTools.filter((tool2) => tool2.type === "function").map((tool2) => [tool2.name, tool2]));
  const computerTools = new Map(allTools.filter((tool2) => tool2.type === "computer").map((tool2) => [tool2.name, tool2]));
  const handoffs = new Map(currentAgent.handoffs.map((entry) => {
    if (entry instanceof Agent) {
      return [entry.name, handoff(entry)];
    }
    return [entry.toolName, entry];
  }));
  const result = {
    newItems: serializedProcessedResponse.newItems.map((item) => deserializeItem(item, agentMap)),
    toolsUsed: serializedProcessedResponse.toolsUsed,
    handoffs: serializedProcessedResponse.handoffs.map((handoff2) => {
      if (!handoffs.has(handoff2.handoff.toolName)) {
        throw new UserError(`Handoff ${handoff2.handoff.toolName} not found`);
      }
      return {
        toolCall: handoff2.toolCall,
        handoff: handoffs.get(handoff2.handoff.toolName)
      };
    }),
    functions: await Promise.all(serializedProcessedResponse.functions.map(async (functionCall) => {
      if (!tools.has(functionCall.tool.name)) {
        throw new UserError(`Tool ${functionCall.tool.name} not found`);
      }
      return {
        toolCall: functionCall.toolCall,
        tool: tools.get(functionCall.tool.name)
      };
    })),
    computerActions: serializedProcessedResponse.computerActions.map((computerAction) => {
      const toolName = computerAction.computer.name;
      if (!computerTools.has(toolName)) {
        throw new UserError(`Computer tool ${toolName} not found`);
      }
      return {
        toolCall: computerAction.toolCall,
        computer: computerTools.get(toolName)
      };
    }),
    mcpApprovalRequests: (serializedProcessedResponse.mcpApprovalRequests ?? []).map((approvalRequest) => ({
      requestItem: new RunToolApprovalItem(approvalRequest.requestItem.rawItem, currentAgent),
      mcpTool: approvalRequest.mcpTool
    }))
  };
  return {
    ...result,
    hasToolsOrApprovalsToRun() {
      return result.handoffs.length > 0 || result.functions.length > 0 || result.mcpApprovalRequests.length > 0 || result.computerActions.length > 0;
    }
  };
}

// node_modules/@openai/agents-core/dist/run.mjs
var DEFAULT_MAX_TURNS = 10;
function getTracing(tracingDisabled, traceIncludeSensitiveData) {
  if (tracingDisabled) {
    return false;
  }
  if (traceIncludeSensitiveData) {
    return true;
  }
  return "enabled_without_data";
}
function toAgentInputList(originalInput) {
  if (typeof originalInput === "string") {
    return [{ type: "message", role: "user", content: originalInput }];
  }
  return [...originalInput];
}
var ServerConversationTracker = class {
  constructor({ conversationId, previousResponseId }) {
    // Conversation ID:
    // - https://platform.openai.com/docs/guides/conversation-state?api-mode=responses#using-the-conversations-api
    // - https://platform.openai.com/docs/api-reference/conversations/create
    __publicField(this, "conversationId");
    // Previous Response ID:
    // https://platform.openai.com/docs/guides/conversation-state?api-mode=responses#passing-context-from-the-previous-response
    __publicField(this, "previousResponseId");
    // Using this flag because WeakSet does not provide a way to check its size
    __publicField(this, "sentInitialInput", false);
    // The items already sent to the model; using WeakSet for memory efficiency
    __publicField(this, "sentItems", /* @__PURE__ */ new WeakSet());
    // The items received from the server; using WeakSet for memory efficiency
    __publicField(this, "serverItems", /* @__PURE__ */ new WeakSet());
    this.conversationId = conversationId ?? void 0;
    this.previousResponseId = previousResponseId ?? void 0;
  }
  /**
   * Pre-populates tracker caches from an existing RunState when resuming server-managed runs.
   */
  primeFromState({ originalInput, generatedItems, modelResponses }) {
    if (this.sentInitialInput) {
      return;
    }
    for (const item of toAgentInputList(originalInput)) {
      if (item && typeof item === "object") {
        this.sentItems.add(item);
      }
    }
    this.sentInitialInput = true;
    const latestResponse = modelResponses[modelResponses.length - 1];
    for (const response of modelResponses) {
      for (const item of response.output) {
        if (item && typeof item === "object") {
          this.serverItems.add(item);
        }
      }
    }
    if (!this.conversationId && (latestResponse == null ? void 0 : latestResponse.responseId)) {
      this.previousResponseId = latestResponse.responseId;
    }
    for (const item of generatedItems) {
      const rawItem = item.rawItem;
      if (!rawItem || typeof rawItem !== "object") {
        continue;
      }
      if (this.serverItems.has(rawItem)) {
        this.sentItems.add(rawItem);
      }
    }
  }
  trackServerItems(modelResponse) {
    if (!modelResponse) {
      return;
    }
    for (const item of modelResponse.output) {
      if (item && typeof item === "object") {
        this.serverItems.add(item);
      }
    }
    if (!this.conversationId && this.previousResponseId !== void 0 && modelResponse.responseId) {
      this.previousResponseId = modelResponse.responseId;
    }
  }
  prepareInput(originalInput, generatedItems) {
    const inputItems = [];
    if (!this.sentInitialInput) {
      const initialItems = toAgentInputList(originalInput);
      for (const item of initialItems) {
        inputItems.push(item);
        if (item && typeof item === "object") {
          this.sentItems.add(item);
        }
      }
      this.sentInitialInput = true;
    }
    for (const item of generatedItems) {
      if (item.type === "tool_approval_item") {
        continue;
      }
      const rawItem = item.rawItem;
      if (!rawItem || typeof rawItem !== "object") {
        continue;
      }
      if (this.sentItems.has(rawItem) || this.serverItems.has(rawItem)) {
        continue;
      }
      inputItems.push(rawItem);
      this.sentItems.add(rawItem);
    }
    return inputItems;
  }
};
function getTurnInput(originalInput, generatedItems) {
  const rawItems = generatedItems.filter((item) => item.type !== "tool_approval_item").map((item) => item.rawItem);
  return [...toAgentInputList(originalInput), ...rawItems];
}
var _Runner_instances, runIndividualNonStream_fn, runInputGuardrails_fn, runOutputGuardrails_fn, runStreamLoop_fn, runIndividualStream_fn;
var Runner = class extends RunHooks {
  constructor(config2 = {}) {
    super();
    __privateAdd(this, _Runner_instances);
    __publicField(this, "config");
    __publicField(this, "inputGuardrailDefs");
    __publicField(this, "outputGuardrailDefs");
    this.config = {
      modelProvider: config2.modelProvider ?? getDefaultModelProvider(),
      model: config2.model,
      modelSettings: config2.modelSettings,
      handoffInputFilter: config2.handoffInputFilter,
      inputGuardrails: config2.inputGuardrails,
      outputGuardrails: config2.outputGuardrails,
      tracingDisabled: config2.tracingDisabled ?? false,
      traceIncludeSensitiveData: config2.traceIncludeSensitiveData ?? true,
      workflowName: config2.workflowName ?? "Agent workflow",
      traceId: config2.traceId,
      groupId: config2.groupId,
      traceMetadata: config2.traceMetadata
    };
    this.inputGuardrailDefs = (config2.inputGuardrails ?? []).map(defineInputGuardrail);
    this.outputGuardrailDefs = (config2.outputGuardrails ?? []).map(defineOutputGuardrail);
  }
  run(agent, input, options = {
    stream: false,
    context: void 0
  }) {
    if (input instanceof RunState && input._trace) {
      return withTrace(input._trace, async () => {
        if (input._currentAgentSpan) {
          setCurrentSpan(input._currentAgentSpan);
        }
        if (options == null ? void 0 : options.stream) {
          return __privateMethod(this, _Runner_instances, runIndividualStream_fn).call(this, agent, input, options);
        } else {
          return __privateMethod(this, _Runner_instances, runIndividualNonStream_fn).call(this, agent, input, options);
        }
      });
    }
    return getOrCreateTrace(async () => {
      if (options == null ? void 0 : options.stream) {
        return __privateMethod(this, _Runner_instances, runIndividualStream_fn).call(this, agent, input, options);
      } else {
        return __privateMethod(this, _Runner_instances, runIndividualNonStream_fn).call(this, agent, input, options);
      }
    }, {
      traceId: this.config.traceId,
      name: this.config.workflowName,
      groupId: this.config.groupId,
      metadata: this.config.traceMetadata
    });
  }
};
_Runner_instances = new WeakSet();
runIndividualNonStream_fn = async function(startingAgent, input, options) {
  return withNewSpanContext(async () => {
    var _a, _b;
    const isResumedState = input instanceof RunState;
    const state = isResumedState ? input : new RunState(options.context instanceof RunContext ? options.context : new RunContext(options.context), input, startingAgent, options.maxTurns ?? DEFAULT_MAX_TURNS);
    const serverConversationTracker = options.conversationId || options.previousResponseId ? new ServerConversationTracker({
      conversationId: options.conversationId,
      previousResponseId: options.previousResponseId
    }) : void 0;
    if (serverConversationTracker && isResumedState) {
      serverConversationTracker.primeFromState({
        originalInput: state._originalInput,
        generatedItems: state._generatedItems,
        modelResponses: state._modelResponses
      });
    }
    try {
      while (true) {
        const explictlyModelSet = state._currentAgent.model !== void 0 && state._currentAgent.model !== "" || this.config.model !== void 0 && this.config.model !== "";
        let model = selectModel(state._currentAgent.model, this.config.model);
        if (typeof model === "string") {
          model = await this.config.modelProvider.getModel(model);
        }
        state._currentStep = state._currentStep ?? {
          type: "next_step_run_again"
        };
        if (state._currentStep.type === "next_step_interruption") {
          logger_default.debug("Continuing from interruption");
          if (!state._lastTurnResponse || !state._lastProcessedResponse) {
            throw new UserError("No model response found in previous state", state);
          }
          const turnResult = await executeInterruptedToolsAndSideEffects(state._currentAgent, state._originalInput, state._generatedItems, state._lastTurnResponse, state._lastProcessedResponse, this, state);
          state._toolUseTracker.addToolUse(state._currentAgent, state._lastProcessedResponse.toolsUsed);
          state._originalInput = turnResult.originalInput;
          state._generatedItems = turnResult.generatedItems;
          state._currentStep = turnResult.nextStep;
          if (turnResult.nextStep.type === "next_step_interruption") {
            return new RunResult(state);
          }
          continue;
        }
        if (state._currentStep.type === "next_step_run_again") {
          const handoffs = await state._currentAgent.getEnabledHandoffs(state._context);
          if (!state._currentAgentSpan) {
            const handoffNames = handoffs.map((h) => h.agentName);
            state._currentAgentSpan = createAgentSpan({
              data: {
                name: state._currentAgent.name,
                handoffs: handoffNames,
                output_type: state._currentAgent.outputSchemaName
              }
            });
            state._currentAgentSpan.start();
            setCurrentSpan(state._currentAgentSpan);
          }
          const tools = await state._currentAgent.getAllTools(state._context);
          const serializedTools = tools.map((t) => serializeTool(t));
          const serializedHandoffs = handoffs.map((h) => serializeHandoff(h));
          if (state._currentAgentSpan) {
            state._currentAgentSpan.spanData.tools = tools.map((t) => t.name);
          }
          state._currentTurn++;
          if (state._currentTurn > state._maxTurns) {
            (_a = state._currentAgentSpan) == null ? void 0 : _a.setError({
              message: "Max turns exceeded",
              data: { max_turns: state._maxTurns }
            });
            throw new MaxTurnsExceededError(`Max turns (${state._maxTurns}) exceeded`, state);
          }
          logger_default.debug(`Running agent ${state._currentAgent.name} (turn ${state._currentTurn})`);
          if (state._currentTurn === 1) {
            await __privateMethod(this, _Runner_instances, runInputGuardrails_fn).call(this, state);
          }
          const turnInput = serverConversationTracker ? serverConversationTracker.prepareInput(state._originalInput, state._generatedItems) : getTurnInput(state._originalInput, state._generatedItems);
          if (state._noActiveAgentRun) {
            state._currentAgent.emit("agent_start", state._context, state._currentAgent);
            this.emit("agent_start", state._context, state._currentAgent);
          }
          let modelSettings = {
            ...this.config.modelSettings,
            ...state._currentAgent.modelSettings
          };
          const agentModelSettings = state._currentAgent.modelSettings;
          modelSettings = adjustModelSettingsForNonGPT5RunnerModel(explictlyModelSet, agentModelSettings, model, modelSettings);
          modelSettings = maybeResetToolChoice(state._currentAgent, state._toolUseTracker, modelSettings);
          const previousResponseId = (serverConversationTracker == null ? void 0 : serverConversationTracker.previousResponseId) ?? options.previousResponseId;
          const conversationId = (serverConversationTracker == null ? void 0 : serverConversationTracker.conversationId) ?? options.conversationId;
          state._lastTurnResponse = await model.getResponse({
            systemInstructions: await state._currentAgent.getSystemPrompt(state._context),
            prompt: await state._currentAgent.getPrompt(state._context),
            // Explicit agent/run config models should take precedence over prompt defaults.
            ...explictlyModelSet ? { overridePromptModel: true } : {},
            input: turnInput,
            previousResponseId,
            conversationId,
            modelSettings,
            tools: serializedTools,
            outputType: convertAgentOutputTypeToSerializable(state._currentAgent.outputType),
            handoffs: serializedHandoffs,
            tracing: getTracing(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
            signal: options.signal
          });
          state._modelResponses.push(state._lastTurnResponse);
          state._context.usage.add(state._lastTurnResponse.usage);
          state._noActiveAgentRun = false;
          serverConversationTracker == null ? void 0 : serverConversationTracker.trackServerItems(state._lastTurnResponse);
          const processedResponse = processModelResponse(state._lastTurnResponse, state._currentAgent, tools, handoffs);
          state._lastProcessedResponse = processedResponse;
          const turnResult = await executeToolsAndSideEffects(state._currentAgent, state._originalInput, state._generatedItems, state._lastTurnResponse, state._lastProcessedResponse, this, state);
          state._toolUseTracker.addToolUse(state._currentAgent, state._lastProcessedResponse.toolsUsed);
          state._originalInput = turnResult.originalInput;
          state._generatedItems = turnResult.generatedItems;
          state._currentStep = turnResult.nextStep;
        }
        if (state._currentStep && state._currentStep.type === "next_step_final_output") {
          await __privateMethod(this, _Runner_instances, runOutputGuardrails_fn).call(this, state, state._currentStep.output);
          this.emit("agent_end", state._context, state._currentAgent, state._currentStep.output);
          state._currentAgent.emit("agent_end", state._context, state._currentStep.output);
          return new RunResult(state);
        } else if (state._currentStep && state._currentStep.type === "next_step_handoff") {
          state._currentAgent = state._currentStep.newAgent;
          if (state._currentAgentSpan) {
            state._currentAgentSpan.end();
            resetCurrentSpan();
            state._currentAgentSpan = void 0;
          }
          state._noActiveAgentRun = true;
          state._currentStep = { type: "next_step_run_again" };
        } else if (state._currentStep && state._currentStep.type === "next_step_interruption") {
          return new RunResult(state);
        } else {
          logger_default.debug("Running next loop");
        }
      }
    } catch (err) {
      if (state._currentAgentSpan) {
        state._currentAgentSpan.setError({
          message: "Error in agent run",
          data: { error: String(err) }
        });
      }
      throw err;
    } finally {
      if (state._currentAgentSpan) {
        if (((_b = state._currentStep) == null ? void 0 : _b.type) !== "next_step_interruption") {
          state._currentAgentSpan.end();
        }
        resetCurrentSpan();
      }
    }
  });
};
runInputGuardrails_fn = async function(state) {
  const guardrails = this.inputGuardrailDefs.concat(state._currentAgent.inputGuardrails.map(defineInputGuardrail));
  if (guardrails.length > 0) {
    const guardrailArgs = {
      agent: state._currentAgent,
      input: state._originalInput,
      context: state._context
    };
    try {
      const results = await Promise.all(guardrails.map(async (guardrail) => {
        return withGuardrailSpan(async (span) => {
          const result = await guardrail.run(guardrailArgs);
          span.spanData.triggered = result.output.tripwireTriggered;
          return result;
        }, { data: { name: guardrail.name } }, state._currentAgentSpan);
      }));
      for (const result of results) {
        if (result.output.tripwireTriggered) {
          if (state._currentAgentSpan) {
            state._currentAgentSpan.setError({
              message: "Guardrail tripwire triggered",
              data: { guardrail: result.guardrail.name }
            });
          }
          throw new InputGuardrailTripwireTriggered(`Input guardrail triggered: ${JSON.stringify(result.output.outputInfo)}`, result, state);
        }
      }
    } catch (e) {
      if (e instanceof InputGuardrailTripwireTriggered) {
        throw e;
      }
      state._currentTurn--;
      throw new GuardrailExecutionError(`Input guardrail failed to complete: ${e}`, e, state);
    }
  }
};
runOutputGuardrails_fn = async function(state, output) {
  const guardrails = this.outputGuardrailDefs.concat(state._currentAgent.outputGuardrails.map(defineOutputGuardrail));
  if (guardrails.length > 0) {
    const agentOutput = state._currentAgent.processFinalOutput(output);
    const guardrailArgs = {
      agent: state._currentAgent,
      agentOutput,
      context: state._context,
      details: { modelResponse: state._lastTurnResponse }
    };
    try {
      const results = await Promise.all(guardrails.map(async (guardrail) => {
        return withGuardrailSpan(async (span) => {
          const result = await guardrail.run(guardrailArgs);
          span.spanData.triggered = result.output.tripwireTriggered;
          return result;
        }, { data: { name: guardrail.name } }, state._currentAgentSpan);
      }));
      for (const result of results) {
        if (result.output.tripwireTriggered) {
          if (state._currentAgentSpan) {
            state._currentAgentSpan.setError({
              message: "Guardrail tripwire triggered",
              data: { guardrail: result.guardrail.name }
            });
          }
          throw new OutputGuardrailTripwireTriggered(`Output guardrail triggered: ${JSON.stringify(result.output.outputInfo)}`, result, state);
        }
      }
    } catch (e) {
      if (e instanceof OutputGuardrailTripwireTriggered) {
        throw e;
      }
      throw new GuardrailExecutionError(`Output guardrail failed to complete: ${e}`, e, state);
    }
  }
};
runStreamLoop_fn = async function(result, options, isResumedState) {
  var _a, _b, _c;
  const serverConversationTracker = options.conversationId || options.previousResponseId ? new ServerConversationTracker({
    conversationId: options.conversationId,
    previousResponseId: options.previousResponseId
  }) : void 0;
  if (serverConversationTracker && isResumedState) {
    serverConversationTracker.primeFromState({
      originalInput: result.state._originalInput,
      generatedItems: result.state._generatedItems,
      modelResponses: result.state._modelResponses
    });
  }
  try {
    while (true) {
      const currentAgent = result.state._currentAgent;
      const handoffs = await currentAgent.getEnabledHandoffs(result.state._context);
      const tools = await currentAgent.getAllTools(result.state._context);
      const serializedTools = tools.map((t) => serializeTool(t));
      const serializedHandoffs = handoffs.map((h) => serializeHandoff(h));
      result.state._currentStep = result.state._currentStep ?? {
        type: "next_step_run_again"
      };
      if (result.state._currentStep.type === "next_step_interruption") {
        logger_default.debug("Continuing from interruption");
        if (!result.state._lastTurnResponse || !result.state._lastProcessedResponse) {
          throw new UserError("No model response found in previous state", result.state);
        }
        const turnResult = await executeInterruptedToolsAndSideEffects(result.state._currentAgent, result.state._originalInput, result.state._generatedItems, result.state._lastTurnResponse, result.state._lastProcessedResponse, this, result.state);
        addStepToRunResult(result, turnResult);
        result.state._toolUseTracker.addToolUse(result.state._currentAgent, result.state._lastProcessedResponse.toolsUsed);
        result.state._originalInput = turnResult.originalInput;
        result.state._generatedItems = turnResult.generatedItems;
        result.state._currentStep = turnResult.nextStep;
        if (turnResult.nextStep.type === "next_step_interruption") {
          return;
        }
        continue;
      }
      if (result.state._currentStep.type === "next_step_run_again") {
        if (!result.state._currentAgentSpan) {
          const handoffNames = handoffs.map((h) => h.agentName);
          result.state._currentAgentSpan = createAgentSpan({
            data: {
              name: currentAgent.name,
              handoffs: handoffNames,
              tools: tools.map((t) => t.name),
              output_type: currentAgent.outputSchemaName
            }
          });
          result.state._currentAgentSpan.start();
          setCurrentSpan(result.state._currentAgentSpan);
        }
        result.state._currentTurn++;
        if (result.state._currentTurn > result.state._maxTurns) {
          (_a = result.state._currentAgentSpan) == null ? void 0 : _a.setError({
            message: "Max turns exceeded",
            data: { max_turns: result.state._maxTurns }
          });
          throw new MaxTurnsExceededError(`Max turns (${result.state._maxTurns}) exceeded`, result.state);
        }
        logger_default.debug(`Running agent ${currentAgent.name} (turn ${result.state._currentTurn})`);
        const explictlyModelSet = currentAgent.model !== void 0 && currentAgent.model !== "" || this.config.model !== void 0 && this.config.model !== "";
        let model = selectModel(currentAgent.model, this.config.model);
        if (typeof model === "string") {
          model = await this.config.modelProvider.getModel(model);
        }
        if (result.state._currentTurn === 1) {
          await __privateMethod(this, _Runner_instances, runInputGuardrails_fn).call(this, result.state);
        }
        let modelSettings = {
          ...this.config.modelSettings,
          ...currentAgent.modelSettings
        };
        const agentModelSettings = currentAgent.modelSettings;
        modelSettings = adjustModelSettingsForNonGPT5RunnerModel(explictlyModelSet, agentModelSettings, model, modelSettings);
        modelSettings = maybeResetToolChoice(currentAgent, result.state._toolUseTracker, modelSettings);
        const turnInput = serverConversationTracker ? serverConversationTracker.prepareInput(result.input, result.newItems) : getTurnInput(result.input, result.newItems);
        if (result.state._noActiveAgentRun) {
          currentAgent.emit("agent_start", result.state._context, currentAgent);
          this.emit("agent_start", result.state._context, currentAgent);
        }
        let finalResponse = void 0;
        const previousResponseId = (serverConversationTracker == null ? void 0 : serverConversationTracker.previousResponseId) ?? options.previousResponseId;
        const conversationId = (serverConversationTracker == null ? void 0 : serverConversationTracker.conversationId) ?? options.conversationId;
        for await (const event of model.getStreamedResponse({
          systemInstructions: await currentAgent.getSystemPrompt(result.state._context),
          prompt: await currentAgent.getPrompt(result.state._context),
          // Streaming requests should also honor explicitly chosen models.
          ...explictlyModelSet ? { overridePromptModel: true } : {},
          input: turnInput,
          previousResponseId,
          conversationId,
          modelSettings,
          tools: serializedTools,
          handoffs: serializedHandoffs,
          outputType: convertAgentOutputTypeToSerializable(currentAgent.outputType),
          tracing: getTracing(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
          signal: options.signal
        })) {
          if (event.type === "response_done") {
            const parsed = StreamEventResponseCompleted.parse(event);
            finalResponse = {
              usage: new Usage(parsed.response.usage),
              output: parsed.response.output,
              responseId: parsed.response.id
            };
          }
          if (result.cancelled) {
            return;
          }
          result._addItem(new RunRawModelStreamEvent(event));
        }
        result.state._noActiveAgentRun = false;
        if (!finalResponse) {
          throw new ModelBehaviorError("Model did not produce a final response!", result.state);
        }
        result.state._lastTurnResponse = finalResponse;
        serverConversationTracker == null ? void 0 : serverConversationTracker.trackServerItems(finalResponse);
        result.state._modelResponses.push(result.state._lastTurnResponse);
        const processedResponse = processModelResponse(result.state._lastTurnResponse, currentAgent, tools, handoffs);
        result.state._lastProcessedResponse = processedResponse;
        const preToolItems = new Set(processedResponse.newItems);
        if (preToolItems.size > 0) {
          streamStepItemsToRunResult(result, processedResponse.newItems);
        }
        const turnResult = await executeToolsAndSideEffects(currentAgent, result.state._originalInput, result.state._generatedItems, result.state._lastTurnResponse, result.state._lastProcessedResponse, this, result.state);
        addStepToRunResult(result, turnResult, {
          skipItems: preToolItems
        });
        result.state._toolUseTracker.addToolUse(currentAgent, processedResponse.toolsUsed);
        result.state._originalInput = turnResult.originalInput;
        result.state._generatedItems = turnResult.generatedItems;
        result.state._currentStep = turnResult.nextStep;
      }
      if (result.state._currentStep.type === "next_step_final_output") {
        await __privateMethod(this, _Runner_instances, runOutputGuardrails_fn).call(this, result.state, result.state._currentStep.output);
        this.emit("agent_end", result.state._context, currentAgent, result.state._currentStep.output);
        currentAgent.emit("agent_end", result.state._context, result.state._currentStep.output);
        return;
      } else if (result.state._currentStep.type === "next_step_interruption") {
        return;
      } else if (result.state._currentStep.type === "next_step_handoff") {
        result.state._currentAgent = (_b = result.state._currentStep) == null ? void 0 : _b.newAgent;
        if (result.state._currentAgentSpan) {
          result.state._currentAgentSpan.end();
          resetCurrentSpan();
        }
        result.state._currentAgentSpan = void 0;
        result._addItem(new RunAgentUpdatedStreamEvent(result.state._currentAgent));
        result.state._noActiveAgentRun = true;
        result.state._currentStep = {
          type: "next_step_run_again"
        };
      } else {
        logger_default.debug("Running next loop");
      }
    }
  } catch (error40) {
    if (result.state._currentAgentSpan) {
      result.state._currentAgentSpan.setError({
        message: "Error in agent run",
        data: { error: String(error40) }
      });
    }
    throw error40;
  } finally {
    if (result.state._currentAgentSpan) {
      if (((_c = result.state._currentStep) == null ? void 0 : _c.type) !== "next_step_interruption") {
        result.state._currentAgentSpan.end();
      }
      resetCurrentSpan();
    }
  }
};
runIndividualStream_fn = async function(agent, input, options) {
  options = options ?? {};
  return withNewSpanContext(async () => {
    const isResumedState = input instanceof RunState;
    const state = isResumedState ? input : new RunState(options.context instanceof RunContext ? options.context : new RunContext(options.context), input, agent, options.maxTurns ?? DEFAULT_MAX_TURNS);
    const result = new StreamedRunResult({
      signal: options.signal,
      state
    });
    result.maxTurns = options.maxTurns ?? state._maxTurns;
    const streamLoopPromise = __privateMethod(this, _Runner_instances, runStreamLoop_fn).call(this, result, options, isResumedState).then(() => {
      result._done();
    }, (err) => {
      result._raiseError(err);
    });
    result._setStreamLoopPromise(streamLoopPromise);
    return result;
  });
};
var _defaultRunner = void 0;
function getDefaultRunner() {
  if (_defaultRunner) {
    return _defaultRunner;
  }
  _defaultRunner = new Runner();
  return _defaultRunner;
}
function selectModel(agentModel, runConfigModel) {
  if (typeof agentModel === "string" && agentModel !== Agent.DEFAULT_MODEL_PLACEHOLDER || agentModel) {
    return agentModel;
  }
  return runConfigModel ?? agentModel ?? Agent.DEFAULT_MODEL_PLACEHOLDER;
}
async function run(agent, input, options) {
  const runner = getDefaultRunner();
  if (options == null ? void 0 : options.stream) {
    return await runner.run(agent, input, options);
  } else {
    return await runner.run(agent, input, options);
  }
}
function adjustModelSettingsForNonGPT5RunnerModel(explictlyModelSet, agentModelSettings, runnerModel, modelSettings) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  if (
    // gpt-5 is enabled for the default model for agents
    isGpt5Default() && // explicitly set model for the agent
    explictlyModelSet && // this runner uses a non-gpt-5 model
    (typeof runnerModel !== "string" || !gpt5ReasoningSettingsRequired(runnerModel)) && (((_a = agentModelSettings.providerData) == null ? void 0 : _a.reasoning) || ((_c = (_b = agentModelSettings.providerData) == null ? void 0 : _b.text) == null ? void 0 : _c.verbosity) || ((_d = agentModelSettings.providerData) == null ? void 0 : _d.reasoning_effort))
  ) {
    const copiedModelSettings = { ...modelSettings };
    (_e = copiedModelSettings.providerData) == null ? true : delete _e.reasoning;
    (_g = (_f = copiedModelSettings.providerData) == null ? void 0 : _f.text) == null ? true : delete _g.verbosity;
    (_h = copiedModelSettings.providerData) == null ? true : delete _h.reasoning_effort;
    if (copiedModelSettings.reasoning) {
      delete copiedModelSettings.reasoning.effort;
      delete copiedModelSettings.reasoning.summary;
    }
    if (copiedModelSettings.text) {
      delete copiedModelSettings.text.verbosity;
    }
    return copiedModelSettings;
  }
  return modelSettings;
}

// node_modules/@openai/agents-core/dist/result.mjs
var RunResultBase = class {
  constructor(state) {
    __publicField(this, "state");
    this.state = state;
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during
   * the agent run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return getTurnInput(this.input, this.newItems);
  }
  /**
   * The new items generated during the agent run. These include things like new messages, tool
   * calls and their outputs, etc.
   *
   * It does not include information about the agents and instead represents the model data.
   *
   * For the output including the agents, use the `newItems` property.
   */
  get output() {
    return getTurnInput([], this.newItems);
  }
  /**
   * A copy of the original input items.
   */
  get input() {
    return this.state._originalInput;
  }
  /**
   * The run items generated during the agent run. This associates the model data with the agents.
   *
   * For the model data that can be used as inputs for the next agent run, use the `output` property.
   */
  get newItems() {
    return this.state._generatedItems;
  }
  /**
   * The raw LLM responses generated by the model during the agent run.
   */
  get rawResponses() {
    return this.state._modelResponses;
  }
  /**
   * The last response ID generated by the model during the agent run.
   */
  get lastResponseId() {
    const responses = this.rawResponses;
    return responses && responses.length > 0 ? responses[responses.length - 1].responseId : void 0;
  }
  /**
   * The last agent that was run
   */
  get lastAgent() {
    return this.state._currentAgent;
  }
  /**
   * Guardrail results for the input messages.
   */
  get inputGuardrailResults() {
    return this.state._inputGuardrailResults;
  }
  /**
   * Guardrail results for the final output of the agent.
   */
  get outputGuardrailResults() {
    return this.state._outputGuardrailResults;
  }
  /**
   * Any interruptions that occurred during the agent run for example for tool approvals.
   */
  get interruptions() {
    var _a;
    if (((_a = this.state._currentStep) == null ? void 0 : _a.type) === "next_step_interruption") {
      return this.state._currentStep.data.interruptions;
    }
    return [];
  }
  /**
   * The final output of the agent. If the output type was set to anything other than `text`,
   * this will be parsed either as JSON or using the Zod schema you provided.
   */
  get finalOutput() {
    var _a;
    if (((_a = this.state._currentStep) == null ? void 0 : _a.type) === "next_step_final_output") {
      return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);
    }
    logger_default.warn("Accessed finalOutput before agent run is completed.");
    return void 0;
  }
};
var RunResult = class extends RunResultBase {
  constructor(state) {
    super(state);
  }
};
var _error, _signal, _readableController, _readableStream, _completedPromise, _completedPromiseResolve, _completedPromiseReject, _cancelled, _streamLoopPromise;
var StreamedRunResult = class extends RunResultBase {
  constructor(result = {}) {
    super(result.state);
    /**
     * The current turn number
     */
    __publicField(this, "currentTurn", 0);
    /**
     * The maximum number of turns that can be run
     */
    __publicField(this, "maxTurns");
    __privateAdd(this, _error, null);
    __privateAdd(this, _signal);
    __privateAdd(this, _readableController);
    __privateAdd(this, _readableStream);
    __privateAdd(this, _completedPromise);
    __privateAdd(this, _completedPromiseResolve);
    __privateAdd(this, _completedPromiseReject);
    __privateAdd(this, _cancelled, false);
    __privateAdd(this, _streamLoopPromise);
    __privateSet(this, _signal, result.signal);
    __privateSet(this, _readableStream, new ReadableStream({
      start: (controller) => {
        __privateSet(this, _readableController, controller);
      },
      cancel: () => {
        __privateSet(this, _cancelled, true);
      }
    }));
    __privateSet(this, _completedPromise, new Promise((resolve, reject) => {
      __privateSet(this, _completedPromiseResolve, resolve);
      __privateSet(this, _completedPromiseReject, reject);
    }));
    if (__privateGet(this, _signal)) {
      const handleAbort = () => {
        var _a, _b;
        if (__privateGet(this, _cancelled)) {
          return;
        }
        __privateSet(this, _cancelled, true);
        const controller = __privateGet(this, _readableController);
        __privateSet(this, _readableController, void 0);
        if (__privateGet(this, _readableStream).locked) {
          if (controller) {
            try {
              controller.close();
            } catch (err) {
              logger_default.debug(`Failed to close readable stream on abort: ${err}`);
            }
          }
        } else {
          void __privateGet(this, _readableStream).cancel((_a = __privateGet(this, _signal)) == null ? void 0 : _a.reason).catch((err) => {
            logger_default.debug(`Failed to cancel readable stream on abort: ${err}`);
          });
        }
        (_b = __privateGet(this, _completedPromiseResolve)) == null ? void 0 : _b.call(this);
      };
      if (__privateGet(this, _signal).aborted) {
        handleAbort();
      } else {
        __privateGet(this, _signal).addEventListener("abort", handleAbort, { once: true });
      }
    }
  }
  /**
   * The current agent that is running
   */
  get currentAgent() {
    return this.lastAgent;
  }
  /**
   * @internal
   * Adds an item to the stream of output items
   */
  _addItem(item) {
    var _a;
    if (!this.cancelled) {
      (_a = __privateGet(this, _readableController)) == null ? void 0 : _a.enqueue(item);
    }
  }
  /**
   * @internal
   * Indicates that the stream has been completed
   */
  _done() {
    var _a;
    if (!this.cancelled && __privateGet(this, _readableController)) {
      __privateGet(this, _readableController).close();
      __privateSet(this, _readableController, void 0);
      (_a = __privateGet(this, _completedPromiseResolve)) == null ? void 0 : _a.call(this);
    }
  }
  /**
   * @internal
   * Handles an error in the stream loop.
   */
  _raiseError(err) {
    var _a;
    if (!this.cancelled && __privateGet(this, _readableController)) {
      __privateGet(this, _readableController).error(err);
      __privateSet(this, _readableController, void 0);
    }
    __privateSet(this, _error, err);
    (_a = __privateGet(this, _completedPromiseReject)) == null ? void 0 : _a.call(this, err);
    __privateGet(this, _completedPromise).catch((e) => {
      logger_default.debug(`Resulted in an error: ${e}`);
    });
  }
  /**
   * Returns true if the stream has been cancelled.
   */
  get cancelled() {
    return __privateGet(this, _cancelled);
  }
  /**
   * Returns the underlying readable stream.
   * @returns A readable stream of the agent run.
   */
  toStream() {
    return __privateGet(this, _readableStream);
  }
  /**
   * Await this promise to ensure that the stream has been completed if you are not consuming the
   * stream directly.
   */
  get completed() {
    return __privateGet(this, _completedPromise);
  }
  /**
   * Error thrown during the run, if any.
   */
  get error() {
    return __privateGet(this, _error);
  }
  toTextStream(options = {}) {
    const stream = __privateGet(this, _readableStream).pipeThrough(new TransformStream({
      transform(event, controller) {
        if (event.type === "raw_model_stream_event" && event.data.type === "output_text_delta") {
          const item = StreamEventTextStream.parse(event.data);
          controller.enqueue(item.delta);
        }
      }
    }));
    if (options.compatibleWithNodeStreams) {
      return Readable.fromWeb(stream);
    }
    return stream;
  }
  [Symbol.asyncIterator]() {
    return __privateGet(this, _readableStream)[Symbol.asyncIterator]();
  }
  /**
   * @internal
   * Sets the stream loop promise that completes when the internal stream loop finishes.
   * This is used to defer trace end until all agent work is complete.
   */
  _setStreamLoopPromise(promise2) {
    __privateSet(this, _streamLoopPromise, promise2);
  }
  /**
   * @internal
   * Returns a promise that resolves when the stream loop completes.
   * This is used by the tracing system to wait for all agent work before ending the trace.
   */
  _getStreamLoopPromise() {
    return __privateGet(this, _streamLoopPromise);
  }
};
_error = new WeakMap();
_signal = new WeakMap();
_readableController = new WeakMap();
_readableStream = new WeakMap();
_completedPromise = new WeakMap();
_completedPromiseResolve = new WeakMap();
_completedPromiseReject = new WeakMap();
_cancelled = new WeakMap();
_streamLoopPromise = new WeakMap();

// node_modules/@openai/agents-core/dist/tracing/context.mjs
var _contextAsyncLocalStorage;
function getContextAsyncLocalStorage() {
  _contextAsyncLocalStorage ?? (_contextAsyncLocalStorage = new AsyncLocalStorage());
  return _contextAsyncLocalStorage;
}
function getCurrentTrace() {
  const currentTrace = getContextAsyncLocalStorage().getStore();
  if (currentTrace == null ? void 0 : currentTrace.trace) {
    return currentTrace.trace;
  }
  return null;
}
function getCurrentSpan() {
  const currentSpan = getContextAsyncLocalStorage().getStore();
  if (currentSpan == null ? void 0 : currentSpan.span) {
    return currentSpan.span;
  }
  return null;
}
function _wrapFunctionWithTraceLifecycle(fn) {
  return async () => {
    const trace = getCurrentTrace();
    if (!trace) {
      throw new Error("No trace found");
    }
    await trace.start();
    const result = await fn(trace);
    if (result instanceof StreamedRunResult) {
      const streamLoopPromise = result._getStreamLoopPromise();
      if (streamLoopPromise) {
        streamLoopPromise.finally(() => trace.end());
        return result;
      }
    }
    await trace.end();
    return result;
  };
}
async function withTrace(trace, fn, options = {}) {
  const newTrace = typeof trace === "string" ? getGlobalTraceProvider().createTrace({
    ...options,
    name: trace
  }) : trace;
  return getContextAsyncLocalStorage().run({ trace: newTrace }, _wrapFunctionWithTraceLifecycle(fn));
}
async function getOrCreateTrace(fn, options = {}) {
  const currentTrace = getCurrentTrace();
  if (currentTrace) {
    return await fn();
  }
  const newTrace = getGlobalTraceProvider().createTrace(options);
  return getContextAsyncLocalStorage().run({ trace: newTrace }, _wrapFunctionWithTraceLifecycle(fn));
}
function setCurrentSpan(span) {
  const context = getContextAsyncLocalStorage().getStore();
  if (!context) {
    throw new Error("No existing trace found");
  }
  if (context.span) {
    context.span.previousSpan = context.previousSpan;
    context.previousSpan = context.span;
  }
  context.span = span;
  getContextAsyncLocalStorage().enterWith(context);
}
function resetCurrentSpan() {
  var _a;
  const context = getContextAsyncLocalStorage().getStore();
  if (context) {
    context.span = context.previousSpan;
    context.previousSpan = (_a = context.previousSpan) == null ? void 0 : _a.previousSpan;
    getContextAsyncLocalStorage().enterWith(context);
  }
}
function addErrorToCurrentSpan(spanError) {
  const currentSpan = getCurrentSpan();
  if (currentSpan) {
    currentSpan.setError(spanError);
  }
}
function cloneCurrentContext(context) {
  var _a, _b, _c;
  return {
    trace: (_a = context.trace) == null ? void 0 : _a.clone(),
    span: (_b = context.span) == null ? void 0 : _b.clone(),
    previousSpan: (_c = context.previousSpan) == null ? void 0 : _c.clone()
  };
}
function withNewSpanContext(fn) {
  const currentContext = getContextAsyncLocalStorage().getStore();
  if (!currentContext) {
    throw new Error("No existing trace found");
  }
  const copyOfContext = cloneCurrentContext(currentContext);
  return getContextAsyncLocalStorage().run(copyOfContext, fn);
}

// node_modules/@openai/agents-core/dist/tracing/processor.mjs
var ConsoleSpanExporter = class {
  async export(items) {
    if (tracing.disabled) {
      logger_default.debug("Tracing is disabled. Skipping export");
      return;
    }
    for (const item of items) {
      if (item.type === "trace") {
        console.log(`[Exporter] Export trace traceId=${item.traceId} name=${item.name}${item.groupId ? ` groupId=${item.groupId}` : ""}`);
      } else {
        console.log(`[Exporter] Export span: ${JSON.stringify(item)}`);
      }
    }
  }
};
var _maxQueueSize, _maxBatchSize, _scheduleDelay, _exportTriggerSize, _exporter, _buffer, _timer, _timeout, _exportInProgress, _timeoutAbortController, _BatchTraceProcessor_instances, safeAddItem_fn, runExportLoop_fn, exportBatches_fn;
var BatchTraceProcessor = class {
  constructor(exporter, {
    maxQueueSize = 1e3,
    maxBatchSize = 100,
    scheduleDelay = 5e3,
    // 5 seconds
    exportTriggerRatio = 0.8
  } = {}) {
    __privateAdd(this, _BatchTraceProcessor_instances);
    __privateAdd(this, _maxQueueSize);
    __privateAdd(this, _maxBatchSize);
    __privateAdd(this, _scheduleDelay);
    __privateAdd(this, _exportTriggerSize);
    __privateAdd(this, _exporter);
    __privateAdd(this, _buffer, []);
    __privateAdd(this, _timer);
    __privateAdd(this, _timeout, null);
    __privateAdd(this, _exportInProgress, false);
    __privateAdd(this, _timeoutAbortController, null);
    __privateSet(this, _maxQueueSize, maxQueueSize);
    __privateSet(this, _maxBatchSize, maxBatchSize);
    __privateSet(this, _scheduleDelay, scheduleDelay);
    __privateSet(this, _exportTriggerSize, maxQueueSize * exportTriggerRatio);
    __privateSet(this, _exporter, exporter);
    __privateSet(this, _timer, timer);
    if (isTracingLoopRunningByDefault()) {
      this.start();
    } else {
      logger_default.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.");
    }
  }
  start() {
    __privateSet(this, _timeoutAbortController, new AbortController());
    __privateMethod(this, _BatchTraceProcessor_instances, runExportLoop_fn).call(this);
  }
  async onTraceStart(trace) {
    await __privateMethod(this, _BatchTraceProcessor_instances, safeAddItem_fn).call(this, trace);
  }
  async onTraceEnd(_trace) {
  }
  async onSpanStart(_span) {
  }
  async onSpanEnd(span) {
    await __privateMethod(this, _BatchTraceProcessor_instances, safeAddItem_fn).call(this, span);
  }
  async shutdown(timeout) {
    var _a;
    if (timeout) {
      __privateGet(this, _timer).setTimeout(() => {
        var _a2;
        (_a2 = __privateGet(this, _timeoutAbortController)) == null ? void 0 : _a2.abort();
      }, timeout);
    }
    logger_default.debug("Shutting down gracefully");
    while (__privateGet(this, _buffer).length > 0) {
      logger_default.debug(`Waiting for buffer to empty. Items left: ${__privateGet(this, _buffer).length}`);
      if (!__privateGet(this, _exportInProgress)) {
        await __privateMethod(this, _BatchTraceProcessor_instances, exportBatches_fn).call(this, true);
      }
      if ((_a = __privateGet(this, _timeoutAbortController)) == null ? void 0 : _a.signal.aborted) {
        logger_default.debug("Timeout reached, force flushing");
        await __privateMethod(this, _BatchTraceProcessor_instances, exportBatches_fn).call(this, true);
        break;
      }
      await new Promise((resolve) => __privateGet(this, _timer).setTimeout(resolve, 500));
    }
    logger_default.debug("Buffer empty. Exiting");
    if (__privateGet(this, _timer) && __privateGet(this, _timeout)) {
      __privateGet(this, _timer).clearTimeout(__privateGet(this, _timeout));
    }
  }
  async forceFlush() {
    if (__privateGet(this, _buffer).length > 0) {
      await __privateMethod(this, _BatchTraceProcessor_instances, exportBatches_fn).call(this, true);
    }
  }
};
_maxQueueSize = new WeakMap();
_maxBatchSize = new WeakMap();
_scheduleDelay = new WeakMap();
_exportTriggerSize = new WeakMap();
_exporter = new WeakMap();
_buffer = new WeakMap();
_timer = new WeakMap();
_timeout = new WeakMap();
_exportInProgress = new WeakMap();
_timeoutAbortController = new WeakMap();
_BatchTraceProcessor_instances = new WeakSet();
safeAddItem_fn = async function(item) {
  if (__privateGet(this, _buffer).length + 1 > __privateGet(this, _maxQueueSize)) {
    logger_default.error("Dropping trace because buffer is full");
    return;
  }
  __privateGet(this, _buffer).push(item);
  if (__privateGet(this, _buffer).length > __privateGet(this, _exportTriggerSize)) {
    await __privateMethod(this, _BatchTraceProcessor_instances, exportBatches_fn).call(this);
  }
};
runExportLoop_fn = function() {
  __privateSet(this, _timeout, __privateGet(this, _timer).setTimeout(async () => {
    await __privateMethod(this, _BatchTraceProcessor_instances, exportBatches_fn).call(this);
    __privateMethod(this, _BatchTraceProcessor_instances, runExportLoop_fn).call(this);
  }, __privateGet(this, _scheduleDelay)));
  if (typeof __privateGet(this, _timeout).unref === "function") {
    __privateGet(this, _timeout).unref();
  }
};
exportBatches_fn = async function(force = false) {
  if (__privateGet(this, _buffer).length === 0) {
    return;
  }
  logger_default.debug(`Exporting batches. Force: ${force}. Buffer size: ${__privateGet(this, _buffer).length}`);
  if (force || __privateGet(this, _buffer).length < __privateGet(this, _maxBatchSize)) {
    const toExport = [...__privateGet(this, _buffer)];
    __privateSet(this, _buffer, []);
    __privateSet(this, _exportInProgress, true);
    await __privateGet(this, _exporter).export(toExport);
    __privateSet(this, _exportInProgress, false);
  } else if (__privateGet(this, _buffer).length > 0) {
    const batch = __privateGet(this, _buffer).splice(0, __privateGet(this, _maxBatchSize));
    __privateSet(this, _exportInProgress, true);
    await __privateGet(this, _exporter).export(batch);
    __privateSet(this, _exportInProgress, false);
  }
};
var _processors;
var MultiTracingProcessor = class {
  constructor() {
    __privateAdd(this, _processors, []);
  }
  start() {
    for (const processor of __privateGet(this, _processors)) {
      if (processor.start) {
        processor.start();
      }
    }
  }
  addTraceProcessor(processor) {
    __privateGet(this, _processors).push(processor);
  }
  setProcessors(processors) {
    logger_default.debug("Shutting down old processors");
    for (const processor of __privateGet(this, _processors)) {
      processor.shutdown();
    }
    __privateSet(this, _processors, processors);
  }
  async onTraceStart(trace) {
    for (const processor of __privateGet(this, _processors)) {
      await processor.onTraceStart(trace);
    }
  }
  async onTraceEnd(trace) {
    for (const processor of __privateGet(this, _processors)) {
      await processor.onTraceEnd(trace);
    }
  }
  async onSpanStart(span) {
    for (const processor of __privateGet(this, _processors)) {
      await processor.onSpanStart(span);
    }
  }
  async onSpanEnd(span) {
    for (const processor of __privateGet(this, _processors)) {
      await processor.onSpanEnd(span);
    }
  }
  async shutdown(timeout) {
    for (const processor of __privateGet(this, _processors)) {
      await processor.shutdown(timeout);
    }
  }
  async forceFlush() {
    for (const processor of __privateGet(this, _processors)) {
      await processor.forceFlush();
    }
  }
};
_processors = new WeakMap();
var _defaultExporter = null;
var _defaultProcessor = null;
function defaultExporter() {
  if (!_defaultExporter) {
    _defaultExporter = new ConsoleSpanExporter();
  }
  return _defaultExporter;
}
function defaultProcessor() {
  if (!_defaultProcessor) {
    _defaultProcessor = new BatchTraceProcessor(defaultExporter());
  }
  return _defaultProcessor;
}

// node_modules/@openai/agents-core/dist/tracing/utils.mjs
function timeIso() {
  return (/* @__PURE__ */ new Date()).toISOString();
}
function generateTraceId() {
  return `trace_${randomUUID().replace(/-/g, "")}`;
}
function generateSpanId() {
  return `span_${randomUUID().replace(/-/g, "").slice(0, 24)}`;
}
function generateGroupId() {
  return `group_${randomUUID().replace(/-/g, "").slice(0, 24)}`;
}
function removePrivateFields(obj) {
  return Object.fromEntries(Object.entries(obj).filter(([key]) => !key.startsWith("_")));
}

// node_modules/@openai/agents-core/dist/tracing/spans.mjs
var _data, _traceId, _spanId, _parentId, _processor, _startedAt, _endedAt, _error2, _previousSpan;
var _Span = class _Span {
  constructor(options, processor) {
    __publicField(this, "type", "trace.span");
    __privateAdd(this, _data);
    __privateAdd(this, _traceId);
    __privateAdd(this, _spanId);
    __privateAdd(this, _parentId);
    __privateAdd(this, _processor);
    __privateAdd(this, _startedAt);
    __privateAdd(this, _endedAt);
    __privateAdd(this, _error2);
    __privateAdd(this, _previousSpan);
    __privateSet(this, _traceId, options.traceId);
    __privateSet(this, _spanId, options.spanId ?? generateSpanId());
    __privateSet(this, _data, options.data);
    __privateSet(this, _processor, processor);
    __privateSet(this, _parentId, options.parentId ?? null);
    __privateSet(this, _error2, options.error ?? null);
    __privateSet(this, _startedAt, options.startedAt ?? null);
    __privateSet(this, _endedAt, options.endedAt ?? null);
  }
  get traceId() {
    return __privateGet(this, _traceId);
  }
  get spanData() {
    return __privateGet(this, _data);
  }
  get spanId() {
    return __privateGet(this, _spanId);
  }
  get parentId() {
    return __privateGet(this, _parentId);
  }
  get previousSpan() {
    return __privateGet(this, _previousSpan);
  }
  set previousSpan(span) {
    __privateSet(this, _previousSpan, span);
  }
  start() {
    if (__privateGet(this, _startedAt)) {
      logger_default.warn("Span already started");
      return;
    }
    __privateSet(this, _startedAt, timeIso());
    __privateGet(this, _processor).onSpanStart(this);
  }
  end() {
    if (__privateGet(this, _endedAt)) {
      logger_default.debug("Span already finished", this.spanData);
      return;
    }
    __privateSet(this, _endedAt, timeIso());
    __privateGet(this, _processor).onSpanEnd(this);
  }
  setError(error40) {
    __privateSet(this, _error2, error40);
  }
  get error() {
    return __privateGet(this, _error2);
  }
  get startedAt() {
    return __privateGet(this, _startedAt);
  }
  get endedAt() {
    return __privateGet(this, _endedAt);
  }
  clone() {
    var _a;
    const span = new _Span({
      traceId: this.traceId,
      spanId: this.spanId,
      parentId: this.parentId ?? void 0,
      data: this.spanData,
      startedAt: __privateGet(this, _startedAt) ?? void 0,
      endedAt: __privateGet(this, _endedAt) ?? void 0,
      error: __privateGet(this, _error2) ?? void 0
    }, __privateGet(this, _processor));
    span.previousSpan = (_a = this.previousSpan) == null ? void 0 : _a.clone();
    return span;
  }
  toJSON() {
    return {
      object: this.type,
      id: this.spanId,
      trace_id: this.traceId,
      parent_id: this.parentId,
      started_at: this.startedAt,
      ended_at: this.endedAt,
      span_data: removePrivateFields(this.spanData),
      error: this.error
    };
  }
};
_data = new WeakMap();
_traceId = new WeakMap();
_spanId = new WeakMap();
_parentId = new WeakMap();
_processor = new WeakMap();
_startedAt = new WeakMap();
_endedAt = new WeakMap();
_error2 = new WeakMap();
_previousSpan = new WeakMap();
var Span = _Span;
var NoopSpan = class extends Span {
  constructor(data, processor) {
    super({ traceId: "no-op", spanId: "no-op", data }, processor);
  }
  start() {
    return;
  }
  end() {
    return;
  }
  setError() {
    return;
  }
  toJSON() {
    return null;
  }
};

// node_modules/@openai/agents-core/dist/tracing/traces.mjs
var _processor2, _started;
var _Trace = class _Trace {
  constructor(options, processor) {
    __publicField(this, "type", "trace");
    __publicField(this, "traceId");
    __publicField(this, "name");
    __publicField(this, "groupId", null);
    __publicField(this, "metadata");
    __privateAdd(this, _processor2);
    __privateAdd(this, _started);
    this.traceId = options.traceId ?? generateTraceId();
    this.name = options.name ?? "Agent workflow";
    this.groupId = options.groupId ?? null;
    this.metadata = options.metadata ?? {};
    __privateSet(this, _processor2, processor ?? defaultProcessor());
    __privateSet(this, _started, options.started ?? false);
  }
  async start() {
    if (__privateGet(this, _started)) {
      return;
    }
    __privateSet(this, _started, true);
    await __privateGet(this, _processor2).onTraceStart(this);
  }
  async end() {
    if (!__privateGet(this, _started)) {
      return;
    }
    __privateSet(this, _started, false);
    await __privateGet(this, _processor2).onTraceEnd(this);
  }
  clone() {
    return new _Trace({
      traceId: this.traceId,
      name: this.name,
      groupId: this.groupId ?? void 0,
      metadata: this.metadata,
      started: __privateGet(this, _started)
    });
  }
  toJSON() {
    return {
      object: this.type,
      id: this.traceId,
      workflow_name: this.name,
      group_id: this.groupId,
      metadata: this.metadata
    };
  }
};
_processor2 = new WeakMap();
_started = new WeakMap();
var Trace = _Trace;
var NoopTrace = class extends Trace {
  constructor() {
    super({});
  }
  async start() {
    return;
  }
  async end() {
    return;
  }
  toJSON() {
    return null;
  }
};

// node_modules/@openai/agents-core/dist/tracing/provider.mjs
var _multiProcessor, _disabled, _TraceProvider_instances, addCleanupListeners_fn;
var TraceProvider = class {
  constructor() {
    __privateAdd(this, _TraceProvider_instances);
    __privateAdd(this, _multiProcessor);
    __privateAdd(this, _disabled);
    __privateSet(this, _multiProcessor, new MultiTracingProcessor());
    __privateSet(this, _disabled, tracing.disabled);
    __privateMethod(this, _TraceProvider_instances, addCleanupListeners_fn).call(this);
  }
  /**
   * Add a processor to the list of processors. Each processor will receive all traces/spans.
   *
   * @param processor - The processor to add.
   */
  registerProcessor(processor) {
    __privateGet(this, _multiProcessor).addTraceProcessor(processor);
  }
  /**
   * Set the list of processors. This will replace any existing processors.
   *
   * @param processors - The list of processors to set.
   */
  setProcessors(processors) {
    __privateGet(this, _multiProcessor).setProcessors(processors);
  }
  /**
   * Get the current trace.
   *
   * @returns The current trace.
   */
  getCurrentTrace() {
    return getCurrentTrace();
  }
  getCurrentSpan() {
    return getCurrentSpan();
  }
  setDisabled(disabled) {
    __privateSet(this, _disabled, disabled);
  }
  startExportLoop() {
    __privateGet(this, _multiProcessor).start();
  }
  createTrace(traceOptions) {
    if (__privateGet(this, _disabled)) {
      logger_default.debug("Tracing is disabled, Not creating trace %o", traceOptions);
      return new NoopTrace();
    }
    const traceId = traceOptions.traceId ?? generateTraceId();
    const name = traceOptions.name ?? "Agent workflow";
    logger_default.debug("Creating trace %s with name %s", traceId, name);
    return new Trace({ ...traceOptions, name, traceId }, __privateGet(this, _multiProcessor));
  }
  createSpan(spanOptions, parent) {
    if (__privateGet(this, _disabled) || spanOptions.disabled) {
      logger_default.debug("Tracing is disabled, Not creating span %o", spanOptions);
      return new NoopSpan(spanOptions.data, __privateGet(this, _multiProcessor));
    }
    let parentId;
    let traceId;
    if (!parent) {
      const currentTrace = getCurrentTrace();
      const currentSpan = getCurrentSpan();
      if (!currentTrace) {
        logger_default.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan.");
        return new NoopSpan(spanOptions.data, __privateGet(this, _multiProcessor));
      }
      if (currentSpan instanceof NoopSpan || currentTrace instanceof NoopTrace) {
        logger_default.debug(`Parent ${currentSpan} or ${currentTrace} is no-op, returning NoopSpan`);
        return new NoopSpan(spanOptions.data, __privateGet(this, _multiProcessor));
      }
      traceId = currentTrace.traceId;
      if (currentSpan) {
        logger_default.debug("Using parent span %s", currentSpan.spanId);
        parentId = currentSpan.spanId;
      } else {
        logger_default.debug("No parent span, using current trace %s", currentTrace.traceId);
      }
    } else if (parent instanceof Trace) {
      if (parent instanceof NoopTrace) {
        logger_default.debug("Parent trace is no-op, returning NoopSpan");
        return new NoopSpan(spanOptions.data, __privateGet(this, _multiProcessor));
      }
      traceId = parent.traceId;
    } else if (parent instanceof Span) {
      if (parent instanceof NoopSpan) {
        logger_default.debug("Parent span is no-op, returning NoopSpan");
        return new NoopSpan(spanOptions.data, __privateGet(this, _multiProcessor));
      }
      parentId = parent.spanId;
      traceId = parent.traceId;
    }
    if (!traceId) {
      logger_default.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan.");
      return new NoopSpan(spanOptions.data, __privateGet(this, _multiProcessor));
    }
    logger_default.debug(`Creating span ${JSON.stringify(spanOptions.data)} with id ${spanOptions.spanId ?? traceId}`);
    return new Span({
      ...spanOptions,
      traceId,
      parentId
    }, __privateGet(this, _multiProcessor));
  }
  async shutdown(timeout) {
    try {
      logger_default.debug("Shutting down tracing provider");
      await __privateGet(this, _multiProcessor).shutdown(timeout);
    } catch (error40) {
      logger_default.error("Error shutting down tracing provider %o", error40);
    }
  }
  async forceFlush() {
    await __privateGet(this, _multiProcessor).forceFlush();
  }
};
_multiProcessor = new WeakMap();
_disabled = new WeakMap();
_TraceProvider_instances = new WeakSet();
/** Adds listeners to `process` to ensure `shutdown` occurs before exit. */
addCleanupListeners_fn = function() {
  if (typeof process !== "undefined" && typeof process.on === "function") {
    const cleanup = async () => {
      const timeout = setTimeout(() => {
        console.warn("Cleanup timeout, forcing exit");
        process.exit(1);
      }, 5e3);
      try {
        await this.shutdown();
      } finally {
        clearTimeout(timeout);
      }
    };
    process.on("beforeExit", cleanup);
    process.on("SIGINT", async () => {
      await cleanup();
      if (!hasOtherListenersForSignals("SIGINT")) {
        process.exit(130);
      }
    });
    process.on("SIGTERM", async () => {
      await cleanup();
      if (!hasOtherListenersForSignals("SIGTERM")) {
        process.exit(0);
      }
    });
    process.on("unhandledRejection", async (reason, promise2) => {
      logger_default.error("Unhandled rejection", reason, promise2);
      await cleanup();
      if (!hasOtherListenersForEvents("unhandledRejection")) {
        process.exit(1);
      }
    });
  }
};
function hasOtherListenersForSignals(event) {
  return process.listeners(event).length > 1;
}
function hasOtherListenersForEvents(event) {
  return process.listeners(event).length > 1;
}
var GLOBAL_TRACE_PROVIDER = void 0;
function getGlobalTraceProvider() {
  if (!GLOBAL_TRACE_PROVIDER) {
    GLOBAL_TRACE_PROVIDER = new TraceProvider();
  }
  return GLOBAL_TRACE_PROVIDER;
}

// node_modules/@openai/agents-core/dist/tracing/index.mjs
function addTraceProcessor(processor) {
  getGlobalTraceProvider().registerProcessor(processor);
}
function setTraceProcessors(processors) {
  getGlobalTraceProvider().setProcessors(processors);
}
function setTracingDisabled(disabled) {
  getGlobalTraceProvider().setDisabled(disabled);
}
function startTraceExportLoop() {
  getGlobalTraceProvider().startExportLoop();
}

// node_modules/@openai/agents-core/dist/helpers/message.mjs
function user(input, options) {
  return {
    type: "message",
    role: "user",
    content: typeof input === "string" ? [
      {
        type: "input_text",
        text: input
      }
    ] : input,
    providerData: options
  };
}
function system(input, options) {
  return {
    type: "message",
    role: "system",
    content: input,
    providerData: options
  };
}
function assistant(content, options) {
  return {
    type: "message",
    role: "assistant",
    content: typeof content === "string" ? [
      {
        type: "output_text",
        text: content
      }
    ] : content,
    status: "completed",
    providerData: options
  };
}

// node_modules/@openai/agents-core/dist/mcpUtil.mjs
function createMCPToolStaticFilter(options) {
  if (!(options == null ? void 0 : options.allowed) && !(options == null ? void 0 : options.blocked)) {
    return void 0;
  }
  const filter = {};
  if (options == null ? void 0 : options.allowed) {
    filter.allowedToolNames = options.allowed;
  }
  if (options == null ? void 0 : options.blocked) {
    filter.blockedToolNames = options.blocked;
  }
  return filter;
}

// node_modules/@openai/agents-core/dist/index.mjs
addTraceProcessor(defaultProcessor());

// node_modules/@openai/agents-openai/dist/metadata.mjs
var METADATA = {
  "name": "@openai/agents-openai",
  "version": "0.2.1",
  "versions": {
    "@openai/agents-openai": "0.2.1",
    "@openai/agents-core": "workspace:*",
    "openai": "^6"
  }
};
var metadata_default = METADATA;

// node_modules/@openai/agents-openai/dist/defaults.mjs
var DEFAULT_OPENAI_API = "responses";
var _defaultOpenAIAPI = DEFAULT_OPENAI_API;
var _defaultOpenAIClient;
var _defaultOpenAIKey = void 0;
var _defaultTracingApiKey = void 0;
function setTracingExportApiKey(key) {
  _defaultTracingApiKey = key;
}
function getTracingExportApiKey() {
  return _defaultTracingApiKey ?? loadEnv().OPENAI_API_KEY;
}
function shouldUseResponsesByDefault() {
  return _defaultOpenAIAPI === "responses";
}
function setOpenAIAPI(value) {
  _defaultOpenAIAPI = value;
}
function setDefaultOpenAIClient(client) {
  _defaultOpenAIClient = client;
}
function getDefaultOpenAIClient() {
  return _defaultOpenAIClient;
}
function setDefaultOpenAIKey(key) {
  _defaultOpenAIKey = key;
}
function getDefaultOpenAIKey() {
  return _defaultOpenAIKey ?? loadEnv().OPENAI_API_KEY;
}
var HEADERS = {
  "User-Agent": `Agents/JavaScript ${metadata_default.version}`
};

// node_modules/@openai/agents-openai/dist/logger.mjs
var logger2 = getLogger("openai-agents:openai");
var logger_default2 = logger2;

// node_modules/@openai/agents-openai/dist/tools.mjs
var WebSearchStatus = external_exports2.enum(["in_progress", "completed", "searching", "failed"]).default("failed");
var FileSearchStatus = external_exports2.enum(["in_progress", "completed", "searching", "failed", "incomplete"]).default("failed");
var CodeInterpreterStatus = external_exports2.enum(["in_progress", "completed", "interpreting"]).default("in_progress");
var ImageGenerationStatus = external_exports2.enum(["in_progress", "completed", "generating", "failed"]).default("failed");
function webSearchTool(options = {}) {
  var _a;
  const providerData = {
    type: "web_search",
    name: options.name ?? "web_search",
    user_location: options.userLocation,
    filters: ((_a = options.filters) == null ? void 0 : _a.allowedDomains) ? { allowed_domains: options.filters.allowedDomains } : void 0,
    search_context_size: options.searchContextSize ?? "medium"
  };
  return {
    type: "hosted_tool",
    name: options.name ?? "web_search",
    providerData
  };
}
function fileSearchTool(vectorStoreIds, options = {}) {
  const vectorIds = Array.isArray(vectorStoreIds) ? vectorStoreIds : [vectorStoreIds];
  const providerData = {
    type: "file_search",
    name: options.name ?? "file_search",
    vector_store_ids: vectorIds,
    max_num_results: options.maxNumResults,
    include_search_results: options.includeSearchResults,
    ranking_options: options.rankingOptions,
    filters: options.filters
  };
  return {
    type: "hosted_tool",
    name: options.name ?? "file_search",
    providerData
  };
}
function codeInterpreterTool(options = {}) {
  const providerData = {
    type: "code_interpreter",
    name: options.name ?? "code_interpreter",
    container: options.container ?? { type: "auto" }
  };
  return {
    type: "hosted_tool",
    name: options.name ?? "code_interpreter",
    providerData
  };
}
function imageGenerationTool(options = {}) {
  const providerData = {
    type: "image_generation",
    name: options.name ?? "image_generation",
    background: options.background,
    input_fidelity: options.inputFidelity,
    input_image_mask: options.inputImageMask,
    model: options.model,
    moderation: options.moderation,
    output_compression: options.outputCompression,
    output_format: options.outputFormat,
    partial_images: options.partialImages,
    quality: options.quality,
    size: options.size
  };
  return {
    type: "hosted_tool",
    name: options.name ?? "image_generation",
    providerData
  };
}

// node_modules/@openai/agents-openai/dist/utils/providerData.mjs
function camelOrSnakeToSnakeCase(providerData) {
  if (!providerData || typeof providerData !== "object" || Array.isArray(providerData)) {
    return providerData;
  }
  const result = {};
  for (const [key, value] of Object.entries(providerData)) {
    const snakeKey = key.replace(/([A-Z])/g, "_$1").toLowerCase();
    result[snakeKey] = camelOrSnakeToSnakeCase(value);
  }
  return result;
}

// node_modules/@openai/agents-openai/dist/openaiResponsesModel.mjs
var HostedToolChoice = external_exports2.enum([
  "file_search",
  "web_search",
  "web_search_preview",
  "computer_use_preview",
  "code_interpreter",
  "image_generation",
  "mcp"
]);
var DefaultToolChoice = external_exports2.enum(["auto", "required", "none"]);
function getToolChoice(toolChoice) {
  if (typeof toolChoice === "undefined") {
    return void 0;
  }
  const resultDefaultCheck = DefaultToolChoice.safeParse(toolChoice);
  if (resultDefaultCheck.success) {
    return resultDefaultCheck.data;
  }
  const result = HostedToolChoice.safeParse(toolChoice);
  if (result.success) {
    return { type: result.data };
  }
  return { type: "function", name: toolChoice };
}
function getResponseFormat(outputType, otherProperties) {
  if (outputType === "text") {
    return otherProperties;
  }
  return {
    ...otherProperties,
    format: outputType
  };
}
function normalizeFunctionCallOutputForRequest(output) {
  if (typeof output === "string") {
    return output;
  }
  if (Array.isArray(output)) {
    return output.map(convertStructuredOutputToRequestItem);
  }
  if (isRecord2(output) && typeof output.type === "string") {
    if (output.type === "text" && typeof output.text === "string") {
      return output.text;
    }
    if (output.type === "image" || output.type === "file") {
      const structuredItems = convertLegacyToolOutputContent(output);
      return structuredItems.map(convertStructuredOutputToRequestItem);
    }
  }
  return String(output);
}
function convertLegacyToolOutputContent(output) {
  if (output.type === "text") {
    const structured = {
      type: "input_text",
      text: output.text
    };
    if (output.providerData) {
      structured.providerData = output.providerData;
    }
    return [structured];
  }
  if (output.type === "image") {
    const structured = {
      type: "input_image"
    };
    if (output.detail) {
      structured.detail = output.detail;
    }
    const legacyImageUrl = output.imageUrl;
    const legacyFileId = output.fileId;
    const dataValue = output.data;
    if (typeof output.image === "string" && output.image.length > 0) {
      structured.image = output.image;
    } else if (isRecord2(output.image)) {
      const imageObj = output.image;
      const inlineMediaType = getImageInlineMediaType(imageObj);
      if (typeof imageObj.url === "string" && imageObj.url.length > 0) {
        structured.image = imageObj.url;
      } else if (typeof imageObj.data === "string" && imageObj.data.length > 0) {
        structured.image = formatInlineData(imageObj.data, inlineMediaType);
      } else if (imageObj.data instanceof Uint8Array && imageObj.data.length > 0) {
        structured.image = formatInlineData(imageObj.data, inlineMediaType);
      } else {
        const referencedId = typeof imageObj.fileId === "string" && imageObj.fileId.length > 0 && imageObj.fileId || (typeof imageObj.id === "string" && imageObj.id.length > 0 ? imageObj.id : void 0);
        if (referencedId) {
          structured.image = { id: referencedId };
        }
      }
    } else if (typeof legacyImageUrl === "string" && legacyImageUrl.length > 0) {
      structured.image = legacyImageUrl;
    } else if (typeof legacyFileId === "string" && legacyFileId.length > 0) {
      structured.image = { id: legacyFileId };
    } else {
      let base64Data;
      if (typeof dataValue === "string" && dataValue.length > 0) {
        base64Data = dataValue;
      } else if (dataValue instanceof Uint8Array && dataValue.length > 0) {
        base64Data = encodeUint8ArrayToBase64(dataValue);
      }
      if (base64Data) {
        structured.image = base64Data;
      }
    }
    if (output.providerData) {
      structured.providerData = output.providerData;
    }
    return [structured];
  }
  if (output.type === "file") {
    const structured = {
      type: "input_file"
    };
    const fileValue = output.file ?? output.file;
    if (typeof fileValue === "string") {
      structured.file = fileValue;
    } else if (isRecord2(fileValue)) {
      if (typeof fileValue.data === "string" && fileValue.data.length > 0) {
        structured.file = formatInlineData(fileValue.data, fileValue.mediaType ?? "text/plain");
      } else if (fileValue.data instanceof Uint8Array && fileValue.data.length > 0) {
        structured.file = formatInlineData(fileValue.data, fileValue.mediaType ?? "text/plain");
      } else if (typeof fileValue.url === "string" && fileValue.url.length > 0) {
        structured.file = { url: fileValue.url };
      } else {
        const referencedId = typeof fileValue.id === "string" && fileValue.id.length > 0 && fileValue.id || (typeof fileValue.fileId === "string" && fileValue.fileId.length > 0 ? fileValue.fileId : void 0);
        if (referencedId) {
          structured.file = { id: referencedId };
        }
      }
      if (typeof fileValue.filename === "string" && fileValue.filename.length > 0) {
        structured.filename = fileValue.filename;
      }
    }
    if (!structured.file) {
      const legacy = normalizeLegacyFileFromOutput(output);
      if (legacy.file) {
        structured.file = legacy.file;
      }
      if (legacy.filename) {
        structured.filename = legacy.filename;
      }
    }
    if (output.providerData) {
      structured.providerData = output.providerData;
    }
    return [structured];
  }
  throw new UserError(`Unsupported tool output type: ${JSON.stringify(output)}`);
}
function convertStructuredOutputToRequestItem(item) {
  if (item.type === "input_text") {
    return {
      type: "input_text",
      text: item.text
    };
  }
  if (item.type === "input_image") {
    const result = { type: "input_image" };
    const imageValue = item.image ?? item.imageUrl;
    if (typeof imageValue === "string") {
      result.image_url = imageValue;
    } else if (isRecord2(imageValue) && typeof imageValue.id === "string") {
      result.file_id = imageValue.id;
    }
    const legacyFileId = item.fileId;
    if (typeof legacyFileId === "string") {
      result.file_id = legacyFileId;
    }
    if (item.detail) {
      result.detail = item.detail;
    }
    return result;
  }
  if (item.type === "input_file") {
    const result = { type: "input_file" };
    if (typeof item.file === "string") {
      const value = item.file.trim();
      if (value.startsWith("data:")) {
        result.file_data = value;
      } else if (value.startsWith("http://") || value.startsWith("https://")) {
        result.file_url = value;
      } else if (/^[A-Za-z0-9+/=]+$/.test(value)) {
        result.file_data = value;
      } else {
        result.file_url = value;
      }
    } else if (item.file && typeof item.file === "object" && "id" in item.file && typeof item.file.id === "string") {
      result.file_id = item.file.id;
    } else if (item.file && typeof item.file === "object" && "url" in item.file && typeof item.file.url === "string") {
      result.file_url = item.file.url;
    }
    const legacyFileData = item.fileData;
    if (typeof legacyFileData === "string") {
      result.file_data = legacyFileData;
    }
    const legacyFileUrl = item.fileUrl;
    if (typeof legacyFileUrl === "string") {
      result.file_url = legacyFileUrl;
    }
    const legacyFileId = item.fileId;
    if (typeof legacyFileId === "string") {
      result.file_id = legacyFileId;
    }
    if (item.filename) {
      result.filename = item.filename;
    }
    return result;
  }
  throw new UserError(`Unsupported structured tool output: ${JSON.stringify(item)}`);
}
function normalizeLegacyFileFromOutput(value) {
  const filename = typeof value.filename === "string" && value.filename.length > 0 ? value.filename : void 0;
  const referencedId = (typeof value.id === "string" && value.id.length > 0 && value.id) ?? (typeof value.fileId === "string" && value.fileId.length > 0 ? value.fileId : void 0);
  if (referencedId) {
    return { file: { id: referencedId }, filename };
  }
  if (typeof value.fileUrl === "string" && value.fileUrl.length > 0) {
    return { file: { url: value.fileUrl }, filename };
  }
  if (typeof value.fileData === "string" && value.fileData.length > 0) {
    return {
      file: formatInlineData(value.fileData, value.mediaType ?? "text/plain"),
      filename
    };
  }
  if (value.fileData instanceof Uint8Array && value.fileData.length > 0) {
    return {
      file: formatInlineData(value.fileData, value.mediaType ?? "text/plain"),
      filename
    };
  }
  return {};
}
function isRecord2(value) {
  return typeof value === "object" && value !== null;
}
function getImageInlineMediaType(source) {
  if (typeof source.mediaType === "string" && source.mediaType.length > 0) {
    return source.mediaType;
  }
  return void 0;
}
function formatInlineData(data, mediaType) {
  const base643 = typeof data === "string" ? data : encodeUint8ArrayToBase64(data);
  return mediaType ? `data:${mediaType};base64,${base643}` : base643;
}
function getTools(tools, handoffs) {
  const openaiTools = [];
  const include = [];
  for (const tool2 of tools) {
    const { tool: openaiTool, include: openaiIncludes } = converTool(tool2);
    openaiTools.push(openaiTool);
    if (openaiIncludes && openaiIncludes.length > 0) {
      for (const item of openaiIncludes) {
        include.push(item);
      }
    }
  }
  return {
    tools: [...openaiTools, ...handoffs.map(getHandoffTool)],
    include
  };
}
function converTool(tool2) {
  var _a, _b, _c, _d, _e, _f;
  if (tool2.type === "function") {
    return {
      tool: {
        type: "function",
        name: tool2.name,
        description: tool2.description,
        parameters: tool2.parameters,
        strict: tool2.strict
      },
      include: void 0
    };
  } else if (tool2.type === "computer") {
    return {
      tool: {
        type: "computer_use_preview",
        environment: tool2.environment,
        display_width: tool2.dimensions[0],
        display_height: tool2.dimensions[1]
      },
      include: void 0
    };
  } else if (tool2.type === "hosted_tool") {
    if (((_a = tool2.providerData) == null ? void 0 : _a.type) === "web_search") {
      return {
        tool: {
          type: "web_search",
          user_location: tool2.providerData.user_location,
          filters: tool2.providerData.filters,
          search_context_size: tool2.providerData.search_context_size
        },
        include: void 0
      };
    } else if (((_b = tool2.providerData) == null ? void 0 : _b.type) === "web_search_preview") {
      return {
        tool: {
          type: "web_search_preview",
          user_location: tool2.providerData.user_location,
          search_context_size: tool2.providerData.search_context_size
        },
        include: void 0
      };
    } else if (((_c = tool2.providerData) == null ? void 0 : _c.type) === "file_search") {
      return {
        tool: {
          type: "file_search",
          vector_store_ids: tool2.providerData.vector_store_ids || // for backwards compatibility
          (typeof tool2.providerData.vector_store_id === "string" ? [tool2.providerData.vector_store_id] : tool2.providerData.vector_store_id),
          max_num_results: tool2.providerData.max_num_results,
          ranking_options: tool2.providerData.ranking_options,
          filters: tool2.providerData.filters
        },
        include: tool2.providerData.include_search_results ? ["file_search_call.results"] : void 0
      };
    } else if (((_d = tool2.providerData) == null ? void 0 : _d.type) === "code_interpreter") {
      return {
        tool: {
          type: "code_interpreter",
          container: tool2.providerData.container
        },
        include: void 0
      };
    } else if (((_e = tool2.providerData) == null ? void 0 : _e.type) === "image_generation") {
      return {
        tool: {
          type: "image_generation",
          background: tool2.providerData.background,
          input_fidelity: tool2.providerData.input_fidelity,
          input_image_mask: tool2.providerData.input_image_mask,
          model: tool2.providerData.model,
          moderation: tool2.providerData.moderation,
          output_compression: tool2.providerData.output_compression,
          output_format: tool2.providerData.output_format,
          partial_images: tool2.providerData.partial_images,
          quality: tool2.providerData.quality,
          size: tool2.providerData.size
        },
        include: void 0
      };
    } else if (((_f = tool2.providerData) == null ? void 0 : _f.type) === "mcp") {
      return {
        tool: {
          type: "mcp",
          server_label: tool2.providerData.server_label,
          server_url: tool2.providerData.server_url,
          connector_id: tool2.providerData.connector_id,
          authorization: tool2.providerData.authorization,
          allowed_tools: tool2.providerData.allowed_tools,
          headers: tool2.providerData.headers,
          require_approval: convertMCPRequireApproval(tool2.providerData.require_approval)
        },
        include: void 0
      };
    } else if (tool2.providerData) {
      return {
        tool: tool2.providerData,
        include: void 0
      };
    }
  }
  throw new Error(`Unsupported tool type: ${JSON.stringify(tool2)}`);
}
function convertMCPRequireApproval(requireApproval) {
  var _a, _b;
  if (requireApproval === "never" || requireApproval === void 0) {
    return "never";
  }
  if (requireApproval === "always") {
    return "always";
  }
  return {
    never: { tool_names: (_a = requireApproval.never) == null ? void 0 : _a.tool_names },
    always: { tool_names: (_b = requireApproval.always) == null ? void 0 : _b.tool_names }
  };
}
function getHandoffTool(handoff2) {
  return {
    name: handoff2.toolName,
    description: handoff2.toolDescription,
    parameters: handoff2.inputJsonSchema,
    strict: handoff2.strictJsonSchema,
    type: "function"
  };
}
function getInputMessageContent(entry) {
  if (entry.type === "input_text") {
    return {
      type: "input_text",
      text: entry.text,
      ...camelOrSnakeToSnakeCase(entry.providerData)
    };
  } else if (entry.type === "input_image") {
    const imageEntry = {
      type: "input_image",
      detail: entry.detail ?? "auto"
    };
    if (typeof entry.image === "string") {
      imageEntry.image_url = entry.image;
    } else if (entry.image && "id" in entry.image) {
      imageEntry.file_id = entry.image.id;
    } else if (typeof entry.imageUrl === "string") {
      imageEntry.image_url = entry.imageUrl;
    } else if (typeof entry.fileId === "string") {
      imageEntry.file_id = entry.fileId;
    }
    return {
      ...imageEntry,
      ...camelOrSnakeToSnakeCase(entry.providerData)
    };
  } else if (entry.type === "input_file") {
    const fileEntry = {
      type: "input_file"
    };
    if (typeof entry.file === "string") {
      if (entry.file.startsWith("data:")) {
        fileEntry.file_data = entry.file;
      } else if (entry.file.startsWith("https://")) {
        fileEntry.file_url = entry.file;
      } else {
        throw new UserError(`Unsupported string data for file input. If you're trying to pass an uploaded file's ID, use an object with the ID property instead.`);
      }
    } else if (entry.file && typeof entry.file === "object" && "id" in entry.file) {
      fileEntry.file_id = entry.file.id;
    } else if (entry.file && typeof entry.file === "object" && "url" in entry.file) {
      fileEntry.file_url = entry.file.url;
    }
    const legacyFileData = entry.fileData;
    if (typeof legacyFileData === "string") {
      fileEntry.file_data = legacyFileData;
    }
    const legacyFileUrl = entry.fileUrl;
    if (typeof legacyFileUrl === "string") {
      fileEntry.file_url = legacyFileUrl;
    }
    const legacyFileId = entry.fileId;
    if (typeof legacyFileId === "string") {
      fileEntry.file_id = legacyFileId;
    }
    if (entry.filename) {
      fileEntry.filename = entry.filename;
    }
    return {
      ...fileEntry,
      ...camelOrSnakeToSnakeCase(entry.providerData)
    };
  }
  throw new UserError(`Unsupported input content type: ${JSON.stringify(entry)}`);
}
function getOutputMessageContent(entry) {
  if (entry.type === "output_text") {
    return {
      type: "output_text",
      text: entry.text,
      annotations: [],
      ...camelOrSnakeToSnakeCase(entry.providerData)
    };
  }
  if (entry.type === "refusal") {
    return {
      type: "refusal",
      refusal: entry.refusal,
      ...camelOrSnakeToSnakeCase(entry.providerData)
    };
  }
  throw new UserError(`Unsupported output content type: ${JSON.stringify(entry)}`);
}
function getMessageItem(item) {
  if (item.role === "system") {
    return {
      id: item.id,
      role: "system",
      content: item.content,
      ...camelOrSnakeToSnakeCase(item.providerData)
    };
  }
  if (item.role === "user") {
    if (typeof item.content === "string") {
      return {
        id: item.id,
        role: "user",
        content: item.content,
        ...camelOrSnakeToSnakeCase(item.providerData)
      };
    }
    return {
      id: item.id,
      role: "user",
      content: item.content.map(getInputMessageContent),
      ...camelOrSnakeToSnakeCase(item.providerData)
    };
  }
  if (item.role === "assistant") {
    const assistantMessage = {
      type: "message",
      id: item.id,
      role: "assistant",
      content: item.content.map(getOutputMessageContent),
      status: item.status,
      ...camelOrSnakeToSnakeCase(item.providerData)
    };
    return assistantMessage;
  }
  throw new UserError(`Unsupported item ${JSON.stringify(item)}`);
}
function isMessageItem(item) {
  if (item.type === "message") {
    return true;
  }
  if (typeof item.type === "undefined" && typeof item.role === "string") {
    return true;
  }
  return false;
}
function getPrompt(prompt) {
  if (!prompt) {
    return void 0;
  }
  const transformedVariables = {};
  for (const [key, value] of Object.entries(prompt.variables ?? {})) {
    if (typeof value === "string") {
      transformedVariables[key] = value;
    } else if (typeof value === "object") {
      transformedVariables[key] = getInputMessageContent(value);
    }
  }
  return {
    id: prompt.promptId,
    version: prompt.version,
    variables: transformedVariables
  };
}
function getInputItems(input) {
  if (typeof input === "string") {
    return [
      {
        role: "user",
        content: input
      }
    ];
  }
  return input.map((item) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v;
    if (isMessageItem(item)) {
      return getMessageItem(item);
    }
    if (item.type === "function_call") {
      const entry = {
        id: item.id,
        type: "function_call",
        name: item.name,
        call_id: item.callId,
        arguments: item.arguments,
        status: item.status,
        ...camelOrSnakeToSnakeCase(item.providerData)
      };
      return entry;
    }
    if (item.type === "function_call_result") {
      const normalizedOutput = normalizeFunctionCallOutputForRequest(item.output);
      const entry = {
        type: "function_call_output",
        id: item.id,
        call_id: item.callId,
        output: normalizedOutput,
        status: item.status,
        ...camelOrSnakeToSnakeCase(item.providerData)
      };
      return entry;
    }
    if (item.type === "reasoning") {
      const entry = {
        id: item.id,
        type: "reasoning",
        summary: item.content.map((content) => ({
          type: "summary_text",
          text: content.text,
          ...camelOrSnakeToSnakeCase(content.providerData)
        })),
        encrypted_content: (_a = item.providerData) == null ? void 0 : _a.encryptedContent,
        ...camelOrSnakeToSnakeCase(item.providerData)
      };
      return entry;
    }
    if (item.type === "computer_call") {
      const entry = {
        type: "computer_call",
        call_id: item.callId,
        id: item.id,
        action: item.action,
        status: item.status,
        pending_safety_checks: [],
        ...camelOrSnakeToSnakeCase(item.providerData)
      };
      return entry;
    }
    if (item.type === "computer_call_result") {
      const entry = {
        type: "computer_call_output",
        id: item.id,
        call_id: item.callId,
        output: buildResponseOutput(item),
        status: (_b = item.providerData) == null ? void 0 : _b.status,
        acknowledged_safety_checks: (_c = item.providerData) == null ? void 0 : _c.acknowledgedSafetyChecks,
        ...camelOrSnakeToSnakeCase(item.providerData)
      };
      return entry;
    }
    if (item.type === "hosted_tool_call") {
      if (((_d = item.providerData) == null ? void 0 : _d.type) === "web_search_call" || ((_e = item.providerData) == null ? void 0 : _e.type) === "web_search") {
        const entry = {
          ...camelOrSnakeToSnakeCase(item.providerData),
          // place here to prioritize the below fields
          type: "web_search_call",
          id: item.id,
          status: WebSearchStatus.parse(item.status ?? "failed")
        };
        return entry;
      }
      if (((_f = item.providerData) == null ? void 0 : _f.type) === "file_search_call" || ((_g = item.providerData) == null ? void 0 : _g.type) === "file_search") {
        const entry = {
          ...camelOrSnakeToSnakeCase(item.providerData),
          // place here to prioritize the below fields
          type: "file_search_call",
          id: item.id,
          status: FileSearchStatus.parse(item.status ?? "failed"),
          queries: ((_h = item.providerData) == null ? void 0 : _h.queries) ?? [],
          results: (_i = item.providerData) == null ? void 0 : _i.results
        };
        return entry;
      }
      if (((_j = item.providerData) == null ? void 0 : _j.type) === "code_interpreter_call" || ((_k = item.providerData) == null ? void 0 : _k.type) === "code_interpreter") {
        const entry = {
          ...camelOrSnakeToSnakeCase(item.providerData),
          // place here to prioritize the below fields
          type: "code_interpreter_call",
          id: item.id,
          code: ((_l = item.providerData) == null ? void 0 : _l.code) ?? "",
          // This property used to be results, so keeping both for backward compatibility
          // That said, this property cannot be passed from a user, so it's just API's internal data.
          outputs: ((_m = item.providerData) == null ? void 0 : _m.outputs) ?? ((_n = item.providerData) == null ? void 0 : _n.results) ?? [],
          status: CodeInterpreterStatus.parse(item.status ?? "failed"),
          container_id: (_o = item.providerData) == null ? void 0 : _o.container_id
        };
        return entry;
      }
      if (((_p = item.providerData) == null ? void 0 : _p.type) === "image_generation_call" || ((_q = item.providerData) == null ? void 0 : _q.type) === "image_generation") {
        const entry = {
          ...camelOrSnakeToSnakeCase(item.providerData),
          // place here to prioritize the below fields
          type: "image_generation_call",
          id: item.id,
          result: ((_r = item.providerData) == null ? void 0 : _r.result) ?? null,
          status: ImageGenerationStatus.parse(item.status ?? "failed")
        };
        return entry;
      }
      if (((_s = item.providerData) == null ? void 0 : _s.type) === "mcp_list_tools" || item.name === "mcp_list_tools") {
        const providerData = item.providerData;
        const entry = {
          ...camelOrSnakeToSnakeCase(item.providerData),
          type: "mcp_list_tools",
          id: item.id,
          tools: camelOrSnakeToSnakeCase(providerData.tools),
          server_label: providerData.server_label,
          error: providerData.error
        };
        return entry;
      } else if (((_t = item.providerData) == null ? void 0 : _t.type) === "mcp_approval_request" || item.name === "mcp_approval_request") {
        const providerData = item.providerData;
        const entry = {
          ...camelOrSnakeToSnakeCase(item.providerData),
          // place here to prioritize the below fields
          type: "mcp_approval_request",
          id: providerData.id ?? item.id,
          name: providerData.name,
          arguments: providerData.arguments,
          server_label: providerData.server_label
        };
        return entry;
      } else if (((_u = item.providerData) == null ? void 0 : _u.type) === "mcp_approval_response" || item.name === "mcp_approval_response") {
        const providerData = item.providerData;
        const entry = {
          ...camelOrSnakeToSnakeCase(providerData),
          type: "mcp_approval_response",
          id: providerData.id,
          approve: providerData.approve,
          approval_request_id: providerData.approval_request_id,
          reason: providerData.reason
        };
        return entry;
      } else if (((_v = item.providerData) == null ? void 0 : _v.type) === "mcp_call" || item.name === "mcp_call") {
        const providerData = item.providerData;
        const entry = {
          // output, which can be a large text string, is optional here, so we don't include it
          // output: item.output,
          ...camelOrSnakeToSnakeCase(providerData),
          // place here to prioritize the below fields
          type: "mcp_call",
          id: providerData.id ?? item.id,
          name: providerData.name,
          arguments: providerData.arguments,
          server_label: providerData.server_label,
          error: providerData.error
        };
        return entry;
      }
      throw new UserError(`Unsupported built-in tool call type: ${JSON.stringify(item)}`);
    }
    if (item.type === "unknown") {
      return {
        ...camelOrSnakeToSnakeCase(item.providerData),
        // place here to prioritize the below fields
        id: item.id
      };
    }
    const exhaustive = item;
    throw new UserError(`Unsupported item ${JSON.stringify(exhaustive)}`);
  });
}
function buildResponseOutput(item) {
  return {
    type: "computer_screenshot",
    image_url: item.output.data
  };
}
function convertToMessageContentItem(item) {
  if (item.type === "output_text") {
    const { type, text, ...remainingItem } = item;
    return {
      type,
      text,
      ...remainingItem
    };
  }
  if (item.type === "refusal") {
    const { type, refusal, ...remainingItem } = item;
    return {
      type,
      refusal,
      ...remainingItem
    };
  }
  throw new Error(`Unsupported message content type: ${JSON.stringify(item)}`);
}
function convertToOutputItem(items) {
  return items.map((item) => {
    if (item.type === "message") {
      const { id, type, role, content, status, ...providerData } = item;
      return {
        id,
        type,
        role,
        content: content.map(convertToMessageContentItem),
        status,
        providerData
      };
    } else if (item.type === "file_search_call" || item.type === "web_search_call" || item.type === "image_generation_call" || item.type === "code_interpreter_call") {
      const { status, ...remainingItem } = item;
      let outputData = void 0;
      if ("result" in remainingItem && remainingItem.result !== null) {
        outputData = remainingItem.result;
        delete remainingItem.result;
      }
      const output = {
        type: "hosted_tool_call",
        id: item.id,
        name: item.type,
        status,
        output: outputData,
        providerData: remainingItem
      };
      return output;
    } else if (item.type === "function_call") {
      const { call_id, name, status, arguments: args, ...providerData } = item;
      const output = {
        type: "function_call",
        id: item.id,
        callId: call_id,
        name,
        status,
        arguments: args,
        providerData
      };
      return output;
    } else if (item.type === "computer_call") {
      const { call_id, status, action, ...providerData } = item;
      const output = {
        type: "computer_call",
        id: item.id,
        callId: call_id,
        status,
        action,
        providerData
      };
      return output;
    } else if (item.type === "mcp_list_tools") {
      const { ...providerData } = item;
      const output = {
        type: "hosted_tool_call",
        id: item.id,
        name: item.type,
        status: "completed",
        output: void 0,
        providerData
      };
      return output;
    } else if (item.type === "mcp_approval_request") {
      const { ...providerData } = item;
      const output = {
        type: "hosted_tool_call",
        id: item.id,
        name: "mcp_approval_request",
        status: "completed",
        output: void 0,
        providerData
      };
      return output;
    } else if (item.type === "mcp_call") {
      const { output: outputData, ...providerData } = item;
      const output = {
        type: "hosted_tool_call",
        id: item.id,
        name: item.type,
        status: "completed",
        output: outputData || void 0,
        providerData
      };
      return output;
    } else if (item.type === "reasoning") {
      const { summary, ...providerData } = item;
      const output = {
        type: "reasoning",
        id: item.id,
        content: summary.map((content) => {
          const { text, ...remainingContent } = content;
          return {
            type: "input_text",
            text,
            providerData: remainingContent
          };
        }),
        providerData
      };
      return output;
    }
    return {
      type: "unknown",
      providerData: item
    };
  });
}
var _client, _model, _OpenAIResponsesModel_instances, fetchResponse_fn;
var OpenAIResponsesModel = class {
  constructor(client, model) {
    __privateAdd(this, _OpenAIResponsesModel_instances);
    __privateAdd(this, _client);
    __privateAdd(this, _model);
    __privateSet(this, _client, client);
    __privateSet(this, _model, model);
  }
  /**
   * Get a response from the OpenAI model using the Responses API.
   * @param request - The request to send to the model.
   * @returns A promise that resolves to the response from the model.
   */
  async getResponse(request) {
    var _a, _b, _c, _d, _e;
    const response = await withResponseSpan(async (span) => {
      const response2 = await __privateMethod(this, _OpenAIResponsesModel_instances, fetchResponse_fn).call(this, request, false);
      if (request.tracing) {
        span.spanData.response_id = response2.id;
        span.spanData._input = request.input;
        span.spanData._response = response2;
      }
      return response2;
    });
    const output = {
      usage: new Usage({
        inputTokens: ((_a = response.usage) == null ? void 0 : _a.input_tokens) ?? 0,
        outputTokens: ((_b = response.usage) == null ? void 0 : _b.output_tokens) ?? 0,
        totalTokens: ((_c = response.usage) == null ? void 0 : _c.total_tokens) ?? 0,
        inputTokensDetails: { ...(_d = response.usage) == null ? void 0 : _d.input_tokens_details },
        outputTokensDetails: { ...(_e = response.usage) == null ? void 0 : _e.output_tokens_details }
      }),
      output: convertToOutputItem(response.output),
      responseId: response.id,
      providerData: response
    };
    return output;
  }
  /**
   * Get a streamed response from the OpenAI model using the Responses API.
   * @param request - The request to send to the model.
   * @returns An async iterable of the response from the model.
   */
  async *getStreamedResponse(request) {
    const span = request.tracing ? createResponseSpan() : void 0;
    try {
      if (span) {
        span.start();
        setCurrentSpan(span);
        if (request.tracing === true) {
          span.spanData._input = request.input;
        }
      }
      const response = await __privateMethod(this, _OpenAIResponsesModel_instances, fetchResponse_fn).call(this, request, true);
      let finalResponse;
      for await (const event of response) {
        if (event.type === "response.created") {
          yield {
            type: "response_started",
            providerData: {
              ...event
            }
          };
        } else if (event.type === "response.completed") {
          finalResponse = event.response;
          const { response: response2, ...remainingEvent } = event;
          const { output, usage, id, ...remainingResponse } = response2;
          yield {
            type: "response_done",
            response: {
              id,
              output: convertToOutputItem(output),
              usage: {
                inputTokens: (usage == null ? void 0 : usage.input_tokens) ?? 0,
                outputTokens: (usage == null ? void 0 : usage.output_tokens) ?? 0,
                totalTokens: (usage == null ? void 0 : usage.total_tokens) ?? 0,
                inputTokensDetails: {
                  ...usage == null ? void 0 : usage.input_tokens_details
                },
                outputTokensDetails: {
                  ...usage == null ? void 0 : usage.output_tokens_details
                }
              },
              providerData: remainingResponse
            },
            providerData: remainingEvent
          };
          yield {
            type: "model",
            event
          };
        } else if (event.type === "response.output_text.delta") {
          const { delta, ...remainingEvent } = event;
          yield {
            type: "output_text_delta",
            delta,
            providerData: remainingEvent
          };
        }
        yield {
          type: "model",
          event
        };
      }
      if (request.tracing && span && finalResponse) {
        span.spanData.response_id = finalResponse.id;
        span.spanData._response = finalResponse;
      }
    } catch (error40) {
      if (span) {
        span.setError({
          message: "Error streaming response",
          data: {
            error: request.tracing ? String(error40) : error40 instanceof Error ? error40.name : void 0
          }
        });
      }
      throw error40;
    } finally {
      if (span) {
        span.end();
        resetCurrentSpan();
      }
    }
  }
};
_client = new WeakMap();
_model = new WeakMap();
_OpenAIResponsesModel_instances = new WeakSet();
fetchResponse_fn = async function(request, stream) {
  const input = getInputItems(request.input);
  const { tools, include } = getTools(request.tools, request.handoffs);
  const toolChoice = getToolChoice(request.modelSettings.toolChoice);
  const { text, ...restOfProviderData } = request.modelSettings.providerData ?? {};
  if (request.modelSettings.reasoning) {
    restOfProviderData.reasoning = {
      ...request.modelSettings.reasoning,
      ...restOfProviderData.reasoning
    };
  }
  let mergedText = text;
  if (request.modelSettings.text) {
    mergedText = { ...request.modelSettings.text, ...text };
  }
  const responseFormat = getResponseFormat(request.outputType, mergedText);
  const prompt = getPrompt(request.prompt);
  let parallelToolCalls = void 0;
  if (typeof request.modelSettings.parallelToolCalls === "boolean") {
    if (request.modelSettings.parallelToolCalls && tools.length === 0) {
      throw new Error("Parallel tool calls are not supported without tools");
    }
    parallelToolCalls = request.modelSettings.parallelToolCalls;
  }
  const shouldSendModel = !request.prompt || request.overridePromptModel === true;
  const requestData = {
    ...shouldSendModel ? { model: __privateGet(this, _model) } : {},
    instructions: normalizeInstructions(request.systemInstructions),
    input,
    include,
    tools,
    previous_response_id: request.previousResponseId,
    conversation: request.conversationId,
    prompt,
    temperature: request.modelSettings.temperature,
    top_p: request.modelSettings.topP,
    truncation: request.modelSettings.truncation,
    max_output_tokens: request.modelSettings.maxTokens,
    tool_choice: toolChoice,
    parallel_tool_calls: parallelToolCalls,
    stream,
    text: responseFormat,
    store: request.modelSettings.store,
    ...restOfProviderData
  };
  if (logger_default2.dontLogModelData) {
    logger_default2.debug("Calling LLM");
  } else {
    logger_default2.debug(`Calling LLM. Request data: ${JSON.stringify(requestData, null, 2)}`);
  }
  const response = await __privateGet(this, _client).responses.create(requestData, {
    headers: HEADERS,
    signal: request.signal
  });
  if (logger_default2.dontLogModelData) {
    logger_default2.debug("Response received");
  } else {
    logger_default2.debug(`Response received: ${JSON.stringify(response, null, 2)}`);
  }
  return response;
};
function normalizeInstructions(instructions) {
  if (typeof instructions === "string") {
    if (instructions.trim() === "") {
      return void 0;
    }
    return instructions;
  }
  return void 0;
}

// node_modules/@openai/agents-openai/dist/openaiChatCompletionsStreaming.mjs
async function* convertChatCompletionsStreamToResponses(response, stream) {
  var _a, _b, _c, _d;
  let usage = void 0;
  const state = {
    started: false,
    text_content_index_and_output: null,
    refusal_content_index_and_output: null,
    function_calls: {},
    reasoning: ""
  };
  for await (const chunk of stream) {
    if (!state.started) {
      state.started = true;
      yield {
        type: "response_started",
        providerData: {
          ...chunk
        }
      };
    }
    yield {
      type: "model",
      event: chunk
    };
    usage = chunk.usage || void 0;
    if (!((_b = (_a = chunk.choices) == null ? void 0 : _a[0]) == null ? void 0 : _b.delta))
      continue;
    const delta = chunk.choices[0].delta;
    if (delta.content) {
      if (!state.text_content_index_and_output) {
        state.text_content_index_and_output = [
          !state.refusal_content_index_and_output ? 0 : 1,
          { text: "", type: "output_text", providerData: { annotations: [] } }
        ];
      }
      yield {
        type: "output_text_delta",
        delta: delta.content,
        providerData: {
          ...chunk
        }
      };
      state.text_content_index_and_output[1].text += delta.content;
    }
    if ("reasoning" in delta && delta.reasoning && typeof delta.reasoning === "string") {
      state.reasoning += delta.reasoning;
    }
    if ("refusal" in delta && delta.refusal) {
      if (!state.refusal_content_index_and_output) {
        state.refusal_content_index_and_output = [
          !state.text_content_index_and_output ? 0 : 1,
          { refusal: "", type: "refusal" }
        ];
      }
      state.refusal_content_index_and_output[1].refusal += delta.refusal;
    }
    if (delta.tool_calls) {
      for (const tc_delta of delta.tool_calls) {
        if (!(tc_delta.index in state.function_calls)) {
          state.function_calls[tc_delta.index] = {
            id: FAKE_ID,
            arguments: "",
            name: "",
            type: "function_call",
            callId: ""
          };
        }
        const tc_function = tc_delta.function;
        state.function_calls[tc_delta.index].arguments += (tc_function == null ? void 0 : tc_function.arguments) || "";
        state.function_calls[tc_delta.index].name += (tc_function == null ? void 0 : tc_function.name) || "";
        state.function_calls[tc_delta.index].callId += tc_delta.id || "";
      }
    }
  }
  const outputs = [];
  if (state.reasoning) {
    outputs.push({
      type: "reasoning",
      content: [],
      rawContent: [{ type: "reasoning_text", text: state.reasoning }]
    });
  }
  if (state.text_content_index_and_output || state.refusal_content_index_and_output) {
    const assistant_msg = {
      id: FAKE_ID,
      content: [],
      role: "assistant",
      type: "message",
      status: "completed"
    };
    if (state.text_content_index_and_output) {
      assistant_msg.content.push(state.text_content_index_and_output[1]);
    }
    if (state.refusal_content_index_and_output) {
      assistant_msg.content.push(state.refusal_content_index_and_output[1]);
    }
    outputs.push(assistant_msg);
  }
  for (const function_call of Object.values(state.function_calls)) {
    outputs.push(function_call);
  }
  const finalEvent = {
    type: "response_done",
    response: {
      id: response.id,
      usage: {
        inputTokens: (usage == null ? void 0 : usage.prompt_tokens) ?? 0,
        outputTokens: (usage == null ? void 0 : usage.completion_tokens) ?? 0,
        totalTokens: (usage == null ? void 0 : usage.total_tokens) ?? 0,
        inputTokensDetails: {
          cached_tokens: ((_c = usage == null ? void 0 : usage.prompt_tokens_details) == null ? void 0 : _c.cached_tokens) ?? 0
        },
        outputTokensDetails: {
          reasoning_tokens: ((_d = usage == null ? void 0 : usage.completion_tokens_details) == null ? void 0 : _d.reasoning_tokens) ?? 0
        }
      },
      output: outputs
    }
  };
  yield finalEvent;
}

// node_modules/@openai/agents-openai/dist/openaiChatCompletionsConverter.mjs
function convertToolChoice(toolChoice) {
  if (toolChoice == void 0 || toolChoice == null)
    return void 0;
  if (toolChoice === "auto" || toolChoice === "required" || toolChoice === "none")
    return toolChoice;
  return {
    type: "function",
    function: { name: toolChoice }
  };
}
function extractAllAssistantContent(content) {
  if (typeof content === "string") {
    return content;
  }
  const out = [];
  for (const c of content) {
    if (c.type === "output_text") {
      out.push({
        type: "text",
        text: c.text,
        ...c.providerData
      });
    } else if (c.type === "refusal") {
      out.push({
        type: "refusal",
        refusal: c.refusal,
        ...c.providerData
      });
    } else if (c.type === "audio" || c.type === "image") {
      continue;
    } else {
      const exhaustive = c;
      throw new Error(`Unknown content: ${JSON.stringify(exhaustive)}`);
    }
  }
  return out;
}
function extractAllUserContent(content) {
  if (typeof content === "string") {
    return content;
  }
  const out = [];
  for (const c of content) {
    if (c.type === "input_text") {
      out.push({ type: "text", text: c.text, ...c.providerData });
    } else if (c.type === "input_image") {
      const imageSource = typeof c.image === "string" ? c.image : typeof c.imageUrl === "string" ? c.imageUrl : void 0;
      if (!imageSource) {
        throw new Error(`Only image URLs are supported for input_image: ${JSON.stringify(c)}`);
      }
      const { image_url, ...rest } = c.providerData || {};
      out.push({
        type: "image_url",
        image_url: {
          url: imageSource,
          ...image_url
        },
        ...rest
      });
    } else if (c.type === "input_file") {
      throw new Error(`File uploads are not supported for chat completions: ${JSON.stringify(c)}`);
    } else if (c.type === "audio") {
      const { input_audio, ...rest } = c.providerData || {};
      out.push({
        type: "input_audio",
        input_audio: {
          data: c.audio,
          ...input_audio
        },
        ...rest
      });
    } else {
      const exhaustive = c;
      throw new Error(`Unknown content: ${JSON.stringify(exhaustive)}`);
    }
  }
  return out;
}
function isMessageItem2(item) {
  if (item.type === "message") {
    return true;
  }
  if (typeof item.type === "undefined" && typeof item.role === "string") {
    return true;
  }
  return false;
}
function itemsToMessages(items) {
  var _a, _b, _c;
  if (typeof items === "string") {
    return [{ role: "user", content: items }];
  }
  const result = [];
  let currentAssistantMsg = null;
  const flushAssistantMessage = () => {
    if (currentAssistantMsg) {
      if (!currentAssistantMsg.tool_calls || currentAssistantMsg.tool_calls.length === 0) {
        delete currentAssistantMsg.tool_calls;
      }
      result.push(currentAssistantMsg);
      currentAssistantMsg = null;
    }
  };
  const ensureAssistantMessage = () => {
    if (!currentAssistantMsg) {
      currentAssistantMsg = { role: "assistant", tool_calls: [] };
    }
    return currentAssistantMsg;
  };
  for (const item of items) {
    if (isMessageItem2(item)) {
      const { content, role, providerData } = item;
      flushAssistantMessage();
      if (role === "assistant") {
        const assistant2 = {
          role: "assistant",
          content: extractAllAssistantContent(content),
          ...providerData
        };
        if (Array.isArray(content)) {
          const audio = content.find((c) => c.type === "audio");
          if (audio) {
            assistant2.audio = {
              id: "",
              // setting this to empty ID and expecting that the user sets providerData.id
              ...audio.providerData
            };
          }
        }
        result.push(assistant2);
      } else if (role === "user") {
        result.push({
          role,
          content: extractAllUserContent(content),
          ...providerData
        });
      } else if (role === "system") {
        result.push({
          role: "system",
          content,
          ...providerData
        });
      }
    } else if (item.type === "reasoning") {
      const asst = ensureAssistantMessage();
      asst.reasoning = (_b = (_a = item.rawContent) == null ? void 0 : _a[0]) == null ? void 0 : _b.text;
      continue;
    } else if (item.type === "hosted_tool_call") {
      if (item.name === "file_search_call") {
        const asst = ensureAssistantMessage();
        const toolCalls = asst.tool_calls ?? [];
        const fileSearch = item;
        const { function: functionData, ...rest } = fileSearch.providerData ?? {};
        const { arguments: argumentData, ...remainingFunctionData } = functionData ?? {};
        toolCalls.push({
          id: fileSearch.id || "",
          type: "function",
          function: {
            name: "file_search_call",
            arguments: JSON.stringify({
              queries: ((_c = fileSearch.providerData) == null ? void 0 : _c.queries) ?? [],
              status: fileSearch.status,
              ...argumentData
            }),
            ...remainingFunctionData
          },
          ...rest
        });
        asst.tool_calls = toolCalls;
        continue;
      } else {
        throw new UserError("Hosted tool calls are not supported for chat completions. Got item: " + JSON.stringify(item));
      }
    } else if (item.type === "computer_call" || item.type === "computer_call_result") {
      throw new UserError("Computer use calls are not supported for chat completions. Got item: " + JSON.stringify(item));
    } else if (item.type === "function_call") {
      const asst = ensureAssistantMessage();
      const toolCalls = asst.tool_calls ?? [];
      const funcCall = item;
      toolCalls.push({
        id: funcCall.callId,
        type: "function",
        function: {
          name: funcCall.name,
          arguments: funcCall.arguments ?? "{}"
        }
      });
      asst.tool_calls = toolCalls;
    } else if (item.type === "function_call_result") {
      flushAssistantMessage();
      const funcOutput = item;
      const toolContent = normalizeFunctionCallOutputForChat(funcOutput.output);
      result.push({
        role: "tool",
        tool_call_id: funcOutput.callId,
        content: toolContent,
        ...funcOutput.providerData
      });
    } else if (item.type === "unknown") {
      result.push({
        ...item.providerData
      });
    } else {
      const exhaustive = item;
      throw new Error(`Unknown item type: ${JSON.stringify(exhaustive)}`);
    }
  }
  flushAssistantMessage();
  return result;
}
function normalizeFunctionCallOutputForChat(output) {
  if (typeof output === "string") {
    return output;
  }
  if (Array.isArray(output)) {
    const textOnly = output.every((item) => item.type === "input_text");
    if (!textOnly) {
      throw new UserError("Only text tool outputs are supported for chat completions.");
    }
    return output.map((item) => item.text).join("");
  }
  if (isRecord3(output) && output.type === "text" && typeof output.text === "string") {
    return output.text;
  }
  throw new UserError("Only text tool outputs are supported for chat completions. Got item: " + JSON.stringify(output));
}
function isRecord3(value) {
  return typeof value === "object" && value !== null;
}
function toolToOpenAI(tool2) {
  if (tool2.type === "function") {
    return {
      type: "function",
      function: {
        name: tool2.name,
        description: tool2.description || "",
        parameters: tool2.parameters,
        strict: tool2.strict
      }
    };
  }
  throw new Error(`Hosted tools are not supported with the ChatCompletions API. Got tool type: ${tool2.type}, tool: ${JSON.stringify(tool2)}`);
}
function convertHandoffTool(handoff2) {
  return {
    type: "function",
    function: {
      name: handoff2.toolName,
      description: handoff2.toolDescription || "",
      parameters: handoff2.inputJsonSchema
    }
  };
}

// node_modules/@openai/agents-openai/dist/openaiChatCompletionsModel.mjs
var FAKE_ID = "FAKE_ID";
function hasReasoningContent(message) {
  return "reasoning" in message && typeof message.reasoning === "string" && message.reasoning !== "";
}
var _client2, _model2, _OpenAIChatCompletionsModel_instances, fetchResponse_fn2;
var OpenAIChatCompletionsModel = class {
  constructor(client, model) {
    __privateAdd(this, _OpenAIChatCompletionsModel_instances);
    __privateAdd(this, _client2);
    __privateAdd(this, _model2);
    __privateSet(this, _client2, client);
    __privateSet(this, _model2, model);
  }
  async getResponse(request) {
    const response = await withGenerationSpan(async (span) => {
      var _a, _b;
      span.spanData.model = __privateGet(this, _model2);
      span.spanData.model_config = request.modelSettings ? {
        temperature: request.modelSettings.temperature,
        top_p: request.modelSettings.topP,
        frequency_penalty: request.modelSettings.frequencyPenalty,
        presence_penalty: request.modelSettings.presencePenalty,
        reasoning_effort: (_a = request.modelSettings.reasoning) == null ? void 0 : _a.effort,
        verbosity: (_b = request.modelSettings.text) == null ? void 0 : _b.verbosity
      } : { base_url: __privateGet(this, _client2).baseURL };
      const response2 = await __privateMethod(this, _OpenAIChatCompletionsModel_instances, fetchResponse_fn2).call(this, request, span, false);
      if (span && request.tracing === true) {
        span.spanData.output = [response2];
      }
      return response2;
    });
    const output = [];
    if (response.choices && response.choices[0]) {
      const message = response.choices[0].message;
      if (hasReasoningContent(message)) {
        output.push({
          type: "reasoning",
          content: [],
          rawContent: [
            {
              type: "reasoning_text",
              text: message.reasoning
            }
          ]
        });
      }
      if (message.content !== void 0 && message.content !== null && // Azure OpenAI returns empty string instead of null for tool calls, causing parser rejection
      !(message.tool_calls && message.content === "")) {
        const { content, ...rest } = message;
        output.push({
          id: response.id,
          type: "message",
          role: "assistant",
          content: [
            {
              type: "output_text",
              text: content || "",
              providerData: rest
            }
          ],
          status: "completed"
        });
      } else if (message.refusal) {
        const { refusal, ...rest } = message;
        output.push({
          id: response.id,
          type: "message",
          role: "assistant",
          content: [
            {
              type: "refusal",
              refusal: refusal || "",
              providerData: rest
            }
          ],
          status: "completed"
        });
      } else if (message.audio) {
        const { data, ...remainingAudioData } = message.audio;
        output.push({
          id: response.id,
          type: "message",
          role: "assistant",
          content: [
            {
              type: "audio",
              audio: data,
              providerData: remainingAudioData
            }
          ],
          status: "completed"
        });
      } else if (message.tool_calls) {
        for (const tool_call of message.tool_calls) {
          if (tool_call.type === "function") {
            const { id: callId, ...remainingToolCallData } = tool_call;
            const { arguments: args, name, ...remainingFunctionData } = tool_call.function;
            output.push({
              id: response.id,
              type: "function_call",
              arguments: args,
              name,
              callId,
              status: "completed",
              providerData: {
                ...remainingToolCallData,
                ...remainingFunctionData
              }
            });
          }
        }
      }
    }
    const modelResponse = {
      usage: response.usage ? new Usage(toResponseUsage(response.usage)) : new Usage(),
      output,
      responseId: response.id,
      providerData: response
    };
    return modelResponse;
  }
  async *getStreamedResponse(request) {
    const span = request.tracing ? createGenerationSpan() : void 0;
    try {
      if (span) {
        span.start();
        setCurrentSpan(span);
      }
      const stream = await __privateMethod(this, _OpenAIChatCompletionsModel_instances, fetchResponse_fn2).call(this, request, span, true);
      const response = {
        id: FAKE_ID,
        created: Math.floor(Date.now() / 1e3),
        model: __privateGet(this, _model2),
        object: "chat.completion",
        choices: [],
        usage: {
          prompt_tokens: 0,
          completion_tokens: 0,
          total_tokens: 0
        }
      };
      for await (const event of convertChatCompletionsStreamToResponses(response, stream)) {
        yield event;
      }
      if (span && response && request.tracing === true) {
        span.spanData.output = [response];
      }
    } catch (error40) {
      if (span) {
        span.setError({
          message: "Error streaming response",
          data: {
            error: request.tracing === true ? String(error40) : error40 instanceof Error ? error40.name : void 0
          }
        });
      }
      throw error40;
    } finally {
      if (span) {
        span.end();
        resetCurrentSpan();
      }
    }
  }
};
_client2 = new WeakMap();
_model2 = new WeakMap();
_OpenAIChatCompletionsModel_instances = new WeakSet();
fetchResponse_fn2 = async function(request, span, stream) {
  const tools = [];
  if (request.tools) {
    for (const tool2 of request.tools) {
      tools.push(toolToOpenAI(tool2));
    }
  }
  if (request.handoffs) {
    for (const handoff2 of request.handoffs) {
      tools.push(convertHandoffTool(handoff2));
    }
  }
  const responseFormat = getResponseFormat2(request.outputType);
  let parallelToolCalls = void 0;
  if (typeof request.modelSettings.parallelToolCalls === "boolean") {
    if (request.modelSettings.parallelToolCalls && tools.length === 0) {
      throw new Error("Parallel tool calls are not supported without tools");
    }
    parallelToolCalls = request.modelSettings.parallelToolCalls;
  }
  const messages = itemsToMessages(request.input);
  if (request.systemInstructions) {
    messages.unshift({
      content: request.systemInstructions,
      role: "system"
    });
  }
  if (span && request.tracing === true) {
    span.spanData.input = messages;
  }
  const providerData = request.modelSettings.providerData ?? {};
  if (request.modelSettings.reasoning && request.modelSettings.reasoning.effort) {
    providerData.reasoning_effort = request.modelSettings.reasoning.effort;
  }
  if (request.modelSettings.text && request.modelSettings.text.verbosity) {
    providerData.verbosity = request.modelSettings.text.verbosity;
  }
  const requestData = {
    model: __privateGet(this, _model2),
    messages,
    tools: tools.length ? tools : void 0,
    temperature: request.modelSettings.temperature,
    top_p: request.modelSettings.topP,
    frequency_penalty: request.modelSettings.frequencyPenalty,
    presence_penalty: request.modelSettings.presencePenalty,
    max_tokens: request.modelSettings.maxTokens,
    tool_choice: convertToolChoice(request.modelSettings.toolChoice),
    response_format: responseFormat,
    parallel_tool_calls: parallelToolCalls,
    stream,
    store: request.modelSettings.store,
    ...providerData
  };
  if (logger_default2.dontLogModelData) {
    logger_default2.debug("Calling LLM");
  } else {
    logger_default2.debug(`Calling LLM. Request data: ${JSON.stringify(requestData, null, 2)}`);
  }
  const completion = await __privateGet(this, _client2).chat.completions.create(requestData, {
    headers: HEADERS,
    signal: request.signal
  });
  if (logger_default2.dontLogModelData) {
    logger_default2.debug("Response received");
  } else {
    logger_default2.debug(`Response received: ${JSON.stringify(completion, null, 2)}`);
  }
  return completion;
};
function getResponseFormat2(outputType) {
  if (outputType === "text") {
    return { type: "text" };
  }
  if (outputType.type === "json_schema") {
    return {
      type: "json_schema",
      json_schema: {
        name: outputType.name,
        strict: outputType.strict,
        schema: outputType.schema
      }
    };
  }
  return { type: "json_object" };
}
function toResponseUsage(usage) {
  var _a, _b;
  return {
    requests: 1,
    input_tokens: usage.prompt_tokens,
    output_tokens: usage.completion_tokens,
    total_tokens: usage.total_tokens,
    input_tokens_details: {
      cached_tokens: ((_a = usage.prompt_tokens_details) == null ? void 0 : _a.cached_tokens) || 0
    },
    output_tokens_details: {
      reasoning_tokens: ((_b = usage.completion_tokens_details) == null ? void 0 : _b.reasoning_tokens) || 0
    }
  };
}

// node_modules/@openai/agents-openai/dist/openaiProvider.mjs
var _client3, _useResponses, _options, _OpenAIProvider_instances, getClient_fn;
var OpenAIProvider = class {
  constructor(options = {}) {
    __privateAdd(this, _OpenAIProvider_instances);
    __privateAdd(this, _client3);
    __privateAdd(this, _useResponses);
    __privateAdd(this, _options);
    __privateSet(this, _options, options);
    if (__privateGet(this, _options).openAIClient) {
      if (__privateGet(this, _options).apiKey) {
        throw new Error("Cannot provide both apiKey and openAIClient");
      }
      if (__privateGet(this, _options).baseURL) {
        throw new Error("Cannot provide both baseURL and openAIClient");
      }
      __privateSet(this, _client3, __privateGet(this, _options).openAIClient);
    }
    __privateSet(this, _useResponses, __privateGet(this, _options).useResponses);
  }
  async getModel(modelName) {
    const model = modelName || getDefaultModel();
    const useResponses = __privateGet(this, _useResponses) ?? shouldUseResponsesByDefault();
    if (useResponses) {
      return new OpenAIResponsesModel(__privateMethod(this, _OpenAIProvider_instances, getClient_fn).call(this), model);
    }
    return new OpenAIChatCompletionsModel(__privateMethod(this, _OpenAIProvider_instances, getClient_fn).call(this), model);
  }
};
_client3 = new WeakMap();
_useResponses = new WeakMap();
_options = new WeakMap();
_OpenAIProvider_instances = new WeakSet();
/**
 * Lazy loads the OpenAI client to not throw an error if you don't have an API key set but
 * never actually use the client.
 */
getClient_fn = function() {
  if (!__privateGet(this, _client3)) {
    __privateSet(
      this,
      _client3,
      // this provider checks if there is the default client first,
      getDefaultOpenAIClient() ?? // and then manually creates a new one.
      new OpenAI({
        apiKey: __privateGet(this, _options).apiKey ?? getDefaultOpenAIKey(),
        baseURL: __privateGet(this, _options).baseURL,
        organization: __privateGet(this, _options).organization,
        project: __privateGet(this, _options).project
      })
    );
  }
  return __privateGet(this, _client3);
};

// node_modules/@openai/agents-openai/dist/openaiTracingExporter.mjs
var _options2;
var OpenAITracingExporter = class {
  constructor(options = {}) {
    __privateAdd(this, _options2);
    __privateSet(this, _options2, {
      apiKey: options.apiKey ?? void 0,
      organization: options.organization ?? "",
      project: options.project ?? "",
      endpoint: options.endpoint ?? "https://api.openai.com/v1/traces/ingest",
      maxRetries: options.maxRetries ?? 3,
      baseDelay: options.baseDelay ?? 1e3,
      maxDelay: options.maxDelay ?? 3e4
    });
  }
  async export(items, signal) {
    const apiKey = __privateGet(this, _options2).apiKey ?? getTracingExportApiKey();
    if (!apiKey) {
      logger_default2.error("No API key provided for OpenAI tracing exporter. Exports will be skipped");
      return;
    }
    const payload = {
      data: items.map((items2) => items2.toJSON()).filter((item) => !!item)
    };
    let attempts = 0;
    let delay = __privateGet(this, _options2).baseDelay;
    while (attempts < __privateGet(this, _options2).maxRetries) {
      try {
        const response = await fetch(__privateGet(this, _options2).endpoint, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${apiKey}`,
            "OpenAI-Beta": "traces=v1",
            ...HEADERS
          },
          body: JSON.stringify(payload),
          signal
        });
        if (response.ok) {
          logger_default2.debug(`Exported ${payload.data.length} items`);
          return;
        }
        if (response.status >= 400 && response.status < 500) {
          logger_default2.error(`[non-fatal] Tracing client error ${response.status}: ${await response.text()}`);
          return;
        }
        logger_default2.warn(`[non-fatal] Tracing: server error ${response.status}, retrying.`);
      } catch (error40) {
        logger_default2.error("[non-fatal] Tracing: request failed: ", error40);
      }
      if (signal == null ? void 0 : signal.aborted) {
        logger_default2.error("Tracing: request aborted");
        return;
      }
      const sleepTime = delay + Math.random() * 0.1 * delay;
      await new Promise((resolve) => setTimeout(resolve, sleepTime));
      delay = Math.min(delay * 2, __privateGet(this, _options2).maxDelay);
      attempts++;
    }
    logger_default2.error(`Tracing: failed to export traces after ${__privateGet(this, _options2).maxRetries} attempts`);
  }
};
_options2 = new WeakMap();
function setDefaultOpenAITracingExporter() {
  const exporter = new OpenAITracingExporter();
  const processor = new BatchTraceProcessor(exporter);
  setTraceProcessors([processor]);
}

// node_modules/@openai/agents-realtime/dist/index.mjs
var dist_exports = {};
__export(dist_exports, {
  DEFAULT_OPENAI_REALTIME_MODEL: () => DEFAULT_OPENAI_REALTIME_MODEL,
  DEFAULT_OPENAI_REALTIME_SESSION_CONFIG: () => DEFAULT_OPENAI_REALTIME_SESSION_CONFIG,
  ModelBehaviorError: () => ModelBehaviorError,
  OpenAIRealtimeBase: () => OpenAIRealtimeBase,
  OpenAIRealtimeWebRTC: () => OpenAIRealtimeWebRTC,
  OpenAIRealtimeWebSocket: () => OpenAIRealtimeWebSocket,
  OutputGuardrailTripwireTriggered: () => OutputGuardrailTripwireTriggered,
  RealtimeAgent: () => RealtimeAgent,
  RealtimeSession: () => RealtimeSession,
  UserError: () => UserError,
  backgroundResult: () => backgroundResult,
  isBackgroundResult: () => isBackgroundResult,
  tool: () => tool,
  utils: () => utils
});

// node_modules/@openai/agents-realtime/dist/metadata.mjs
var METADATA2 = {
  "name": "@openai/agents-realtime",
  "version": "0.2.1",
  "versions": {
    "@openai/agents-realtime": "0.2.1",
    "@openai/agents-core": "workspace:*"
  }
};
var metadata_default2 = METADATA2;

// node_modules/@openai/agents-realtime/dist/utils.mjs
function base64ToArrayBuffer(base643) {
  const binaryString = atob(base643);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes.buffer;
}
function arrayBufferToBase64(arrayBuffer) {
  const binaryString = String.fromCharCode(...new Uint8Array(arrayBuffer));
  return btoa(binaryString);
}
function getLastTextFromAudioOutputMessage(item) {
  if (typeof item === "undefined" || item === null || typeof item !== "object" || !("type" in item) || typeof item.type !== "string" || !item.type) {
    return void 0;
  }
  if (item.type !== "message") {
    return void 0;
  }
  if (!("content" in item) || !Array.isArray(item.content) || item.content.length < 1) {
    return void 0;
  }
  const lastContentItem = item.content[item.content.length - 1];
  if (!("type" in lastContentItem) || typeof lastContentItem.type !== "string") {
    return void 0;
  }
  if (lastContentItem.type === "output_text") {
    return typeof lastContentItem.text === "string" ? lastContentItem.text : void 0;
  }
  if (lastContentItem.type === "output_audio") {
    return typeof lastContentItem.transcript === "string" ? lastContentItem.transcript : void 0;
  }
  return void 0;
}
function diffRealtimeHistory(oldHistory, newHistory) {
  const removals = oldHistory.filter((item) => !newHistory.some((newItem) => newItem.itemId === item.itemId));
  const additions = newHistory.filter((item) => !oldHistory.some((oldItem) => oldItem.itemId === item.itemId));
  const updates = newHistory.filter((item) => oldHistory.some((oldItem) => oldItem.itemId === item.itemId && JSON.stringify(oldItem) !== JSON.stringify(item)));
  return {
    removals,
    additions,
    updates
  };
}
function hasWebRTCSupport() {
  if (typeof window === "undefined") {
    return false;
  }
  return typeof window["RTCPeerConnection"] !== "undefined";
}
function removeAudioFromContent(item) {
  if (item.role === "system") {
    return item;
  }
  if (item.role === "assistant") {
    return {
      ...item,
      content: item.content.map((entry) => {
        if (entry.type === "output_audio") {
          return {
            ...entry,
            audio: null
          };
        }
        return entry;
      })
    };
  }
  if (item.role === "user") {
    return {
      ...item,
      content: item.content.map((entry) => {
        if (entry.type === "input_audio") {
          return {
            ...entry,
            audio: null
          };
        }
        return entry;
      })
    };
  }
  return item;
}
function updateRealtimeHistory(history, event, shouldIncludeAudioData) {
  if (event.type === "conversation.item.input_audio_transcription.completed") {
    return history.map((item) => {
      if (item.itemId === event.item_id && item.type === "message" && "role" in item && item.role === "user") {
        const updatedContent = item.content.map((entry) => {
          if (entry.type === "input_audio") {
            return {
              ...entry,
              transcript: event.transcript
            };
          }
          return entry;
        });
        return {
          ...item,
          content: updatedContent,
          status: "completed"
        };
      }
      return item;
    });
  }
  const newEvent = !shouldIncludeAudioData && event.type === "message" ? removeAudioFromContent(event) : event;
  const existingIndex = history.findIndex((item) => item.itemId === event.itemId);
  if (existingIndex !== -1) {
    return history.map((item, idx) => {
      if (idx === existingIndex) {
        return newEvent;
      }
      if (!shouldIncludeAudioData && item.type === "message") {
        return removeAudioFromContent(item);
      }
      return item;
    });
  } else if (event.previousItemId) {
    const prevIndex = history.findIndex((item) => item.itemId === event.previousItemId);
    if (prevIndex !== -1) {
      return [
        ...history.slice(0, prevIndex + 1),
        newEvent,
        ...history.slice(prevIndex + 1)
      ];
    } else {
      return [...history, newEvent];
    }
  } else {
    return [...history, newEvent];
  }
}
var HEADERS2 = {
  "User-Agent": `Agents/JavaScript ${metadata_default2.version}`,
  "X-OpenAI-Agents-SDK": `openai-agents-sdk.${metadata_default2.version}`
};
var WEBSOCKET_META = `openai-agents-sdk.${metadata_default2.version}`;
function realtimeApprovalItemToApprovalItem(agent, item) {
  const { name, arguments: args, ...rest } = item;
  return new RunToolApprovalItem({
    type: "hosted_tool_call",
    name,
    arguments: JSON.stringify(args),
    status: "in_progress",
    providerData: {
      ...rest
    }
  }, agent);
}
function approvalItemToRealtimeApprovalItem(item) {
  const { name, arguments: args, providerData } = item.rawItem;
  const { itemId, serverLabel, ...rest } = providerData ?? {};
  if (!itemId || !serverLabel) {
    throw new Error("Invalid approval item for Realtime MCP approval request");
  }
  return {
    type: "mcp_approval_request",
    itemId,
    serverLabel,
    ...rest,
    name,
    arguments: args ? JSON.parse(args) : {},
    approved: null
  };
}

// node_modules/@openai/agents-realtime/dist/realtimeAgent.mjs
var RealtimeAgent = class extends Agent {
  constructor(config2) {
    super(config2);
    /**
     * The voice intended to be used by the agent. If another agent already spoke during the
     * RealtimeSession, changing the voice during a handoff will fail.
     */
    __publicField(this, "voice");
    this.voice = config2.voice;
  }
};

// node_modules/@openai/agents-realtime/dist/guardrail.mjs
function getRealtimeGuardrailSettings(settings) {
  return {
    debounceTextLength: settings.debounceTextLength ?? 100
  };
}
function defineRealtimeOutputGuardrail({ policyHint: policyHintInput, ...options }) {
  const baseGuardrail = defineOutputGuardrail(options);
  const policyHint = policyHintInput ?? baseGuardrail.name;
  return {
    ...baseGuardrail,
    policyHint,
    run: async (args) => {
      const result = await baseGuardrail.run(args);
      return {
        ...result,
        guardrail: { ...result.guardrail, policyHint }
      };
    }
  };
}
function getRealtimeGuardrailFeedbackMessage(result) {
  return `
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${result.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(result.output.outputInfo ?? {})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim();
}

// node_modules/@openai/agents-realtime/dist/clientMessages.mjs
function isDefined(key, object2) {
  return key in object2 && typeof object2[key] !== "undefined";
}
function isDeprecatedConfig(config2) {
  return isDefined("modalities", config2) || isDefined("inputAudioFormat", config2) || isDefined("outputAudioFormat", config2) || isDefined("inputAudioTranscription", config2) || isDefined("turnDetection", config2) || isDefined("inputAudioNoiseReduction", config2) || isDefined("speed", config2);
}
function toNewSessionConfig(config2) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  if (!isDeprecatedConfig(config2)) {
    const inputConfig = ((_a = config2.audio) == null ? void 0 : _a.input) ? {
      format: normalizeAudioFormat(config2.audio.input.format),
      noiseReduction: config2.audio.input.noiseReduction ?? null,
      transcription: config2.audio.input.transcription,
      turnDetection: config2.audio.input.turnDetection
    } : void 0;
    const requestedOutputVoice = ((_c = (_b = config2.audio) == null ? void 0 : _b.output) == null ? void 0 : _c.voice) ?? config2.voice;
    const outputConfig = ((_d = config2.audio) == null ? void 0 : _d.output) || typeof requestedOutputVoice !== "undefined" ? {
      format: normalizeAudioFormat((_f = (_e = config2.audio) == null ? void 0 : _e.output) == null ? void 0 : _f.format),
      voice: requestedOutputVoice,
      speed: (_h = (_g = config2.audio) == null ? void 0 : _g.output) == null ? void 0 : _h.speed
    } : void 0;
    return {
      model: config2.model,
      instructions: config2.instructions,
      toolChoice: config2.toolChoice,
      tools: config2.tools,
      tracing: config2.tracing,
      providerData: config2.providerData,
      prompt: config2.prompt,
      outputModalities: config2.outputModalities,
      audio: inputConfig || outputConfig ? {
        input: inputConfig,
        output: outputConfig
      } : void 0
    };
  }
  return {
    model: config2.model,
    instructions: config2.instructions,
    toolChoice: config2.toolChoice,
    tools: config2.tools,
    tracing: config2.tracing,
    providerData: config2.providerData,
    prompt: config2.prompt,
    outputModalities: config2.modalities,
    audio: {
      input: {
        format: normalizeAudioFormat(config2.inputAudioFormat),
        noiseReduction: config2.inputAudioNoiseReduction ?? null,
        transcription: config2.inputAudioTranscription,
        turnDetection: config2.turnDetection
      },
      output: {
        format: normalizeAudioFormat(config2.outputAudioFormat),
        voice: config2.voice,
        speed: config2.speed
      }
    }
  };
}
function normalizeAudioFormat(format) {
  if (!format)
    return void 0;
  if (typeof format === "object")
    return format;
  const f = String(format);
  if (f === "pcm16")
    return { type: "audio/pcm", rate: 24e3 };
  if (f === "g711_ulaw")
    return { type: "audio/pcmu" };
  if (f === "g711_alaw")
    return { type: "audio/pcma" };
  return { type: "audio/pcm", rate: 24e3 };
}

// node_modules/@openai/agents-realtime/dist/items.mjs
var baseItemSchema = external_exports2.object({
  itemId: external_exports2.string()
});
var realtimeMessageItemSchema = external_exports2.discriminatedUnion("role", [
  external_exports2.object({
    itemId: external_exports2.string(),
    previousItemId: external_exports2.string().nullable().optional(),
    type: external_exports2.literal("message"),
    role: external_exports2.literal("system"),
    content: external_exports2.array(external_exports2.object({ type: external_exports2.literal("input_text"), text: external_exports2.string() }))
  }),
  external_exports2.object({
    itemId: external_exports2.string(),
    previousItemId: external_exports2.string().nullable().optional(),
    type: external_exports2.literal("message"),
    role: external_exports2.literal("user"),
    status: external_exports2.enum(["in_progress", "completed"]),
    content: external_exports2.array(external_exports2.object({ type: external_exports2.literal("input_text"), text: external_exports2.string() }).or(external_exports2.object({
      type: external_exports2.literal("input_audio"),
      audio: external_exports2.string().nullable().optional(),
      transcript: external_exports2.string().nullable()
    })))
  }),
  external_exports2.object({
    itemId: external_exports2.string(),
    previousItemId: external_exports2.string().nullable().optional(),
    type: external_exports2.literal("message"),
    role: external_exports2.literal("assistant"),
    status: external_exports2.enum(["in_progress", "completed", "incomplete"]),
    content: external_exports2.array(external_exports2.object({ type: external_exports2.literal("output_text"), text: external_exports2.string() }).or(external_exports2.object({
      type: external_exports2.literal("output_audio"),
      audio: external_exports2.string().nullable().optional(),
      transcript: external_exports2.string().nullable().optional()
    })))
  })
]);
var realtimeToolCallItem = external_exports2.object({
  itemId: external_exports2.string(),
  previousItemId: external_exports2.string().nullable().optional(),
  type: external_exports2.literal("function_call"),
  status: external_exports2.enum(["in_progress", "completed", "incomplete"]),
  arguments: external_exports2.string(),
  name: external_exports2.string(),
  output: external_exports2.string().nullable()
});
var realtimeMcpCallItem = external_exports2.object({
  itemId: external_exports2.string(),
  previousItemId: external_exports2.string().nullable().optional(),
  type: external_exports2.enum(["mcp_call", "mcp_tool_call"]),
  status: external_exports2.enum(["in_progress", "completed", "incomplete"]),
  arguments: external_exports2.string(),
  name: external_exports2.string(),
  output: external_exports2.string().nullable()
});
var realtimeMcpCallApprovalRequestItem = external_exports2.object({
  itemId: external_exports2.string(),
  type: external_exports2.literal("mcp_approval_request"),
  serverLabel: external_exports2.string(),
  name: external_exports2.string(),
  arguments: external_exports2.record(external_exports2.string(), external_exports2.any()),
  approved: external_exports2.boolean().optional().nullable()
});

// node_modules/@openai/agents-realtime/dist/logger.mjs
var logger3 = getLogger("openai-agents:realtime");
var logger_default3 = logger3;

// node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs
var realtimeResponse = external_exports2.object({
  id: external_exports2.string().optional().nullable(),
  conversation_id: external_exports2.string().optional().nullable(),
  max_output_tokens: external_exports2.number().or(external_exports2.literal("inf")).optional().nullable(),
  metadata: external_exports2.record(external_exports2.string(), external_exports2.any()).optional().nullable(),
  // GA rename: modalities -> output_modalities
  output_modalities: external_exports2.array(external_exports2.string()).optional().nullable(),
  object: external_exports2.literal("realtime.response").optional().nullable(),
  output: external_exports2.array(external_exports2.any()).optional().nullable(),
  // GA grouping: audio.output.{format,voice}
  audio: external_exports2.object({
    output: external_exports2.object({
      format: external_exports2.any().optional().nullable(),
      voice: external_exports2.string().optional().nullable()
    }).optional().nullable()
  }).optional().nullable(),
  status: external_exports2.enum(["completed", "incomplete", "failed", "cancelled", "in_progress"]).optional().nullable(),
  status_details: external_exports2.record(external_exports2.string(), external_exports2.any()).optional().nullable(),
  usage: external_exports2.object({
    input_tokens: external_exports2.number().optional(),
    input_token_details: external_exports2.record(external_exports2.string(), external_exports2.any()).optional().nullable(),
    output_tokens: external_exports2.number().optional(),
    output_token_details: external_exports2.record(external_exports2.string(), external_exports2.any()).optional().nullable()
  }).optional().nullable()
});
var conversationItemContentSchema = external_exports2.object({
  id: external_exports2.string().optional(),
  audio: external_exports2.string().nullable().optional(),
  text: external_exports2.string().nullable().optional(),
  transcript: external_exports2.string().nullable().optional(),
  type: external_exports2.union([
    external_exports2.literal("input_text"),
    external_exports2.literal("input_audio"),
    external_exports2.literal("item_reference"),
    external_exports2.literal("output_text"),
    external_exports2.literal("output_audio")
  ])
});
var conversationItemSchema = external_exports2.object({
  id: external_exports2.string().optional(),
  arguments: external_exports2.string().optional(),
  call_id: external_exports2.string().optional(),
  content: external_exports2.array(conversationItemContentSchema).optional(),
  name: external_exports2.string().optional(),
  output: external_exports2.string().nullable().optional(),
  role: external_exports2.enum(["user", "assistant", "system"]).optional(),
  status: external_exports2.enum(["completed", "incomplete", "in_progress"]).optional(),
  type: external_exports2.enum([
    "message",
    "function_call",
    "function_call_output",
    "mcp_list_tools",
    "mcp_tool_call",
    "mcp_call",
    "mcp_approval_request",
    "mcp_approval_response"
  ]).optional(),
  approval_request_id: external_exports2.string().nullable().optional(),
  approve: external_exports2.boolean().nullable().optional(),
  reason: external_exports2.string().nullable().optional(),
  server_label: external_exports2.string().optional(),
  error: external_exports2.any().nullable().optional(),
  tools: external_exports2.array(external_exports2.object({
    name: external_exports2.string(),
    description: external_exports2.string(),
    input_schema: external_exports2.record(external_exports2.any()).optional()
  }).passthrough()).optional()
}).passthrough();
var conversationCreatedEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.created"),
  event_id: external_exports2.string(),
  conversation: external_exports2.object({
    id: external_exports2.string().optional(),
    object: external_exports2.literal("realtime.conversation").optional()
  })
});
var conversationItemAddedEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.added"),
  event_id: external_exports2.string(),
  item: conversationItemSchema,
  previous_item_id: external_exports2.string().nullable().optional()
});
var conversationItemDoneEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.done"),
  event_id: external_exports2.string(),
  item: conversationItemSchema,
  previous_item_id: external_exports2.string().nullable().optional()
});
var conversationItemDeletedEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.deleted"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string()
});
var conversationItemInputAudioTranscriptionCompletedEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.input_audio_transcription.completed"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number(),
  transcript: external_exports2.string(),
  logprobs: external_exports2.array(external_exports2.any()).nullable().optional()
});
var conversationItemInputAudioTranscriptionDeltaEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.input_audio_transcription.delta"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number().optional(),
  delta: external_exports2.string().optional(),
  logprobs: external_exports2.array(external_exports2.any()).nullable().optional()
});
var conversationItemInputAudioTranscriptionFailedEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.input_audio_transcription.failed"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number(),
  error: external_exports2.object({
    code: external_exports2.string().optional(),
    message: external_exports2.string().optional(),
    param: external_exports2.string().optional(),
    type: external_exports2.string().optional()
  })
});
var conversationItemRetrievedEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.retrieved"),
  event_id: external_exports2.string(),
  item: conversationItemSchema
});
var conversationItemTruncatedEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.truncated"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  audio_end_ms: external_exports2.number(),
  content_index: external_exports2.number()
});
var conversationItemCreateEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.create"),
  item: conversationItemSchema,
  event_id: external_exports2.string().optional(),
  previous_item_id: external_exports2.string().nullable().optional()
});
var conversationItemDeleteEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.delete"),
  item_id: external_exports2.string(),
  event_id: external_exports2.string().optional()
});
var conversationItemRetrieveEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.retrieve"),
  item_id: external_exports2.string(),
  event_id: external_exports2.string().optional()
});
var conversationItemTruncateEventSchema = external_exports2.object({
  type: external_exports2.literal("conversation.item.truncate"),
  item_id: external_exports2.string(),
  audio_end_ms: external_exports2.number(),
  content_index: external_exports2.number(),
  event_id: external_exports2.string().optional()
});
var errorEventSchema = external_exports2.object({
  type: external_exports2.literal("error"),
  event_id: external_exports2.string().optional(),
  error: external_exports2.any().optional()
});
var inputAudioBufferClearedEventSchema = external_exports2.object({
  type: external_exports2.literal("input_audio_buffer.cleared"),
  event_id: external_exports2.string()
});
var inputAudioBufferAppendEventSchema = external_exports2.object({
  type: external_exports2.literal("input_audio_buffer.append"),
  audio: external_exports2.string(),
  event_id: external_exports2.string().optional()
});
var inputAudioBufferClearEventSchema = external_exports2.object({
  type: external_exports2.literal("input_audio_buffer.clear"),
  event_id: external_exports2.string().optional()
});
var inputAudioBufferCommitEventSchema = external_exports2.object({
  type: external_exports2.literal("input_audio_buffer.commit"),
  event_id: external_exports2.string().optional()
});
var inputAudioBufferCommittedEventSchema = external_exports2.object({
  type: external_exports2.literal("input_audio_buffer.committed"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  previous_item_id: external_exports2.string().nullable().optional()
});
var inputAudioBufferSpeechStartedEventSchema = external_exports2.object({
  type: external_exports2.literal("input_audio_buffer.speech_started"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  audio_start_ms: external_exports2.number()
});
var inputAudioBufferSpeechStoppedEventSchema = external_exports2.object({
  type: external_exports2.literal("input_audio_buffer.speech_stopped"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  audio_end_ms: external_exports2.number()
});
var outputAudioBufferStartedEventSchema = external_exports2.object({
  type: external_exports2.literal("output_audio_buffer.started"),
  event_id: external_exports2.string()
}).passthrough();
var outputAudioBufferStoppedEventSchema = external_exports2.object({
  type: external_exports2.literal("output_audio_buffer.stopped"),
  event_id: external_exports2.string()
}).passthrough();
var outputAudioBufferClearedEventSchema = external_exports2.object({
  type: external_exports2.literal("output_audio_buffer.cleared"),
  event_id: external_exports2.string()
});
var rateLimitsUpdatedEventSchema = external_exports2.object({
  type: external_exports2.literal("rate_limits.updated"),
  event_id: external_exports2.string(),
  rate_limits: external_exports2.array(external_exports2.object({
    limit: external_exports2.number().optional(),
    name: external_exports2.enum(["requests", "tokens"]).optional(),
    remaining: external_exports2.number().optional(),
    reset_seconds: external_exports2.number().optional()
  }))
});
var responseAudioDeltaEventSchema = external_exports2.object({
  type: external_exports2.literal("response.output_audio.delta"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number(),
  delta: external_exports2.string(),
  output_index: external_exports2.number(),
  response_id: external_exports2.string()
});
var responseAudioDoneEventSchema = external_exports2.object({
  type: external_exports2.literal("response.output_audio.done"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number(),
  output_index: external_exports2.number(),
  response_id: external_exports2.string()
});
var responseAudioTranscriptDeltaEventSchema = external_exports2.object({
  type: external_exports2.literal("response.output_audio_transcript.delta"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number(),
  delta: external_exports2.string(),
  output_index: external_exports2.number(),
  response_id: external_exports2.string()
});
var responseAudioTranscriptDoneEventSchema = external_exports2.object({
  //  GA may introduce response.output_audio_transcript.done
  type: external_exports2.literal("response.output_audio_transcript.done"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number(),
  transcript: external_exports2.string(),
  output_index: external_exports2.number(),
  response_id: external_exports2.string()
});
var responseContentPartAddedEventSchema = external_exports2.object({
  type: external_exports2.literal("response.content_part.added"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number(),
  output_index: external_exports2.number(),
  response_id: external_exports2.string(),
  part: external_exports2.object({
    audio: external_exports2.string().optional(),
    text: external_exports2.string().optional(),
    transcript: external_exports2.string().optional(),
    type: external_exports2.enum(["text", "audio"]).optional()
  })
});
var responseContentPartDoneEventSchema = external_exports2.object({
  type: external_exports2.literal("response.content_part.done"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number(),
  output_index: external_exports2.number(),
  response_id: external_exports2.string(),
  part: external_exports2.object({
    audio: external_exports2.string().optional(),
    text: external_exports2.string().optional(),
    transcript: external_exports2.string().optional(),
    type: external_exports2.enum(["text", "audio"]).optional()
  })
});
var responseCreatedEventSchema = external_exports2.object({
  type: external_exports2.literal("response.created"),
  event_id: external_exports2.string(),
  response: realtimeResponse
});
var responseDoneEventSchema = external_exports2.object({
  type: external_exports2.literal("response.done"),
  event_id: external_exports2.string(),
  response: realtimeResponse
});
var responseFunctionCallArgumentsDeltaEventSchema = external_exports2.object({
  type: external_exports2.literal("response.function_call_arguments.delta"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  call_id: external_exports2.string(),
  delta: external_exports2.string(),
  output_index: external_exports2.number(),
  response_id: external_exports2.string()
});
var responseFunctionCallArgumentsDoneEventSchema = external_exports2.object({
  type: external_exports2.literal("response.function_call_arguments.done"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  call_id: external_exports2.string(),
  arguments: external_exports2.string(),
  output_index: external_exports2.number(),
  response_id: external_exports2.string()
});
var responseOutputItemAddedEventSchema = external_exports2.object({
  type: external_exports2.literal("response.output_item.added"),
  event_id: external_exports2.string(),
  item: conversationItemSchema,
  output_index: external_exports2.number(),
  response_id: external_exports2.string()
});
var responseOutputItemDoneEventSchema = external_exports2.object({
  type: external_exports2.literal("response.output_item.done"),
  event_id: external_exports2.string(),
  item: conversationItemSchema,
  output_index: external_exports2.number(),
  response_id: external_exports2.string()
});
var responseTextDeltaEventSchema = external_exports2.object({
  type: external_exports2.literal("response.output_text.delta"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number(),
  delta: external_exports2.string(),
  output_index: external_exports2.number(),
  response_id: external_exports2.string()
});
var responseTextDoneEventSchema = external_exports2.object({
  // No rename specified for done; keep response.text.done
  type: external_exports2.literal("response.output_text.done"),
  event_id: external_exports2.string(),
  item_id: external_exports2.string(),
  content_index: external_exports2.number(),
  text: external_exports2.string(),
  output_index: external_exports2.number(),
  response_id: external_exports2.string()
});
var sessionCreatedEventSchema = external_exports2.object({
  type: external_exports2.literal("session.created"),
  event_id: external_exports2.string(),
  session: external_exports2.any()
});
var sessionUpdatedEventSchema = external_exports2.object({
  type: external_exports2.literal("session.updated"),
  event_id: external_exports2.string(),
  session: external_exports2.any()
});
var responseCancelEventSchema = external_exports2.object({
  type: external_exports2.literal("response.cancel"),
  event_id: external_exports2.string().optional(),
  response_id: external_exports2.string().optional()
});
var responseCreateEventSchema = external_exports2.object({
  type: external_exports2.literal("response.create"),
  event_id: external_exports2.string().optional(),
  response: external_exports2.any().optional()
});
var sessionUpdateEventSchema = external_exports2.object({
  type: external_exports2.literal("session.update"),
  event_id: external_exports2.string().optional(),
  session: external_exports2.any()
});
var mcpListToolsInProgressEventSchema = external_exports2.object({
  type: external_exports2.literal("mcp_list_tools.in_progress"),
  event_id: external_exports2.string().optional(),
  item_id: external_exports2.string().optional()
});
var mcpListToolsCompletedEventSchema = external_exports2.object({
  type: external_exports2.literal("mcp_list_tools.completed"),
  event_id: external_exports2.string().optional(),
  item_id: external_exports2.string().optional()
});
var responseMcpCallArgumentsDeltaEventSchema = external_exports2.object({
  type: external_exports2.literal("response.mcp_call_arguments.delta"),
  event_id: external_exports2.string(),
  response_id: external_exports2.string(),
  item_id: external_exports2.string(),
  output_index: external_exports2.number(),
  delta: external_exports2.string(),
  obfuscation: external_exports2.string()
});
var responseMcpCallArgumentsDoneEventSchema = external_exports2.object({
  type: external_exports2.literal("response.mcp_call_arguments.done"),
  event_id: external_exports2.string(),
  response_id: external_exports2.string(),
  item_id: external_exports2.string(),
  output_index: external_exports2.number(),
  arguments: external_exports2.string()
});
var responseMcpCallInProgressEventSchema = external_exports2.object({
  type: external_exports2.literal("response.mcp_call.in_progress"),
  event_id: external_exports2.string(),
  output_index: external_exports2.number(),
  item_id: external_exports2.string()
});
var responseMcpCallCompletedEventSchema = external_exports2.object({
  type: external_exports2.literal("response.mcp_call.completed"),
  event_id: external_exports2.string(),
  output_index: external_exports2.number(),
  item_id: external_exports2.string()
});
var mcpListToolsFailedEventSchema = external_exports2.object({
  type: external_exports2.literal("mcp_list_tools.failed"),
  event_id: external_exports2.string().optional(),
  item_id: external_exports2.string().optional()
});
var genericEventSchema = external_exports2.object({
  type: external_exports2.string(),
  event_id: external_exports2.string().optional().nullable()
}).passthrough();
var realtimeServerEventSchema = external_exports2.discriminatedUnion("type", [
  conversationCreatedEventSchema,
  conversationItemAddedEventSchema,
  conversationItemDoneEventSchema,
  conversationItemDeletedEventSchema,
  conversationItemInputAudioTranscriptionCompletedEventSchema,
  conversationItemInputAudioTranscriptionDeltaEventSchema,
  conversationItemInputAudioTranscriptionFailedEventSchema,
  conversationItemRetrievedEventSchema,
  conversationItemTruncatedEventSchema,
  errorEventSchema,
  inputAudioBufferClearedEventSchema,
  inputAudioBufferCommittedEventSchema,
  inputAudioBufferSpeechStartedEventSchema,
  inputAudioBufferSpeechStoppedEventSchema,
  outputAudioBufferStartedEventSchema,
  outputAudioBufferStoppedEventSchema,
  outputAudioBufferClearedEventSchema,
  rateLimitsUpdatedEventSchema,
  responseAudioDeltaEventSchema,
  responseAudioDoneEventSchema,
  responseAudioTranscriptDeltaEventSchema,
  responseAudioTranscriptDoneEventSchema,
  responseContentPartAddedEventSchema,
  responseContentPartDoneEventSchema,
  responseCreatedEventSchema,
  responseDoneEventSchema,
  responseFunctionCallArgumentsDeltaEventSchema,
  responseFunctionCallArgumentsDoneEventSchema,
  responseOutputItemAddedEventSchema,
  responseOutputItemDoneEventSchema,
  responseTextDeltaEventSchema,
  responseTextDoneEventSchema,
  sessionCreatedEventSchema,
  sessionUpdatedEventSchema,
  mcpListToolsInProgressEventSchema,
  mcpListToolsCompletedEventSchema,
  mcpListToolsFailedEventSchema,
  responseMcpCallArgumentsDeltaEventSchema,
  responseMcpCallArgumentsDoneEventSchema,
  responseMcpCallInProgressEventSchema,
  responseMcpCallCompletedEventSchema
]);
var realtimeClientEventSchema = external_exports2.discriminatedUnion("type", [
  conversationItemCreateEventSchema,
  conversationItemDeleteEventSchema,
  conversationItemRetrieveEventSchema,
  conversationItemTruncateEventSchema,
  inputAudioBufferAppendEventSchema,
  inputAudioBufferClearEventSchema,
  inputAudioBufferCommitEventSchema,
  responseCancelEventSchema,
  responseCreateEventSchema,
  sessionUpdateEventSchema
]);
function parseRealtimeEvent(event) {
  const raw = JSON.parse(event.data.toString());
  const parsed = realtimeServerEventSchema.safeParse(raw);
  if (!parsed.success) {
    const genericParsed = genericEventSchema.safeParse(raw);
    if (genericParsed.success) {
      return { data: genericParsed.data, isGeneric: true };
    }
    return { data: null, isGeneric: true };
  }
  return { data: parsed.data, isGeneric: false };
}

// node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs
var DEFAULT_OPENAI_REALTIME_MODEL = "gpt-realtime";
var DEFAULT_OPENAI_REALTIME_SESSION_CONFIG = {
  outputModalities: ["audio"],
  audio: {
    input: {
      format: { type: "audio/pcm", rate: 24e3 },
      transcription: { model: "gpt-4o-mini-transcribe" },
      turnDetection: { type: "semantic_vad" },
      noiseReduction: null
    },
    output: {
      format: { type: "audio/pcm", rate: 24e3 },
      speed: 1
    }
  }
};
var _model3, _apiKey, _tracingConfig, _rawSessionConfig;
var _OpenAIRealtimeBase = class _OpenAIRealtimeBase extends EventEmitterDelegate {
  constructor(options = {}) {
    super();
    __privateAdd(this, _model3);
    __privateAdd(this, _apiKey);
    __privateAdd(this, _tracingConfig, null);
    __privateAdd(this, _rawSessionConfig, null);
    __publicField(this, "eventEmitter", new BrowserEventEmitter());
    __privateSet(this, _model3, options.model ?? DEFAULT_OPENAI_REALTIME_MODEL);
    __privateSet(this, _apiKey, options.apiKey);
  }
  /**
   * The current model that is being used by the transport layer.
   */
  get currentModel() {
    return __privateGet(this, _model3);
  }
  /**
   * The current model that is being used by the transport layer.
   * **Note**: The model cannot be changed mid conversation.
   */
  set currentModel(model) {
    __privateSet(this, _model3, model);
  }
  get _rawSessionConfig() {
    return __privateGet(this, _rawSessionConfig) ?? null;
  }
  async _getApiKey(options) {
    const apiKey = options.apiKey ?? __privateGet(this, _apiKey);
    if (typeof apiKey === "function") {
      return await apiKey();
    }
    return apiKey;
  }
  _onMessage(event) {
    var _a, _b, _c, _d, _e, _f;
    const { data: parsed, isGeneric } = parseRealtimeEvent(event);
    if (parsed === null) {
      return;
    }
    this.emit("*", parsed);
    if (isGeneric) {
      return;
    }
    if (parsed.type === "error") {
      this.emit("error", { type: "error", error: parsed });
    } else {
      this.emit(parsed.type, parsed);
    }
    if (parsed.type === "response.created") {
      this.emit("turn_started", {
        type: "response_started",
        providerData: {
          ...parsed
        }
      });
      return;
    }
    if (parsed.type === "session.updated") {
      __privateSet(this, _rawSessionConfig, parsed.session);
    }
    if (parsed.type === "response.done") {
      const response = responseDoneEventSchema.safeParse(parsed);
      if (!response.success) {
        logger_default3.error("Error parsing response done event", response.error);
        return;
      }
      const inputTokens = ((_a = response.data.response.usage) == null ? void 0 : _a.input_tokens) ?? 0;
      const outputTokens = ((_b = response.data.response.usage) == null ? void 0 : _b.output_tokens) ?? 0;
      const totalTokens = inputTokens + outputTokens;
      const usage = new Usage({
        inputTokens,
        inputTokensDetails: ((_c = response.data.response.usage) == null ? void 0 : _c.input_token_details) ?? {},
        outputTokens,
        outputTokensDetails: ((_d = response.data.response.usage) == null ? void 0 : _d.output_token_details) ?? {},
        totalTokens
      });
      this.emit("usage_update", usage);
      this.emit("turn_done", {
        type: "response_done",
        response: {
          id: response.data.response.id ?? "",
          output: response.data.response.output ?? [],
          usage: {
            inputTokens,
            inputTokensDetails: ((_e = response.data.response.usage) == null ? void 0 : _e.input_token_details) ?? {},
            outputTokens,
            outputTokensDetails: ((_f = response.data.response.usage) == null ? void 0 : _f.output_token_details) ?? {},
            totalTokens
          }
        }
      });
      return;
    }
    if (parsed.type === "response.output_audio.done") {
      this.emit("audio_done");
      return;
    }
    if (parsed.type === "conversation.item.deleted") {
      this.emit("item_deleted", {
        itemId: parsed.item_id
      });
      return;
    }
    if (parsed.type === "conversation.item.input_audio_transcription.completed" || parsed.type === "conversation.item.truncated") {
      this.sendEvent({
        type: "conversation.item.retrieve",
        item_id: parsed.item_id
      });
      return;
    }
    if (parsed.type === "conversation.item.input_audio_transcription.delta" || parsed.type === "response.output_text.delta" || parsed.type === "response.output_audio_transcript.delta" || parsed.type === "response.function_call_arguments.delta") {
      if (parsed.type === "response.output_audio_transcript.delta") {
        this.emit("audio_transcript_delta", {
          type: "transcript_delta",
          delta: parsed.delta,
          itemId: parsed.item_id,
          responseId: parsed.response_id
        });
      }
      return;
    }
    if (parsed.type === "conversation.item.added" || parsed.type === "conversation.item.done" || parsed.type === "conversation.item.retrieved") {
      if (parsed.item.type === "mcp_list_tools" && parsed.type === "conversation.item.done") {
        const serverLabel = parsed.item.server_label ?? "";
        const tools = parsed.item.tools ?? [];
        try {
          this.emit("mcp_tools_listed", {
            serverLabel,
            tools
          });
        } catch (err) {
          logger_default3.error("Error emitting mcp_tools_listed", err, parsed.item);
        }
        return;
      }
      if (parsed.item.type === "message") {
        const previousItemId = parsed.type === "conversation.item.added" || parsed.type === "conversation.item.done" ? parsed.previous_item_id : null;
        const item = realtimeMessageItemSchema.parse({
          itemId: parsed.item.id,
          previousItemId,
          type: parsed.item.type,
          role: parsed.item.role,
          content: parsed.item.content,
          status: parsed.item.status
        });
        this.emit("item_update", item);
        return;
      }
      if (parsed.item.type === "mcp_approval_request" && parsed.type === "conversation.item.done") {
        const item = parsed.item;
        const mcpApprovalRequest = realtimeMcpCallApprovalRequestItem.parse({
          itemId: item.id,
          type: item.type,
          serverLabel: item.server_label,
          name: item.name,
          arguments: JSON.parse(item.arguments || "{}"),
          approved: item.approved
        });
        this.emit("item_update", mcpApprovalRequest);
        this.emit("mcp_approval_request", mcpApprovalRequest);
        return;
      }
      if (parsed.item.type === "mcp_tool_call" || parsed.item.type === "mcp_call") {
        const status = parsed.type === "conversation.item.done" ? "completed" : "in_progress";
        const mcpCall = realtimeMcpCallItem.parse({
          itemId: parsed.item.id,
          type: parsed.item.type,
          status,
          arguments: parsed.item.arguments,
          name: parsed.item.name,
          output: parsed.item.output
        });
        this.emit("item_update", mcpCall);
        if (parsed.type === "conversation.item.done") {
          this.emit("mcp_tool_call_completed", mcpCall);
        }
        return;
      }
    }
    if (parsed.type === "response.mcp_call.in_progress") {
      const item = parsed;
      this.sendEvent({
        type: "conversation.item.retrieve",
        item_id: item.item_id
      });
      return;
    }
    if (parsed.type === "mcp_list_tools.in_progress") {
      const item = parsed;
      if (item.item_id) {
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: item.item_id
        });
      }
      return;
    }
    if (parsed.type === "response.output_item.done" || parsed.type === "response.output_item.added") {
      const item = parsed.item;
      if (item.type === "function_call" && item.status === "completed") {
        const toolCall = realtimeToolCallItem.parse({
          itemId: item.id,
          type: item.type,
          status: "in_progress",
          // we set it to in_progress for the UI as it will only be completed with the output
          arguments: item.arguments,
          name: item.name,
          output: null
        });
        this.emit("item_update", toolCall);
        this.emit("function_call", {
          id: item.id,
          type: "function_call",
          callId: item.call_id ?? "",
          arguments: item.arguments ?? "",
          name: item.name ?? ""
        });
        return;
      }
      if (item.type === "mcp_tool_call" || item.type === "mcp_call") {
        const mcpCall = realtimeMcpCallItem.parse({
          itemId: item.id,
          type: item.type,
          status: parsed.type === "response.output_item.done" ? "completed" : "in_progress",
          // we set it to in_progress for the UI as it will only be completed with the output
          arguments: item.arguments,
          name: item.name,
          output: item.output
        });
        this.emit("item_update", mcpCall);
        return;
      }
      if (item.type === "message") {
        const realtimeItem = realtimeMessageItemSchema.parse({
          itemId: parsed.item.id,
          type: parsed.item.type,
          role: parsed.item.role,
          content: parsed.item.content,
          status: parsed.type === "response.output_item.done" ? item.status ?? "completed" : item.status ?? "in_progress"
        });
        this.emit("item_update", realtimeItem);
        return;
      }
    }
  }
  _onError(error40) {
    this.emit("error", {
      type: "error",
      error: error40
    });
  }
  _onOpen() {
    this.emit("connected");
  }
  _onClose() {
    this.emit("disconnected");
  }
  /**
   * Send a message to the Realtime API. This will create a new item in the conversation and
   * trigger a response.
   *
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(message, otherEventData, { triggerResponse = true } = {}) {
    const content = typeof message === "string" ? [
      {
        type: "input_text",
        text: message
      }
    ] : message.content.map((content2) => {
      if (content2.type === "input_image") {
        return {
          type: "input_image",
          image_url: content2.image,
          ...content2.providerData ?? {}
        };
      }
      return content2;
    });
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "message",
        role: "user",
        content
      },
      ...otherEventData
    });
    if (triggerResponse) {
      this.sendEvent({
        type: "response.create"
      });
    }
  }
  addImage(image, { triggerResponse = true } = {}) {
    this.sendMessage({
      type: "message",
      role: "user",
      content: [{ type: "input_image", image }]
    }, {}, { triggerResponse });
  }
  _getMergedSessionConfig(config2) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B;
    const newConfig = toNewSessionConfig(config2);
    const sessionData = {
      type: "realtime",
      instructions: newConfig.instructions,
      model: newConfig.model ?? __privateGet(this, _model3),
      output_modalities: newConfig.outputModalities ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.outputModalities,
      audio: {
        input: {
          format: ((_b = (_a = newConfig.audio) == null ? void 0 : _a.input) == null ? void 0 : _b.format) ?? ((_d = (_c = DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio) == null ? void 0 : _c.input) == null ? void 0 : _d.format),
          noise_reduction: ((_f = (_e = newConfig.audio) == null ? void 0 : _e.input) == null ? void 0 : _f.noiseReduction) ?? ((_h = (_g = DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio) == null ? void 0 : _g.input) == null ? void 0 : _h.noiseReduction),
          transcription: ((_j = (_i = newConfig.audio) == null ? void 0 : _i.input) == null ? void 0 : _j.transcription) ?? ((_l = (_k = DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio) == null ? void 0 : _k.input) == null ? void 0 : _l.transcription),
          turn_detection: _OpenAIRealtimeBase.buildTurnDetectionConfig((_n = (_m = newConfig.audio) == null ? void 0 : _m.input) == null ? void 0 : _n.turnDetection) ?? ((_p = (_o = DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio) == null ? void 0 : _o.input) == null ? void 0 : _p.turnDetection)
        },
        output: {
          format: ((_r = (_q = newConfig.audio) == null ? void 0 : _q.output) == null ? void 0 : _r.format) ?? ((_t = (_s = DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio) == null ? void 0 : _s.output) == null ? void 0 : _t.format),
          voice: ((_v = (_u = newConfig.audio) == null ? void 0 : _u.output) == null ? void 0 : _v.voice) ?? ((_x = (_w = DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio) == null ? void 0 : _w.output) == null ? void 0 : _x.voice),
          speed: ((_z = (_y = newConfig.audio) == null ? void 0 : _y.output) == null ? void 0 : _z.speed) ?? ((_B = (_A = DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio) == null ? void 0 : _A.output) == null ? void 0 : _B.speed)
        }
      },
      tool_choice: newConfig.toolChoice ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.toolChoice,
      // We don't set tracing here to make sure that we don't try to override it on every
      // session.update as it might lead to errors
      ...newConfig.providerData ?? {}
    };
    if (newConfig.prompt) {
      sessionData.prompt = {
        id: newConfig.prompt.promptId,
        version: newConfig.prompt.version,
        variables: newConfig.prompt.variables
      };
    }
    if (newConfig.tools && newConfig.tools.length > 0) {
      sessionData.tools = newConfig.tools.map((tool2) => ({
        ...tool2,
        strict: void 0
      }));
    }
    return sessionData;
  }
  static buildTurnDetectionConfig(c) {
    if (typeof c === "undefined") {
      return void 0;
    }
    const { type, createResponse, create_response, eagerness, interruptResponse, interrupt_response, prefixPaddingMs, prefix_padding_ms, silenceDurationMs, silence_duration_ms, threshold, idleTimeoutMs, idle_timeout_ms, ...rest } = c;
    const config2 = {
      type,
      create_response: createResponse ? createResponse : create_response,
      eagerness,
      interrupt_response: interruptResponse ? interruptResponse : interrupt_response,
      prefix_padding_ms: prefixPaddingMs ? prefixPaddingMs : prefix_padding_ms,
      silence_duration_ms: silenceDurationMs ? silenceDurationMs : silence_duration_ms,
      idle_timeout_ms: idleTimeoutMs ? idleTimeoutMs : idle_timeout_ms,
      threshold,
      ...rest
    };
    Object.keys(config2).forEach((key) => {
      if (config2[key] === void 0)
        delete config2[key];
    });
    return Object.keys(config2).length > 0 ? config2 : void 0;
  }
  /**
   * Sets the internal tracing config. This is used to track the tracing config that has been set
   * during the session.create event.
   */
  set _tracingConfig(tracingConfig) {
    __privateSet(this, _tracingConfig, tracingConfig);
  }
  /**
   * Sets the tracing config for the session. This will send the tracing config to the Realtime API.
   *
   * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists
   */
  _updateTracingConfig(tracingConfig) {
    var _a, _b, _c;
    if (typeof __privateGet(this, _tracingConfig) === "undefined") {
      __privateSet(this, _tracingConfig, null);
    }
    if (tracingConfig === "auto") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: "auto"
        }
      });
      return;
    }
    if (__privateGet(this, _tracingConfig) !== null && typeof __privateGet(this, _tracingConfig) !== "string" && typeof tracingConfig !== "string") {
      logger_default3.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");
      return;
    }
    if (tracingConfig === null) {
      logger_default3.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on.");
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: null
        }
      });
      return;
    }
    if (__privateGet(this, _tracingConfig) === null || typeof __privateGet(this, _tracingConfig) === "string") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: tracingConfig
        }
      });
      return;
    }
    if ((tracingConfig == null ? void 0 : tracingConfig.group_id) !== ((_a = __privateGet(this, _tracingConfig)) == null ? void 0 : _a.group_id) || (tracingConfig == null ? void 0 : tracingConfig.metadata) !== ((_b = __privateGet(this, _tracingConfig)) == null ? void 0 : _b.metadata) || (tracingConfig == null ? void 0 : tracingConfig.workflow_name) !== ((_c = __privateGet(this, _tracingConfig)) == null ? void 0 : _c.workflow_name)) {
      logger_default3.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s", JSON.stringify(__privateGet(this, _tracingConfig)), JSON.stringify(tracingConfig));
      return;
    }
    this.sendEvent({
      type: "session.update",
      session: {
        type: "realtime",
        tracing: tracingConfig
      }
    });
  }
  /**
   * Updates the session config. This will merge it with the current session config with the default
   * values and send it to the Realtime API.
   *
   * @param config - The session config to update.
   */
  updateSessionConfig(config2) {
    const sessionData = this._getMergedSessionConfig(config2);
    this.sendEvent({
      type: "session.update",
      session: sessionData
    });
  }
  /**
   * Send the output of a function call to the Realtime API.
   *
   * @param toolCall - The tool call to send the output for.
   * @param output - The output of the function call.
   * @param startResponse - Whether to start a new response after sending the output.
   */
  sendFunctionCallOutput(toolCall, output, startResponse = true) {
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "function_call_output",
        output,
        call_id: toolCall.callId
      }
    });
    try {
      const item = realtimeToolCallItem.parse({
        itemId: toolCall.id,
        previousItemId: toolCall.previousItemId,
        type: "function_call",
        status: "completed",
        arguments: toolCall.arguments,
        name: toolCall.name,
        output
      });
      this.emit("item_update", item);
    } catch (error40) {
      logger_default3.error("Error parsing tool call item", error40, toolCall);
    }
    if (startResponse) {
      this.sendEvent({
        type: "response.create"
      });
    }
  }
  /**
   * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer
   * will be committed and the model will start processing it. This is necessary if you have
   * disabled turn detection / voice activity detection (VAD).
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(audio, { commit = false } = {}) {
    this.sendEvent({
      type: "input_audio_buffer.append",
      audio: arrayBufferToBase64(audio)
    });
    if (commit) {
      this.sendEvent({
        type: "input_audio_buffer.commit"
      });
    }
  }
  /**
   * Reset the history of the conversation. This will create a diff between the old and new history
   * and send the necessary events to the Realtime API to update the history.
   *
   * @param oldHistory - The old history of the conversation.
   * @param newHistory - The new history of the conversation.
   */
  resetHistory(oldHistory, newHistory) {
    const { removals, additions, updates } = diffRealtimeHistory(oldHistory, newHistory);
    const removalIds = new Set(removals.map((item) => item.itemId));
    for (const update of updates) {
      removalIds.add(update.itemId);
    }
    if (removalIds.size > 0) {
      for (const itemId of removalIds) {
        this.sendEvent({
          type: "conversation.item.delete",
          item_id: itemId
        });
      }
    }
    const additionsAndUpdates = [...additions, ...updates];
    for (const addition of additionsAndUpdates) {
      if (addition.type === "message") {
        const itemEntry = {
          type: "message",
          role: addition.role,
          content: addition.content,
          id: addition.itemId
        };
        if (addition.role !== "system" && addition.status) {
          itemEntry.status = addition.status;
        }
        this.sendEvent({
          type: "conversation.item.create",
          item: itemEntry
        });
      } else if (addition.type === "function_call") {
        logger_default3.warn("Function calls cannot be manually added or updated at the moment. Ignoring.");
      }
    }
  }
  sendMcpResponse(approvalRequest, approved) {
    this.sendEvent({
      type: "conversation.item.create",
      previous_item_id: approvalRequest.itemId,
      item: {
        type: "mcp_approval_response",
        approval_request_id: approvalRequest.itemId,
        approve: approved
      }
    });
  }
};
_model3 = new WeakMap();
_apiKey = new WeakMap();
_tracingConfig = new WeakMap();
_rawSessionConfig = new WeakMap();
var OpenAIRealtimeBase = _OpenAIRealtimeBase;

// node_modules/@openai/agents-realtime/dist/openaiRealtimeWebRtc.mjs
var _url2, _state, _useInsecureApiKey, _ongoingResponse, _muted;
var OpenAIRealtimeWebRTC = class extends OpenAIRealtimeBase {
  constructor(options = {}) {
    if (typeof RTCPeerConnection === "undefined") {
      throw new Error("WebRTC is not supported in this environment");
    }
    super(options);
    __publicField(this, "options");
    __privateAdd(this, _url2);
    __privateAdd(this, _state, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0,
      callId: void 0
    });
    __privateAdd(this, _useInsecureApiKey);
    __privateAdd(this, _ongoingResponse, false);
    __privateAdd(this, _muted, false);
    this.options = options;
    __privateSet(this, _url2, options.baseUrl ?? `https://api.openai.com/v1/realtime/calls`);
    __privateSet(this, _useInsecureApiKey, options.useInsecureApiKey ?? false);
  }
  /**
   * The current call ID of the WebRTC connection.
   */
  get callId() {
    return __privateGet(this, _state).callId;
  }
  /**
   * The current status of the WebRTC connection.
   */
  get status() {
    return __privateGet(this, _state).status;
  }
  /**
   * The current connection state of the WebRTC connection including the peer connection and data
   * channel.
   */
  get connectionState() {
    return __privateGet(this, _state);
  }
  /**
   * Whether the session is muted.
   */
  get muted() {
    return __privateGet(this, _muted);
  }
  /**
   * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API
   * via WebRTC.
   *
   * If you are using a browser, the transport layer will also automatically configure the
   * microphone and audio output to be used by the session.
   *
   * @param options - The options for the connection.
   */
  async connect(options) {
    if (__privateGet(this, _state).status === "connected") {
      return;
    }
    if (__privateGet(this, _state).status === "connecting") {
      logger_default3.warn("Realtime connection already in progress. Please await original promise");
    }
    const model = options.model ?? this.currentModel;
    this.currentModel = model;
    const baseUrl = options.url ?? __privateGet(this, _url2);
    const apiKey = await this._getApiKey(options);
    const isClientKey = typeof apiKey === "string" && apiKey.startsWith("ek_");
    if (isBrowserEnvironment() && !__privateGet(this, _useInsecureApiKey) && !isClientKey) {
      throw new UserError("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");
    }
    return new Promise(async (resolve, reject) => {
      var _a, _b;
      try {
        const userSessionConfig = {
          ...options.initialSessionConfig || {},
          model: this.currentModel
        };
        const connectionUrl = new URL(baseUrl);
        let peerConnection = new RTCPeerConnection();
        const dataChannel = peerConnection.createDataChannel("oai-events");
        let callId = void 0;
        __privateSet(this, _state, {
          status: "connecting",
          peerConnection,
          dataChannel,
          callId
        });
        this.emit("connection_change", __privateGet(this, _state).status);
        dataChannel.addEventListener("open", () => {
          __privateSet(this, _state, {
            status: "connected",
            peerConnection,
            dataChannel,
            callId
          });
          this.updateSessionConfig(userSessionConfig);
          this.emit("connection_change", __privateGet(this, _state).status);
          this._onOpen();
          resolve();
        });
        dataChannel.addEventListener("error", (event) => {
          this.close();
          this._onError(event);
          reject(event);
        });
        dataChannel.addEventListener("message", (event) => {
          this._onMessage(event);
          const { data: parsed, isGeneric } = parseRealtimeEvent(event);
          if (!parsed || isGeneric) {
            return;
          }
          if (parsed.type === "response.created") {
            __privateSet(this, _ongoingResponse, true);
          } else if (parsed.type === "response.done") {
            __privateSet(this, _ongoingResponse, false);
          }
          if (parsed.type === "session.created") {
            this._tracingConfig = parsed.session.tracing;
            this._updateTracingConfig(userSessionConfig.tracing ?? "auto");
          }
        });
        const audioElement = this.options.audioElement ?? document.createElement("audio");
        audioElement.autoplay = true;
        peerConnection.ontrack = (event) => {
          audioElement.srcObject = event.streams[0];
        };
        const stream = this.options.mediaStream ?? await navigator.mediaDevices.getUserMedia({
          audio: true
        });
        peerConnection.addTrack(stream.getAudioTracks()[0]);
        if (this.options.changePeerConnection) {
          peerConnection = await this.options.changePeerConnection(peerConnection);
          __privateSet(this, _state, { ...__privateGet(this, _state), peerConnection });
        }
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        if (!offer.sdp) {
          throw new Error("Failed to create offer");
        }
        const sdpResponse = await fetch(connectionUrl, {
          method: "POST",
          body: offer.sdp,
          headers: {
            "Content-Type": "application/sdp",
            Authorization: `Bearer ${apiKey}`,
            "X-OpenAI-Agents-SDK": HEADERS2["X-OpenAI-Agents-SDK"]
          }
        });
        callId = (_b = (_a = sdpResponse.headers) == null ? void 0 : _a.get("Location")) == null ? void 0 : _b.split("/").pop();
        __privateSet(this, _state, { ...__privateGet(this, _state), callId });
        const answer = {
          type: "answer",
          sdp: await sdpResponse.text()
        };
        await peerConnection.setRemoteDescription(answer);
      } catch (error40) {
        this.close();
        this._onError(error40);
        reject(error40);
      }
    });
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(event) {
    if (!__privateGet(this, _state).dataChannel || __privateGet(this, _state).dataChannel.readyState !== "open") {
      throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");
    }
    __privateGet(this, _state).dataChannel.send(JSON.stringify(event));
  }
  /**
   * Mute or unmute the session.
   * @param muted - Whether to mute the session.
   */
  mute(muted) {
    __privateSet(this, _muted, muted);
    if (__privateGet(this, _state).peerConnection) {
      const peerConnection = __privateGet(this, _state).peerConnection;
      peerConnection.getSenders().forEach((sender) => {
        if (sender.track) {
          sender.track.enabled = !muted;
        }
      });
    }
  }
  /**
   * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.
   */
  close() {
    if (__privateGet(this, _state).dataChannel) {
      __privateGet(this, _state).dataChannel.close();
    }
    if (__privateGet(this, _state).peerConnection) {
      const peerConnection = __privateGet(this, _state).peerConnection;
      peerConnection.getSenders().forEach((sender) => {
        var _a;
        (_a = sender.track) == null ? void 0 : _a.stop();
      });
      peerConnection.close();
    }
    if (__privateGet(this, _state).status !== "disconnected") {
      __privateSet(this, _state, {
        status: "disconnected",
        peerConnection: void 0,
        dataChannel: void 0,
        callId: void 0
      });
      this.emit("connection_change", __privateGet(this, _state).status);
      this._onClose();
    }
  }
  /**
   * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent
   * stops talking.
   */
  interrupt() {
    if (__privateGet(this, _ongoingResponse)) {
      this.sendEvent({
        type: "response.cancel"
      });
      __privateSet(this, _ongoingResponse, false);
    }
    this.sendEvent({
      type: "output_audio_buffer.clear"
    });
  }
};
_url2 = new WeakMap();
_state = new WeakMap();
_useInsecureApiKey = new WeakMap();
_ongoingResponse = new WeakMap();
_muted = new WeakMap();

// node_modules/@openai/agents-realtime/dist/shims/shims-browser.mjs
var WebSocket = globalThis.WebSocket;
function isBrowserEnvironment2() {
  return true;
}
var useWebSocketProtocols = true;

// node_modules/@openai/agents-realtime/dist/openaiRealtimeWebsocket.mjs
var _apiKey2, _url3, _state2, _useInsecureApiKey2, _currentItemId, _currentAudioContentIndex, _ongoingResponse2, _createWebSocket, _skipOpenEventListeners, _OpenAIRealtimeWebSocket_instances, setupWebSocket_fn;
var OpenAIRealtimeWebSocket = class extends OpenAIRealtimeBase {
  constructor(options = {}) {
    super(options);
    __privateAdd(this, _OpenAIRealtimeWebSocket_instances);
    __privateAdd(this, _apiKey2);
    __privateAdd(this, _url3);
    __privateAdd(this, _state2, {
      status: "disconnected",
      websocket: void 0
    });
    __privateAdd(this, _useInsecureApiKey2);
    __privateAdd(this, _currentItemId);
    __privateAdd(this, _currentAudioContentIndex);
    /**
     * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time
     * since the response started to compute the right interruption time.
     *
     * Mostly internal but might be used by extended transport layers for their interruption
     * calculation.
     */
    __publicField(this, "_firstAudioTimestamp");
    __publicField(this, "_audioLengthMs", 0);
    __privateAdd(this, _ongoingResponse2, false);
    __privateAdd(this, _createWebSocket);
    __privateAdd(this, _skipOpenEventListeners);
    __privateSet(this, _url3, options.url);
    __privateSet(this, _useInsecureApiKey2, options.useInsecureApiKey ?? false);
    __privateSet(this, _createWebSocket, options.createWebSocket);
    __privateSet(this, _skipOpenEventListeners, options.skipOpenEventListeners ?? false);
  }
  getCommonRequestHeaders() {
    return HEADERS2;
  }
  /**
   * The current status of the WebSocket connection.
   */
  get status() {
    return __privateGet(this, _state2).status;
  }
  /**
   * The current connection state of the WebSocket connection.
   */
  get connectionState() {
    return __privateGet(this, _state2);
  }
  /**
   * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,
   * this should be handled by the client by not triggering the `sendAudio` method.
   */
  get muted() {
    return null;
  }
  /**
   * The current item ID of the ongoing response.
   */
  get currentItemId() {
    return __privateGet(this, _currentItemId);
  }
  /**
   * Triggers the `audio` event that a client might listen to to receive the audio buffer.
   * Protected for you to be able to override and disable emitting this event in case your extended
   * transport layer handles audio internally.
   *
   * @param audioEvent - The audio event to emit.
   */
  _onAudio(audioEvent) {
    this.emit("audio", audioEvent);
  }
  async connect(options) {
    const model = options.model ?? this.currentModel;
    this.currentModel = model;
    __privateSet(this, _apiKey2, await this._getApiKey(options));
    const url2 = options.url ?? __privateGet(this, _url3) ?? `wss://api.openai.com/v1/realtime?model=${this.currentModel}`;
    __privateSet(this, _url3, url2);
    const sessionConfig = {
      ...options.initialSessionConfig || {},
      model: this.currentModel
    };
    await new Promise((resolve, reject) => {
      __privateMethod(this, _OpenAIRealtimeWebSocket_instances, setupWebSocket_fn).call(this, resolve, reject, sessionConfig).catch(reject);
    });
    await this.updateSessionConfig(sessionConfig);
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(event) {
    if (!__privateGet(this, _state2).websocket) {
      throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");
    }
    __privateGet(this, _state2).websocket.send(JSON.stringify(event));
  }
  /**
   * Close the WebSocket connection.
   *
   * This will also reset any internal connection tracking used for interruption handling.
   */
  close() {
    var _a;
    (_a = __privateGet(this, _state2).websocket) == null ? void 0 : _a.close();
    __privateSet(this, _currentItemId, void 0);
    this._firstAudioTimestamp = void 0;
    this._audioLengthMs = 0;
    __privateSet(this, _currentAudioContentIndex, void 0);
  }
  /**
   * Will throw an error as the WebSocket transport layer does not support muting.
   */
  mute(_muted2) {
    throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.");
  }
  /**
   * Send an audio buffer to the Realtime API. This is used for your client to send audio to the
   * model to respond.
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(audio, options = {}) {
    if (__privateGet(this, _state2).status === "connected") {
      super.sendAudio(audio, options);
    }
  }
  /**
   * Send a cancel response event to the Realtime API. This is used to cancel an ongoing
   *  response that the model is currently generating.
   */
  _cancelResponse() {
    if (__privateGet(this, _ongoingResponse2)) {
      this.sendEvent({
        type: "response.cancel"
      });
      __privateSet(this, _ongoingResponse2, false);
    }
  }
  /**
   * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.
   *
   * This method is used to send the right events to the API to inform the model that the user has
   * interrupted the response. It might be overridden/extended by an extended transport layer. See
   * the `TwilioRealtimeTransportLayer` for an example.
   *
   * @param elapsedTime - The elapsed time since the response started.
   */
  _interrupt(elapsedTime, cancelOngoingResponse = true) {
    if (elapsedTime < 0) {
      return;
    }
    if (cancelOngoingResponse) {
      this._cancelResponse();
    }
    const length = this._audioLengthMs ?? Number.POSITIVE_INFINITY;
    const audio_end_ms = Math.max(0, Math.floor(Math.min(elapsedTime, length)));
    this.emit("audio_interrupted");
    this.sendEvent({
      type: "conversation.item.truncate",
      item_id: __privateGet(this, _currentItemId),
      content_index: __privateGet(this, _currentAudioContentIndex),
      audio_end_ms
    });
  }
  /**
   * Interrupt the ongoing response. This method is triggered automatically by the client when
   * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got
   * triggered.
   *
   * You can also call this method directly if you want to interrupt the conversation for example
   * based on an event in the client.
   */
  interrupt(cancelOngoingResponse = true) {
    if (!__privateGet(this, _currentItemId) || typeof this._firstAudioTimestamp !== "number") {
      return;
    }
    const elapsedTime = Date.now() - this._firstAudioTimestamp;
    if (elapsedTime >= 0) {
      this._interrupt(elapsedTime, cancelOngoingResponse);
    }
    __privateSet(this, _currentItemId, void 0);
    this._firstAudioTimestamp = void 0;
    this._audioLengthMs = 0;
    __privateSet(this, _currentAudioContentIndex, void 0);
  }
};
_apiKey2 = new WeakMap();
_url3 = new WeakMap();
_state2 = new WeakMap();
_useInsecureApiKey2 = new WeakMap();
_currentItemId = new WeakMap();
_currentAudioContentIndex = new WeakMap();
_ongoingResponse2 = new WeakMap();
_createWebSocket = new WeakMap();
_skipOpenEventListeners = new WeakMap();
_OpenAIRealtimeWebSocket_instances = new WeakSet();
setupWebSocket_fn = async function(resolve, reject, sessionConfig) {
  if (__privateGet(this, _state2).websocket) {
    resolve();
    return;
  }
  if (!__privateGet(this, _apiKey2)) {
    throw new UserError("API key is not set. Please call `connect()` with an API key first.");
  }
  if (isBrowserEnvironment2() && !__privateGet(this, _apiKey2).startsWith("ek_") && !__privateGet(this, _useInsecureApiKey2)) {
    throw new UserError("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");
  }
  let ws = null;
  if (__privateGet(this, _createWebSocket)) {
    ws = await __privateGet(this, _createWebSocket).call(this, {
      url: __privateGet(this, _url3),
      apiKey: __privateGet(this, _apiKey2)
    });
  } else {
    const websocketArguments = useWebSocketProtocols ? [
      "realtime",
      // Auth
      "openai-insecure-api-key." + __privateGet(this, _apiKey2),
      // Version header
      WEBSOCKET_META
    ] : {
      headers: {
        Authorization: `Bearer ${__privateGet(this, _apiKey2)}`,
        ...this.getCommonRequestHeaders()
      }
    };
    ws = new WebSocket(__privateGet(this, _url3), websocketArguments);
  }
  __privateSet(this, _state2, {
    status: "connecting",
    websocket: ws
  });
  this.emit("connection_change", __privateGet(this, _state2).status);
  const onSocketOpenReady = () => {
    __privateSet(this, _state2, {
      status: "connected",
      websocket: ws
    });
    this.emit("connection_change", __privateGet(this, _state2).status);
    this._onOpen();
    resolve();
  };
  if (__privateGet(this, _skipOpenEventListeners) === true) {
    onSocketOpenReady();
  } else {
    ws.addEventListener("open", onSocketOpenReady);
  }
  ws.addEventListener("error", (error40) => {
    this._onError(error40);
    __privateSet(this, _state2, {
      status: "disconnected",
      websocket: void 0
    });
    this.emit("connection_change", __privateGet(this, _state2).status);
    reject(error40);
  });
  ws.addEventListener("message", (message) => {
    var _a, _b, _c, _d, _e, _f, _g;
    this._onMessage(message);
    const { data: parsed, isGeneric } = parseRealtimeEvent(message);
    if (!parsed || isGeneric) {
      return;
    }
    if (parsed.type === "response.output_audio.delta") {
      __privateSet(this, _currentAudioContentIndex, parsed.content_index);
      __privateSet(this, _currentItemId, parsed.item_id);
      if (this._firstAudioTimestamp === void 0) {
        this._firstAudioTimestamp = Date.now();
        this._audioLengthMs = 0;
      }
      const buff = base64ToArrayBuffer(parsed.delta);
      const fmt = (_c = (_b = (_a = this._rawSessionConfig) == null ? void 0 : _a.audio) == null ? void 0 : _b.output) == null ? void 0 : _c.format;
      if (fmt && typeof fmt === "object") {
        const t = fmt.type;
        if (t === "audio/pcmu" || t === "audio/pcma") {
          this._audioLengthMs += buff.byteLength / 8;
        } else if (t === "audio/pcm") {
          const rate = fmt.rate ?? 24e3;
          this._audioLengthMs += buff.byteLength / 2 / rate * 1e3;
        } else {
          this._audioLengthMs += buff.byteLength / 24 / 2;
        }
      } else if (typeof fmt === "string") {
        if (fmt.startsWith("g711_")) {
          this._audioLengthMs += buff.byteLength / 8;
        } else {
          this._audioLengthMs += buff.byteLength / 24 / 2;
        }
      } else {
        this._audioLengthMs += buff.byteLength / 24 / 2;
      }
      const audioEvent = {
        type: "audio",
        data: buff,
        responseId: parsed.response_id
      };
      this._onAudio(audioEvent);
    } else if (parsed.type === "input_audio_buffer.speech_started") {
      const automaticResponseCancellationEnabled = ((_g = (_f = (_e = (_d = this._rawSessionConfig) == null ? void 0 : _d.audio) == null ? void 0 : _e.input) == null ? void 0 : _f.turn_detection) == null ? void 0 : _g.interrupt_response) ?? false;
      this.interrupt(!automaticResponseCancellationEnabled);
    } else if (parsed.type === "response.created") {
      __privateSet(this, _ongoingResponse2, true);
    } else if (parsed.type === "response.done") {
      __privateSet(this, _ongoingResponse2, false);
    } else if (parsed.type === "session.created") {
      this._tracingConfig = parsed.session.tracing;
      this._updateTracingConfig(sessionConfig.tracing ?? "auto");
    }
  });
  ws.addEventListener("close", () => {
    __privateSet(this, _state2, {
      status: "disconnected",
      websocket: void 0
    });
    this.emit("connection_change", __privateGet(this, _state2).status);
    this._onClose();
  });
};

// node_modules/@openai/agents-realtime/dist/tool.mjs
var BACKGROUND_RESULT_SYMBOL = Symbol("backgroundResult");
function backgroundResult(content) {
  return {
    [BACKGROUND_RESULT_SYMBOL]: true,
    content
  };
}
function isBackgroundResult(result) {
  return typeof result === "object" && result !== null && BACKGROUND_RESULT_SYMBOL in result;
}
function isValidRealtimeTool(tool2) {
  return tool2.type === "function" || tool2.type === "hosted_tool" && tool2.name === "hosted_mcp";
}
function toRealtimeToolDefinition(tool2) {
  if (tool2.type === "function") {
    return tool2;
  }
  if (tool2.type === "hosted_tool" && tool2.name === "hosted_mcp") {
    const serverUrl = tool2.providerData.server_url && tool2.providerData.server_url.length > 0 ? tool2.providerData.server_url : void 0;
    return {
      type: "mcp",
      server_label: tool2.providerData.server_label,
      server_url: serverUrl,
      headers: tool2.providerData.headers,
      allowed_tools: tool2.providerData.allowed_tools,
      require_approval: tool2.providerData.require_approval
    };
  }
  throw new UserError(`Invalid tool type: ${tool2}`);
}

// node_modules/@openai/agents-realtime/dist/realtimeSession.mjs
function cloneDefaultSessionConfig() {
  return JSON.parse(JSON.stringify(DEFAULT_OPENAI_REALTIME_SESSION_CONFIG));
}
var _transport, _currentAgent, _currentTools, _context, _outputGuardrails, _outputGuardrailSettings, _transcribedTextDeltas, _history, _shouldIncludeAudioData, _interruptedByGuardrail, _audioStarted, _allMcpToolsByServer, _availableMcpTools, _lastSessionConfig, _automaticallyTriggerResponseForMcpToolCalls, _RealtimeSession_instances, setCurrentAgent_fn, getSessionConfig_fn, handleHandoff_fn, handleFunctionToolCall_fn, handleFunctionCall_fn, runOutputGuardrails_fn2, setEventListeners_fn, updateAvailableMcpTools_fn;
var RealtimeSession = class extends BrowserEventEmitter {
  constructor(initialAgent, options = {}) {
    super();
    __privateAdd(this, _RealtimeSession_instances);
    __publicField(this, "initialAgent");
    __publicField(this, "options");
    __privateAdd(this, _transport);
    __privateAdd(this, _currentAgent);
    __privateAdd(this, _currentTools);
    __privateAdd(this, _context);
    __privateAdd(this, _outputGuardrails, []);
    __privateAdd(this, _outputGuardrailSettings);
    __privateAdd(this, _transcribedTextDeltas, {});
    __privateAdd(this, _history, []);
    __privateAdd(this, _shouldIncludeAudioData);
    __privateAdd(this, _interruptedByGuardrail, {});
    __privateAdd(this, _audioStarted, false);
    // Tracks all MCP tools fetched per server label (from mcp_list_tools results).
    __privateAdd(this, _allMcpToolsByServer, /* @__PURE__ */ new Map());
    // Tracks currently available MCP tools based on the active agent's configured server_labels.
    __privateAdd(this, _availableMcpTools, []);
    // Keeps track of the last full session config we sent (camelCase keys) so that
    // subsequent updates (e.g. during agent handoffs) preserve properties that are
    // not explicitly recalculated here (such as inputAudioFormat, outputAudioFormat,
    // modalities, speed, toolChoice, turnDetection, etc.). Without this, updating
    // the agent would drop audio format overrides (e.g. g711_ulaw) and revert to
    // transport defaults causing issues for integrations like Twilio.
    __privateAdd(this, _lastSessionConfig, cloneDefaultSessionConfig());
    __privateAdd(this, _automaticallyTriggerResponseForMcpToolCalls, true);
    this.initialAgent = initialAgent;
    this.options = options;
    if (typeof options.transport === "undefined" && hasWebRTCSupport() || options.transport === "webrtc") {
      __privateSet(this, _transport, new OpenAIRealtimeWebRTC());
    } else if (options.transport === "websocket" || typeof options.transport === "undefined") {
      __privateSet(this, _transport, new OpenAIRealtimeWebSocket());
    } else {
      __privateSet(this, _transport, options.transport);
    }
    __privateSet(this, _currentAgent, initialAgent);
    __privateSet(this, _context, new RunContext({
      ...options.context ?? {},
      history: __privateGet(this, _history)
    }));
    __privateSet(this, _outputGuardrails, (options.outputGuardrails ?? []).map(defineRealtimeOutputGuardrail));
    __privateSet(this, _outputGuardrailSettings, getRealtimeGuardrailSettings(options.outputGuardrailSettings ?? {}));
    __privateSet(this, _shouldIncludeAudioData, options.historyStoreAudio ?? false);
    __privateSet(this, _automaticallyTriggerResponseForMcpToolCalls, options.automaticallyTriggerResponseForMcpToolCalls ?? true);
  }
  /**
   * The transport layer used by the session.
   */
  get transport() {
    return __privateGet(this, _transport);
  }
  /**
   * The current agent in the session.
   */
  get currentAgent() {
    return __privateGet(this, _currentAgent);
  }
  /**
   * The current usage of the session.
   */
  get usage() {
    return __privateGet(this, _context).usage;
  }
  /**
   * The current context of the session.
   */
  get context() {
    return __privateGet(this, _context);
  }
  /**
   * Whether the session is muted. Might be `null` if the underlying transport layer does not
   * support muting.
   */
  get muted() {
    return __privateGet(this, _transport).muted;
  }
  /**
   * The history of the session.
   */
  get history() {
    return __privateGet(this, _history);
  }
  get availableMcpTools() {
    return __privateGet(this, _availableMcpTools);
  }
  async updateAgent(newAgent) {
    __privateGet(this, _currentAgent).emit("agent_handoff", __privateGet(this, _context), newAgent);
    this.emit("agent_handoff", __privateGet(this, _context), __privateGet(this, _currentAgent), newAgent);
    await __privateMethod(this, _RealtimeSession_instances, setCurrentAgent_fn).call(this, newAgent);
    await __privateGet(this, _transport).updateSessionConfig(await __privateMethod(this, _RealtimeSession_instances, getSessionConfig_fn).call(this));
    return newAgent;
  }
  /**
   * Connect to the session. This will establish the connection to the underlying transport layer
   * and start the session.
   *
   * After connecting, the session will also emit a `history_updated` event with an empty history.
   *
   * @param options - The options for the connection.
   */
  async connect(options) {
    await __privateMethod(this, _RealtimeSession_instances, setCurrentAgent_fn).call(this, this.initialAgent);
    __privateMethod(this, _RealtimeSession_instances, setEventListeners_fn).call(this);
    await __privateGet(this, _transport).connect({
      apiKey: options.apiKey ?? this.options.apiKey,
      model: this.options.model,
      url: options.url,
      initialSessionConfig: await __privateMethod(this, _RealtimeSession_instances, getSessionConfig_fn).call(this, this.options.config)
    });
    __privateSet(this, _history, []);
    this.emit("history_updated", __privateGet(this, _history));
  }
  /**
   * Update the history of the session.
   * @param newHistory - The new history to set.
   */
  updateHistory(newHistory) {
    let updatedHistory;
    if (typeof newHistory === "function") {
      updatedHistory = newHistory(__privateGet(this, _history));
    } else {
      updatedHistory = newHistory;
    }
    __privateGet(this, _transport).resetHistory(__privateGet(this, _history), updatedHistory);
  }
  /**
   * Send a message to the session.
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(message, otherEventData = {}) {
    __privateGet(this, _transport).sendMessage(message, otherEventData);
  }
  /**
   * Add image to the session
   * @param image - The image to add.
   */
  addImage(image, { triggerResponse = true } = {}) {
    __privateGet(this, _transport).addImage(image, { triggerResponse });
  }
  /**
   * Mute the session.
   * @param muted - Whether to mute the session.
   */
  mute(muted) {
    __privateGet(this, _transport).mute(muted);
  }
  /**
   * Disconnect from the session.
   */
  close() {
    __privateSet(this, _interruptedByGuardrail, {});
    __privateGet(this, _transport).close();
  }
  /**
   * Send audio to the session.
   * @param audio - The audio to send.
   * @param options - Additional options.
   * @param options.commit - Whether to finish the turn with this audio.
   */
  sendAudio(audio, options = {}) {
    __privateGet(this, _transport).sendAudio(audio, options);
  }
  /**
   * Interrupt the session artificially for example if you want to build a "stop talking"
   * button.
   */
  interrupt() {
    __privateGet(this, _transport).interrupt();
  }
  /**
   * Approve a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to approve.
   * @param options - Additional options.
   * @param options.alwaysApprove - Whether to always approve the tool call.
   */
  async approve(approvalItem, options = { alwaysApprove: false }) {
    __privateGet(this, _context).approveTool(approvalItem, options);
    const tool2 = __privateGet(this, _currentAgent).tools.find((tool3) => tool3.name === approvalItem.rawItem.name);
    if (tool2 && tool2.type === "function" && approvalItem.rawItem.type === "function_call") {
      await __privateMethod(this, _RealtimeSession_instances, handleFunctionToolCall_fn).call(this, approvalItem.rawItem, tool2);
    } else if (approvalItem.rawItem.type === "hosted_tool_call") {
      if (options.alwaysApprove) {
        logger_default3.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");
      }
      const mcpApprovalRequest = approvalItemToRealtimeApprovalItem(approvalItem);
      __privateGet(this, _transport).sendMcpResponse(mcpApprovalRequest, true);
    } else {
      throw new ModelBehaviorError(`Tool ${approvalItem.rawItem.name} not found`);
    }
  }
  /**
   * Reject a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to reject.
   * @param options - Additional options.
   * @param options.alwaysReject - Whether to always reject the tool call.
   */
  async reject(approvalItem, options = { alwaysReject: false }) {
    __privateGet(this, _context).rejectTool(approvalItem, options);
    const tool2 = __privateGet(this, _currentAgent).tools.find((tool3) => tool3.name === approvalItem.rawItem.name);
    if (tool2 && tool2.type === "function" && approvalItem.rawItem.type === "function_call") {
      await __privateMethod(this, _RealtimeSession_instances, handleFunctionToolCall_fn).call(this, approvalItem.rawItem, tool2);
    } else if (approvalItem.rawItem.type === "hosted_tool_call") {
      if (options.alwaysReject) {
        logger_default3.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");
      }
      const mcpApprovalRequest = approvalItemToRealtimeApprovalItem(approvalItem);
      __privateGet(this, _transport).sendMcpResponse(mcpApprovalRequest, false);
    } else {
      throw new ModelBehaviorError(`Tool ${approvalItem.rawItem.name} not found`);
    }
  }
};
_transport = new WeakMap();
_currentAgent = new WeakMap();
_currentTools = new WeakMap();
_context = new WeakMap();
_outputGuardrails = new WeakMap();
_outputGuardrailSettings = new WeakMap();
_transcribedTextDeltas = new WeakMap();
_history = new WeakMap();
_shouldIncludeAudioData = new WeakMap();
_interruptedByGuardrail = new WeakMap();
_audioStarted = new WeakMap();
_allMcpToolsByServer = new WeakMap();
_availableMcpTools = new WeakMap();
_lastSessionConfig = new WeakMap();
_automaticallyTriggerResponseForMcpToolCalls = new WeakMap();
_RealtimeSession_instances = new WeakSet();
setCurrentAgent_fn = async function(agent) {
  __privateSet(this, _currentAgent, agent);
  const handoffs = await __privateGet(this, _currentAgent).getEnabledHandoffs(__privateGet(this, _context));
  const handoffTools = handoffs.map((handoff2) => handoff2.getHandoffAsFunctionTool());
  const allTools = (await __privateGet(this, _currentAgent).getAllTools(__privateGet(this, _context))).filter(isValidRealtimeTool).map(toRealtimeToolDefinition);
  const hasToolsDefined = typeof __privateGet(this, _currentAgent).tools !== "undefined" || typeof __privateGet(this, _currentAgent).mcpServers !== "undefined";
  const hasHandoffsDefined = handoffs.length > 0;
  __privateSet(this, _currentTools, hasToolsDefined || hasHandoffsDefined ? [...allTools, ...handoffTools] : void 0);
  __privateMethod(this, _RealtimeSession_instances, updateAvailableMcpTools_fn).call(this);
};
getSessionConfig_fn = async function(additionalConfig = {}) {
  const instructions = await __privateGet(this, _currentAgent).getSystemPrompt(__privateGet(this, _context));
  const tracingConfig = this.options.tracingDisabled ? null : this.options.workflowName ? {
    workflow_name: this.options.workflowName
  } : "auto";
  if (tracingConfig !== null && tracingConfig !== "auto") {
    if (this.options.groupId) {
      tracingConfig.group_id = this.options.groupId;
    }
    if (this.options.traceMetadata) {
      tracingConfig.metadata = this.options.traceMetadata;
    }
  } else if (this.options.groupId || this.options.traceMetadata) {
    logger_default3.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");
  }
  const base = {
    ...__privateGet(this, _lastSessionConfig) ?? {},
    ...this.options.config ?? {},
    ...additionalConfig ?? {}
  };
  const fullConfig = {
    ...base,
    instructions,
    voice: __privateGet(this, _currentAgent).voice,
    model: this.options.model,
    tools: __privateGet(this, _currentTools),
    tracing: tracingConfig,
    prompt: typeof __privateGet(this, _currentAgent).prompt === "function" ? await __privateGet(this, _currentAgent).prompt(__privateGet(this, _context), __privateGet(this, _currentAgent)) : __privateGet(this, _currentAgent).prompt
  };
  __privateSet(this, _lastSessionConfig, fullConfig);
  return fullConfig;
};
handleHandoff_fn = async function(toolCall, handoff2) {
  const newAgent = await handoff2.onInvokeHandoff(__privateGet(this, _context), toolCall.arguments);
  __privateGet(this, _currentAgent).emit("agent_handoff", __privateGet(this, _context), newAgent);
  this.emit("agent_handoff", __privateGet(this, _context), __privateGet(this, _currentAgent), newAgent);
  await __privateMethod(this, _RealtimeSession_instances, setCurrentAgent_fn).call(this, newAgent);
  await __privateGet(this, _transport).updateSessionConfig(await __privateMethod(this, _RealtimeSession_instances, getSessionConfig_fn).call(this));
  const output = getTransferMessage(newAgent);
  __privateGet(this, _transport).sendFunctionCallOutput(toolCall, output, true);
  return newAgent;
};
handleFunctionToolCall_fn = async function(toolCall, tool2) {
  __privateGet(this, _context).context.history = JSON.parse(JSON.stringify(__privateGet(this, _history)));
  let parsedArgs = toolCall.arguments;
  if (tool2.parameters) {
    if (isZodObject(tool2.parameters)) {
      parsedArgs = tool2.parameters.parse(parsedArgs);
    } else {
      parsedArgs = JSON.parse(parsedArgs);
    }
  }
  const needsApproval = await tool2.needsApproval(__privateGet(this, _context), parsedArgs, toolCall.callId);
  if (needsApproval) {
    const approval = this.context.isToolApproved({
      toolName: tool2.name,
      callId: toolCall.callId
    });
    if (approval === false) {
      this.emit("agent_tool_start", __privateGet(this, _context), __privateGet(this, _currentAgent), tool2, {
        toolCall
      });
      __privateGet(this, _currentAgent).emit("agent_tool_start", __privateGet(this, _context), tool2, {
        toolCall
      });
      const result2 = "Tool execution was not approved.";
      __privateGet(this, _transport).sendFunctionCallOutput(toolCall, result2, true);
      this.emit("agent_tool_end", __privateGet(this, _context), __privateGet(this, _currentAgent), tool2, result2, { toolCall });
      __privateGet(this, _currentAgent).emit("agent_tool_end", __privateGet(this, _context), tool2, result2, {
        toolCall
      });
      return;
    } else if (typeof approval === "undefined") {
      this.emit("tool_approval_requested", __privateGet(this, _context), __privateGet(this, _currentAgent), {
        type: "function_approval",
        tool: tool2,
        approvalItem: new RunToolApprovalItem(toolCall, __privateGet(this, _currentAgent))
      });
      return;
    }
  }
  this.emit("agent_tool_start", __privateGet(this, _context), __privateGet(this, _currentAgent), tool2, {
    toolCall
  });
  __privateGet(this, _currentAgent).emit("agent_tool_start", __privateGet(this, _context), tool2, {
    toolCall
  });
  __privateGet(this, _context).context.history = JSON.parse(JSON.stringify(__privateGet(this, _history)));
  const result = await tool2.invoke(__privateGet(this, _context), toolCall.arguments, {
    toolCall
  });
  let stringResult;
  if (isBackgroundResult(result)) {
    stringResult = toSmartString(result.content);
    __privateGet(this, _transport).sendFunctionCallOutput(toolCall, stringResult, false);
  } else {
    stringResult = toSmartString(result);
    __privateGet(this, _transport).sendFunctionCallOutput(toolCall, stringResult, true);
  }
  this.emit("agent_tool_end", __privateGet(this, _context), __privateGet(this, _currentAgent), tool2, stringResult, { toolCall });
  __privateGet(this, _currentAgent).emit("agent_tool_end", __privateGet(this, _context), tool2, stringResult, { toolCall });
};
handleFunctionCall_fn = async function(toolCall) {
  const enabledHandoffs = await __privateGet(this, _currentAgent).getEnabledHandoffs(__privateGet(this, _context));
  const handoffMap = new Map(enabledHandoffs.map((handoff2) => [handoff2.toolName, handoff2]));
  const allTools = await __privateGet(this, _currentAgent).getAllTools(__privateGet(this, _context));
  const functionToolMap = new Map(allTools.map((tool2) => [tool2.name, tool2]));
  const possibleHandoff = handoffMap.get(toolCall.name);
  if (possibleHandoff) {
    await __privateMethod(this, _RealtimeSession_instances, handleHandoff_fn).call(this, toolCall, possibleHandoff);
  } else {
    const functionTool = functionToolMap.get(toolCall.name);
    if (functionTool && functionTool.type === "function") {
      await __privateMethod(this, _RealtimeSession_instances, handleFunctionToolCall_fn).call(this, toolCall, functionTool);
    } else {
      throw new ModelBehaviorError(`Tool ${toolCall.name} not found`);
    }
  }
};
runOutputGuardrails_fn2 = async function(output, responseId, itemId) {
  if (__privateGet(this, _outputGuardrails).length === 0) {
    return;
  }
  const guardrailArgs = {
    agent: __privateGet(this, _currentAgent),
    agentOutput: output,
    context: __privateGet(this, _context)
  };
  const results = await Promise.all(__privateGet(this, _outputGuardrails).map((guardrail) => guardrail.run(guardrailArgs)));
  const firstTripwireTriggered = results.find((result) => result.output.tripwireTriggered);
  if (firstTripwireTriggered) {
    if (__privateGet(this, _interruptedByGuardrail)[responseId]) {
      return;
    }
    __privateGet(this, _interruptedByGuardrail)[responseId] = true;
    const error40 = new OutputGuardrailTripwireTriggered(`Output guardrail triggered: ${JSON.stringify(firstTripwireTriggered.output.outputInfo)}`, firstTripwireTriggered);
    this.emit("guardrail_tripped", __privateGet(this, _context), __privateGet(this, _currentAgent), error40, {
      itemId
    });
    this.interrupt();
    const feedbackText = getRealtimeGuardrailFeedbackMessage(firstTripwireTriggered);
    this.sendMessage(feedbackText);
    return;
  }
};
setEventListeners_fn = function() {
  __privateGet(this, _transport).on("*", (event) => {
    this.emit("transport_event", event);
    if (event.type === "conversation.item.input_audio_transcription.completed") {
      try {
        const completedEvent = event;
        __privateSet(this, _history, updateRealtimeHistory(__privateGet(this, _history), completedEvent, __privateGet(this, _shouldIncludeAudioData)));
        __privateGet(this, _context).context.history = __privateGet(this, _history);
        this.emit("history_updated", __privateGet(this, _history));
      } catch (err) {
        this.emit("error", {
          type: "error",
          error: err
        });
      }
    }
  });
  __privateGet(this, _transport).on("mcp_tools_listed", ({ serverLabel, tools }) => {
    try {
      __privateGet(this, _allMcpToolsByServer).set(serverLabel, tools ?? []);
      __privateMethod(this, _RealtimeSession_instances, updateAvailableMcpTools_fn).call(this);
    } catch (err) {
      this.emit("error", { type: "error", error: err });
    }
  });
  __privateGet(this, _transport).on("audio", (event) => {
    if (!__privateGet(this, _audioStarted)) {
      __privateSet(this, _audioStarted, true);
      this.emit("audio_start", __privateGet(this, _context), __privateGet(this, _currentAgent));
    }
    this.emit("audio", event);
  });
  __privateGet(this, _transport).on("turn_started", () => {
    __privateSet(this, _audioStarted, false);
    this.emit("agent_start", __privateGet(this, _context), __privateGet(this, _currentAgent));
    __privateGet(this, _currentAgent).emit("agent_start", __privateGet(this, _context), __privateGet(this, _currentAgent));
  });
  __privateGet(this, _transport).on("turn_done", (event) => {
    const item = event.response.output[event.response.output.length - 1];
    const textOutput = getLastTextFromAudioOutputMessage(item) ?? "";
    const itemId = (item == null ? void 0 : item.id) ?? "";
    this.emit("agent_end", __privateGet(this, _context), __privateGet(this, _currentAgent), textOutput);
    __privateGet(this, _currentAgent).emit("agent_end", __privateGet(this, _context), textOutput);
    __privateMethod(this, _RealtimeSession_instances, runOutputGuardrails_fn2).call(this, textOutput, event.response.id, itemId);
  });
  __privateGet(this, _transport).on("audio_done", () => {
    if (__privateGet(this, _audioStarted)) {
      __privateSet(this, _audioStarted, false);
    }
    this.emit("audio_stopped", __privateGet(this, _context), __privateGet(this, _currentAgent));
  });
  let lastRunIndex = 0;
  let lastItemId;
  __privateGet(this, _transport).on("audio_transcript_delta", (event) => {
    try {
      const delta = event.delta;
      const itemId = event.itemId;
      const responseId = event.responseId;
      if (lastItemId !== itemId) {
        lastItemId = itemId;
        lastRunIndex = 0;
      }
      const currentText = __privateGet(this, _transcribedTextDeltas)[itemId] ?? "";
      const newText = currentText + delta;
      __privateGet(this, _transcribedTextDeltas)[itemId] = newText;
      if (__privateGet(this, _outputGuardrailSettings).debounceTextLength < 0) {
        return;
      }
      const newRunIndex = Math.floor(newText.length / __privateGet(this, _outputGuardrailSettings).debounceTextLength);
      if (newRunIndex > lastRunIndex) {
        lastRunIndex = newRunIndex;
        __privateMethod(this, _RealtimeSession_instances, runOutputGuardrails_fn2).call(this, newText, responseId, itemId);
      }
    } catch (err) {
      this.emit("error", {
        type: "error",
        error: err
      });
    }
  });
  __privateGet(this, _transport).on("item_update", (event) => {
    try {
      const isNew = !__privateGet(this, _history).some((item) => item.itemId === event.itemId);
      __privateSet(this, _history, updateRealtimeHistory(__privateGet(this, _history), event, __privateGet(this, _shouldIncludeAudioData)));
      __privateGet(this, _context).context.history = __privateGet(this, _history);
      if (isNew) {
        const addedItem = __privateGet(this, _history).find((item) => item.itemId === event.itemId);
        if (addedItem) {
          this.emit("history_added", addedItem);
        }
      }
      this.emit("history_updated", __privateGet(this, _history));
    } catch (err) {
      this.emit("error", {
        type: "error",
        error: err
      });
    }
  });
  __privateGet(this, _transport).on("item_deleted", (event) => {
    try {
      __privateSet(this, _history, __privateGet(this, _history).filter((item) => item.itemId !== event.itemId));
      __privateGet(this, _context).context.history = __privateGet(this, _history);
      this.emit("history_updated", __privateGet(this, _history));
    } catch (err) {
      this.emit("error", {
        type: "error",
        error: err
      });
    }
  });
  __privateGet(this, _transport).on("function_call", async (event) => {
    try {
      await __privateMethod(this, _RealtimeSession_instances, handleFunctionCall_fn).call(this, event);
    } catch (error40) {
      logger_default3.error("Error handling function call", error40);
      this.emit("error", {
        type: "error",
        error: error40
      });
    }
  });
  __privateGet(this, _transport).on("usage_update", (usage) => {
    __privateGet(this, _context).usage.add(usage);
  });
  __privateGet(this, _transport).on("audio_interrupted", () => {
    if (__privateGet(this, _audioStarted)) {
      __privateSet(this, _audioStarted, false);
    }
    this.emit("audio_interrupted", __privateGet(this, _context), __privateGet(this, _currentAgent));
  });
  __privateGet(this, _transport).on("error", (error40) => {
    this.emit("error", error40);
  });
  __privateGet(this, _transport).on("mcp_tool_call_completed", (toolCall) => {
    this.emit("mcp_tool_call_completed", __privateGet(this, _context), __privateGet(this, _currentAgent), toolCall);
    if (__privateGet(this, _automaticallyTriggerResponseForMcpToolCalls)) {
      __privateGet(this, _transport).sendEvent({
        type: "response.create"
      });
    }
  });
  __privateGet(this, _transport).on("mcp_approval_request", (approvalRequest) => {
    this.emit("tool_approval_requested", __privateGet(this, _context), __privateGet(this, _currentAgent), {
      type: "mcp_approval_request",
      approvalItem: realtimeApprovalItemToApprovalItem(__privateGet(this, _currentAgent), approvalRequest)
    });
  });
};
/**
 * Recomputes the currently available MCP tools based on the current agent's active
 * MCP server configurations and the cached per-server tool listings. Emits
 * `mcp_tools_changed` if the set changed.
 */
updateAvailableMcpTools_fn = function() {
  var _a;
  const activeMcpConfigs = (_a = __privateGet(this, _currentTools)) == null ? void 0 : _a.filter((t) => t.type === "mcp");
  const allowedFromConfig = (cfg) => {
    const allowed = cfg.allowed_tools;
    if (!allowed)
      return void 0;
    if (Array.isArray(allowed))
      return allowed;
    if (allowed && Array.isArray(allowed.tool_names))
      return allowed.tool_names;
    return void 0;
  };
  const dedupByName = /* @__PURE__ */ new Map();
  for (const cfg of activeMcpConfigs) {
    const tools = __privateGet(this, _allMcpToolsByServer).get(cfg.server_label) ?? [];
    const allowed = allowedFromConfig(cfg);
    for (const tool2 of tools) {
      if (allowed && !allowed.includes(tool2.name))
        continue;
      if (!dedupByName.has(tool2.name)) {
        dedupByName.set(tool2.name, tool2);
      }
    }
  }
  const next = Array.from(dedupByName.values());
  const prev = __privateGet(this, _availableMcpTools);
  const changed = prev.length !== next.length || JSON.stringify(prev.map((t) => t.name).sort()) !== JSON.stringify(next.map((t) => t.name).sort());
  if (changed) {
    __privateSet(this, _availableMcpTools, next);
    this.emit("mcp_tools_changed", __privateGet(this, _availableMcpTools));
  }
};

// node_modules/@openai/agents-realtime/dist/index.mjs
var utils = {
  base64ToArrayBuffer,
  arrayBufferToBase64,
  getLastTextFromAudioOutputMessage
};

// node_modules/@openai/agents/dist/index.mjs
setDefaultModelProvider(new OpenAIProvider());
setDefaultOpenAITracingExporter();
export {
  Agent,
  AgentHooks,
  AgentsError,
  BatchTraceProcessor,
  ConsoleSpanExporter,
  GuardrailExecutionError,
  Handoff,
  InputGuardrailTripwireTriggered,
  MCPServerSSE2 as MCPServerSSE,
  MCPServerStdio2 as MCPServerStdio,
  MCPServerStreamableHttp2 as MCPServerStreamableHttp,
  MaxTurnsExceededError,
  ModelBehaviorError,
  NoopSpan,
  NoopTrace,
  OPENAI_DEFAULT_MODEL_ENV_VARIABLE_NAME,
  OpenAIChatCompletionsModel,
  OpenAIProvider,
  OpenAIResponsesModel,
  OpenAITracingExporter,
  OutputGuardrailTripwireTriggered,
  RunAgentUpdatedStreamEvent,
  RunContext,
  RunHandoffCallItem,
  RunHandoffOutputItem,
  RunItemStreamEvent,
  RunMessageOutputItem,
  RunRawModelStreamEvent,
  RunReasoningItem,
  RunResult,
  RunState,
  RunToolApprovalItem,
  RunToolCallItem,
  RunToolCallOutputItem,
  Runner,
  BrowserEventEmitter as RuntimeEventEmitter,
  Span,
  StreamedRunResult,
  SystemError,
  ToolCallError,
  Trace,
  TraceProvider,
  Usage,
  UserError,
  addTraceProcessor,
  assistant,
  codeInterpreterTool,
  computerTool,
  createAgentSpan,
  createCustomSpan,
  createFunctionSpan,
  createGenerationSpan,
  createGuardrailSpan,
  createHandoffSpan,
  createMCPListToolsSpan,
  createMCPToolStaticFilter,
  createResponseSpan,
  createSpeechGroupSpan,
  createSpeechSpan,
  createTranscriptionSpan,
  defineOutputGuardrail,
  extractAllTextOutput,
  fileSearchTool,
  generateGroupId,
  generateSpanId,
  generateTraceId,
  getAllMcpTools,
  getCurrentSpan,
  getCurrentTrace,
  getDefaultModel,
  getDefaultModelSettings,
  getGlobalTraceProvider,
  getHandoff,
  getLogger,
  getOrCreateTrace,
  getTransferMessage,
  gpt5ReasoningSettingsRequired,
  handoff,
  hostedMcpTool,
  imageGenerationTool,
  invalidateServerToolsCache,
  isGpt5Default,
  mcpToFunctionTool,
  protocol_exports as protocol,
  dist_exports as realtime,
  resetCurrentSpan,
  run,
  setCurrentSpan,
  setDefaultModelProvider,
  setDefaultOpenAIClient,
  setDefaultOpenAIKey,
  setDefaultOpenAITracingExporter,
  setOpenAIAPI,
  setTraceProcessors,
  setTracingDisabled,
  setTracingExportApiKey,
  startTraceExportLoop,
  system,
  tool,
  user,
  webSearchTool,
  withAgentSpan,
  withCustomSpan,
  withFunctionSpan,
  withGenerationSpan,
  withGuardrailSpan,
  withHandoffSpan,
  withMCPListToolsSpan,
  withResponseSpan,
  withSpeechGroupSpan,
  withSpeechSpan,
  withTrace,
  withTranscriptionSpan
};
//# sourceMappingURL=@openai_agents.js.map
