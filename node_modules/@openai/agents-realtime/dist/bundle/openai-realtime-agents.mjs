var Mi = Object.defineProperty;
var bs = (n) => {
  throw TypeError(n);
};
var ji = (n, e, t) => e in n ? Mi(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var v = (n, e, t) => ji(n, typeof e != "symbol" ? e + "" : e, t), hr = (n, e, t) => e.has(n) || bs("Cannot " + t);
var u = (n, e, t) => (hr(n, e, "read from private field"), t ? t.call(n) : e.get(n)), O = (n, e, t) => e.has(n) ? bs("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(n) : e.set(n, t), S = (n, e, t, r) => (hr(n, e, "write to private field"), r ? r.call(n, t) : e.set(n, t), t), q = (n, e, t) => (hr(n, e, "access private method"), t);
const Tr = {
  version: "0.2.1"
};
async function Yr(n) {
  try {
    return [null, await n()];
  } catch (e) {
    return [e, null];
  }
}
function $i(n) {
  const e = Object.values(n).filter((r) => typeof r == "number");
  return Object.entries(n).filter(([r, s]) => e.indexOf(+r) === -1).map(([r, s]) => s);
}
class xa {
  constructor() {
    this._map = /* @__PURE__ */ new Map(), this._idmap = /* @__PURE__ */ new Map();
  }
  add(e, ...t) {
    const r = t[0];
    if (this._map.set(e, r), r && typeof r == "object" && "id" in r) {
      if (this._idmap.has(r.id))
        throw new Error(`ID ${r.id} already exists in the registry`);
      this._idmap.set(r.id, e);
    }
    return this;
  }
  clear() {
    return this._map = /* @__PURE__ */ new Map(), this._idmap = /* @__PURE__ */ new Map(), this;
  }
  remove(e) {
    const t = this._map.get(e);
    return t && typeof t == "object" && "id" in t && this._idmap.delete(t.id), this._map.delete(e), this;
  }
  get(e) {
    const t = e._zod.parent;
    if (t) {
      const r = { ...this.get(t) ?? {} };
      return delete r.id, { ...r, ...this._map.get(e) };
    }
    return this._map.get(e);
  }
  has(e) {
    return this._map.has(e);
  }
}
function Fi() {
  return new xa();
}
const Li = /* @__PURE__ */ Fi();
class ws {
  constructor(e) {
    this.counter = 0, this.metadataRegistry = (e == null ? void 0 : e.metadata) ?? Li, this.target = (e == null ? void 0 : e.target) ?? "draft-2020-12", this.unrepresentable = (e == null ? void 0 : e.unrepresentable) ?? "throw", this.override = (e == null ? void 0 : e.override) ?? (() => {
    }), this.io = (e == null ? void 0 : e.io) ?? "output", this.seen = /* @__PURE__ */ new Map();
  }
  process(e, t = { path: [], schemaPath: [] }) {
    var f, h, w;
    var r;
    const s = e._zod.def, a = {
      guid: "uuid",
      url: "uri",
      datetime: "date-time",
      json_string: "json-string",
      regex: ""
      // do not set
    }, i = this.seen.get(e);
    if (i)
      return i.count++, t.schemaPath.includes(e) && (i.cycle = t.path), i.schema;
    const o = { schema: {}, count: 1, cycle: void 0, path: t.path };
    this.seen.set(e, o);
    const l = (h = (f = e._zod).toJSONSchema) == null ? void 0 : h.call(f);
    if (l)
      o.schema = l;
    else {
      const g = {
        ...t,
        schemaPath: [...t.schemaPath, e],
        path: t.path
      }, x = e._zod.parent;
      if (x)
        o.ref = x, this.process(x, g), this.seen.get(x).isParent = !0;
      else {
        const b = o.schema;
        switch (s.type) {
          case "string": {
            const m = b;
            m.type = "string";
            const { minimum: I, maximum: A, format: D, patterns: N, contentEncoding: j } = e._zod.bag;
            if (typeof I == "number" && (m.minLength = I), typeof A == "number" && (m.maxLength = A), D && (m.format = a[D] ?? D, m.format === "" && delete m.format), j && (m.contentEncoding = j), N && N.size > 0) {
              const J = [...N];
              J.length === 1 ? m.pattern = J[0].source : J.length > 1 && (o.schema.allOf = [
                ...J.map((ne) => ({
                  ...this.target === "draft-7" ? { type: "string" } : {},
                  pattern: ne.source
                }))
              ]);
            }
            break;
          }
          case "number": {
            const m = b, { minimum: I, maximum: A, format: D, multipleOf: N, exclusiveMaximum: j, exclusiveMinimum: J } = e._zod.bag;
            typeof D == "string" && D.includes("int") ? m.type = "integer" : m.type = "number", typeof J == "number" && (m.exclusiveMinimum = J), typeof I == "number" && (m.minimum = I, typeof J == "number" && (J >= I ? delete m.minimum : delete m.exclusiveMinimum)), typeof j == "number" && (m.exclusiveMaximum = j), typeof A == "number" && (m.maximum = A, typeof j == "number" && (j <= A ? delete m.maximum : delete m.exclusiveMaximum)), typeof N == "number" && (m.multipleOf = N);
            break;
          }
          case "boolean": {
            const m = b;
            m.type = "boolean";
            break;
          }
          case "bigint": {
            if (this.unrepresentable === "throw")
              throw new Error("BigInt cannot be represented in JSON Schema");
            break;
          }
          case "symbol": {
            if (this.unrepresentable === "throw")
              throw new Error("Symbols cannot be represented in JSON Schema");
            break;
          }
          case "null": {
            b.type = "null";
            break;
          }
          case "any":
            break;
          case "unknown":
            break;
          case "undefined": {
            if (this.unrepresentable === "throw")
              throw new Error("Undefined cannot be represented in JSON Schema");
            break;
          }
          case "void": {
            if (this.unrepresentable === "throw")
              throw new Error("Void cannot be represented in JSON Schema");
            break;
          }
          case "never": {
            b.not = {};
            break;
          }
          case "date": {
            if (this.unrepresentable === "throw")
              throw new Error("Date cannot be represented in JSON Schema");
            break;
          }
          case "array": {
            const m = b, { minimum: I, maximum: A } = e._zod.bag;
            typeof I == "number" && (m.minItems = I), typeof A == "number" && (m.maxItems = A), m.type = "array", m.items = this.process(s.element, { ...g, path: [...g.path, "items"] });
            break;
          }
          case "object": {
            const m = b;
            m.type = "object", m.properties = {};
            const I = s.shape;
            for (const N in I)
              m.properties[N] = this.process(I[N], {
                ...g,
                path: [...g.path, "properties", N]
              });
            const A = new Set(Object.keys(I)), D = new Set([...A].filter((N) => {
              const j = s.shape[N]._zod;
              return this.io === "input" ? j.optin === void 0 : j.optout === void 0;
            }));
            D.size > 0 && (m.required = Array.from(D)), ((w = s.catchall) == null ? void 0 : w._zod.def.type) === "never" ? m.additionalProperties = !1 : s.catchall ? s.catchall && (m.additionalProperties = this.process(s.catchall, {
              ...g,
              path: [...g.path, "additionalProperties"]
            })) : this.io === "output" && (m.additionalProperties = !1);
            break;
          }
          case "union": {
            const m = b;
            m.anyOf = s.options.map((I, A) => this.process(I, {
              ...g,
              path: [...g.path, "anyOf", A]
            }));
            break;
          }
          case "intersection": {
            const m = b, I = this.process(s.left, {
              ...g,
              path: [...g.path, "allOf", 0]
            }), A = this.process(s.right, {
              ...g,
              path: [...g.path, "allOf", 1]
            }), D = (j) => "allOf" in j && Object.keys(j).length === 1, N = [
              ...D(I) ? I.allOf : [I],
              ...D(A) ? A.allOf : [A]
            ];
            m.allOf = N;
            break;
          }
          case "tuple": {
            const m = b;
            m.type = "array";
            const I = s.items.map((N, j) => this.process(N, { ...g, path: [...g.path, "prefixItems", j] }));
            if (this.target === "draft-2020-12" ? m.prefixItems = I : m.items = I, s.rest) {
              const N = this.process(s.rest, {
                ...g,
                path: [...g.path, "items"]
              });
              this.target === "draft-2020-12" ? m.items = N : m.additionalItems = N;
            }
            s.rest && (m.items = this.process(s.rest, {
              ...g,
              path: [...g.path, "items"]
            }));
            const { minimum: A, maximum: D } = e._zod.bag;
            typeof A == "number" && (m.minItems = A), typeof D == "number" && (m.maxItems = D);
            break;
          }
          case "record": {
            const m = b;
            m.type = "object", m.propertyNames = this.process(s.keyType, { ...g, path: [...g.path, "propertyNames"] }), m.additionalProperties = this.process(s.valueType, {
              ...g,
              path: [...g.path, "additionalProperties"]
            });
            break;
          }
          case "map": {
            if (this.unrepresentable === "throw")
              throw new Error("Map cannot be represented in JSON Schema");
            break;
          }
          case "set": {
            if (this.unrepresentable === "throw")
              throw new Error("Set cannot be represented in JSON Schema");
            break;
          }
          case "enum": {
            const m = b, I = $i(s.entries);
            I.every((A) => typeof A == "number") && (m.type = "number"), I.every((A) => typeof A == "string") && (m.type = "string"), m.enum = I;
            break;
          }
          case "literal": {
            const m = b, I = [];
            for (const A of s.values)
              if (A === void 0) {
                if (this.unrepresentable === "throw")
                  throw new Error("Literal `undefined` cannot be represented in JSON Schema");
              } else if (typeof A == "bigint") {
                if (this.unrepresentable === "throw")
                  throw new Error("BigInt literals cannot be represented in JSON Schema");
                I.push(Number(A));
              } else
                I.push(A);
            if (I.length !== 0) if (I.length === 1) {
              const A = I[0];
              m.type = A === null ? "null" : typeof A, m.const = A;
            } else
              I.every((A) => typeof A == "number") && (m.type = "number"), I.every((A) => typeof A == "string") && (m.type = "string"), I.every((A) => typeof A == "boolean") && (m.type = "string"), I.every((A) => A === null) && (m.type = "null"), m.enum = I;
            break;
          }
          case "file": {
            const m = b, I = {
              type: "string",
              format: "binary",
              contentEncoding: "binary"
            }, { minimum: A, maximum: D, mime: N } = e._zod.bag;
            A !== void 0 && (I.minLength = A), D !== void 0 && (I.maxLength = D), N ? N.length === 1 ? (I.contentMediaType = N[0], Object.assign(m, I)) : m.anyOf = N.map((j) => ({ ...I, contentMediaType: j })) : Object.assign(m, I);
            break;
          }
          case "transform": {
            if (this.unrepresentable === "throw")
              throw new Error("Transforms cannot be represented in JSON Schema");
            break;
          }
          case "nullable": {
            const m = this.process(s.innerType, g);
            b.anyOf = [m, { type: "null" }];
            break;
          }
          case "nonoptional": {
            this.process(s.innerType, g), o.ref = s.innerType;
            break;
          }
          case "success": {
            const m = b;
            m.type = "boolean";
            break;
          }
          case "default": {
            this.process(s.innerType, g), o.ref = s.innerType, b.default = JSON.parse(JSON.stringify(s.defaultValue));
            break;
          }
          case "prefault": {
            this.process(s.innerType, g), o.ref = s.innerType, this.io === "input" && (b._prefault = JSON.parse(JSON.stringify(s.defaultValue)));
            break;
          }
          case "catch": {
            this.process(s.innerType, g), o.ref = s.innerType;
            let m;
            try {
              m = s.catchValue(void 0);
            } catch {
              throw new Error("Dynamic catch values are not supported in JSON Schema");
            }
            b.default = m;
            break;
          }
          case "nan": {
            if (this.unrepresentable === "throw")
              throw new Error("NaN cannot be represented in JSON Schema");
            break;
          }
          case "template_literal": {
            const m = b, I = e._zod.pattern;
            if (!I)
              throw new Error("Pattern not found in template literal");
            m.type = "string", m.pattern = I.source;
            break;
          }
          case "pipe": {
            const m = this.io === "input" ? s.in._zod.def.type === "transform" ? s.out : s.in : s.out;
            this.process(m, g), o.ref = m;
            break;
          }
          case "readonly": {
            this.process(s.innerType, g), o.ref = s.innerType, b.readOnly = !0;
            break;
          }
          // passthrough types
          case "promise": {
            this.process(s.innerType, g), o.ref = s.innerType;
            break;
          }
          case "optional": {
            this.process(s.innerType, g), o.ref = s.innerType;
            break;
          }
          case "lazy": {
            const m = e._zod.innerType;
            this.process(m, g), o.ref = m;
            break;
          }
          case "custom": {
            if (this.unrepresentable === "throw")
              throw new Error("Custom types cannot be represented in JSON Schema");
            break;
          }
        }
      }
    }
    const c = this.metadataRegistry.get(e);
    return c && Object.assign(o.schema, c), this.io === "input" && re(e) && (delete o.schema.examples, delete o.schema.default), this.io === "input" && o.schema._prefault && ((r = o.schema).default ?? (r.default = o.schema._prefault)), delete o.schema._prefault, this.seen.get(e).schema;
  }
  emit(e, t) {
    var p, f, h, w, g, x;
    const r = {
      cycles: (t == null ? void 0 : t.cycles) ?? "ref",
      reused: (t == null ? void 0 : t.reused) ?? "inline",
      // unrepresentable: _params?.unrepresentable ?? "throw",
      // uri: _params?.uri ?? ((id) => `${id}`),
      external: (t == null ? void 0 : t.external) ?? void 0
    }, s = this.seen.get(e);
    if (!s)
      throw new Error("Unprocessed schema. This is a bug in Zod.");
    const a = (b) => {
      var N;
      const m = this.target === "draft-2020-12" ? "$defs" : "definitions";
      if (r.external) {
        const j = (N = r.external.registry.get(b[0])) == null ? void 0 : N.id, J = r.external.uri ?? ((me) => me);
        if (j)
          return { ref: J(j) };
        const ne = b[1].defId ?? b[1].schema.id ?? `schema${this.counter++}`;
        return b[1].defId = ne, { defId: ne, ref: `${J("__shared")}#/${m}/${ne}` };
      }
      if (b[1] === s)
        return { ref: "#" };
      const A = `#/${m}/`, D = b[1].schema.id ?? `__schema${this.counter++}`;
      return { defId: D, ref: A + D };
    }, i = (b) => {
      if (b[1].schema.$ref)
        return;
      const m = b[1], { ref: I, defId: A } = a(b);
      m.def = { ...m.schema }, A && (m.defId = A);
      const D = m.schema;
      for (const N in D)
        delete D[N];
      D.$ref = I;
    };
    if (r.cycles === "throw")
      for (const b of this.seen.entries()) {
        const m = b[1];
        if (m.cycle)
          throw new Error(`Cycle detected: #/${(p = m.cycle) == null ? void 0 : p.join("/")}/<root>

Set the \`cycles\` parameter to \`"ref"\` to resolve cyclical schemas with defs.`);
      }
    for (const b of this.seen.entries()) {
      const m = b[1];
      if (e === b[0]) {
        i(b);
        continue;
      }
      if (r.external) {
        const A = (f = r.external.registry.get(b[0])) == null ? void 0 : f.id;
        if (e !== b[0] && A) {
          i(b);
          continue;
        }
      }
      if ((h = this.metadataRegistry.get(b[0])) == null ? void 0 : h.id) {
        i(b);
        continue;
      }
      if (m.cycle) {
        i(b);
        continue;
      }
      if (m.count > 1 && r.reused === "ref") {
        i(b);
        continue;
      }
    }
    const o = (b, m) => {
      const I = this.seen.get(b), A = I.def ?? I.schema, D = { ...A };
      if (I.ref === null)
        return;
      const N = I.ref;
      if (I.ref = null, N) {
        o(N, m);
        const j = this.seen.get(N).schema;
        j.$ref && m.target === "draft-7" ? (A.allOf = A.allOf ?? [], A.allOf.push(j)) : (Object.assign(A, j), Object.assign(A, D));
      }
      I.isParent || this.override({
        zodSchema: b,
        jsonSchema: A,
        path: I.path ?? []
      });
    };
    for (const b of [...this.seen.entries()].reverse())
      o(b[0], { target: this.target });
    const l = {};
    if (this.target === "draft-2020-12" ? l.$schema = "https://json-schema.org/draft/2020-12/schema" : this.target === "draft-7" ? l.$schema = "http://json-schema.org/draft-07/schema#" : console.warn(`Invalid target: ${this.target}`), (w = r.external) != null && w.uri) {
      const b = (g = r.external.registry.get(e)) == null ? void 0 : g.id;
      if (!b)
        throw new Error("Schema is missing an `id` property");
      l.$id = r.external.uri(b);
    }
    Object.assign(l, s.def);
    const c = ((x = r.external) == null ? void 0 : x.defs) ?? {};
    for (const b of this.seen.entries()) {
      const m = b[1];
      m.def && m.defId && (c[m.defId] = m.def);
    }
    r.external || Object.keys(c).length > 0 && (this.target === "draft-2020-12" ? l.$defs = c : l.definitions = c);
    try {
      return JSON.parse(JSON.stringify(l));
    } catch {
      throw new Error("Error converting schema to JSON.");
    }
  }
}
function Zi(n, e) {
  if (n instanceof xa) {
    const r = new ws(e), s = {};
    for (const o of n._idmap.entries()) {
      const [l, c] = o;
      r.process(c);
    }
    const a = {}, i = {
      registry: n,
      uri: e == null ? void 0 : e.uri,
      defs: s
    };
    for (const o of n._idmap.entries()) {
      const [l, c] = o;
      a[l] = r.emit(c, {
        ...e,
        external: i
      });
    }
    if (Object.keys(s).length > 0) {
      const o = r.target === "draft-2020-12" ? "$defs" : "definitions";
      a.__shared = {
        [o]: s
      };
    }
    return { schemas: a };
  }
  const t = new ws(e);
  return t.process(n), t.emit(n, e);
}
function re(n, e) {
  const t = e ?? { seen: /* @__PURE__ */ new Set() };
  if (t.seen.has(n))
    return !1;
  t.seen.add(n);
  const s = n._zod.def;
  switch (s.type) {
    case "string":
    case "number":
    case "bigint":
    case "boolean":
    case "date":
    case "symbol":
    case "undefined":
    case "null":
    case "any":
    case "unknown":
    case "never":
    case "void":
    case "literal":
    case "enum":
    case "nan":
    case "file":
    case "template_literal":
      return !1;
    case "array":
      return re(s.element, t);
    case "object": {
      for (const a in s.shape)
        if (re(s.shape[a], t))
          return !0;
      return !1;
    }
    case "union": {
      for (const a of s.options)
        if (re(a, t))
          return !0;
      return !1;
    }
    case "intersection":
      return re(s.left, t) || re(s.right, t);
    case "tuple": {
      for (const a of s.items)
        if (re(a, t))
          return !0;
      return !!(s.rest && re(s.rest, t));
    }
    case "record":
      return re(s.keyType, t) || re(s.valueType, t);
    case "map":
      return re(s.keyType, t) || re(s.valueType, t);
    case "set":
      return re(s.valueType, t);
    // inner types
    case "promise":
    case "optional":
    case "nonoptional":
    case "nullable":
    case "readonly":
      return re(s.innerType, t);
    case "lazy":
      return re(s.getter(), t);
    case "default":
      return re(s.innerType, t);
    case "prefault":
      return re(s.innerType, t);
    case "custom":
      return !1;
    case "transform":
      return !0;
    case "pipe":
      return re(s.in, t) || re(s.out, t);
    case "success":
      return !1;
    case "catch":
      return !1;
  }
  throw new Error(`Unknown schema type: ${s.type}`);
}
function Ui(n, e) {
  const t = { ...n };
  return Object.defineProperties(t, {
    $brand: {
      value: "auto-parseable-response-format",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    }
  }), t;
}
const Ji = Symbol("Let zodToJsonSchema decide on which parser to use"), xs = {
  name: void 0,
  $refStrategy: "root",
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  nullableStrategy: "from-target",
  removeAdditionalStrategy: "passthrough",
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: !1,
  errorMessages: !1,
  markdownDescription: !1,
  patternStrategy: "escape",
  applyRegexFlags: !1,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref"
}, qi = (n) => typeof n == "string" ? {
  ...xs,
  basePath: ["#"],
  definitions: {},
  name: n
} : {
  ...xs,
  basePath: ["#"],
  definitions: {},
  ...n
}, kr = (n) => "_def" in n ? n._def : n;
function Bi(n) {
  if (!n)
    return !0;
  for (const e in n)
    return !1;
  return !0;
}
const zi = (n) => {
  const e = qi(n), t = e.name !== void 0 ? [...e.basePath, e.definitionPath, e.name] : e.basePath;
  return {
    ...e,
    currentPath: t,
    propertyPath: void 0,
    seenRefs: /* @__PURE__ */ new Set(),
    seen: new Map(Object.entries(e.definitions).map(([r, s]) => [
      kr(s),
      {
        def: kr(s),
        path: [...e.basePath, e.definitionPath, r],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};
function Sa(n, e, t, r) {
  r != null && r.errorMessages && t && (n.errorMessage = {
    ...n.errorMessage,
    [e]: t
  });
}
function H(n, e, t, r, s) {
  n[e] = t, Sa(n, e, r, s);
}
var V;
(function(n) {
  n.assertEqual = (s) => {
  };
  function e(s) {
  }
  n.assertIs = e;
  function t(s) {
    throw new Error();
  }
  n.assertNever = t, n.arrayToEnum = (s) => {
    const a = {};
    for (const i of s)
      a[i] = i;
    return a;
  }, n.getValidEnumValues = (s) => {
    const a = n.objectKeys(s).filter((o) => typeof s[s[o]] != "number"), i = {};
    for (const o of a)
      i[o] = s[o];
    return n.objectValues(i);
  }, n.objectValues = (s) => n.objectKeys(s).map(function(a) {
    return s[a];
  }), n.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    const a = [];
    for (const i in s)
      Object.prototype.hasOwnProperty.call(s, i) && a.push(i);
    return a;
  }, n.find = (s, a) => {
    for (const i of s)
      if (a(i))
        return i;
  }, n.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && Number.isFinite(s) && Math.floor(s) === s;
  function r(s, a = " | ") {
    return s.map((i) => typeof i == "string" ? `'${i}'` : i).join(a);
  }
  n.joinValues = r, n.jsonStringifyReplacer = (s, a) => typeof a == "bigint" ? a.toString() : a;
})(V || (V = {}));
var Ss;
(function(n) {
  n.mergeShapes = (e, t) => ({
    ...e,
    ...t
    // second overwrites first
  });
})(Ss || (Ss = {}));
const E = V.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), ze = (n) => {
  switch (typeof n) {
    case "undefined":
      return E.undefined;
    case "string":
      return E.string;
    case "number":
      return Number.isNaN(n) ? E.nan : E.number;
    case "boolean":
      return E.boolean;
    case "function":
      return E.function;
    case "bigint":
      return E.bigint;
    case "symbol":
      return E.symbol;
    case "object":
      return Array.isArray(n) ? E.array : n === null ? E.null : n.then && typeof n.then == "function" && n.catch && typeof n.catch == "function" ? E.promise : typeof Map < "u" && n instanceof Map ? E.map : typeof Set < "u" && n instanceof Set ? E.set : typeof Date < "u" && n instanceof Date ? E.date : E.object;
    default:
      return E.unknown;
  }
}, T = V.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
class qe extends Error {
  get errors() {
    return this.issues;
  }
  constructor(e) {
    super(), this.issues = [], this.addIssue = (r) => {
      this.issues = [...this.issues, r];
    }, this.addIssues = (r = []) => {
      this.issues = [...this.issues, ...r];
    };
    const t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  format(e) {
    const t = e || function(a) {
      return a.message;
    }, r = { _errors: [] }, s = (a) => {
      for (const i of a.issues)
        if (i.code === "invalid_union")
          i.unionErrors.map(s);
        else if (i.code === "invalid_return_type")
          s(i.returnTypeError);
        else if (i.code === "invalid_arguments")
          s(i.argumentsError);
        else if (i.path.length === 0)
          r._errors.push(t(i));
        else {
          let o = r, l = 0;
          for (; l < i.path.length; ) {
            const c = i.path[l];
            l === i.path.length - 1 ? (o[c] = o[c] || { _errors: [] }, o[c]._errors.push(t(i))) : o[c] = o[c] || { _errors: [] }, o = o[c], l++;
          }
        }
    };
    return s(this), r;
  }
  static assert(e) {
    if (!(e instanceof qe))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, V.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    const t = {}, r = [];
    for (const s of this.issues)
      if (s.path.length > 0) {
        const a = s.path[0];
        t[a] = t[a] || [], t[a].push(e(s));
      } else
        r.push(e(s));
    return { formErrors: r, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
}
qe.create = (n) => new qe(n);
const Ar = (n, e) => {
  let t;
  switch (n.code) {
    case T.invalid_type:
      n.received === E.undefined ? t = "Required" : t = `Expected ${n.expected}, received ${n.received}`;
      break;
    case T.invalid_literal:
      t = `Invalid literal value, expected ${JSON.stringify(n.expected, V.jsonStringifyReplacer)}`;
      break;
    case T.unrecognized_keys:
      t = `Unrecognized key(s) in object: ${V.joinValues(n.keys, ", ")}`;
      break;
    case T.invalid_union:
      t = "Invalid input";
      break;
    case T.invalid_union_discriminator:
      t = `Invalid discriminator value. Expected ${V.joinValues(n.options)}`;
      break;
    case T.invalid_enum_value:
      t = `Invalid enum value. Expected ${V.joinValues(n.options)}, received '${n.received}'`;
      break;
    case T.invalid_arguments:
      t = "Invalid function arguments";
      break;
    case T.invalid_return_type:
      t = "Invalid function return type";
      break;
    case T.invalid_date:
      t = "Invalid date";
      break;
    case T.invalid_string:
      typeof n.validation == "object" ? "includes" in n.validation ? (t = `Invalid input: must include "${n.validation.includes}"`, typeof n.validation.position == "number" && (t = `${t} at one or more positions greater than or equal to ${n.validation.position}`)) : "startsWith" in n.validation ? t = `Invalid input: must start with "${n.validation.startsWith}"` : "endsWith" in n.validation ? t = `Invalid input: must end with "${n.validation.endsWith}"` : V.assertNever(n.validation) : n.validation !== "regex" ? t = `Invalid ${n.validation}` : t = "Invalid";
      break;
    case T.too_small:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "more than"} ${n.minimum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "over"} ${n.minimum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${n.minimum}` : n.type === "bigint" ? t = `Number must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${n.minimum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(n.minimum))}` : t = "Invalid input";
      break;
    case T.too_big:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "less than"} ${n.maximum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "under"} ${n.maximum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "bigint" ? t = `BigInt must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly" : n.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(n.maximum))}` : t = "Invalid input";
      break;
    case T.custom:
      t = "Invalid input";
      break;
    case T.invalid_intersection_types:
      t = "Intersection results could not be merged";
      break;
    case T.not_multiple_of:
      t = `Number must be a multiple of ${n.multipleOf}`;
      break;
    case T.not_finite:
      t = "Number must be finite";
      break;
    default:
      t = e.defaultError, V.assertNever(n);
  }
  return { message: t };
};
let Gi = Ar;
function Vi() {
  return Gi;
}
const Wi = (n) => {
  const { data: e, path: t, errorMaps: r, issueData: s } = n, a = [...t, ...s.path || []], i = {
    ...s,
    path: a
  };
  if (s.message !== void 0)
    return {
      ...s,
      path: a,
      message: s.message
    };
  let o = "";
  const l = r.filter((c) => !!c).slice().reverse();
  for (const c of l)
    o = c(i, { data: e, defaultError: o }).message;
  return {
    ...s,
    path: a,
    message: o
  };
};
function C(n, e) {
  const t = Vi(), r = Wi({
    issueData: e,
    data: n.data,
    path: n.path,
    errorMaps: [
      n.common.contextualErrorMap,
      // contextual error map is first priority
      n.schemaErrorMap,
      // then schema-bound map if available
      t,
      // then global override map
      t === Ar ? void 0 : Ar
      // then global default map
    ].filter((s) => !!s)
  });
  n.common.issues.push(r);
}
class le {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(e, t) {
    const r = [];
    for (const s of t) {
      if (s.status === "aborted")
        return L;
      s.status === "dirty" && e.dirty(), r.push(s.value);
    }
    return { status: e.value, value: r };
  }
  static async mergeObjectAsync(e, t) {
    const r = [];
    for (const s of t) {
      const a = await s.key, i = await s.value;
      r.push({
        key: a,
        value: i
      });
    }
    return le.mergeObjectSync(e, r);
  }
  static mergeObjectSync(e, t) {
    const r = {};
    for (const s of t) {
      const { key: a, value: i } = s;
      if (a.status === "aborted" || i.status === "aborted")
        return L;
      a.status === "dirty" && e.dirty(), i.status === "dirty" && e.dirty(), a.value !== "__proto__" && (typeof i.value < "u" || s.alwaysSet) && (r[a.value] = i.value);
    }
    return { status: e.value, value: r };
  }
}
const L = Object.freeze({
  status: "aborted"
}), Qt = (n) => ({ status: "dirty", value: n }), Ie = (n) => ({ status: "valid", value: n }), Is = (n) => n.status === "aborted", Ts = (n) => n.status === "dirty", Wt = (n) => n.status === "valid", Bn = (n) => typeof Promise < "u" && n instanceof Promise;
var P;
(function(n) {
  n.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, n.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(P || (P = {}));
class Ne {
  constructor(e, t, r, s) {
    this._cachedPath = [], this.parent = e, this.data = t, this._path = r, this._key = s;
  }
  get path() {
    return this._cachedPath.length || (Array.isArray(this._key) ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const ks = (n, e) => {
  if (Wt(e))
    return { success: !0, data: e.value };
  if (!n.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const t = new qe(n.common.issues);
      return this._error = t, this._error;
    }
  };
};
function Z(n) {
  if (!n)
    return {};
  const { errorMap: e, invalid_type_error: t, required_error: r, description: s } = n;
  if (e && (t || r))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return e ? { errorMap: e, description: s } : { errorMap: (i, o) => {
    const { message: l } = n;
    return i.code === "invalid_enum_value" ? { message: l ?? o.defaultError } : typeof o.data > "u" ? { message: l ?? r ?? o.defaultError } : i.code !== "invalid_type" ? { message: o.defaultError } : { message: l ?? t ?? o.defaultError };
  }, description: s };
}
class z {
  get description() {
    return this._def.description;
  }
  _getType(e) {
    return ze(e.data);
  }
  _getOrReturnCtx(e, t) {
    return t || {
      common: e.parent.common,
      data: e.data,
      parsedType: ze(e.data),
      schemaErrorMap: this._def.errorMap,
      path: e.path,
      parent: e.parent
    };
  }
  _processInputParams(e) {
    return {
      status: new le(),
      ctx: {
        common: e.parent.common,
        data: e.data,
        parsedType: ze(e.data),
        schemaErrorMap: this._def.errorMap,
        path: e.path,
        parent: e.parent
      }
    };
  }
  _parseSync(e) {
    const t = this._parse(e);
    if (Bn(t))
      throw new Error("Synchronous parse encountered promise.");
    return t;
  }
  _parseAsync(e) {
    const t = this._parse(e);
    return Promise.resolve(t);
  }
  parse(e, t) {
    const r = this.safeParse(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  safeParse(e, t) {
    const r = {
      common: {
        issues: [],
        async: (t == null ? void 0 : t.async) ?? !1,
        contextualErrorMap: t == null ? void 0 : t.errorMap
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: ze(e)
    }, s = this._parseSync({ data: e, path: r.path, parent: r });
    return ks(r, s);
  }
  "~validate"(e) {
    var r, s;
    const t = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: ze(e)
    };
    if (!this["~standard"].async)
      try {
        const a = this._parseSync({ data: e, path: [], parent: t });
        return Wt(a) ? {
          value: a.value
        } : {
          issues: t.common.issues
        };
      } catch (a) {
        (s = (r = a == null ? void 0 : a.message) == null ? void 0 : r.toLowerCase()) != null && s.includes("encountered") && (this["~standard"].async = !0), t.common = {
          issues: [],
          async: !0
        };
      }
    return this._parseAsync({ data: e, path: [], parent: t }).then((a) => Wt(a) ? {
      value: a.value
    } : {
      issues: t.common.issues
    });
  }
  async parseAsync(e, t) {
    const r = await this.safeParseAsync(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  async safeParseAsync(e, t) {
    const r = {
      common: {
        issues: [],
        contextualErrorMap: t == null ? void 0 : t.errorMap,
        async: !0
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: ze(e)
    }, s = this._parse({ data: e, path: r.path, parent: r }), a = await (Bn(s) ? s : Promise.resolve(s));
    return ks(r, a);
  }
  refine(e, t) {
    const r = (s) => typeof t == "string" || typeof t > "u" ? { message: t } : typeof t == "function" ? t(s) : t;
    return this._refinement((s, a) => {
      const i = e(s), o = () => a.addIssue({
        code: T.custom,
        ...r(s)
      });
      return typeof Promise < "u" && i instanceof Promise ? i.then((l) => l ? !0 : (o(), !1)) : i ? !0 : (o(), !1);
    });
  }
  refinement(e, t) {
    return this._refinement((r, s) => e(r) ? !0 : (s.addIssue(typeof t == "function" ? t(r, s) : t), !1));
  }
  _refinement(e) {
    return new wt({
      schema: this,
      typeName: k.ZodEffects,
      effect: { type: "refinement", refinement: e }
    });
  }
  superRefine(e) {
    return this._refinement(e);
  }
  constructor(e) {
    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (t) => this["~validate"](t)
    };
  }
  optional() {
    return Je.create(this, this._def);
  }
  nullable() {
    return xt.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return Ee.create(this);
  }
  promise() {
    return Yn.create(this, this._def);
  }
  or(e) {
    return Gn.create([this, e], this._def);
  }
  and(e) {
    return Vn.create(this, e, this._def);
  }
  transform(e) {
    return new wt({
      ...Z(this._def),
      schema: this,
      typeName: k.ZodEffects,
      effect: { type: "transform", transform: e }
    });
  }
  default(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Xn({
      ...Z(this._def),
      innerType: this,
      defaultValue: t,
      typeName: k.ZodDefault
    });
  }
  brand() {
    return new Aa({
      typeName: k.ZodBranded,
      type: this,
      ...Z(this._def)
    });
  }
  catch(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Qn({
      ...Z(this._def),
      innerType: this,
      catchValue: t,
      typeName: k.ZodCatch
    });
  }
  describe(e) {
    const t = this.constructor;
    return new t({
      ...this._def,
      description: e
    });
  }
  pipe(e) {
    return Qr.create(this, e);
  }
  readonly() {
    return er.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const Hi = /^c[^\s-]{8,}$/i, Ki = /^[0-9a-z]+$/, Yi = /^[0-9A-HJKMNP-TV-Z]{26}$/i, Xi = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i, Qi = /^[a-z0-9_-]{21}$/i, eo = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/, to = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/, no = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i, ro = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
let mr;
const so = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, ao = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/, io = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/, oo = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/, uo = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, co = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/, Ia = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))", lo = new RegExp(`^${Ia}$`);
function Ta(n) {
  let e = "[0-5]\\d";
  n.precision ? e = `${e}\\.\\d{${n.precision}}` : n.precision == null && (e = `${e}(\\.\\d+)?`);
  const t = n.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`;
}
function po(n) {
  return new RegExp(`^${Ta(n)}$`);
}
function fo(n) {
  let e = `${Ia}T${Ta(n)}`;
  const t = [];
  return t.push(n.local ? "Z?" : "Z"), n.offset && t.push("([+-]\\d{2}:?\\d{2})"), e = `${e}(${t.join("|")})`, new RegExp(`^${e}$`);
}
function ho(n, e) {
  return !!((e === "v4" || !e) && so.test(n) || (e === "v6" || !e) && io.test(n));
}
function mo(n, e) {
  if (!eo.test(n))
    return !1;
  try {
    const [t] = n.split(".");
    if (!t)
      return !1;
    const r = t.replace(/-/g, "+").replace(/_/g, "/").padEnd(t.length + (4 - t.length % 4) % 4, "="), s = JSON.parse(atob(r));
    return !(typeof s != "object" || s === null || "typ" in s && (s == null ? void 0 : s.typ) !== "JWT" || !s.alg || e && s.alg !== e);
  } catch {
    return !1;
  }
}
function go(n, e) {
  return !!((e === "v4" || !e) && ao.test(n) || (e === "v6" || !e) && oo.test(n));
}
class Ue extends z {
  _parse(e) {
    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== E.string) {
      const a = this._getOrReturnCtx(e);
      return C(a, {
        code: T.invalid_type,
        expected: E.string,
        received: a.parsedType
      }), L;
    }
    const r = new le();
    let s;
    for (const a of this._def.checks)
      if (a.kind === "min")
        e.data.length < a.value && (s = this._getOrReturnCtx(e, s), C(s, {
          code: T.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "max")
        e.data.length > a.value && (s = this._getOrReturnCtx(e, s), C(s, {
          code: T.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "length") {
        const i = e.data.length > a.value, o = e.data.length < a.value;
        (i || o) && (s = this._getOrReturnCtx(e, s), i ? C(s, {
          code: T.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }) : o && C(s, {
          code: T.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }), r.dirty());
      } else if (a.kind === "email")
        no.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
          validation: "email",
          code: T.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "emoji")
        mr || (mr = new RegExp(ro, "u")), mr.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
          validation: "emoji",
          code: T.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "uuid")
        Xi.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
          validation: "uuid",
          code: T.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "nanoid")
        Qi.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
          validation: "nanoid",
          code: T.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid")
        Hi.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
          validation: "cuid",
          code: T.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid2")
        Ki.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
          validation: "cuid2",
          code: T.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "ulid")
        Yi.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
          validation: "ulid",
          code: T.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "url")
        try {
          new URL(e.data);
        } catch {
          s = this._getOrReturnCtx(e, s), C(s, {
            validation: "url",
            code: T.invalid_string,
            message: a.message
          }), r.dirty();
        }
      else a.kind === "regex" ? (a.regex.lastIndex = 0, a.regex.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
        validation: "regex",
        code: T.invalid_string,
        message: a.message
      }), r.dirty())) : a.kind === "trim" ? e.data = e.data.trim() : a.kind === "includes" ? e.data.includes(a.value, a.position) || (s = this._getOrReturnCtx(e, s), C(s, {
        code: T.invalid_string,
        validation: { includes: a.value, position: a.position },
        message: a.message
      }), r.dirty()) : a.kind === "toLowerCase" ? e.data = e.data.toLowerCase() : a.kind === "toUpperCase" ? e.data = e.data.toUpperCase() : a.kind === "startsWith" ? e.data.startsWith(a.value) || (s = this._getOrReturnCtx(e, s), C(s, {
        code: T.invalid_string,
        validation: { startsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "endsWith" ? e.data.endsWith(a.value) || (s = this._getOrReturnCtx(e, s), C(s, {
        code: T.invalid_string,
        validation: { endsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "datetime" ? fo(a).test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
        code: T.invalid_string,
        validation: "datetime",
        message: a.message
      }), r.dirty()) : a.kind === "date" ? lo.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
        code: T.invalid_string,
        validation: "date",
        message: a.message
      }), r.dirty()) : a.kind === "time" ? po(a).test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
        code: T.invalid_string,
        validation: "time",
        message: a.message
      }), r.dirty()) : a.kind === "duration" ? to.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
        validation: "duration",
        code: T.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "ip" ? ho(e.data, a.version) || (s = this._getOrReturnCtx(e, s), C(s, {
        validation: "ip",
        code: T.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "jwt" ? mo(e.data, a.alg) || (s = this._getOrReturnCtx(e, s), C(s, {
        validation: "jwt",
        code: T.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "cidr" ? go(e.data, a.version) || (s = this._getOrReturnCtx(e, s), C(s, {
        validation: "cidr",
        code: T.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64" ? uo.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
        validation: "base64",
        code: T.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64url" ? co.test(e.data) || (s = this._getOrReturnCtx(e, s), C(s, {
        validation: "base64url",
        code: T.invalid_string,
        message: a.message
      }), r.dirty()) : V.assertNever(a);
    return { status: r.value, value: e.data };
  }
  _regex(e, t, r) {
    return this.refinement((s) => e.test(s), {
      validation: t,
      code: T.invalid_string,
      ...P.errToObj(r)
    });
  }
  _addCheck(e) {
    return new Ue({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  email(e) {
    return this._addCheck({ kind: "email", ...P.errToObj(e) });
  }
  url(e) {
    return this._addCheck({ kind: "url", ...P.errToObj(e) });
  }
  emoji(e) {
    return this._addCheck({ kind: "emoji", ...P.errToObj(e) });
  }
  uuid(e) {
    return this._addCheck({ kind: "uuid", ...P.errToObj(e) });
  }
  nanoid(e) {
    return this._addCheck({ kind: "nanoid", ...P.errToObj(e) });
  }
  cuid(e) {
    return this._addCheck({ kind: "cuid", ...P.errToObj(e) });
  }
  cuid2(e) {
    return this._addCheck({ kind: "cuid2", ...P.errToObj(e) });
  }
  ulid(e) {
    return this._addCheck({ kind: "ulid", ...P.errToObj(e) });
  }
  base64(e) {
    return this._addCheck({ kind: "base64", ...P.errToObj(e) });
  }
  base64url(e) {
    return this._addCheck({
      kind: "base64url",
      ...P.errToObj(e)
    });
  }
  jwt(e) {
    return this._addCheck({ kind: "jwt", ...P.errToObj(e) });
  }
  ip(e) {
    return this._addCheck({ kind: "ip", ...P.errToObj(e) });
  }
  cidr(e) {
    return this._addCheck({ kind: "cidr", ...P.errToObj(e) });
  }
  datetime(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      local: !1,
      message: e
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      offset: (e == null ? void 0 : e.offset) ?? !1,
      local: (e == null ? void 0 : e.local) ?? !1,
      ...P.errToObj(e == null ? void 0 : e.message)
    });
  }
  date(e) {
    return this._addCheck({ kind: "date", message: e });
  }
  time(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "time",
      precision: null,
      message: e
    }) : this._addCheck({
      kind: "time",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      ...P.errToObj(e == null ? void 0 : e.message)
    });
  }
  duration(e) {
    return this._addCheck({ kind: "duration", ...P.errToObj(e) });
  }
  regex(e, t) {
    return this._addCheck({
      kind: "regex",
      regex: e,
      ...P.errToObj(t)
    });
  }
  includes(e, t) {
    return this._addCheck({
      kind: "includes",
      value: e,
      position: t == null ? void 0 : t.position,
      ...P.errToObj(t == null ? void 0 : t.message)
    });
  }
  startsWith(e, t) {
    return this._addCheck({
      kind: "startsWith",
      value: e,
      ...P.errToObj(t)
    });
  }
  endsWith(e, t) {
    return this._addCheck({
      kind: "endsWith",
      value: e,
      ...P.errToObj(t)
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e,
      ...P.errToObj(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e,
      ...P.errToObj(t)
    });
  }
  length(e, t) {
    return this._addCheck({
      kind: "length",
      value: e,
      ...P.errToObj(t)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(e) {
    return this.min(1, P.errToObj(e));
  }
  trim() {
    return new Ue({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new Ue({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new Ue({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((e) => e.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((e) => e.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((e) => e.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((e) => e.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((e) => e.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((e) => e.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((e) => e.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((e) => e.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((e) => e.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((e) => e.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((e) => e.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((e) => e.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((e) => e.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((e) => e.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((e) => e.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((e) => e.kind === "base64url");
  }
  get minLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Ue.create = (n) => new Ue({
  checks: [],
  typeName: k.ZodString,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...Z(n)
});
function yo(n, e) {
  const t = (n.toString().split(".")[1] || "").length, r = (e.toString().split(".")[1] || "").length, s = t > r ? t : r, a = Number.parseInt(n.toFixed(s).replace(".", "")), i = Number.parseInt(e.toFixed(s).replace(".", ""));
  return a % i / 10 ** s;
}
class Ht extends z {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== E.number) {
      const a = this._getOrReturnCtx(e);
      return C(a, {
        code: T.invalid_type,
        expected: E.number,
        received: a.parsedType
      }), L;
    }
    let r;
    const s = new le();
    for (const a of this._def.checks)
      a.kind === "int" ? V.isInteger(e.data) || (r = this._getOrReturnCtx(e, r), C(r, {
        code: T.invalid_type,
        expected: "integer",
        received: "float",
        message: a.message
      }), s.dirty()) : a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), C(r, {
        code: T.too_small,
        minimum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), C(r, {
        code: T.too_big,
        maximum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? yo(e.data, a.value) !== 0 && (r = this._getOrReturnCtx(e, r), C(r, {
        code: T.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : a.kind === "finite" ? Number.isFinite(e.data) || (r = this._getOrReturnCtx(e, r), C(r, {
        code: T.not_finite,
        message: a.message
      }), s.dirty()) : V.assertNever(a);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, P.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, P.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, P.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, P.toString(t));
  }
  setLimit(e, t, r, s) {
    return new Ht({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: P.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new Ht({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  int(e) {
    return this._addCheck({
      kind: "int",
      message: P.toString(e)
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: P.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: P.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: P.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: P.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: P.toString(t)
    });
  }
  finite(e) {
    return this._addCheck({
      kind: "finite",
      message: P.toString(e)
    });
  }
  safe(e) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: P.toString(e)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: P.toString(e)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
  get isInt() {
    return !!this._def.checks.find((e) => e.kind === "int" || e.kind === "multipleOf" && V.isInteger(e.value));
  }
  get isFinite() {
    let e = null, t = null;
    for (const r of this._def.checks) {
      if (r.kind === "finite" || r.kind === "int" || r.kind === "multipleOf")
        return !0;
      r.kind === "min" ? (t === null || r.value > t) && (t = r.value) : r.kind === "max" && (e === null || r.value < e) && (e = r.value);
    }
    return Number.isFinite(t) && Number.isFinite(e);
  }
}
Ht.create = (n) => new Ht({
  checks: [],
  typeName: k.ZodNumber,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...Z(n)
});
class nn extends z {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(e) {
    if (this._def.coerce)
      try {
        e.data = BigInt(e.data);
      } catch {
        return this._getInvalidInput(e);
      }
    if (this._getType(e) !== E.bigint)
      return this._getInvalidInput(e);
    let r;
    const s = new le();
    for (const a of this._def.checks)
      a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), C(r, {
        code: T.too_small,
        type: "bigint",
        minimum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), C(r, {
        code: T.too_big,
        type: "bigint",
        maximum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? e.data % a.value !== BigInt(0) && (r = this._getOrReturnCtx(e, r), C(r, {
        code: T.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : V.assertNever(a);
    return { status: s.value, value: e.data };
  }
  _getInvalidInput(e) {
    const t = this._getOrReturnCtx(e);
    return C(t, {
      code: T.invalid_type,
      expected: E.bigint,
      received: t.parsedType
    }), L;
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, P.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, P.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, P.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, P.toString(t));
  }
  setLimit(e, t, r, s) {
    return new nn({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: P.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new nn({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: P.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: P.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: P.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: P.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: P.toString(t)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
nn.create = (n) => new nn({
  checks: [],
  typeName: k.ZodBigInt,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...Z(n)
});
class Or extends z {
  _parse(e) {
    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== E.boolean) {
      const r = this._getOrReturnCtx(e);
      return C(r, {
        code: T.invalid_type,
        expected: E.boolean,
        received: r.parsedType
      }), L;
    }
    return Ie(e.data);
  }
}
Or.create = (n) => new Or({
  typeName: k.ZodBoolean,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...Z(n)
});
class zn extends z {
  _parse(e) {
    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== E.date) {
      const a = this._getOrReturnCtx(e);
      return C(a, {
        code: T.invalid_type,
        expected: E.date,
        received: a.parsedType
      }), L;
    }
    if (Number.isNaN(e.data.getTime())) {
      const a = this._getOrReturnCtx(e);
      return C(a, {
        code: T.invalid_date
      }), L;
    }
    const r = new le();
    let s;
    for (const a of this._def.checks)
      a.kind === "min" ? e.data.getTime() < a.value && (s = this._getOrReturnCtx(e, s), C(s, {
        code: T.too_small,
        message: a.message,
        inclusive: !0,
        exact: !1,
        minimum: a.value,
        type: "date"
      }), r.dirty()) : a.kind === "max" ? e.data.getTime() > a.value && (s = this._getOrReturnCtx(e, s), C(s, {
        code: T.too_big,
        message: a.message,
        inclusive: !0,
        exact: !1,
        maximum: a.value,
        type: "date"
      }), r.dirty()) : V.assertNever(a);
    return {
      status: r.value,
      value: new Date(e.data.getTime())
    };
  }
  _addCheck(e) {
    return new zn({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e.getTime(),
      message: P.toString(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e.getTime(),
      message: P.toString(t)
    });
  }
  get minDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
  get maxDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
}
zn.create = (n) => new zn({
  checks: [],
  coerce: (n == null ? void 0 : n.coerce) || !1,
  typeName: k.ZodDate,
  ...Z(n)
});
class As extends z {
  _parse(e) {
    if (this._getType(e) !== E.symbol) {
      const r = this._getOrReturnCtx(e);
      return C(r, {
        code: T.invalid_type,
        expected: E.symbol,
        received: r.parsedType
      }), L;
    }
    return Ie(e.data);
  }
}
As.create = (n) => new As({
  typeName: k.ZodSymbol,
  ...Z(n)
});
class Cr extends z {
  _parse(e) {
    if (this._getType(e) !== E.undefined) {
      const r = this._getOrReturnCtx(e);
      return C(r, {
        code: T.invalid_type,
        expected: E.undefined,
        received: r.parsedType
      }), L;
    }
    return Ie(e.data);
  }
}
Cr.create = (n) => new Cr({
  typeName: k.ZodUndefined,
  ...Z(n)
});
class Er extends z {
  _parse(e) {
    if (this._getType(e) !== E.null) {
      const r = this._getOrReturnCtx(e);
      return C(r, {
        code: T.invalid_type,
        expected: E.null,
        received: r.parsedType
      }), L;
    }
    return Ie(e.data);
  }
}
Er.create = (n) => new Er({
  typeName: k.ZodNull,
  ...Z(n)
});
class rn extends z {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(e) {
    return Ie(e.data);
  }
}
rn.create = (n) => new rn({
  typeName: k.ZodAny,
  ...Z(n)
});
class Os extends z {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(e) {
    return Ie(e.data);
  }
}
Os.create = (n) => new Os({
  typeName: k.ZodUnknown,
  ...Z(n)
});
class Qe extends z {
  _parse(e) {
    const t = this._getOrReturnCtx(e);
    return C(t, {
      code: T.invalid_type,
      expected: E.never,
      received: t.parsedType
    }), L;
  }
}
Qe.create = (n) => new Qe({
  typeName: k.ZodNever,
  ...Z(n)
});
class Cs extends z {
  _parse(e) {
    if (this._getType(e) !== E.undefined) {
      const r = this._getOrReturnCtx(e);
      return C(r, {
        code: T.invalid_type,
        expected: E.void,
        received: r.parsedType
      }), L;
    }
    return Ie(e.data);
  }
}
Cs.create = (n) => new Cs({
  typeName: k.ZodVoid,
  ...Z(n)
});
class Ee extends z {
  _parse(e) {
    const { ctx: t, status: r } = this._processInputParams(e), s = this._def;
    if (t.parsedType !== E.array)
      return C(t, {
        code: T.invalid_type,
        expected: E.array,
        received: t.parsedType
      }), L;
    if (s.exactLength !== null) {
      const i = t.data.length > s.exactLength.value, o = t.data.length < s.exactLength.value;
      (i || o) && (C(t, {
        code: i ? T.too_big : T.too_small,
        minimum: o ? s.exactLength.value : void 0,
        maximum: i ? s.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: s.exactLength.message
      }), r.dirty());
    }
    if (s.minLength !== null && t.data.length < s.minLength.value && (C(t, {
      code: T.too_small,
      minimum: s.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.minLength.message
    }), r.dirty()), s.maxLength !== null && t.data.length > s.maxLength.value && (C(t, {
      code: T.too_big,
      maximum: s.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.maxLength.message
    }), r.dirty()), t.common.async)
      return Promise.all([...t.data].map((i, o) => s.type._parseAsync(new Ne(t, i, t.path, o)))).then((i) => le.mergeArray(r, i));
    const a = [...t.data].map((i, o) => s.type._parseSync(new Ne(t, i, t.path, o)));
    return le.mergeArray(r, a);
  }
  get element() {
    return this._def.type;
  }
  min(e, t) {
    return new Ee({
      ...this._def,
      minLength: { value: e, message: P.toString(t) }
    });
  }
  max(e, t) {
    return new Ee({
      ...this._def,
      maxLength: { value: e, message: P.toString(t) }
    });
  }
  length(e, t) {
    return new Ee({
      ...this._def,
      exactLength: { value: e, message: P.toString(t) }
    });
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
Ee.create = (n, e) => new Ee({
  type: n,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: k.ZodArray,
  ...Z(e)
});
function Ot(n) {
  if (n instanceof ee) {
    const e = {};
    for (const t in n.shape) {
      const r = n.shape[t];
      e[t] = Je.create(Ot(r));
    }
    return new ee({
      ...n._def,
      shape: () => e
    });
  } else return n instanceof Ee ? new Ee({
    ...n._def,
    type: Ot(n.element)
  }) : n instanceof Je ? Je.create(Ot(n.unwrap())) : n instanceof xt ? xt.create(Ot(n.unwrap())) : n instanceof vt ? vt.create(n.items.map((e) => Ot(e))) : n;
}
class ee extends z {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const e = this._def.shape(), t = V.objectKeys(e);
    return this._cached = { shape: e, keys: t }, this._cached;
  }
  _parse(e) {
    if (this._getType(e) !== E.object) {
      const c = this._getOrReturnCtx(e);
      return C(c, {
        code: T.invalid_type,
        expected: E.object,
        received: c.parsedType
      }), L;
    }
    const { status: r, ctx: s } = this._processInputParams(e), { shape: a, keys: i } = this._getCached(), o = [];
    if (!(this._def.catchall instanceof Qe && this._def.unknownKeys === "strip"))
      for (const c in s.data)
        i.includes(c) || o.push(c);
    const l = [];
    for (const c of i) {
      const p = a[c], f = s.data[c];
      l.push({
        key: { status: "valid", value: c },
        value: p._parse(new Ne(s, f, s.path, c)),
        alwaysSet: c in s.data
      });
    }
    if (this._def.catchall instanceof Qe) {
      const c = this._def.unknownKeys;
      if (c === "passthrough")
        for (const p of o)
          l.push({
            key: { status: "valid", value: p },
            value: { status: "valid", value: s.data[p] }
          });
      else if (c === "strict")
        o.length > 0 && (C(s, {
          code: T.unrecognized_keys,
          keys: o
        }), r.dirty());
      else if (c !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const c = this._def.catchall;
      for (const p of o) {
        const f = s.data[p];
        l.push({
          key: { status: "valid", value: p },
          value: c._parse(
            new Ne(s, f, s.path, p)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: p in s.data
        });
      }
    }
    return s.common.async ? Promise.resolve().then(async () => {
      const c = [];
      for (const p of l) {
        const f = await p.key, h = await p.value;
        c.push({
          key: f,
          value: h,
          alwaysSet: p.alwaysSet
        });
      }
      return c;
    }).then((c) => le.mergeObjectSync(r, c)) : le.mergeObjectSync(r, l);
  }
  get shape() {
    return this._def.shape();
  }
  strict(e) {
    return P.errToObj, new ee({
      ...this._def,
      unknownKeys: "strict",
      ...e !== void 0 ? {
        errorMap: (t, r) => {
          var a, i;
          const s = ((i = (a = this._def).errorMap) == null ? void 0 : i.call(a, t, r).message) ?? r.defaultError;
          return t.code === "unrecognized_keys" ? {
            message: P.errToObj(e).message ?? s
          } : {
            message: s
          };
        }
      } : {}
    });
  }
  strip() {
    return new ee({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ee({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(e) {
    return new ee({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...e
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(e) {
    return new ee({
      unknownKeys: e._def.unknownKeys,
      catchall: e._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...e._def.shape()
      }),
      typeName: k.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(e, t) {
    return this.augment({ [e]: t });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(e) {
    return new ee({
      ...this._def,
      catchall: e
    });
  }
  pick(e) {
    const t = {};
    for (const r of V.objectKeys(e))
      e[r] && this.shape[r] && (t[r] = this.shape[r]);
    return new ee({
      ...this._def,
      shape: () => t
    });
  }
  omit(e) {
    const t = {};
    for (const r of V.objectKeys(this.shape))
      e[r] || (t[r] = this.shape[r]);
    return new ee({
      ...this._def,
      shape: () => t
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return Ot(this);
  }
  partial(e) {
    const t = {};
    for (const r of V.objectKeys(this.shape)) {
      const s = this.shape[r];
      e && !e[r] ? t[r] = s : t[r] = s.optional();
    }
    return new ee({
      ...this._def,
      shape: () => t
    });
  }
  required(e) {
    const t = {};
    for (const r of V.objectKeys(this.shape))
      if (e && !e[r])
        t[r] = this.shape[r];
      else {
        let a = this.shape[r];
        for (; a instanceof Je; )
          a = a._def.innerType;
        t[r] = a;
      }
    return new ee({
      ...this._def,
      shape: () => t
    });
  }
  keyof() {
    return ka(V.objectKeys(this.shape));
  }
}
ee.create = (n, e) => new ee({
  shape: () => n,
  unknownKeys: "strip",
  catchall: Qe.create(),
  typeName: k.ZodObject,
  ...Z(e)
});
ee.strictCreate = (n, e) => new ee({
  shape: () => n,
  unknownKeys: "strict",
  catchall: Qe.create(),
  typeName: k.ZodObject,
  ...Z(e)
});
ee.lazycreate = (n, e) => new ee({
  shape: n,
  unknownKeys: "strip",
  catchall: Qe.create(),
  typeName: k.ZodObject,
  ...Z(e)
});
class Gn extends z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = this._def.options;
    function s(a) {
      for (const o of a)
        if (o.result.status === "valid")
          return o.result;
      for (const o of a)
        if (o.result.status === "dirty")
          return t.common.issues.push(...o.ctx.common.issues), o.result;
      const i = a.map((o) => new qe(o.ctx.common.issues));
      return C(t, {
        code: T.invalid_union,
        unionErrors: i
      }), L;
    }
    if (t.common.async)
      return Promise.all(r.map(async (a) => {
        const i = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await a._parseAsync({
            data: t.data,
            path: t.path,
            parent: i
          }),
          ctx: i
        };
      })).then(s);
    {
      let a;
      const i = [];
      for (const l of r) {
        const c = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        }, p = l._parseSync({
          data: t.data,
          path: t.path,
          parent: c
        });
        if (p.status === "valid")
          return p;
        p.status === "dirty" && !a && (a = { result: p, ctx: c }), c.common.issues.length && i.push(c.common.issues);
      }
      if (a)
        return t.common.issues.push(...a.ctx.common.issues), a.result;
      const o = i.map((l) => new qe(l));
      return C(t, {
        code: T.invalid_union,
        unionErrors: o
      }), L;
    }
  }
  get options() {
    return this._def.options;
  }
}
Gn.create = (n, e) => new Gn({
  options: n,
  typeName: k.ZodUnion,
  ...Z(e)
});
const Me = (n) => n instanceof Hn ? Me(n.schema) : n instanceof wt ? Me(n.innerType()) : n instanceof Kn ? [n.value] : n instanceof bt ? n.options : n instanceof Rr ? V.objectValues(n.enum) : n instanceof Xn ? Me(n._def.innerType) : n instanceof Cr ? [void 0] : n instanceof Er ? [null] : n instanceof Je ? [void 0, ...Me(n.unwrap())] : n instanceof xt ? [null, ...Me(n.unwrap())] : n instanceof Aa || n instanceof er ? Me(n.unwrap()) : n instanceof Qn ? Me(n._def.innerType) : [];
class Xr extends z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== E.object)
      return C(t, {
        code: T.invalid_type,
        expected: E.object,
        received: t.parsedType
      }), L;
    const r = this.discriminator, s = t.data[r], a = this.optionsMap.get(s);
    return a ? t.common.async ? a._parseAsync({
      data: t.data,
      path: t.path,
      parent: t
    }) : a._parseSync({
      data: t.data,
      path: t.path,
      parent: t
    }) : (C(t, {
      code: T.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [r]
    }), L);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(e, t, r) {
    const s = /* @__PURE__ */ new Map();
    for (const a of t) {
      const i = Me(a.shape[e]);
      if (!i.length)
        throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);
      for (const o of i) {
        if (s.has(o))
          throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);
        s.set(o, a);
      }
    }
    return new Xr({
      typeName: k.ZodDiscriminatedUnion,
      discriminator: e,
      options: t,
      optionsMap: s,
      ...Z(r)
    });
  }
}
function Nr(n, e) {
  const t = ze(n), r = ze(e);
  if (n === e)
    return { valid: !0, data: n };
  if (t === E.object && r === E.object) {
    const s = V.objectKeys(e), a = V.objectKeys(n).filter((o) => s.indexOf(o) !== -1), i = { ...n, ...e };
    for (const o of a) {
      const l = Nr(n[o], e[o]);
      if (!l.valid)
        return { valid: !1 };
      i[o] = l.data;
    }
    return { valid: !0, data: i };
  } else if (t === E.array && r === E.array) {
    if (n.length !== e.length)
      return { valid: !1 };
    const s = [];
    for (let a = 0; a < n.length; a++) {
      const i = n[a], o = e[a], l = Nr(i, o);
      if (!l.valid)
        return { valid: !1 };
      s.push(l.data);
    }
    return { valid: !0, data: s };
  } else return t === E.date && r === E.date && +n == +e ? { valid: !0, data: n } : { valid: !1 };
}
class Vn extends z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = (a, i) => {
      if (Is(a) || Is(i))
        return L;
      const o = Nr(a.value, i.value);
      return o.valid ? ((Ts(a) || Ts(i)) && t.dirty(), { status: t.value, value: o.data }) : (C(r, {
        code: T.invalid_intersection_types
      }), L);
    };
    return r.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      }),
      this._def.right._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      })
    ]).then(([a, i]) => s(a, i)) : s(this._def.left._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }), this._def.right._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }));
  }
}
Vn.create = (n, e, t) => new Vn({
  left: n,
  right: e,
  typeName: k.ZodIntersection,
  ...Z(t)
});
class vt extends z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== E.array)
      return C(r, {
        code: T.invalid_type,
        expected: E.array,
        received: r.parsedType
      }), L;
    if (r.data.length < this._def.items.length)
      return C(r, {
        code: T.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), L;
    !this._def.rest && r.data.length > this._def.items.length && (C(r, {
      code: T.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), t.dirty());
    const a = [...r.data].map((i, o) => {
      const l = this._def.items[o] || this._def.rest;
      return l ? l._parse(new Ne(r, i, r.path, o)) : null;
    }).filter((i) => !!i);
    return r.common.async ? Promise.all(a).then((i) => le.mergeArray(t, i)) : le.mergeArray(t, a);
  }
  get items() {
    return this._def.items;
  }
  rest(e) {
    return new vt({
      ...this._def,
      rest: e
    });
  }
}
vt.create = (n, e) => {
  if (!Array.isArray(n))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new vt({
    items: n,
    typeName: k.ZodTuple,
    rest: null,
    ...Z(e)
  });
};
class Wn extends z {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== E.object)
      return C(r, {
        code: T.invalid_type,
        expected: E.object,
        received: r.parsedType
      }), L;
    const s = [], a = this._def.keyType, i = this._def.valueType;
    for (const o in r.data)
      s.push({
        key: a._parse(new Ne(r, o, r.path, o)),
        value: i._parse(new Ne(r, r.data[o], r.path, o)),
        alwaysSet: o in r.data
      });
    return r.common.async ? le.mergeObjectAsync(t, s) : le.mergeObjectSync(t, s);
  }
  get element() {
    return this._def.valueType;
  }
  static create(e, t, r) {
    return t instanceof z ? new Wn({
      keyType: e,
      valueType: t,
      typeName: k.ZodRecord,
      ...Z(r)
    }) : new Wn({
      keyType: Ue.create(),
      valueType: e,
      typeName: k.ZodRecord,
      ...Z(t)
    });
  }
}
class Es extends z {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== E.map)
      return C(r, {
        code: T.invalid_type,
        expected: E.map,
        received: r.parsedType
      }), L;
    const s = this._def.keyType, a = this._def.valueType, i = [...r.data.entries()].map(([o, l], c) => ({
      key: s._parse(new Ne(r, o, r.path, [c, "key"])),
      value: a._parse(new Ne(r, l, r.path, [c, "value"]))
    }));
    if (r.common.async) {
      const o = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const l of i) {
          const c = await l.key, p = await l.value;
          if (c.status === "aborted" || p.status === "aborted")
            return L;
          (c.status === "dirty" || p.status === "dirty") && t.dirty(), o.set(c.value, p.value);
        }
        return { status: t.value, value: o };
      });
    } else {
      const o = /* @__PURE__ */ new Map();
      for (const l of i) {
        const c = l.key, p = l.value;
        if (c.status === "aborted" || p.status === "aborted")
          return L;
        (c.status === "dirty" || p.status === "dirty") && t.dirty(), o.set(c.value, p.value);
      }
      return { status: t.value, value: o };
    }
  }
}
Es.create = (n, e, t) => new Es({
  valueType: e,
  keyType: n,
  typeName: k.ZodMap,
  ...Z(t)
});
class sn extends z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== E.set)
      return C(r, {
        code: T.invalid_type,
        expected: E.set,
        received: r.parsedType
      }), L;
    const s = this._def;
    s.minSize !== null && r.data.size < s.minSize.value && (C(r, {
      code: T.too_small,
      minimum: s.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.minSize.message
    }), t.dirty()), s.maxSize !== null && r.data.size > s.maxSize.value && (C(r, {
      code: T.too_big,
      maximum: s.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.maxSize.message
    }), t.dirty());
    const a = this._def.valueType;
    function i(l) {
      const c = /* @__PURE__ */ new Set();
      for (const p of l) {
        if (p.status === "aborted")
          return L;
        p.status === "dirty" && t.dirty(), c.add(p.value);
      }
      return { status: t.value, value: c };
    }
    const o = [...r.data.values()].map((l, c) => a._parse(new Ne(r, l, r.path, c)));
    return r.common.async ? Promise.all(o).then((l) => i(l)) : i(o);
  }
  min(e, t) {
    return new sn({
      ...this._def,
      minSize: { value: e, message: P.toString(t) }
    });
  }
  max(e, t) {
    return new sn({
      ...this._def,
      maxSize: { value: e, message: P.toString(t) }
    });
  }
  size(e, t) {
    return this.min(e, t).max(e, t);
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
sn.create = (n, e) => new sn({
  valueType: n,
  minSize: null,
  maxSize: null,
  typeName: k.ZodSet,
  ...Z(e)
});
class Hn extends z {
  get schema() {
    return this._def.getter();
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    return this._def.getter()._parse({ data: t.data, path: t.path, parent: t });
  }
}
Hn.create = (n, e) => new Hn({
  getter: n,
  typeName: k.ZodLazy,
  ...Z(e)
});
class Kn extends z {
  _parse(e) {
    if (e.data !== this._def.value) {
      const t = this._getOrReturnCtx(e);
      return C(t, {
        received: t.data,
        code: T.invalid_literal,
        expected: this._def.value
      }), L;
    }
    return { status: "valid", value: e.data };
  }
  get value() {
    return this._def.value;
  }
}
Kn.create = (n, e) => new Kn({
  value: n,
  typeName: k.ZodLiteral,
  ...Z(e)
});
function ka(n, e) {
  return new bt({
    values: n,
    typeName: k.ZodEnum,
    ...Z(e)
  });
}
class bt extends z {
  _parse(e) {
    if (typeof e.data != "string") {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return C(t, {
        expected: V.joinValues(r),
        received: t.parsedType,
        code: T.invalid_type
      }), L;
    }
    if (this._cache || (this._cache = new Set(this._def.values)), !this._cache.has(e.data)) {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return C(t, {
        received: t.data,
        code: T.invalid_enum_value,
        options: r
      }), L;
    }
    return Ie(e.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Values() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  extract(e, t = this._def) {
    return bt.create(e, {
      ...this._def,
      ...t
    });
  }
  exclude(e, t = this._def) {
    return bt.create(this.options.filter((r) => !e.includes(r)), {
      ...this._def,
      ...t
    });
  }
}
bt.create = ka;
class Rr extends z {
  _parse(e) {
    const t = V.getValidEnumValues(this._def.values), r = this._getOrReturnCtx(e);
    if (r.parsedType !== E.string && r.parsedType !== E.number) {
      const s = V.objectValues(t);
      return C(r, {
        expected: V.joinValues(s),
        received: r.parsedType,
        code: T.invalid_type
      }), L;
    }
    if (this._cache || (this._cache = new Set(V.getValidEnumValues(this._def.values))), !this._cache.has(e.data)) {
      const s = V.objectValues(t);
      return C(r, {
        received: r.data,
        code: T.invalid_enum_value,
        options: s
      }), L;
    }
    return Ie(e.data);
  }
  get enum() {
    return this._def.values;
  }
}
Rr.create = (n, e) => new Rr({
  values: n,
  typeName: k.ZodNativeEnum,
  ...Z(e)
});
class Yn extends z {
  unwrap() {
    return this._def.type;
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== E.promise && t.common.async === !1)
      return C(t, {
        code: T.invalid_type,
        expected: E.promise,
        received: t.parsedType
      }), L;
    const r = t.parsedType === E.promise ? t.data : Promise.resolve(t.data);
    return Ie(r.then((s) => this._def.type.parseAsync(s, {
      path: t.path,
      errorMap: t.common.contextualErrorMap
    })));
  }
}
Yn.create = (n, e) => new Yn({
  type: n,
  typeName: k.ZodPromise,
  ...Z(e)
});
class wt extends z {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === k.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = this._def.effect || null, a = {
      addIssue: (i) => {
        C(r, i), i.fatal ? t.abort() : t.dirty();
      },
      get path() {
        return r.path;
      }
    };
    if (a.addIssue = a.addIssue.bind(a), s.type === "preprocess") {
      const i = s.transform(r.data, a);
      if (r.common.async)
        return Promise.resolve(i).then(async (o) => {
          if (t.value === "aborted")
            return L;
          const l = await this._def.schema._parseAsync({
            data: o,
            path: r.path,
            parent: r
          });
          return l.status === "aborted" ? L : l.status === "dirty" || t.value === "dirty" ? Qt(l.value) : l;
        });
      {
        if (t.value === "aborted")
          return L;
        const o = this._def.schema._parseSync({
          data: i,
          path: r.path,
          parent: r
        });
        return o.status === "aborted" ? L : o.status === "dirty" || t.value === "dirty" ? Qt(o.value) : o;
      }
    }
    if (s.type === "refinement") {
      const i = (o) => {
        const l = s.refinement(o, a);
        if (r.common.async)
          return Promise.resolve(l);
        if (l instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return o;
      };
      if (r.common.async === !1) {
        const o = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return o.status === "aborted" ? L : (o.status === "dirty" && t.dirty(), i(o.value), { status: t.value, value: o.value });
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((o) => o.status === "aborted" ? L : (o.status === "dirty" && t.dirty(), i(o.value).then(() => ({ status: t.value, value: o.value }))));
    }
    if (s.type === "transform")
      if (r.common.async === !1) {
        const i = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        if (!Wt(i))
          return L;
        const o = s.transform(i.value, a);
        if (o instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: t.value, value: o };
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((i) => Wt(i) ? Promise.resolve(s.transform(i.value, a)).then((o) => ({
          status: t.value,
          value: o
        })) : L);
    V.assertNever(s);
  }
}
wt.create = (n, e, t) => new wt({
  schema: n,
  typeName: k.ZodEffects,
  effect: e,
  ...Z(t)
});
wt.createWithPreprocess = (n, e, t) => new wt({
  schema: e,
  effect: { type: "preprocess", transform: n },
  typeName: k.ZodEffects,
  ...Z(t)
});
class Je extends z {
  _parse(e) {
    return this._getType(e) === E.undefined ? Ie(void 0) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Je.create = (n, e) => new Je({
  innerType: n,
  typeName: k.ZodOptional,
  ...Z(e)
});
class xt extends z {
  _parse(e) {
    return this._getType(e) === E.null ? Ie(null) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
xt.create = (n, e) => new xt({
  innerType: n,
  typeName: k.ZodNullable,
  ...Z(e)
});
class Xn extends z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    let r = t.data;
    return t.parsedType === E.undefined && (r = this._def.defaultValue()), this._def.innerType._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
Xn.create = (n, e) => new Xn({
  innerType: n,
  typeName: k.ZodDefault,
  defaultValue: typeof e.default == "function" ? e.default : () => e.default,
  ...Z(e)
});
class Qn extends z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = {
      ...t,
      common: {
        ...t.common,
        issues: []
      }
    }, s = this._def.innerType._parse({
      data: r.data,
      path: r.path,
      parent: {
        ...r
      }
    });
    return Bn(s) ? s.then((a) => ({
      status: "valid",
      value: a.status === "valid" ? a.value : this._def.catchValue({
        get error() {
          return new qe(r.common.issues);
        },
        input: r.data
      })
    })) : {
      status: "valid",
      value: s.status === "valid" ? s.value : this._def.catchValue({
        get error() {
          return new qe(r.common.issues);
        },
        input: r.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
Qn.create = (n, e) => new Qn({
  innerType: n,
  typeName: k.ZodCatch,
  catchValue: typeof e.catch == "function" ? e.catch : () => e.catch,
  ...Z(e)
});
class Ns extends z {
  _parse(e) {
    if (this._getType(e) !== E.nan) {
      const r = this._getOrReturnCtx(e);
      return C(r, {
        code: T.invalid_type,
        expected: E.nan,
        received: r.parsedType
      }), L;
    }
    return { status: "valid", value: e.data };
  }
}
Ns.create = (n) => new Ns({
  typeName: k.ZodNaN,
  ...Z(n)
});
class Aa extends z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = t.data;
    return this._def.type._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class Qr extends z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.common.async)
      return (async () => {
        const a = await this._def.in._parseAsync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return a.status === "aborted" ? L : a.status === "dirty" ? (t.dirty(), Qt(a.value)) : this._def.out._parseAsync({
          data: a.value,
          path: r.path,
          parent: r
        });
      })();
    {
      const s = this._def.in._parseSync({
        data: r.data,
        path: r.path,
        parent: r
      });
      return s.status === "aborted" ? L : s.status === "dirty" ? (t.dirty(), {
        status: "dirty",
        value: s.value
      }) : this._def.out._parseSync({
        data: s.value,
        path: r.path,
        parent: r
      });
    }
  }
  static create(e, t) {
    return new Qr({
      in: e,
      out: t,
      typeName: k.ZodPipeline
    });
  }
}
class er extends z {
  _parse(e) {
    const t = this._def.innerType._parse(e), r = (s) => (Wt(s) && (s.value = Object.freeze(s.value)), s);
    return Bn(t) ? t.then((s) => r(s)) : r(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
er.create = (n, e) => new er({
  innerType: n,
  typeName: k.ZodReadonly,
  ...Z(e)
});
function Rs(n, e) {
  const t = typeof n == "function" ? n(e) : typeof n == "string" ? { message: n } : n;
  return typeof t == "string" ? { message: t } : t;
}
function _o(n, e = {}, t) {
  return n ? rn.create().superRefine((r, s) => {
    const a = n(r);
    if (a instanceof Promise)
      return a.then((i) => {
        if (!i) {
          const o = Rs(e, r), l = o.fatal ?? t ?? !0;
          s.addIssue({ code: "custom", ...o, fatal: l });
        }
      });
    if (!a) {
      const i = Rs(e, r), o = i.fatal ?? t ?? !0;
      s.addIssue({ code: "custom", ...i, fatal: o });
    }
  }) : rn.create();
}
var k;
(function(n) {
  n.ZodString = "ZodString", n.ZodNumber = "ZodNumber", n.ZodNaN = "ZodNaN", n.ZodBigInt = "ZodBigInt", n.ZodBoolean = "ZodBoolean", n.ZodDate = "ZodDate", n.ZodSymbol = "ZodSymbol", n.ZodUndefined = "ZodUndefined", n.ZodNull = "ZodNull", n.ZodAny = "ZodAny", n.ZodUnknown = "ZodUnknown", n.ZodNever = "ZodNever", n.ZodVoid = "ZodVoid", n.ZodArray = "ZodArray", n.ZodObject = "ZodObject", n.ZodUnion = "ZodUnion", n.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", n.ZodIntersection = "ZodIntersection", n.ZodTuple = "ZodTuple", n.ZodRecord = "ZodRecord", n.ZodMap = "ZodMap", n.ZodSet = "ZodSet", n.ZodFunction = "ZodFunction", n.ZodLazy = "ZodLazy", n.ZodLiteral = "ZodLiteral", n.ZodEnum = "ZodEnum", n.ZodEffects = "ZodEffects", n.ZodNativeEnum = "ZodNativeEnum", n.ZodOptional = "ZodOptional", n.ZodNullable = "ZodNullable", n.ZodDefault = "ZodDefault", n.ZodCatch = "ZodCatch", n.ZodPromise = "ZodPromise", n.ZodBranded = "ZodBranded", n.ZodPipeline = "ZodPipeline", n.ZodReadonly = "ZodReadonly";
})(k || (k = {}));
const Oa = (n, e = {
  message: `Input not instance of ${n.name}`
}) => _o((t) => t instanceof n, e), d = Ue.create, R = Ht.create, yt = Or.create, B = rn.create;
Qe.create;
const G = Ee.create, y = ee.create, Tt = Gn.create, he = Xr.create;
Vn.create;
vt.create;
const te = Wn.create, vo = Hn.create, _ = Kn.create, ue = bt.create;
Yn.create;
Je.create;
xt.create;
function bo() {
  return {};
}
function wo(n, e) {
  var r, s;
  const t = {
    type: "array"
  };
  return ((s = (r = n.type) == null ? void 0 : r._def) == null ? void 0 : s.typeName) !== k.ZodAny && (t.items = W(n.type._def, {
    ...e,
    currentPath: [...e.currentPath, "items"]
  })), n.minLength && H(t, "minItems", n.minLength.value, n.minLength.message, e), n.maxLength && H(t, "maxItems", n.maxLength.value, n.maxLength.message, e), n.exactLength && (H(t, "minItems", n.exactLength.value, n.exactLength.message, e), H(t, "maxItems", n.exactLength.value, n.exactLength.message, e)), t;
}
function xo(n, e) {
  const t = {
    type: "integer",
    format: "int64"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? H(t, "minimum", r.value, r.message, e) : H(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), H(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? H(t, "maximum", r.value, r.message, e) : H(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), H(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        H(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function So() {
  return {
    type: "boolean"
  };
}
function Io(n, e) {
  return W(n.type._def, e);
}
const To = (n, e) => W(n.innerType._def, e);
function Ca(n, e, t) {
  const r = t ?? e.dateStrategy;
  if (Array.isArray(r))
    return {
      anyOf: r.map((s, a) => Ca(n, e, s))
    };
  switch (r) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return ko(n, e);
  }
}
const ko = (n, e) => {
  const t = {
    type: "integer",
    format: "unix-time"
  };
  if (e.target === "openApi3")
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        H(
          t,
          "minimum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
      case "max":
        H(
          t,
          "maximum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
    }
  return t;
};
function Ao(n, e) {
  return {
    ...W(n.innerType._def, e),
    default: n.defaultValue()
  };
}
function Oo(n, e, t) {
  return e.effectStrategy === "input" ? W(n.schema._def, e, t) : {};
}
function Co(n) {
  return {
    type: "string",
    enum: [...n.values]
  };
}
const Eo = (n) => "type" in n && n.type === "string" ? !1 : "allOf" in n;
function No(n, e) {
  const t = [
    W(n.left._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "0"]
    }),
    W(n.right._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "1"]
    })
  ].filter((a) => !!a);
  let r = e.target === "jsonSchema2019-09" ? { unevaluatedProperties: !1 } : void 0;
  const s = [];
  return t.forEach((a) => {
    if (Eo(a))
      s.push(...a.allOf), a.unevaluatedProperties === void 0 && (r = void 0);
    else {
      let i = a;
      if ("additionalProperties" in a && a.additionalProperties === !1) {
        const { additionalProperties: o, ...l } = a;
        i = l;
      } else
        r = void 0;
      s.push(i);
    }
  }), s.length ? {
    allOf: s,
    ...r
  } : void 0;
}
function Ro(n, e) {
  const t = typeof n.value;
  return t !== "bigint" && t !== "number" && t !== "boolean" && t !== "string" ? {
    type: Array.isArray(n.value) ? "array" : "object"
  } : e.target === "openApi3" ? {
    type: t === "bigint" ? "integer" : t,
    enum: [n.value]
  } : {
    type: t === "bigint" ? "integer" : t,
    const: n.value
  };
}
let gr;
const nt = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => (gr === void 0 && (gr = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u")), gr),
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/
};
function Ea(n, e) {
  const t = {
    type: "string"
  };
  function r(s) {
    return e.patternStrategy === "escape" ? Do(s) : s;
  }
  if (n.checks)
    for (const s of n.checks)
      switch (s.kind) {
        case "min":
          H(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e);
          break;
        case "max":
          H(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "email":
          switch (e.emailStrategy) {
            case "format:email":
              Te(t, "email", s.message, e);
              break;
            case "format:idn-email":
              Te(t, "idn-email", s.message, e);
              break;
            case "pattern:zod":
              ke(t, nt.email, s.message, e);
              break;
          }
          break;
        case "url":
          Te(t, "uri", s.message, e);
          break;
        case "uuid":
          Te(t, "uuid", s.message, e);
          break;
        case "regex":
          ke(t, s.regex, s.message, e);
          break;
        case "cuid":
          ke(t, nt.cuid, s.message, e);
          break;
        case "cuid2":
          ke(t, nt.cuid2, s.message, e);
          break;
        case "startsWith":
          ke(t, RegExp(`^${r(s.value)}`), s.message, e);
          break;
        case "endsWith":
          ke(t, RegExp(`${r(s.value)}$`), s.message, e);
          break;
        case "datetime":
          Te(t, "date-time", s.message, e);
          break;
        case "date":
          Te(t, "date", s.message, e);
          break;
        case "time":
          Te(t, "time", s.message, e);
          break;
        case "duration":
          Te(t, "duration", s.message, e);
          break;
        case "length":
          H(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e), H(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "includes": {
          ke(t, RegExp(r(s.value)), s.message, e);
          break;
        }
        case "ip": {
          s.version !== "v6" && Te(t, "ipv4", s.message, e), s.version !== "v4" && Te(t, "ipv6", s.message, e);
          break;
        }
        case "emoji":
          ke(t, nt.emoji, s.message, e);
          break;
        case "ulid": {
          ke(t, nt.ulid, s.message, e);
          break;
        }
        case "base64": {
          switch (e.base64Strategy) {
            case "format:binary": {
              Te(t, "binary", s.message, e);
              break;
            }
            case "contentEncoding:base64": {
              H(t, "contentEncoding", "base64", s.message, e);
              break;
            }
            case "pattern:zod": {
              ke(t, nt.base64, s.message, e);
              break;
            }
          }
          break;
        }
        case "nanoid":
          ke(t, nt.nanoid, s.message, e);
      }
  return t;
}
const Do = (n) => Array.from(n).map((e) => /[a-zA-Z0-9]/.test(e) ? e : `\\${e}`).join(""), Te = (n, e, t, r) => {
  var s;
  n.format || (s = n.anyOf) != null && s.some((a) => a.format) ? (n.anyOf || (n.anyOf = []), n.format && (n.anyOf.push({
    format: n.format,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { format: n.errorMessage.format }
    }
  }), delete n.format, n.errorMessage && (delete n.errorMessage.format, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.anyOf.push({
    format: e,
    ...t && r.errorMessages && { errorMessage: { format: t } }
  })) : H(n, "format", e, t, r);
}, ke = (n, e, t, r) => {
  var s;
  n.pattern || (s = n.allOf) != null && s.some((a) => a.pattern) ? (n.allOf || (n.allOf = []), n.pattern && (n.allOf.push({
    pattern: n.pattern,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { pattern: n.errorMessage.pattern }
    }
  }), delete n.pattern, n.errorMessage && (delete n.errorMessage.pattern, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.allOf.push({
    pattern: Ds(e, r),
    ...t && r.errorMessages && { errorMessage: { pattern: t } }
  })) : H(n, "pattern", Ds(e, r), t, r);
}, Ds = (n, e) => {
  var c;
  const t = typeof n == "function" ? n() : n;
  if (!e.applyRegexFlags || !t.flags)
    return t.source;
  const r = {
    i: t.flags.includes("i"),
    // Case-insensitive
    m: t.flags.includes("m"),
    // `^` and `$` matches adjacent to newline characters
    s: t.flags.includes("s")
    // `.` matches newlines
  }, s = r.i ? t.source.toLowerCase() : t.source;
  let a = "", i = !1, o = !1, l = !1;
  for (let p = 0; p < s.length; p++) {
    if (i) {
      a += s[p], i = !1;
      continue;
    }
    if (r.i) {
      if (o) {
        if (s[p].match(/[a-z]/)) {
          l ? (a += s[p], a += `${s[p - 2]}-${s[p]}`.toUpperCase(), l = !1) : s[p + 1] === "-" && ((c = s[p + 2]) != null && c.match(/[a-z]/)) ? (a += s[p], l = !0) : a += `${s[p]}${s[p].toUpperCase()}`;
          continue;
        }
      } else if (s[p].match(/[a-z]/)) {
        a += `[${s[p]}${s[p].toUpperCase()}]`;
        continue;
      }
    }
    if (r.m) {
      if (s[p] === "^") {
        a += `(^|(?<=[\r
]))`;
        continue;
      } else if (s[p] === "$") {
        a += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (r.s && s[p] === ".") {
      a += o ? `${s[p]}\r
` : `[${s[p]}\r
]`;
      continue;
    }
    a += s[p], s[p] === "\\" ? i = !0 : o && s[p] === "]" ? o = !1 : !o && s[p] === "[" && (o = !0);
  }
  try {
    const p = new RegExp(a);
  } catch {
    return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`), t.source;
  }
  return a;
};
function Na(n, e) {
  var r, s, a, i;
  if (e.target === "openApi3" && ((r = n.keyType) == null ? void 0 : r._def.typeName) === k.ZodEnum)
    return {
      type: "object",
      required: n.keyType._def.values,
      properties: n.keyType._def.values.reduce((o, l) => ({
        ...o,
        [l]: W(n.valueType._def, {
          ...e,
          currentPath: [...e.currentPath, "properties", l]
        }) ?? {}
      }), {}),
      additionalProperties: !1
    };
  const t = {
    type: "object",
    additionalProperties: W(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalProperties"]
    }) ?? {}
  };
  if (e.target === "openApi3")
    return t;
  if (((s = n.keyType) == null ? void 0 : s._def.typeName) === k.ZodString && ((a = n.keyType._def.checks) != null && a.length)) {
    const o = Object.entries(Ea(n.keyType._def, e)).reduce((l, [c, p]) => c === "type" ? l : { ...l, [c]: p }, {});
    return {
      ...t,
      propertyNames: o
    };
  } else if (((i = n.keyType) == null ? void 0 : i._def.typeName) === k.ZodEnum)
    return {
      ...t,
      propertyNames: {
        enum: n.keyType._def.values
      }
    };
  return t;
}
function Po(n, e) {
  if (e.mapStrategy === "record")
    return Na(n, e);
  const t = W(n.keyType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "0"]
  }) || {}, r = W(n.valueType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "1"]
  }) || {};
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [t, r],
      minItems: 2,
      maxItems: 2
    }
  };
}
function Mo(n) {
  const e = n.values, r = Object.keys(n.values).filter((a) => typeof e[e[a]] != "number").map((a) => e[a]), s = Array.from(new Set(r.map((a) => typeof a)));
  return {
    type: s.length === 1 ? s[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: r
  };
}
function jo() {
  return {
    not: {}
  };
}
function $o(n) {
  return n.target === "openApi3" ? {
    enum: ["null"],
    nullable: !0
  } : {
    type: "null"
  };
}
const tr = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function Fo(n, e) {
  if (e.target === "openApi3")
    return Ps(n, e);
  const t = n.options instanceof Map ? Array.from(n.options.values()) : n.options;
  if (t.every((r) => r._def.typeName in tr && (!r._def.checks || !r._def.checks.length))) {
    const r = t.reduce((s, a) => {
      const i = tr[a._def.typeName];
      return i && !s.includes(i) ? [...s, i] : s;
    }, []);
    return {
      type: r.length > 1 ? r : r[0]
    };
  } else if (t.every((r) => r._def.typeName === "ZodLiteral" && !r.description)) {
    const r = t.reduce((s, a) => {
      const i = typeof a._def.value;
      switch (i) {
        case "string":
        case "number":
        case "boolean":
          return [...s, i];
        case "bigint":
          return [...s, "integer"];
        case "object":
          if (a._def.value === null)
            return [...s, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return s;
      }
    }, []);
    if (r.length === t.length) {
      const s = r.filter((a, i, o) => o.indexOf(a) === i);
      return {
        type: s.length > 1 ? s : s[0],
        enum: t.reduce((a, i) => a.includes(i._def.value) ? a : [...a, i._def.value], [])
      };
    }
  } else if (t.every((r) => r._def.typeName === "ZodEnum"))
    return {
      type: "string",
      enum: t.reduce((r, s) => [...r, ...s._def.values.filter((a) => !r.includes(a))], [])
    };
  return Ps(n, e);
}
const Ps = (n, e) => {
  const t = (n.options instanceof Map ? Array.from(n.options.values()) : n.options).map((r, s) => W(r._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", `${s}`]
  })).filter((r) => !!r && (!e.strictUnions || typeof r == "object" && Object.keys(r).length > 0));
  return t.length ? { anyOf: t } : void 0;
};
function Lo(n, e) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(n.innerType._def.typeName) && (!n.innerType._def.checks || !n.innerType._def.checks.length))
    return e.target === "openApi3" || e.nullableStrategy === "property" ? {
      type: tr[n.innerType._def.typeName],
      nullable: !0
    } : {
      type: [tr[n.innerType._def.typeName], "null"]
    };
  if (e.target === "openApi3") {
    const r = W(n.innerType._def, {
      ...e,
      currentPath: [...e.currentPath]
    });
    return r && "$ref" in r ? { allOf: [r], nullable: !0 } : r && { ...r, nullable: !0 };
  }
  const t = W(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "0"]
  });
  return t && { anyOf: [t, { type: "null" }] };
}
function Zo(n, e) {
  const t = {
    type: "number"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "int":
        t.type = "integer", Sa(t, "type", r.message, e);
        break;
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? H(t, "minimum", r.value, r.message, e) : H(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), H(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? H(t, "maximum", r.value, r.message, e) : H(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), H(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        H(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function Uo(n, e) {
  return e.removeAdditionalStrategy === "strict" ? n.catchall._def.typeName === "ZodNever" ? n.unknownKeys !== "strict" : W(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0 : n.catchall._def.typeName === "ZodNever" ? n.unknownKeys === "passthrough" : W(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0;
}
function Jo(n, e) {
  const t = {
    type: "object",
    ...Object.entries(n.shape()).reduce((r, [s, a]) => {
      var l;
      if (a === void 0 || a._def === void 0)
        return r;
      const i = [...e.currentPath, "properties", s], o = W(a._def, {
        ...e,
        currentPath: i,
        propertyPath: i
      });
      if (o === void 0)
        return r;
      if (e.openaiStrictMode && a.isOptional() && !a.isNullable() && typeof ((l = a._def) == null ? void 0 : l.defaultValue) > "u")
        throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
      return {
        properties: {
          ...r.properties,
          [s]: o
        },
        required: a.isOptional() && !e.openaiStrictMode ? r.required : [...r.required, s]
      };
    }, { properties: {}, required: [] }),
    additionalProperties: Uo(n, e)
  };
  return t.required.length || delete t.required, t;
}
const qo = (n, e) => {
  if (e.propertyPath && e.currentPath.slice(0, e.propertyPath.length).toString() === e.propertyPath.toString())
    return W(n.innerType._def, { ...e, currentPath: e.currentPath });
  const t = W(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "1"]
  });
  return t ? {
    anyOf: [
      {
        not: {}
      },
      t
    ]
  } : {};
}, Bo = (n, e) => {
  if (e.pipeStrategy === "input")
    return W(n.in._def, e);
  if (e.pipeStrategy === "output")
    return W(n.out._def, e);
  const t = W(n.in._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", "0"]
  }), r = W(n.out._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", t ? "1" : "0"]
  });
  return {
    allOf: [t, r].filter((s) => s !== void 0)
  };
};
function zo(n, e) {
  return W(n.type._def, e);
}
function Go(n, e) {
  const r = {
    type: "array",
    uniqueItems: !0,
    items: W(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "items"]
    })
  };
  return n.minSize && H(r, "minItems", n.minSize.value, n.minSize.message, e), n.maxSize && H(r, "maxItems", n.maxSize.value, n.maxSize.message, e), r;
}
function Vo(n, e) {
  return n.rest ? {
    type: "array",
    minItems: n.items.length,
    items: n.items.map((t, r) => W(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], []),
    additionalItems: W(n.rest._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalItems"]
    })
  } : {
    type: "array",
    minItems: n.items.length,
    maxItems: n.items.length,
    items: n.items.map((t, r) => W(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], [])
  };
}
function Wo() {
  return {
    not: {}
  };
}
function Ho() {
  return {};
}
const Ko = (n, e) => W(n.innerType._def, e);
function W(n, e, t = !1) {
  var i;
  const r = e.seen.get(n);
  if (e.override) {
    const o = (i = e.override) == null ? void 0 : i.call(e, n, e, r, t);
    if (o !== Ji)
      return o;
  }
  if (r && !t) {
    const o = Yo(r, e);
    if (o !== void 0)
      return "$ref" in o && e.seenRefs.add(o.$ref), o;
  }
  const s = { def: n, path: e.currentPath, jsonSchema: void 0 };
  e.seen.set(n, s);
  const a = Qo(n, n.typeName, e, t);
  return a && eu(n, e, a), s.jsonSchema = a, a;
}
const Yo = (n, e) => {
  switch (e.$refStrategy) {
    case "root":
      return { $ref: n.path.join("/") };
    // this case is needed as OpenAI strict mode doesn't support top-level `$ref`s, i.e.
    // the top-level schema *must* be `{"type": "object", "properties": {...}}` but if we ever
    // need to define a `$ref`, relative `$ref`s aren't supported, so we need to extract
    // the schema to `#/definitions/` and reference that.
    //
    // e.g. if we need to reference a schema at
    // `["#","definitions","contactPerson","properties","person1","properties","name"]`
    // then we'll extract it out to `contactPerson_properties_person1_properties_name`
    case "extract-to-root":
      const t = n.path.slice(e.basePath.length + 1).join("_");
      return t !== e.name && e.nameStrategy === "duplicate-ref" && (e.definitions[t] = n.def), { $ref: [...e.basePath, e.definitionPath, t].join("/") };
    case "relative":
      return { $ref: Xo(e.currentPath, n.path) };
    case "none":
    case "seen":
      return n.path.length < e.currentPath.length && n.path.every((r, s) => e.currentPath[s] === r) ? (console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`), {}) : e.$refStrategy === "seen" ? {} : void 0;
  }
}, Xo = (n, e) => {
  let t = 0;
  for (; t < n.length && t < e.length && n[t] === e[t]; t++)
    ;
  return [(n.length - t).toString(), ...e.slice(t)].join("/");
}, Qo = (n, e, t, r) => {
  switch (e) {
    case k.ZodString:
      return Ea(n, t);
    case k.ZodNumber:
      return Zo(n, t);
    case k.ZodObject:
      return Jo(n, t);
    case k.ZodBigInt:
      return xo(n, t);
    case k.ZodBoolean:
      return So();
    case k.ZodDate:
      return Ca(n, t);
    case k.ZodUndefined:
      return Wo();
    case k.ZodNull:
      return $o(t);
    case k.ZodArray:
      return wo(n, t);
    case k.ZodUnion:
    case k.ZodDiscriminatedUnion:
      return Fo(n, t);
    case k.ZodIntersection:
      return No(n, t);
    case k.ZodTuple:
      return Vo(n, t);
    case k.ZodRecord:
      return Na(n, t);
    case k.ZodLiteral:
      return Ro(n, t);
    case k.ZodEnum:
      return Co(n);
    case k.ZodNativeEnum:
      return Mo(n);
    case k.ZodNullable:
      return Lo(n, t);
    case k.ZodOptional:
      return qo(n, t);
    case k.ZodMap:
      return Po(n, t);
    case k.ZodSet:
      return Go(n, t);
    case k.ZodLazy:
      return W(n.getter()._def, t);
    case k.ZodPromise:
      return zo(n, t);
    case k.ZodNaN:
    case k.ZodNever:
      return jo();
    case k.ZodEffects:
      return Oo(n, t, r);
    case k.ZodAny:
      return bo();
    case k.ZodUnknown:
      return Ho();
    case k.ZodDefault:
      return Ao(n, t);
    case k.ZodBranded:
      return Io(n, t);
    case k.ZodReadonly:
      return Ko(n, t);
    case k.ZodCatch:
      return To(n, t);
    case k.ZodPipeline:
      return Bo(n, t);
    case k.ZodFunction:
    case k.ZodVoid:
    case k.ZodSymbol:
      return;
    default:
      return /* @__PURE__ */ ((s) => {
      })();
  }
}, eu = (n, e, t) => (n.description && (t.description = n.description, e.markdownDescription && (t.markdownDescription = n.description)), t), tu = (n, e) => {
  const t = zi(e), r = typeof e == "string" ? e : (e == null ? void 0 : e.nameStrategy) === "title" || e == null ? void 0 : e.name, s = W(n._def, r === void 0 ? t : {
    ...t,
    currentPath: [...t.basePath, t.definitionPath, r]
  }, !1) ?? {}, a = typeof e == "object" && e.name !== void 0 && e.nameStrategy === "title" ? e.name : void 0;
  a !== void 0 && (s.title = a);
  const i = (() => {
    if (Bi(t.definitions))
      return;
    const l = {}, c = /* @__PURE__ */ new Set();
    for (let p = 0; p < 500; p++) {
      const f = Object.entries(t.definitions).filter(([h]) => !c.has(h));
      if (f.length === 0)
        break;
      for (const [h, w] of f)
        l[h] = W(kr(w), { ...t, currentPath: [...t.basePath, t.definitionPath, h] }, !0) ?? {}, c.add(h);
    }
    return l;
  })(), o = r === void 0 ? i ? {
    ...s,
    [t.definitionPath]: i
  } : s : t.nameStrategy === "duplicate-ref" ? {
    ...s,
    ...i || t.seenRefs.size ? {
      [t.definitionPath]: {
        ...i,
        // only actually duplicate the schema definition if it was ever referenced
        // otherwise the duplication is completely pointless
        ...t.seenRefs.size ? { [r]: s } : void 0
      }
    } : void 0
  } : {
    $ref: [...t.$refStrategy === "relative" ? [] : t.basePath, t.definitionPath, r].join("/"),
    [t.definitionPath]: {
      ...i,
      [r]: s
    }
  };
  return t.target === "jsonSchema7" ? o.$schema = "http://json-schema.org/draft-07/schema#" : t.target === "jsonSchema2019-09" && (o.$schema = "https://json-schema.org/draft/2019-09/schema#"), o;
};
function nu(n, { parser: e, callback: t }) {
  const r = { ...n };
  return Object.defineProperties(r, {
    $brand: {
      value: "auto-parseable-tool",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    },
    $callback: {
      value: t,
      enumerable: !1
    }
  }), r;
}
function ru(n) {
  if (n.type !== "object")
    throw new Error(`Root schema must have type: 'object' but got type: ${n.type ? `'${n.type}'` : "undefined"}`);
  const e = structuredClone(n);
  return je(e, [], e);
}
function Dr(n) {
  if (typeof n == "boolean")
    return !1;
  if (n.type === "null")
    return !0;
  for (const e of n.oneOf ?? [])
    if (Dr(e))
      return !0;
  for (const e of n.anyOf ?? [])
    if (Dr(e))
      return !0;
  return !1;
}
function je(n, e, t) {
  if (typeof n == "boolean")
    throw new TypeError(`Expected object schema but got boolean; path=${e.join("/")}`);
  if (!st(n))
    throw new TypeError(`Expected ${JSON.stringify(n)} to be an object; path=${e.join("/")}`);
  const r = n.$defs;
  if (st(r))
    for (const [h, w] of Object.entries(r))
      je(w, [...e, "$defs", h], t);
  const s = n.definitions;
  if (st(s))
    for (const [h, w] of Object.entries(s))
      je(w, [...e, "definitions", h], t);
  n.type === "object" && !("additionalProperties" in n) && (n.additionalProperties = !1);
  const i = n.required ?? [], o = n.properties;
  if (st(o)) {
    for (const [h, w] of Object.entries(o))
      if (!Dr(w) && !i.includes(h))
        throw new Error(`Zod field at \`${[...e, "properties", h].join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
    n.required = Object.keys(o), n.properties = Object.fromEntries(Object.entries(o).map(([h, w]) => [
      h,
      je(w, [...e, "properties", h], t)
    ]));
  }
  const l = n.items;
  st(l) && (n.items = je(l, [...e, "items"], t));
  const c = n.anyOf;
  Array.isArray(c) && (n.anyOf = c.map((h, w) => je(h, [...e, "anyOf", String(w)], t)));
  const p = n.allOf;
  if (Array.isArray(p))
    if (p.length === 1) {
      const h = je(p[0], [...e, "allOf", "0"], t);
      Object.assign(n, h), delete n.allOf;
    } else
      n.allOf = p.map((h, w) => je(h, [...e, "allOf", String(w)], t));
  n.default === null && delete n.default;
  const f = n.$ref;
  if (f && au(n, 1)) {
    if (typeof f != "string")
      throw new TypeError(`Received non-string $ref - ${f}; path=${e.join("/")}`);
    const h = su(t, f);
    if (typeof h == "boolean")
      throw new Error(`Expected \`$ref: ${f}\` to resolve to an object schema but got boolean`);
    if (!st(h))
      throw new Error(`Expected \`$ref: ${f}\` to resolve to an object but got ${JSON.stringify(h)}`);
    return Object.assign(n, { ...h, ...n }), delete n.$ref, je(n, e, t);
  }
  return n;
}
function su(n, e) {
  if (!e.startsWith("#/"))
    throw new Error(`Unexpected $ref format ${JSON.stringify(e)}; Does not start with #/`);
  const t = e.slice(2).split("/");
  let r = n;
  for (const s of t) {
    if (!st(r))
      throw new Error(`encountered non-object entry while resolving ${e} - ${JSON.stringify(r)}`);
    const a = r[s];
    if (a === void 0)
      throw new Error(`Key ${s} not found while resolving ${e}`);
    r = a;
  }
  return r;
}
function st(n) {
  return typeof n == "object" && n !== null && !Array.isArray(n);
}
function au(n, e) {
  let t = 0;
  for (const r in n)
    if (t++, t > e)
      return !0;
  return !1;
}
function Ra(n, e) {
  return tu(n, {
    openaiStrictMode: !0,
    name: e.name,
    nameStrategy: "duplicate-ref",
    $refStrategy: "extract-to-root",
    nullableStrategy: "property"
  });
}
function Da(n) {
  return ru(Zi(n, {
    target: "draft-7"
  }));
}
function Pa(n) {
  return "_zod" in n;
}
function iu(n, e, t) {
  return Ui({
    type: "json_schema",
    ...t,
    name: e,
    strict: !0,
    schema: Pa(n) ? Da(n) : Ra(n, { name: e })
  }, (r) => n.parse(JSON.parse(r)));
}
function ou(n) {
  return nu({
    type: "function",
    name: n.name,
    parameters: Pa(n.parameters) ? Da(n.parameters) : Ra(n.parameters, { name: n.name }),
    strict: !0,
    ...n.description ? { description: n.description } : void 0
  }, {
    callback: n.function,
    parser: (e) => n.parameters.parse(JSON.parse(e))
  });
}
class tt extends Error {
  constructor(t, r) {
    super(t);
    v(this, "state");
    this.state = r;
  }
}
class uu extends tt {
}
class Ms extends tt {
}
class xe extends tt {
}
class Q extends tt {
}
class js extends tt {
  constructor(t, r, s) {
    super(t, s);
    v(this, "error");
    this.error = r;
  }
}
class cu extends tt {
  constructor(t, r, s) {
    super(t, s);
    v(this, "error");
    this.error = r;
  }
}
class $s extends tt {
  constructor(t, r, s) {
    super(t, s);
    v(this, "result");
    this.result = r;
  }
}
class Pr extends tt {
  constructor(t, r, s) {
    super(t, s);
    v(this, "result");
    this.result = r;
  }
}
function Yt(n) {
  var t;
  if (typeof n != "object" || n === null)
    return;
  const e = n;
  return ((t = e._zod) == null ? void 0 : t.def) || e._def || e.def;
}
function or(n) {
  const e = Yt(n);
  if (!e)
    return;
  const t = typeof e.typeName == "string" && e.typeName || typeof e.type == "string" && e.type;
  if (typeof t != "string")
    return;
  const r = t.toLowerCase();
  return r.startsWith("zod") ? r.slice(3) : r;
}
function St(n) {
  return Yt(n) ? or(n) === "object" : !1;
}
function du(n) {
  return typeof n == "object" && n !== null && "input" in n && typeof n.input == "string";
}
const lu = "http://json-schema.org/draft-07/schema#", pu = /* @__PURE__ */ new Set(["optional"]), fu = /* @__PURE__ */ new Set([
  "brand",
  "branded",
  "catch",
  "default",
  "effects",
  "pipeline",
  "pipe",
  "prefault",
  "readonly",
  "refinement",
  "transform"
]), Fs = {
  string: { type: "string" },
  number: { type: "number" },
  bigint: { type: "integer" },
  boolean: { type: "boolean" },
  date: { type: "string", format: "date-time" }
};
function Ma(n) {
  return typeof n == "object" && n !== null && n.type === "object" && "properties" in n && "additionalProperties" in n;
}
function hu(n) {
  const e = ja(n);
  if (e)
    return Array.isArray(e.required) || (e.required = []), typeof e.additionalProperties > "u" && (e.additionalProperties = !1), typeof e.$schema != "string" && (e.$schema = lu), e;
}
function ja(n) {
  const e = ku(n);
  if (!e)
    return;
  const t = {}, r = [];
  for (const [s, a] of Object.entries(e)) {
    const { schema: i, optional: o } = mu(a);
    if (!i)
      return;
    t[s] = i, o || r.push(s);
  }
  return { type: "object", properties: t, required: r, additionalProperties: !1 };
}
function mu(n) {
  let e = Mr(n), t = !1;
  for (; pu.has(or(e) ?? ""); ) {
    t = !0;
    const r = Yt(e), s = Mr(r == null ? void 0 : r.innerType);
    if (!s || s === e)
      break;
    e = s;
  }
  return { schema: Re(e), optional: t };
}
function Re(n) {
  if (n === void 0)
    return;
  const e = Mr(n), t = or(e), r = Yt(e);
  if (t) {
    if (t in Fs)
      return Fs[t];
    switch (t) {
      case "object":
        return ja(e);
      case "array":
        return gu(r);
      case "tuple":
        return yu(r);
      case "union":
        return _u(r);
      case "intersection":
        return vu(r);
      case "literal":
        return Iu(r);
      case "enum":
      case "nativeenum":
        return Tu(r);
      case "record":
        return bu(r);
      case "map":
        return wu(r);
      case "set":
        return xu(r);
      case "nullable":
        return Su(r);
      default:
        return;
    }
  }
}
function gu(n) {
  const e = Re($a(n, "element", "items", "type"));
  return e ? { type: "array", items: e } : void 0;
}
function yu(n) {
  const e = Fa(n == null ? void 0 : n.items).map((r) => Re(r)).filter(Boolean);
  if (!e.length)
    return;
  const t = {
    type: "array",
    items: e,
    minItems: e.length
  };
  return n != null && n.rest || (t.maxItems = e.length), t;
}
function _u(n) {
  const e = Fa((n == null ? void 0 : n.options) ?? (n == null ? void 0 : n.schemas)).map((t) => Re(t)).filter(Boolean);
  return e.length ? { anyOf: e } : void 0;
}
function vu(n) {
  const e = Re(n == null ? void 0 : n.left), t = Re(n == null ? void 0 : n.right);
  return e && t ? { allOf: [e, t] } : void 0;
}
function bu(n) {
  const e = Re((n == null ? void 0 : n.valueType) ?? (n == null ? void 0 : n.values));
  return e ? { type: "object", additionalProperties: e } : void 0;
}
function wu(n) {
  const e = Re((n == null ? void 0 : n.valueType) ?? (n == null ? void 0 : n.values));
  return e ? { type: "array", items: e } : void 0;
}
function xu(n) {
  const e = Re(n == null ? void 0 : n.valueType);
  return e ? { type: "array", items: e, uniqueItems: !0 } : void 0;
}
function Su(n) {
  const e = Re((n == null ? void 0 : n.innerType) ?? (n == null ? void 0 : n.type));
  return e ? { anyOf: [e, { type: "null" }] } : void 0;
}
function Mr(n) {
  let e = n;
  for (; fu.has(or(e) ?? ""); ) {
    const t = Yt(e), r = (t == null ? void 0 : t.innerType) ?? (t == null ? void 0 : t.schema) ?? (t == null ? void 0 : t.base) ?? (t == null ? void 0 : t.type) ?? (t == null ? void 0 : t.wrapped) ?? (t == null ? void 0 : t.underlying);
    if (!r || r === e)
      return e;
    e = r;
  }
  return e;
}
function $a(n, ...e) {
  if (n) {
    for (const t of e)
      if (t in n && n[t] !== void 0)
        return n[t];
  }
}
function Fa(n) {
  return Array.isArray(n) ? n : n === void 0 ? [] : [n];
}
function Iu(n) {
  if (!n)
    return;
  const e = $a(n, "value", "literal");
  if (e !== void 0)
    return {
      const: e,
      type: e === null ? "null" : typeof e
    };
}
function Tu(n) {
  if (n) {
    if (Array.isArray(n.values))
      return { enum: n.values };
    if (Array.isArray(n.options))
      return { enum: n.options };
    if (n.values && typeof n.values == "object")
      return { enum: Object.values(n.values) };
    if (n.enum && typeof n.enum == "object")
      return { enum: Object.values(n.enum) };
  }
}
function ku(n) {
  if (typeof n != "object" || n === null)
    return;
  const e = n;
  if (e.shape && typeof e.shape == "object")
    return e.shape;
  if (typeof e.shape == "function")
    try {
      return e.shape();
    } catch {
      return;
    }
  const t = Yt(e), r = t == null ? void 0 : t.shape;
  if (r && typeof r == "object")
    return r;
  if (typeof r == "function")
    try {
      return r();
    } catch {
      return;
    }
}
const Au = ou, Ou = iu;
function La(n) {
  return hu(n);
}
function nr(n) {
  if (n = n.replace(/\s/g, "_"), n = n.replace(/[^a-zA-Z0-9]/g, "_"), n.length === 0)
    throw new Error("Tool name cannot be empty");
  return n;
}
function es(n, e) {
  const t = (r) => JSON.parse(r);
  if (St(n)) {
    const r = (a) => {
      const i = La(n);
      if (i)
        return {
          schema: i,
          parser: (l) => n.parse(JSON.parse(l))
        };
      const o = a instanceof Error ? ` Upstream helper error: ${a.message}` : "";
      throw new Q(`Unable to convert the provided Zod schema to JSON Schema. Ensure that the \`zod\` package is available at runtime or provide a JSON schema object instead.${o}`);
    };
    let s;
    try {
      s = Au({
        name: e,
        parameters: n,
        function: () => {
        },
        // empty function here to satisfy the OpenAI helper
        description: ""
      });
    } catch (a) {
      return r(a);
    }
    return Ma(s.parameters) ? {
      schema: s.parameters,
      parser: s.$parseRaw
    } : r();
  } else if (typeof n == "object" && n !== null)
    return {
      schema: n,
      parser: t
    };
  throw new Q("Input type is not a ZodObject or a valid JSON schema");
}
function Ls(n) {
  if (n === "text")
    return "text";
  if (St(n)) {
    const e = (r, s) => {
      const a = La(n);
      if (a)
        return {
          type: (r == null ? void 0 : r.type) ?? "json_schema",
          name: (r == null ? void 0 : r.name) ?? "output",
          strict: (r == null ? void 0 : r.strict) ?? !1,
          schema: a
        };
      const i = s instanceof Error ? ` Upstream helper error: ${s.message}` : "";
      throw new Q(`Unable to convert the provided Zod schema to JSON Schema. Ensure that the \`zod\` package is available at runtime or provide a JSON schema object instead.${i}`);
    };
    let t;
    try {
      t = Ou(n, "output");
    } catch (r) {
      return e(void 0, r);
    }
    return Ma(t.schema) ? {
      type: t.type,
      name: t.name,
      strict: t.strict || !1,
      schema: t.schema
    } : e(t);
  }
  return n;
}
function Cu(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var Mn = { exports: {} }, yr, Zs;
function Eu() {
  if (Zs) return yr;
  Zs = 1;
  var n = 1e3, e = n * 60, t = e * 60, r = t * 24, s = r * 7, a = r * 365.25;
  yr = function(p, f) {
    f = f || {};
    var h = typeof p;
    if (h === "string" && p.length > 0)
      return i(p);
    if (h === "number" && isFinite(p))
      return f.long ? l(p) : o(p);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(p)
    );
  };
  function i(p) {
    if (p = String(p), !(p.length > 100)) {
      var f = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        p
      );
      if (f) {
        var h = parseFloat(f[1]), w = (f[2] || "ms").toLowerCase();
        switch (w) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return h * a;
          case "weeks":
          case "week":
          case "w":
            return h * s;
          case "days":
          case "day":
          case "d":
            return h * r;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return h * t;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return h * e;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return h * n;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return h;
          default:
            return;
        }
      }
    }
  }
  function o(p) {
    var f = Math.abs(p);
    return f >= r ? Math.round(p / r) + "d" : f >= t ? Math.round(p / t) + "h" : f >= e ? Math.round(p / e) + "m" : f >= n ? Math.round(p / n) + "s" : p + "ms";
  }
  function l(p) {
    var f = Math.abs(p);
    return f >= r ? c(p, f, r, "day") : f >= t ? c(p, f, t, "hour") : f >= e ? c(p, f, e, "minute") : f >= n ? c(p, f, n, "second") : p + " ms";
  }
  function c(p, f, h, w) {
    var g = f >= h * 1.5;
    return Math.round(p / h) + " " + w + (g ? "s" : "");
  }
  return yr;
}
var _r, Us;
function Nu() {
  if (Us) return _r;
  Us = 1;
  function n(e) {
    r.debug = r, r.default = r, r.coerce = c, r.disable = o, r.enable = a, r.enabled = l, r.humanize = Eu(), r.destroy = p, Object.keys(e).forEach((f) => {
      r[f] = e[f];
    }), r.names = [], r.skips = [], r.formatters = {};
    function t(f) {
      let h = 0;
      for (let w = 0; w < f.length; w++)
        h = (h << 5) - h + f.charCodeAt(w), h |= 0;
      return r.colors[Math.abs(h) % r.colors.length];
    }
    r.selectColor = t;
    function r(f) {
      let h, w = null, g, x;
      function b(...m) {
        if (!b.enabled)
          return;
        const I = b, A = Number(/* @__PURE__ */ new Date()), D = A - (h || A);
        I.diff = D, I.prev = h, I.curr = A, h = A, m[0] = r.coerce(m[0]), typeof m[0] != "string" && m.unshift("%O");
        let N = 0;
        m[0] = m[0].replace(/%([a-zA-Z%])/g, (J, ne) => {
          if (J === "%%")
            return "%";
          N++;
          const me = r.formatters[ne];
          if (typeof me == "function") {
            const ve = m[N];
            J = me.call(I, ve), m.splice(N, 1), N--;
          }
          return J;
        }), r.formatArgs.call(I, m), (I.log || r.log).apply(I, m);
      }
      return b.namespace = f, b.useColors = r.useColors(), b.color = r.selectColor(f), b.extend = s, b.destroy = r.destroy, Object.defineProperty(b, "enabled", {
        enumerable: !0,
        configurable: !1,
        get: () => w !== null ? w : (g !== r.namespaces && (g = r.namespaces, x = r.enabled(f)), x),
        set: (m) => {
          w = m;
        }
      }), typeof r.init == "function" && r.init(b), b;
    }
    function s(f, h) {
      const w = r(this.namespace + (typeof h > "u" ? ":" : h) + f);
      return w.log = this.log, w;
    }
    function a(f) {
      r.save(f), r.namespaces = f, r.names = [], r.skips = [];
      const h = (typeof f == "string" ? f : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
      for (const w of h)
        w[0] === "-" ? r.skips.push(w.slice(1)) : r.names.push(w);
    }
    function i(f, h) {
      let w = 0, g = 0, x = -1, b = 0;
      for (; w < f.length; )
        if (g < h.length && (h[g] === f[w] || h[g] === "*"))
          h[g] === "*" ? (x = g, b = w, g++) : (w++, g++);
        else if (x !== -1)
          g = x + 1, b++, w = b;
        else
          return !1;
      for (; g < h.length && h[g] === "*"; )
        g++;
      return g === h.length;
    }
    function o() {
      const f = [
        ...r.names,
        ...r.skips.map((h) => "-" + h)
      ].join(",");
      return r.enable(""), f;
    }
    function l(f) {
      for (const h of r.skips)
        if (i(f, h))
          return !1;
      for (const h of r.names)
        if (i(f, h))
          return !0;
      return !1;
    }
    function c(f) {
      return f instanceof Error ? f.stack || f.message : f;
    }
    function p() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    return r.enable(r.load()), r;
  }
  return _r = n, _r;
}
var Js;
function Ru() {
  return Js || (Js = 1, (function(n, e) {
    e.formatArgs = r, e.save = s, e.load = a, e.useColors = t, e.storage = i(), e.destroy = /* @__PURE__ */ (() => {
      let l = !1;
      return () => {
        l || (l = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })(), e.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function t() {
      if (typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs))
        return !0;
      if (typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
        return !1;
      let l;
      return typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator < "u" && navigator.userAgent && (l = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(l[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function r(l) {
      if (l[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + l[0] + (this.useColors ? "%c " : " ") + "+" + n.exports.humanize(this.diff), !this.useColors)
        return;
      const c = "color: " + this.color;
      l.splice(1, 0, c, "color: inherit");
      let p = 0, f = 0;
      l[0].replace(/%[a-zA-Z%]/g, (h) => {
        h !== "%%" && (p++, h === "%c" && (f = p));
      }), l.splice(f, 0, c);
    }
    e.log = console.debug || console.log || (() => {
    });
    function s(l) {
      try {
        l ? e.storage.setItem("debug", l) : e.storage.removeItem("debug");
      } catch {
      }
    }
    function a() {
      let l;
      try {
        l = e.storage.getItem("debug") || e.storage.getItem("DEBUG");
      } catch {
      }
      return !l && typeof process < "u" && "env" in process && (l = process.env.DEBUG), l;
    }
    function i() {
      try {
        return localStorage;
      } catch {
      }
    }
    n.exports = Nu()(e);
    const { formatters: o } = n.exports;
    o.j = function(l) {
      try {
        return JSON.stringify(l);
      } catch (c) {
        return "[UnexpectedJSONParseError]: " + c.message;
      }
    };
  })(Mn, Mn.exports)), Mn.exports;
}
var Du = Ru();
const Pu = /* @__PURE__ */ Cu(Du);
function Za() {
  return Bu();
}
function qs(n) {
  const e = Za();
  return typeof e < "u" && (e[n] === "true" || e[n] === "1");
}
const Ua = {
  get disabled() {
    return !0;
  }
}, Ja = {
  get dontLogModelData() {
    return qs("OPENAI_AGENTS_DONT_LOG_MODEL_DATA");
  },
  get dontLogToolData() {
    return qs("OPENAI_AGENTS_DONT_LOG_TOOL_DATA");
  }
}, Mu = Ja.dontLogModelData, ju = Ja.dontLogToolData;
function qa(n = "openai-agents") {
  return {
    namespace: n,
    debug: Pu(n),
    error: console.error,
    warn: console.warn,
    dontLogModelData: Mu,
    dontLogToolData: ju
  };
}
const M = qa("openai-agents:core"), Bs = 20;
function et(n) {
  if (n == null)
    return String(n);
  if (Ba(n))
    return tn(new Uint8Array(n));
  if (za(n)) {
    const e = n;
    return tn(new Uint8Array(e.buffer, e.byteOffset, e.byteLength));
  }
  if (typeof n == "string")
    return n;
  if (typeof n == "object")
    try {
      return JSON.stringify(n, Lu);
    } catch {
      return "[object with circular references]";
    }
  return String(n);
}
function Ba(n) {
  if (n instanceof ArrayBuffer)
    return !0;
  const e = globalThis.SharedArrayBuffer;
  return !!(e && n instanceof e);
}
function za(n) {
  return typeof ArrayBuffer < "u" && ArrayBuffer.isView(n);
}
function $u(n) {
  return typeof n == "object" && n !== null && n.type === "Buffer" && Array.isArray(n.data);
}
function tn(n) {
  if (n.length === 0)
    return "[byte array (0 bytes)]";
  const e = Math.min(n.length, Bs), t = [];
  for (let a = 0; a < e; a++)
    t.push(Fu(n[a]));
  const r = n.length > Bs ? " …" : "";
  return `[byte array ${t.join(" ")}${r} (${n.length} bytes)]`;
}
function Fu(n) {
  return `0x${n.toString(16).padStart(2, "0")}`;
}
function Lu(n, e) {
  if (Ba(e))
    return tn(new Uint8Array(e));
  if (za(e)) {
    const t = e;
    return tn(new Uint8Array(t.buffer, t.byteOffset, t.byteLength));
  }
  return $u(e) ? tn(Uint8Array.from(e.data)) : e;
}
function Zu(n, e) {
  return `An error occurred while running the tool. Please try again. Error: ${e instanceof Error ? e.toString() : String(e)}`;
}
function jr(n) {
  const e = n.name ? nr(n.name) : nr(n.execute.name), t = typeof n.errorFunction > "u" ? Zu : n.errorFunction;
  if (!e)
    throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");
  const r = n.strict ?? !0;
  if (!r && St(n.parameters))
    throw new Q("Strict mode is required for Zod parameters");
  const { parser: s, schema: a } = es(n.parameters, e);
  async function i(p, f, h) {
    const [w, g] = await Yr(() => s(f));
    if (w !== null)
      throw M.dontLogToolData ? M.debug(`Invalid JSON input for tool ${e}`) : M.debug(`Invalid JSON input for tool ${e}: ${f}`), new xe("Invalid JSON input for tool");
    M.dontLogToolData ? M.debug(`Invoking tool ${e}`) : M.debug(`Invoking tool ${e} with input ${f}`);
    const x = await n.execute(g, p, h), b = et(x);
    return M.dontLogToolData ? M.debug(`Tool ${e} completed`) : M.debug(`Tool ${e} returned: ${b}`), x;
  }
  async function o(p, f, h) {
    return i(p, f, h).catch((w) => {
      if (t) {
        const g = dn();
        return g == null || g.setError({
          message: "Error running tool (non-fatal)",
          data: {
            tool_name: e,
            error: w.toString()
          }
        }), t(p, w);
      }
      throw w;
    });
  }
  const l = typeof n.needsApproval == "function" ? n.needsApproval : async () => typeof n.needsApproval == "boolean" ? n.needsApproval : !1, c = typeof n.isEnabled == "function" ? async (p, f) => {
    const h = n.isEnabled;
    return !!await h({ runContext: p, agent: f });
  } : async () => typeof n.isEnabled == "boolean" ? n.isEnabled : !0;
  return {
    type: "function",
    name: e,
    description: n.description,
    parameters: a,
    strict: r,
    invoke: o,
    needsApproval: l,
    isEnabled: c
  };
}
y({
  name: d(),
  description: d().optional(),
  inputSchema: y({
    type: _("object"),
    properties: te(d(), B()),
    required: G(d()),
    additionalProperties: yt()
  })
});
const vr = {};
async function Uu({ server: n, convertSchemasToStrict: e, runContext: t, agent: r }) {
  return n.cacheToolsList && vr[n.name] ? vr[n.name].map((s) => zs(s, n, e)) : Jc(async (s) => {
    const a = await n.listTools();
    let i = a;
    if (t && r) {
      const l = { runContext: t, agent: r, serverName: n.name }, c = [];
      for (const p of a) {
        const f = n.toolFilter;
        if (f)
          if (typeof f == "function") {
            if (!await f(l, p)) {
              M.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the callable filter.`);
              continue;
            }
          } else {
            const h = f.allowedToolNames ?? [], w = f.blockedToolNames ?? [];
            if (h.length > 0 || w.length > 0) {
              const g = h.length > 0 ? h.includes(p.name) : !0, x = w.length > 0 ? w.includes(p.name) : !1;
              if (!g || x) {
                x ? M.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the static filter.`) : g || M.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is not allowed by the static filter.`);
                continue;
              }
            }
          }
        c.push(p);
      }
      i = c;
    }
    s.spanData.result = i.map((l) => l.name);
    const o = i.map((l) => zs(l, n, e));
    return n.cacheToolsList && (vr[n.name] = i), o;
  }, { data: { server: n.name } });
}
async function Ju(n, e, t, r = !1) {
  const s = Array.isArray(n) ? {
    mcpServers: n,
    runContext: e,
    agent: t,
    convertSchemasToStrict: r
  } : n, { mcpServers: a, convertSchemasToStrict: i = !1, runContext: o, agent: l } = s, c = [], p = /* @__PURE__ */ new Set();
  for (const f of a) {
    const h = await Uu({
      server: f,
      convertSchemasToStrict: i,
      runContext: o,
      agent: l
    }), g = [...new Set(h.map((x) => x.name))].filter((x) => p.has(x));
    if (g.length > 0)
      throw new Q(`Duplicate tool names found across MCP servers: ${g.join(", ")}`);
    for (const x of h)
      p.add(x.name), c.push(x);
  }
  return c;
}
function zs(n, e, t) {
  var i, o, l, c;
  async function r(p, f) {
    let h = {};
    typeof p == "string" && p ? h = JSON.parse(p) : typeof p == "object" && p != null && (h = p);
    const w = dn();
    w && (w.spanData.mcp_data = { server: e.name });
    const g = await e.callTool(n.name, h);
    return g.length === 1 ? g[0] : g;
  }
  const s = {
    ...n.inputSchema,
    type: ((i = n.inputSchema) == null ? void 0 : i.type) ?? "object",
    properties: ((o = n.inputSchema) == null ? void 0 : o.properties) ?? {},
    required: ((l = n.inputSchema) == null ? void 0 : l.required) ?? [],
    additionalProperties: ((c = n.inputSchema) == null ? void 0 : c.additionalProperties) ?? !1
  };
  if (t || s.additionalProperties === !0)
    try {
      const p = qu(s);
      return jr({
        name: n.name,
        description: n.description || "",
        parameters: p,
        strict: !0,
        execute: r
      });
    } catch (p) {
      M.warn(`Error converting MCP schema to strict mode: ${p}`);
    }
  const a = {
    ...s,
    additionalProperties: !0
  };
  return jr({
    name: n.name,
    description: n.description || "",
    parameters: a,
    strict: !1,
    execute: r
  });
}
function qu(n) {
  const e = {
    ...n,
    additionalProperties: !1
  };
  return e.required || (e.required = []), e;
}
function Bu() {
  return {};
}
var Pt, ot;
class ur {
  constructor() {
    O(this, Pt, new EventTarget());
    O(this, ot, /* @__PURE__ */ new Map());
  }
  on(e, t) {
    const r = e;
    let s = u(this, ot).get(r);
    s || (s = /* @__PURE__ */ new Map(), u(this, ot).set(r, s));
    let a = s.get(t);
    a || (a = /* @__PURE__ */ new Set(), s.set(t, a));
    const i = ((o) => t(...o.detail ?? []));
    return a.add(i), u(this, Pt).addEventListener(r, i), this;
  }
  off(e, t) {
    const r = e, s = u(this, ot).get(r), a = s == null ? void 0 : s.get(t);
    if (a != null && a.size) {
      for (const i of a)
        u(this, Pt).removeEventListener(r, i);
      s == null || s.delete(t), (s == null ? void 0 : s.size) === 0 && u(this, ot).delete(r);
    }
    return this;
  }
  emit(e, ...t) {
    const r = new CustomEvent(e, { detail: t });
    return u(this, Pt).dispatchEvent(r);
  }
  once(e, t) {
    const r = (...s) => {
      this.off(e, r), t(...s);
    };
    return this.on(e, r), this;
  }
}
Pt = new WeakMap(), ot = new WeakMap();
const Ga = () => typeof crypto < "u" && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(n) {
  const e = Math.random() * 16 | 0;
  return (n === "x" ? e : e & 3 | 8).toString(16);
}), zu = class {
  constructor() {
  }
  pipeTo(e, t) {
  }
  pipeThrough(e, t) {
  }
}, Gu = globalThis.ReadableStream, Vu = globalThis.TransformStream;
class Wu {
  constructor() {
    v(this, "context", null);
  }
  run(e, t) {
    return this.context = e, t();
  }
  getStore() {
    return this.context;
  }
  enterWith(e) {
    this.context = e;
  }
}
class Hu {
  constructor() {
  }
  setTimeout(e, t) {
    const r = setTimeout(e, t);
    return r.ref = typeof r.ref == "function" ? r.ref : () => r, r.unref = typeof r.unref == "function" ? r.unref : () => r, r.hasRef = typeof r.hasRef == "function" ? r.hasRef : () => !0, r.refresh = typeof r.refresh == "function" ? r.refresh : () => r, r;
  }
  clearTimeout(e) {
    window.clearTimeout(e);
  }
}
const Ku = new Hu();
class ts {
  on(e, t) {
    return this.eventEmitter.on(e, t), this.eventEmitter;
  }
  off(e, t) {
    return this.eventEmitter.off(e, t), this.eventEmitter;
  }
  emit(e, ...t) {
    return this.eventEmitter.emit(e, ...t);
  }
  once(e, t) {
    return this.eventEmitter.once(e, t), this.eventEmitter;
  }
}
class Yu extends ts {
  constructor() {
    super(...arguments);
    v(this, "eventEmitter", new ur());
  }
}
class Xu extends ts {
  constructor() {
    super(...arguments);
    v(this, "eventEmitter", new ur());
  }
}
const Qu = "OPENAI_DEFAULT_MODEL";
function cr(n) {
  return n.startsWith("gpt-5-chat") ? !1 : n.startsWith("gpt-5");
}
function Va() {
  return cr(Wa());
}
function Wa() {
  var e;
  return ((e = Za()[Qu]) == null ? void 0 : e.toLowerCase()) ?? "gpt-4.1";
}
function ec(n) {
  const e = Wa();
  return cr(e) ? {
    // We chose "low" instead of "minimal" because some of the built-in tools
    // (e.g., file search, image generation, etc.) do not support "minimal"
    // If you want to use "minimal" reasoning effort, you can pass your own model settings
    reasoning: { effort: "low" },
    text: { verbosity: "low" }
  } : {};
}
function Ha(n) {
  return JSON.stringify({ assistant: n.name });
}
function tc(n) {
  return `transfer_to_${nr(n.name)}`;
}
function nc(n) {
  return `Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription ?? ""}`;
}
class Ka {
  constructor(e, t) {
    /**
     * The name of the tool that represents the handoff.
     */
    v(this, "toolName");
    /**
     * The description of the tool that represents the handoff.
     */
    v(this, "toolDescription");
    /**
     * The JSON schema for the handoff input. Can be empty if the handoff does not take an input
     */
    v(this, "inputJsonSchema", {
      type: "object",
      properties: {},
      required: [],
      additionalProperties: !1
    });
    /**
     * Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to
     * true, as it increases the likelihood of correct JSON input.
     */
    v(this, "strictJsonSchema", !0);
    /**
     * The function that invokes the handoff. The parameters passed are:
     * 1. The handoff run context
     * 2. The arguments from the LLM, as a JSON string. Empty string if inputJsonSchema is empty.
     *
     * Must return an agent
     */
    v(this, "onInvokeHandoff");
    /**
     * The name of the agent that is being handed off to.
     */
    v(this, "agentName");
    /**
     * A function that filters the inputs that are passed to the next agent. By default, the new agent
     * sees the entire conversation history. In some cases, you may want to filter inputs e.g. to
     * remove older inputs, or remove tools from existing inputs.
     *
     * The function will receive the entire conversation hisstory so far, including the input item
     * that triggered the handoff and a tool call output item representing the handoff tool's output.
     *
     * You are free to modify the input history or new items as you see fit. The next agent that runs
     * will receive `handoffInputData.allItems
     */
    v(this, "inputFilter");
    /**
     * The agent that is being handed off to.
     */
    v(this, "agent");
    v(this, "isEnabled", async () => !0);
    this.agentName = e.name, this.onInvokeHandoff = t, this.toolName = tc(e), this.toolDescription = nc(e), this.agent = e;
  }
  /**
   * Returns a function tool definition that can be used to invoke the handoff.
   */
  getHandoffAsFunctionTool() {
    return {
      type: "function",
      name: this.toolName,
      description: this.toolDescription,
      parameters: this.inputJsonSchema,
      strict: this.strictJsonSchema
    };
  }
}
function Ya(n, e = {}) {
  let t;
  const r = !!e.onHandoff, s = !!e.inputType;
  if (!(r === s))
    throw new Q("You must provide either both `onHandoff` and `inputType` or neither.");
  async function i(l, c) {
    var p;
    if (t) {
      if (!c)
        throw Dt({
          message: `Handoff function expected non empty input but got: ${c}`,
          data: {
            details: "input is empty"
          }
        }), new xe("Handoff function expected non empty input");
      try {
        const f = await t(c);
        e.onHandoff && await e.onHandoff(l, f);
      } catch (f) {
        throw Dt({
          message: "Invalid JSON provided",
          data: {}
        }), M.dontLogToolData || M.error(`Invalid JSON when parsing: ${c}. Error: ${f}`), new xe("Invalid JSON provided");
      }
    } else
      await ((p = e.onHandoff) == null ? void 0 : p.call(e, l));
    return n;
  }
  const o = new Ka(n, i);
  if (typeof e.isEnabled == "function") {
    const l = e.isEnabled;
    o.isEnabled = async ({ runContext: c, agent: p }) => !!await l({ runContext: c, agent: p });
  } else typeof e.isEnabled == "boolean" && (o.isEnabled = async () => e.isEnabled);
  if (e.inputType) {
    const l = es(e.inputType, o.toolName);
    o.inputJsonSchema = l.schema, o.strictJsonSchema = !0, t = l.parser;
  }
  return e.toolNameOverride && (o.toolName = e.toolNameOverride), e.toolDescriptionOverride && (o.toolDescription = e.toolDescriptionOverride), e.inputFilter && (o.inputFilter = e.inputFilter), o;
}
function rc(n) {
  return n instanceof Ka ? n : Ya(n);
}
function Xa(n) {
  if (n.type !== "message" || n.role !== "assistant")
    return;
  const e = n.content[n.content.length - 1];
  if (e.type === "output_text")
    return e.text;
}
function sc(n) {
  return n.output.length === 0 ? "" : Xa(n.output[n.output.length - 1]) || "";
}
const $r = /* @__PURE__ */ new WeakMap();
function ac(n, e) {
  n && $r.set(n, e);
}
function ic(n) {
  const e = $r.get(n);
  return e && $r.delete(n), e;
}
const oc = y({ input: d() }), Rt = class Rt extends Yu {
  constructor(t) {
    super();
    v(this, "name");
    v(this, "instructions");
    v(this, "prompt");
    v(this, "handoffDescription");
    v(this, "handoffs");
    v(this, "model");
    v(this, "modelSettings");
    v(this, "tools");
    v(this, "mcpServers");
    v(this, "inputGuardrails");
    v(this, "outputGuardrails");
    v(this, "outputType", "text");
    v(this, "toolUseBehavior");
    v(this, "resetToolChoice");
    if (typeof t.name != "string" || t.name.trim() === "")
      throw new Q("Agent must have a name.");
    if (this.name = t.name, this.instructions = t.instructions ?? Rt.DEFAULT_MODEL_PLACEHOLDER, this.prompt = t.prompt, this.handoffDescription = t.handoffDescription ?? "", this.handoffs = t.handoffs ?? [], this.model = t.model ?? "", this.modelSettings = t.modelSettings ?? ec(), this.tools = t.tools ?? [], this.mcpServers = t.mcpServers ?? [], this.inputGuardrails = t.inputGuardrails ?? [], this.outputGuardrails = t.outputGuardrails ?? [], t.outputType && (this.outputType = t.outputType), this.toolUseBehavior = t.toolUseBehavior ?? "run_llm_again", this.resetToolChoice = t.resetToolChoice ?? !0, // The user sets a non-default model
    t.model !== void 0 && // The default model is gpt-5
    Va() && // However, the specified model is not a gpt-5 model
    (typeof t.model != "string" || !cr(t.model)) && // The model settings are not customized for the specified model
    t.modelSettings === void 0 && (this.modelSettings = {}), (t.handoffOutputTypeWarningEnabled === void 0 || t.handoffOutputTypeWarningEnabled) && this.handoffs && this.outputType) {
      const r = /* @__PURE__ */ new Set([JSON.stringify(this.outputType)]);
      for (const s of this.handoffs)
        "outputType" in s && s.outputType ? r.add(JSON.stringify(s.outputType)) : "agent" in s && s.agent.outputType && r.add(JSON.stringify(s.agent.outputType));
      r.size > 1 && M.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`);
    }
  }
  /**
   * Create an Agent with handoffs and automatically infer the union type for TOutput from the handoff agents' output types.
   */
  static create(t) {
    return new Rt({
      ...t,
      handoffs: t.handoffs,
      outputType: t.outputType,
      handoffOutputTypeWarningEnabled: !1
    });
  }
  /**
   * Output schema name.
   */
  get outputSchemaName() {
    if (this.outputType === "text")
      return "text";
    if (St(this.outputType))
      return "ZodOutput";
    if (typeof this.outputType == "object")
      return this.outputType.name;
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Makes a copy of the agent, with the given arguments changed. For example, you could do:
   *
   * ```
   * const newAgent = agent.clone({ instructions: 'New instructions' })
   * ```
   *
   * @param config - A partial configuration to change.
   * @returns A new agent with the given changes.
   */
  clone(t) {
    return new Rt({
      ...this,
      ...t
    });
  }
  /**
   * Transform this agent into a tool, callable by other agents.
   *
   * This is different from handoffs in two ways:
   * 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent
   *    receives generated input.
   * 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is
   *    called as a tool, and the conversation is continued by the original agent.
   *
   * @param options - Options for the tool.
   * @returns A tool that runs the agent and returns the output text.
   */
  asTool(t) {
    const { toolName: r, toolDescription: s, customOutputExtractor: a, needsApproval: i, runConfig: o, runOptions: l, isEnabled: c } = t;
    return jr({
      name: r ?? nr(this.name),
      description: s ?? "",
      parameters: oc,
      strict: !0,
      needsApproval: i,
      isEnabled: c,
      execute: async (p, f, h) => {
        if (!du(p))
          throw new xe("Agent tool called with invalid input");
        const x = await new ld(o ?? {}).run(this, p.input, {
          context: f,
          ...l ?? {}
        }), b = typeof this.toolUseBehavior == "object" && this.toolUseBehavior !== null && "stopAtToolNames" in this.toolUseBehavior;
        typeof a != "function" && b && M.debug(`You're passing the agent (name: ${this.name}) with toolUseBehavior.stopAtToolNames configured as a tool to a different agent; this may not work as you expect. You may want to have a wrapper function tool to consistently return the final output.`);
        const m = typeof a == "function" ? await a(x) : sc(x.rawResponses[x.rawResponses.length - 1]);
        return h != null && h.toolCall && ac(h.toolCall, x), m;
      }
    });
  }
  /**
   * Returns the system prompt for the agent.
   *
   * If the agent has a function as its instructions, this function will be called with the
   * runContext and the agent instance.
   */
  async getSystemPrompt(t) {
    return typeof this.instructions == "function" ? await this.instructions(t, this) : this.instructions;
  }
  /**
   * Returns the prompt template for the agent, if defined.
   *
   * If the agent has a function as its prompt, this function will be called with the
   * runContext and the agent instance.
   */
  async getPrompt(t) {
    return typeof this.prompt == "function" ? await this.prompt(t, this) : this.prompt;
  }
  /**
   * Fetches the available tools from the MCP servers.
   * @returns the MCP powered tools
   */
  async getMcpTools(t) {
    return this.mcpServers.length > 0 ? Ju({
      mcpServers: this.mcpServers,
      runContext: t,
      agent: this,
      convertSchemasToStrict: !1
    }) : [];
  }
  /**
   * ALl agent tools, including the MCPl and function tools.
   *
   * @returns all configured tools
   */
  async getAllTools(t) {
    const r = await this.getMcpTools(t), s = [];
    for (const a of this.tools) {
      if (a.type === "function") {
        const i = a.isEnabled;
        if (!(typeof i == "function" ? await i(t, this) : typeof i == "boolean" ? i : !0))
          continue;
      }
      s.push(a);
    }
    return [...r, ...s];
  }
  /**
   * Returns the handoffs that should be exposed to the model for the current run.
   *
   * Handoffs that provide an `isEnabled` function returning `false` are omitted.
   */
  async getEnabledHandoffs(t) {
    var a;
    const r = ((a = this.handoffs) == null ? void 0 : a.map((i) => rc(i))) ?? [], s = [];
    for (const i of r)
      await i.isEnabled({ runContext: t, agent: this }) && s.push(i);
    return s;
  }
  /**
   * Processes the final output of the agent.
   *
   * @param output - The output of the agent.
   * @returns The parsed out.
   */
  processFinalOutput(t) {
    if (this.outputType === "text")
      return t;
    if (typeof this.outputType == "object") {
      const r = JSON.parse(t);
      return St(this.outputType) ? this.outputType.parse(r) : r;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Returns a JSON representation of the agent, which is serializable.
   *
   * @returns A JSON object containing the agent's name.
   */
  toJSON() {
    return {
      name: this.name
    };
  }
};
v(Rt, "DEFAULT_MODEL_PLACEHOLDER", "");
let It = Rt;
function Gs({ name: n, execute: e }) {
  return {
    type: "input",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "input", name: n },
        output: await e(t)
      };
    }
  };
}
function Fr({ name: n, execute: e }) {
  return {
    type: "output",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "output", name: n },
        agent: t.agent,
        agentOutput: t.agentOutput,
        output: await e(t)
      };
    }
  };
}
function uc() {
  throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.");
}
const se = y({
  /**
   * Additional optional provider specific data. Used for custom functionality or model provider
   * specific fields.
   */
  providerData: te(d(), B()).optional()
}), kt = se.extend({
  /**
   * An ID to identify the item. This is optional by default. If a model provider absolutely
   * requires this field, it will be validated on the model level.
   */
  id: d().optional()
}), cc = se.extend({
  type: _("refusal"),
  /**
   * The refusal explanation from the model.
   */
  refusal: d()
}), dc = se.extend({
  type: _("output_text"),
  /**
   * The text output from the model.
   */
  text: d()
}), ns = se.extend({
  type: _("input_text"),
  /**
   * A text input for example a message from a user
   */
  text: d()
}), lc = se.extend({
  type: _("reasoning_text"),
  /**
   * A text input for example a message from a user
   */
  text: d()
}), Qa = se.extend({
  type: _("input_image"),
  /**
   * The image input to the model. Could be provided inline (`image`), as a URL, or by reference to a
   * previously uploaded OpenAI file.
   */
  image: d().or(y({ id: d().describe("OpenAI file ID") })).describe("Either base64 encoded image data, a data URL, or an object with a file ID.").optional(),
  /**
   * Controls the level of detail requested for image understanding tasks.
   * Future models may add new values, therefore this accepts any string.
   */
  detail: d().optional()
}), ei = se.extend({
  type: _("input_file"),
  /**
   * The file input to the model. Could be raw data, a URL, or an OpenAI file ID.
   */
  file: d().describe("Either base64 encoded file data or a publicly accessible file URL").or(y({ id: d().describe("OpenAI file ID") })).or(y({ url: d().describe("Publicly accessible file URL") })).describe("Contents of the file or an object with a file ID.").optional(),
  /**
   * Optional filename metadata when uploading file data inline.
   */
  filename: d().optional()
}), ti = se.extend({
  type: _("audio"),
  /**
   * The audio input to the model. Could be base64 encoded audio data or an object with a file ID.
   */
  audio: d().or(y({
    id: d()
  })).describe("Base64 encoded audio data or file id"),
  /**
   * The format of the audio.
   */
  format: d().nullable().optional(),
  /**
   * The transcript of the audio.
   */
  transcript: d().nullable().optional()
}), pc = se.extend({
  type: _("image"),
  /**
   * The image input to the model. Could be base64 encoded image data or an object with a file ID.
   */
  image: d().describe("Base64 encoded image data")
}), fc = se.extend({
  type: _("text"),
  /**
   * The text output from the model.
   */
  text: d()
}), hc = y({
  data: Tt([d(), Oa(Uint8Array)]).describe("Base64 image data, or raw bytes that will be base64 encoded automatically."),
  mediaType: d().optional()
}), mc = y({
  url: d().describe("Publicly accessible URL pointing to the image content")
}), gc = y({
  fileId: d().describe("OpenAI file ID referencing uploaded image content")
}), yc = Tt([hc, mc, gc]).describe("Inline image data or references to uploaded content."), _c = y({
  data: Tt([d(), Oa(Uint8Array)]).describe("Base64 encoded file data, or raw bytes that will be encoded automatically."),
  mediaType: d().describe("IANA media type describing the file contents"),
  filename: d().describe("Filename associated with the inline data")
}), vc = y({
  url: d().describe("Publicly accessible URL for the file content"),
  filename: d().optional()
}), bc = y({
  id: d().describe("OpenAI file ID referencing uploaded content"),
  filename: d().optional()
}), wc = Tt([
  d().describe("Existing data URL or base64 string"),
  _c,
  vc,
  bc
]).describe("Inline data (with metadata) or references pointing to file contents."), xc = (...n) => d(), Sc = se.extend({
  type: _("image"),
  /**
   * Inline image content or a reference to an uploaded file. Accepts a URL/data URL string or an
   * object describing the data/url/fileId source.
   */
  image: d().or(yc).optional(),
  /**
   * Controls the requested level of detail for vision models.
   * Use a string to avoid constraining future model capabilities.
   */
  detail: xc("low", "high", "auto").optional()
}), Ic = se.extend({
  type: _("file"),
  /**
   * File output reference. Provide either a string (data URL / base64), a data object (requires
   * mediaType + filename), or an object pointing to an uploaded file/URL.
   */
  file: wc
}), Tc = se.extend({
  type: _("computer_screenshot"),
  /**
   * A base64 encoded image data or a URL representing the screenshot.
   */
  data: d().describe("Base64 encoded image data or URL")
}), kc = he("type", [
  y({ type: _("screenshot") }),
  y({
    type: _("click"),
    x: R(),
    y: R(),
    button: ue(["left", "right", "wheel", "back", "forward"])
  }),
  y({
    type: _("double_click"),
    x: R(),
    y: R()
  }),
  y({
    type: _("scroll"),
    x: R(),
    y: R(),
    scroll_x: R(),
    scroll_y: R()
  }),
  y({
    type: _("type"),
    text: d()
  }),
  y({ type: _("wait") }),
  y({
    type: _("move"),
    x: R(),
    y: R()
  }),
  y({
    type: _("keypress"),
    keys: G(d())
  }),
  y({
    type: _("drag"),
    path: G(y({ x: R(), y: R() }))
  })
]), Ac = he("type", [
  dc,
  cc,
  ti,
  pc
]), rs = kt.extend({
  /**
   * Any item without a type is treated as a message
   */
  type: _("message").optional()
}), dr = rs.extend({
  /**
   * Representing a message from the assistant (i.e. the model)
   */
  role: _("assistant"),
  /**
   * The status of the message.
   */
  status: ue(["in_progress", "completed", "incomplete"]),
  /**
   * The content of the message.
   */
  content: G(Ac)
}), Oc = he("type", [
  ns,
  Qa,
  ei,
  ti
]), ni = rs.extend({
  // type: z.literal('message'),
  /**
   * Representing a message from the user
   */
  role: _("user"),
  /**
   * The content of the message.
   */
  content: G(Oc).or(d())
}), ri = rs.extend({
  // type: z.literal('message'),
  /**
   * Representing a system message to the user
   */
  role: _("system"),
  /**
   * The content of the message.
   */
  content: d()
});
he("role", [
  ri,
  dr,
  ni
]);
const an = kt.extend({
  type: _("hosted_tool_call"),
  /**
   * The name of the hosted tool. For example `web_search_call` or `file_search_call`
   */
  name: d().describe("The name of the hosted tool"),
  /**
   * The arguments of the hosted tool call.
   */
  arguments: d().describe("The arguments of the hosted tool call").optional(),
  /**
   * The status of the tool call.
   */
  status: d().optional(),
  /**
   * The primary output of the tool call. Additional output might be in the `providerData` field.
   */
  output: d().optional()
}), on = kt.extend({
  type: _("function_call"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: d().describe("The ID of the tool call"),
  /**
   * The name of the function.
   */
  name: d().describe("The name of the function"),
  /**
   * The status of the function call.
   */
  status: ue(["in_progress", "completed", "incomplete"]).optional(),
  /**
   * The arguments of the function call.
   */
  arguments: d()
}), Cc = he("type", [
  fc,
  Sc,
  Ic
]), Ec = he("type", [
  ns,
  Qa,
  ei
]), Lr = kt.extend({
  type: _("function_call_result"),
  /**
   * The name of the tool that was called
   */
  name: d().describe("The name of the tool"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: d().describe("The ID of the tool call"),
  /**
   * The status of the tool call.
   */
  status: ue(["in_progress", "completed", "incomplete"]),
  /**
   * The output of the tool call.
   */
  output: Tt([
    d(),
    Cc,
    G(Ec)
  ]).describe("Output returned by the tool call. Supports plain strings, legacy ToolOutput items, or structured input_* items.")
}), ss = kt.extend({
  type: _("computer_call"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: d().describe("The ID of the computer call"),
  /**
   * The status of the computer call.
   */
  status: ue(["in_progress", "completed", "incomplete"]),
  /**
   * The action to be performed by the computer.
   */
  action: kc
}), Nc = kt.extend({
  type: _("computer_call_result"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: d().describe("The ID of the computer call"),
  /**
   * The output of the computer call.
   */
  output: Tc
}), Rc = he("type", [
  ss,
  on,
  an
]), as = se.extend({
  id: d().optional(),
  type: _("reasoning"),
  /**
   * The user facing representation of the reasoning. Additional information might be in the `providerData` field.
   */
  content: G(ns),
  /**
   * The raw reasoning text from the model.
   */
  rawContent: G(lc).optional()
}), si = kt.extend({
  type: _("unknown")
}), is = he("type", [
  dr,
  an,
  on,
  ss,
  as,
  si
]), Dc = Tt([
  ni,
  dr,
  ri,
  an,
  on,
  ss,
  Lr,
  Nc,
  as,
  si
]), Pc = y({
  requests: R().optional(),
  inputTokens: R(),
  outputTokens: R(),
  totalTokens: R(),
  inputTokensDetails: te(d(), R()).optional(),
  outputTokensDetails: te(d(), R()).optional()
}), ai = se.extend({
  type: _("output_text_delta"),
  /**
   * The delta text that was streamed by the modelto the user.
   */
  delta: d()
}), Mc = se.extend({
  type: _("response_started")
}), ii = se.extend({
  type: _("response_done"),
  /**
   * The response from the model.
   */
  response: se.extend({
    /**
     * The ID of the response.
     */
    id: d(),
    /**
     * The usage data for the response.
     */
    usage: Pc,
    /**
     * The output from the model.
     */
    output: G(is)
  })
}), jc = se.extend({
  type: _("model"),
  event: B().describe("The event from the model")
});
he("type", [
  ai,
  ii,
  Mc,
  jc
]);
class lr {
  constructor(e) {
    /**
     * The number of requests made to the LLM API.
     */
    v(this, "requests");
    /**
     * The number of input tokens used across all requests.
     */
    v(this, "inputTokens");
    /**
     * The number of output tokens used across all requests.
     */
    v(this, "outputTokens");
    /**
     * The total number of tokens sent and received, across all requests.
     */
    v(this, "totalTokens");
    /**
     * Details about the input tokens used across all requests.
     */
    v(this, "inputTokensDetails", []);
    /**
     * Details about the output tokens used across all requests.
     */
    v(this, "outputTokensDetails", []);
    if (typeof e > "u")
      this.requests = 0, this.inputTokens = 0, this.outputTokens = 0, this.totalTokens = 0, this.inputTokensDetails = [], this.outputTokensDetails = [];
    else {
      this.requests = (e == null ? void 0 : e.requests) ?? 1, this.inputTokens = (e == null ? void 0 : e.inputTokens) ?? (e == null ? void 0 : e.input_tokens) ?? 0, this.outputTokens = (e == null ? void 0 : e.outputTokens) ?? (e == null ? void 0 : e.output_tokens) ?? 0, this.totalTokens = (e == null ? void 0 : e.totalTokens) ?? (e == null ? void 0 : e.total_tokens) ?? 0;
      const t = (e == null ? void 0 : e.inputTokensDetails) ?? (e == null ? void 0 : e.input_tokens_details);
      this.inputTokensDetails = t ? [t] : [];
      const r = (e == null ? void 0 : e.outputTokensDetails) ?? (e == null ? void 0 : e.output_tokens_details);
      this.outputTokensDetails = r ? [r] : [];
    }
  }
  add(e) {
    this.requests += e.requests, this.inputTokens += e.inputTokens, this.outputTokens += e.outputTokens, this.totalTokens += e.totalTokens, e.inputTokensDetails && this.inputTokensDetails.push(...e.inputTokensDetails), e.outputTokensDetails && this.outputTokensDetails.push(...e.outputTokensDetails);
  }
}
var ge;
class Et {
  constructor(e = {}) {
    /**
     * The context object you passed to the `Runner.run()` method.
     */
    v(this, "context");
    /**
     * The usage of the agent run so far. For streamed responses, the usage will be stale until the
     * last chunk of the stream is processed.
     */
    v(this, "usage");
    /**
     * A map of tool names to whether they have been approved.
     */
    O(this, ge);
    this.context = e, this.usage = new lr(), S(this, ge, /* @__PURE__ */ new Map());
  }
  /**
   * Rebuild the approvals map from a serialized state.
   * @internal
   *
   * @param approvals - The approvals map to rebuild.
   */
  _rebuildApprovals(e) {
    S(this, ge, new Map(Object.entries(e)));
  }
  /**
   * Check if a tool call has been approved.
   *
   * @param approval - Details about the tool call being evaluated.
   * @returns `true` if the tool call has been approved, `false` if blocked and `undefined` if not yet approved or rejected.
   */
  isToolApproved(e) {
    const { toolName: t, callId: r } = e, s = u(this, ge).get(t);
    if ((s == null ? void 0 : s.approved) === !0 && s.rejected === !0)
      return M.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"), !0;
    if ((s == null ? void 0 : s.approved) === !0)
      return !0;
    if ((s == null ? void 0 : s.rejected) === !0)
      return !1;
    const a = Array.isArray(s == null ? void 0 : s.approved) ? s.approved.includes(r) : !1, i = Array.isArray(s == null ? void 0 : s.rejected) ? s.rejected.includes(r) : !1;
    if (a && i)
      return M.warn(`Tool call ${r} is both approved and rejected at the same time. Approval takes precedence`), !0;
    if (a)
      return !0;
    if (i)
      return !1;
  }
  /**
   * Approve a tool call.
   *
   * @param approvalItem - The tool approval item to approve.
   * @param options - Additional approval behavior options.
   */
  approveTool(e, { alwaysApprove: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      u(this, ge).set(r, {
        approved: !0,
        rejected: []
      });
      return;
    }
    const s = u(this, ge).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.approved)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.approved.push(a);
    }
    u(this, ge).set(r, s);
  }
  /**
   * Reject a tool call.
   *
   * @param approvalItem - The tool approval item to reject.
   */
  rejectTool(e, { alwaysReject: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      u(this, ge).set(r, {
        approved: !1,
        rejected: !0
      });
      return;
    }
    const s = u(this, ge).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.rejected)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.rejected.push(a);
    }
    u(this, ge).set(r, s);
  }
  toJSON() {
    return {
      context: this.context,
      usage: this.usage,
      approvals: Object.fromEntries(u(this, ge).entries())
    };
  }
}
ge = new WeakMap();
function Vs(n) {
  return n.type === "function" ? {
    type: "function",
    name: n.name,
    description: n.description,
    parameters: n.parameters,
    strict: n.strict
  } : n.type === "computer" ? {
    type: "computer",
    name: n.name,
    environment: n.computer.environment,
    dimensions: n.computer.dimensions
  } : {
    type: "hosted_tool",
    name: n.name,
    providerData: n.providerData
  };
}
function Ws(n) {
  return {
    toolName: n.toolName,
    toolDescription: n.toolDescription,
    inputJsonSchema: n.inputJsonSchema,
    strictJsonSchema: n.strictJsonSchema
  };
}
class At {
  constructor() {
    v(this, "type", "base_item");
    v(this, "rawItem");
  }
  toJSON() {
    return {
      type: this.type,
      rawItem: this.rawItem
    };
  }
}
class pr extends At {
  constructor(t, r) {
    super();
    v(this, "rawItem");
    v(this, "agent");
    v(this, "type", "message_output_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
  get content() {
    let t = "";
    for (const r of this.rawItem.content)
      r.type === "output_text" && (t += r.text);
    return t;
  }
}
class _t extends At {
  constructor(t, r) {
    super();
    v(this, "rawItem");
    v(this, "agent");
    v(this, "type", "tool_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Kt extends At {
  constructor(t, r, s) {
    super();
    v(this, "rawItem");
    v(this, "agent");
    v(this, "output");
    v(this, "type", "tool_call_output_item");
    this.rawItem = t, this.agent = r, this.output = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON(),
      output: et(this.output)
    };
  }
}
class os extends At {
  constructor(t, r) {
    super();
    v(this, "rawItem");
    v(this, "agent");
    v(this, "type", "reasoning_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class us extends At {
  constructor(t, r) {
    super();
    v(this, "rawItem");
    v(this, "agent");
    v(this, "type", "handoff_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class cs extends At {
  constructor(t, r, s) {
    super();
    v(this, "rawItem");
    v(this, "sourceAgent");
    v(this, "targetAgent");
    v(this, "type", "handoff_output_item");
    this.rawItem = t, this.sourceAgent = r, this.targetAgent = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      sourceAgent: this.sourceAgent.toJSON(),
      targetAgent: this.targetAgent.toJSON()
    };
  }
}
class Se extends At {
  constructor(t, r) {
    super();
    v(this, "rawItem");
    v(this, "agent");
    v(this, "type", "tool_approval_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
function fr(n) {
  return async (e, ...t) => Gr(async () => {
    const r = n(...t);
    Zn(r);
    try {
      return r.start(), await e(r);
    } catch (s) {
      throw r.setError({
        message: s.message,
        data: s.data
      }), s;
    } finally {
      r.end(), en();
    }
  });
}
function Hs(n, e) {
  var t;
  return Pe().createSpan({
    ...n,
    data: {
      type: "agent",
      name: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.name) ?? "Agent",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
function $c(n, e) {
  var t, r;
  return Pe().createSpan({
    ...n,
    data: {
      type: "function",
      input: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.input) ?? "",
      output: ((r = n == null ? void 0 : n.data) == null ? void 0 : r.output) ?? "",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Ks = fr($c);
function Fc(n, e) {
  return Pe().createSpan({
    ...n,
    data: { type: "handoff", ...n == null ? void 0 : n.data }
  }, e);
}
const Lc = fr(Fc);
function Zc(n, e) {
  return Pe().createSpan({
    ...n,
    data: {
      type: "guardrail",
      triggered: !1,
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Ys = fr(Zc);
function Uc(n, e) {
  return Pe().createSpan({
    ...n,
    data: {
      type: "mcp_tools",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Jc = fr(Uc);
function Zr(n) {
  if (n.length === 0)
    return "";
  const e = typeof globalThis < "u" && globalThis.Buffer ? globalThis.Buffer : void 0;
  if (e)
    return e.from(n).toString("base64");
  let t = "";
  for (let i = 0; i < n.length; i += 1)
    t += String.fromCharCode(n[i]);
  if (typeof globalThis.btoa == "function")
    return globalThis.btoa(t);
  const r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  let s = "", a = 0;
  for (; a < t.length; ) {
    const i = t.charCodeAt(a++), o = t.charCodeAt(a++), l = t.charCodeAt(a++), c = i >> 2, p = (i & 3) << 4 | o >> 4, f = isNaN(o) ? 64 : (o & 15) << 2 | l >> 6, h = isNaN(l) ? 64 : l & 63;
    s += r.charAt(c) + r.charAt(p) + r.charAt(f) + r.charAt(h);
  }
  return s;
}
class qc {
  /**
   * @param data The raw responses stream events from the LLM.
   */
  constructor(e) {
    v(this, "data");
    /**
     * The type of the event.
     */
    v(this, "type", "raw_model_stream_event");
    this.data = e;
  }
}
class Bc {
  /**
   * @param name The name of the event.
   * @param item The item that was created.
   */
  constructor(e, t) {
    v(this, "name");
    v(this, "item");
    v(this, "type", "run_item_stream_event");
    this.name = e, this.item = t;
  }
}
class zc {
  /**
   * @param agent The new agent
   */
  constructor(e) {
    v(this, "agent");
    v(this, "type", "agent_updated_stream_event");
    this.agent = e;
  }
}
function Xs(n, e, t, r) {
  var g;
  const s = [], a = [], i = [], o = [], l = [], c = [], p = new Map(r.map((x) => [x.toolName, x])), f = new Map(t.filter((x) => x.type === "function").map((x) => [x.name, x])), h = t.find((x) => x.type === "computer"), w = new Map(t.filter((x) => {
    var b;
    return x.type === "hosted_tool" && ((b = x.providerData) == null ? void 0 : b.type) === "mcp";
  }).map((x) => x).map((x) => [x.providerData.server_label, x]));
  for (const x of n.output) {
    if (x.type === "message")
      x.role === "assistant" && s.push(new pr(x, e));
    else if (x.type === "hosted_tool_call") {
      s.push(new _t(x, e));
      const m = x.name;
      if (c.push(m), ((g = x.providerData) == null ? void 0 : g.type) === "mcp_approval_request" || x.name === "mcp_approval_request") {
        const I = x.providerData, A = I.server_label, D = w.get(A);
        if (typeof D > "u") {
          const j = `MCP server (${A}) not found in Agent (${e.name})`;
          throw Dt({
            message: j,
            data: { mcp_server_label: A }
          }), new xe(j);
        }
        const N = new Se({
          type: "hosted_tool_call",
          // We must use this name to align with the name sent from the servers
          name: I.name,
          id: I.id,
          status: "in_progress",
          providerData: I
        }, e);
        l.push({
          requestItem: N,
          mcpTool: D
        }), D.providerData.on_approval || s.push(N);
      }
    } else if (x.type === "reasoning")
      s.push(new os(x, e));
    else if (x.type === "computer_call") {
      if (s.push(new _t(x, e)), c.push("computer_use"), !h)
        throw Dt({
          message: "Model produced computer action without a computer tool.",
          data: {
            agent_name: e.name
          }
        }), new xe("Model produced computer action without a computer tool.");
      o.push({
        toolCall: x,
        computer: h
      });
    }
    if (x.type !== "function_call")
      continue;
    c.push(x.name);
    const b = p.get(x.name);
    if (b)
      s.push(new us(x, e)), a.push({
        toolCall: x,
        handoff: b
      });
    else {
      const m = f.get(x.name);
      if (!m)
        throw Dt({
          message: `Tool ${x.name} not found in agent ${e.name}.`,
          data: {
            tool_name: x.name,
            agent_name: e.name
          }
        }), new xe(`Tool ${x.name} not found in agent ${e.name}.`);
      s.push(new _t(x, e)), i.push({
        toolCall: x,
        tool: m
      });
    }
  }
  return {
    newItems: s,
    handoffs: a,
    functions: i,
    computerActions: o,
    mcpApprovalRequests: l,
    toolsUsed: c,
    hasToolsOrApprovalsToRun() {
      return a.length > 0 || i.length > 0 || l.length > 0 || o.length > 0;
    }
  };
}
const Gc = he("type", [
  y({
    type: _("next_step_handoff"),
    newAgent: B()
  }),
  y({
    type: _("next_step_final_output"),
    output: d()
  }),
  y({
    type: _("next_step_run_again")
  }),
  y({
    type: _("next_step_interruption"),
    data: te(d(), B())
  })
]);
class be {
  constructor(e, t, r, s, a) {
    v(this, "originalInput");
    v(this, "modelResponse");
    v(this, "preStepItems");
    v(this, "newStepItems");
    v(this, "nextStep");
    this.originalInput = e, this.modelResponse = t, this.preStepItems = r, this.newStepItems = s, this.nextStep = a;
  }
  /**
   * The items generated during the agent run (i.e. everything generated after originalInput)
   */
  get generatedItems() {
    return this.preStepItems.concat(this.newStepItems);
  }
}
function Qs(n, e, t) {
  return n.resetToolChoice && e.hasUsedTools(n) ? { ...t, toolChoice: void 0 } : t;
}
async function ea(n, e, t, r, s, a, i) {
  const o = t.filter((g) => g instanceof Se && "callId" in g.rawItem && g.rawItem.type === "function_call").map((g) => g.rawItem.callId), l = s.functions.filter((g) => o.includes(g.toolCall.callId)), c = await oi(n, l, a, i), p = c.map((g) => g.runItem), f = s.mcpApprovalRequests.filter((g) => {
    var x;
    return g.requestItem.type === "tool_approval_item" && g.requestItem.rawItem.type === "hosted_tool_call" && ((x = g.requestItem.rawItem.providerData) == null ? void 0 : x.type) === "mcp_approval_request";
  });
  for (const g of f) {
    const x = g.requestItem.rawItem.id, b = i._context.isToolApproved({
      // Since this item name must be the same with the one sent from Responses API server
      toolName: g.requestItem.rawItem.name,
      callId: x
    });
    if (typeof b < "u") {
      const m = {
        approve: b,
        approval_request_id: x,
        reason: void 0
      };
      p.push(new _t({
        type: "hosted_tool_call",
        name: "mcp_approval_response",
        providerData: m
      }, n));
    }
  }
  const h = await ui(n, c, i), w = t.filter((g) => !(g instanceof Se));
  return h.isFinalOutput ? (a.emit("agent_end", i._context, n, h.finalOutput), n.emit("agent_end", i._context, h.finalOutput), new be(e, r, w, p, {
    type: "next_step_final_output",
    output: h.finalOutput
  })) : h.isInterrupted ? new be(e, r, w, p, {
    type: "next_step_interruption",
    data: {
      interruptions: h.interruptions
    }
  }) : new be(e, r, w, p, { type: "next_step_run_again" });
}
async function ta(n, e, t, r, s, a, i) {
  var b, m, I, A;
  const o = t;
  let l = s.newItems;
  const [c, p] = await Promise.all([
    oi(n, s.functions, a, i),
    Qc(n, s.computerActions, a, i._context)
  ]);
  if (l = l.concat(c.map((D) => D.runItem)), l = l.concat(p), s.mcpApprovalRequests.length > 0)
    for (const D of s.mcpApprovalRequests) {
      const N = D.mcpTool.providerData, j = D.requestItem.rawItem.providerData;
      if (N.on_approval) {
        const J = await N.on_approval(i._context, D.requestItem), ne = {
          approve: J.approve,
          approval_request_id: j.id,
          reason: J.reason
        };
        l.push(new _t({
          type: "hosted_tool_call",
          name: "mcp_approval_response",
          providerData: ne
        }, n));
      } else {
        l.push(D.requestItem);
        const J = {
          type: "hosted_mcp_tool_approval",
          tool: D.mcpTool,
          runItem: new Se({
            type: "hosted_tool_call",
            name: j.name,
            id: j.id,
            arguments: j.arguments,
            status: "in_progress",
            providerData: j
          }, n)
        };
        c.push(J);
      }
    }
  if (s.handoffs.length > 0)
    return await ed(n, e, o, l, r, s.handoffs, a, i._context);
  const f = await ui(n, c, i);
  if (f.isFinalOutput)
    return a.emit("agent_end", i._context, n, f.finalOutput), n.emit("agent_end", i._context, f.finalOutput), new be(e, r, o, l, {
      type: "next_step_final_output",
      output: f.finalOutput
    });
  if (f.isInterrupted)
    return new be(e, r, o, l, {
      type: "next_step_interruption",
      data: {
        interruptions: f.interruptions
      }
    });
  if ((((b = s.functions) == null ? void 0 : b.length) ?? 0) > 0 || (((m = s.computerActions) == null ? void 0 : m.length) ?? 0) > 0 || (((I = s.mcpApprovalRequests) == null ? void 0 : I.length) ?? 0) > 0 || (((A = s.handoffs) == null ? void 0 : A.length) ?? 0) > 0)
    return new be(e, r, o, l, { type: "next_step_run_again" });
  const w = l.filter((D) => D instanceof pr), g = w.length > 0 ? Xa(w[w.length - 1].rawItem) : void 0;
  if (typeof g > "u")
    return new be(e, r, o, l, { type: "next_step_run_again" });
  if (!c.some((D) => D.runItem instanceof Se)) {
    if (n.outputType === "text")
      return new be(e, r, o, l, {
        type: "next_step_final_output",
        output: g
      });
    if (n.outputType !== "text" && g) {
      const { parser: D } = es(n.outputType, "final_output"), [N] = await Yr(() => D(g));
      if (N)
        throw Dt({
          message: "Invalid output type",
          data: {
            error: String(N)
          }
        }), new xe("Invalid output type");
      return new be(e, r, o, l, { type: "next_step_final_output", output: g });
    }
  }
  return new be(e, r, o, l, { type: "next_step_run_again" });
}
function rr(n, e) {
  const t = Vc(e);
  if (t) {
    const r = t.map(Wc);
    return {
      type: "function_call_result",
      name: n.name,
      callId: n.callId,
      status: "completed",
      output: r
    };
  }
  return {
    type: "function_call_result",
    name: n.name,
    callId: n.callId,
    status: "completed",
    output: {
      type: "text",
      text: et(e)
    }
  };
}
function Vc(n) {
  if (Array.isArray(n)) {
    const t = [];
    for (const r of n) {
      const s = na(r);
      if (!s)
        return null;
      t.push(s);
    }
    return t;
  }
  const e = na(n);
  return e ? [e] : null;
}
function na(n) {
  if (!at(n))
    return null;
  const e = n.type;
  if (e === "text" && typeof n.text == "string") {
    const t = { type: "text", text: n.text };
    return at(n.providerData) && (t.providerData = n.providerData), t;
  }
  if (e === "image") {
    const t = { type: "image" };
    let r, s;
    const a = ie(n.mediaType) ? n.mediaType : void 0, i = n.image;
    if (typeof i == "string" && i.length > 0)
      r = i;
    else if (at(i)) {
      const o = i, l = ie(o.mediaType) ? o.mediaType : a;
      if (ie(o.url) ? r = o.url : (ie(o.data) || o.data instanceof Uint8Array && o.data.length > 0) && (r = jn(o.data, l)), !r) {
        const c = ie(o.fileId) && o.fileId || ie(o.id) && o.id || void 0;
        c && (s = c);
      }
    }
    if (!r && typeof n.imageUrl == "string" && n.imageUrl.length > 0 && (r = n.imageUrl), !s && typeof n.fileId == "string" && n.fileId.length > 0 && (s = n.fileId), !r && typeof n.data == "string" && n.data.length > 0 ? r = a ? jn(n.data, a) : n.data : !r && n.data instanceof Uint8Array && n.data.length > 0 && (r = jn(n.data, a)), typeof n.detail == "string" && n.detail.length > 0 && (t.detail = n.detail), r)
      t.image = r;
    else if (s)
      t.image = { fileId: s };
    else
      return null;
    return at(n.providerData) && (t.providerData = n.providerData), t;
  }
  if (e === "file") {
    const t = Hc(n);
    if (!t)
      return null;
    const r = { type: "file", file: t };
    return at(n.providerData) && (r.providerData = n.providerData), r;
  }
  return null;
}
function Wc(n) {
  if (n.type === "text") {
    const t = {
      type: "input_text",
      text: n.text
    };
    return n.providerData && (t.providerData = n.providerData), t;
  }
  if (n.type === "image") {
    const t = { type: "input_image" };
    if (typeof n.detail == "string" && n.detail.length > 0 && (t.detail = n.detail), typeof n.image == "string" && n.image.length > 0)
      t.image = n.image;
    else if (at(n.image)) {
      const r = n.image, s = ie(r.mediaType) ? r.mediaType : void 0;
      if (ie(r.url))
        t.image = r.url;
      else if (ie(r.data))
        t.image = s && !r.data.startsWith("data:") ? Nt(r.data, s) : r.data;
      else if (r.data instanceof Uint8Array && r.data.length > 0) {
        const a = Zr(r.data);
        t.image = Nt(a, s);
      } else {
        const a = ie(r.fileId) && r.fileId || ie(r.id) && r.id || void 0;
        a && (t.image = { id: a });
      }
    }
    return n.providerData && (t.providerData = n.providerData), t;
  }
  if (n.type === "file") {
    const t = { type: "input_file" }, r = n.file;
    if (typeof r == "string")
      t.file = r;
    else if (r && typeof r == "object") {
      const s = r;
      if ("data" in s && s.data) {
        const a = s.mediaType ?? "text/plain";
        if (typeof s.data == "string")
          t.file = Nt(s.data, a);
        else {
          const i = Zr(s.data);
          t.file = Nt(i, a);
        }
      } else if (typeof s.url == "string" && s.url.length > 0)
        t.file = { url: s.url };
      else {
        const a = typeof s.id == "string" && s.id.length > 0 && s.id || (typeof s.fileId == "string" && s.fileId.length > 0 ? s.fileId : void 0);
        a && (t.file = { id: a });
      }
      typeof s.filename == "string" && s.filename.length > 0 && (t.filename = s.filename);
    }
    return n.providerData && (t.providerData = n.providerData), t;
  }
  return n;
}
function Hc(n) {
  const e = n.file;
  if (typeof e == "string" && e.length > 0)
    return e;
  const t = Kc(e);
  if (t)
    return t;
  const r = Yc(n);
  return r || null;
}
function Kc(n) {
  if (!at(n))
    return null;
  if ("data" in n && n.data !== void 0) {
    const t = n.data, r = typeof t == "string" && t.length > 0, s = t instanceof Uint8Array && t.length > 0;
    return !r && !s || !ie(n.mediaType) || !ie(n.filename) ? null : {
      data: typeof t == "string" ? t : new Uint8Array(t),
      mediaType: n.mediaType,
      filename: n.filename
    };
  }
  if (ie(n.url)) {
    const t = { url: n.url };
    return ie(n.filename) && (t.filename = n.filename), t;
  }
  const e = ie(n.id) && n.id || ie(n.fileId) && n.fileId;
  if (e) {
    const t = { id: e };
    return ie(n.filename) && (t.filename = n.filename), t;
  }
  return null;
}
function Yc(n) {
  const e = typeof n.filename == "string" && n.filename.length > 0 ? n.filename : void 0, t = typeof n.mediaType == "string" && n.mediaType.length > 0 ? n.mediaType : void 0;
  if (typeof n.fileData == "string" && n.fileData.length > 0)
    return !t || !e ? null : { data: n.fileData, mediaType: t, filename: e };
  if (n.fileData instanceof Uint8Array && n.fileData.length > 0)
    return !t || !e ? null : { data: new Uint8Array(n.fileData), mediaType: t, filename: e };
  if (typeof n.fileUrl == "string" && n.fileUrl.length > 0) {
    const r = { url: n.fileUrl };
    return e && (r.filename = e), r;
  }
  if (typeof n.fileId == "string" && n.fileId.length > 0) {
    const r = { id: n.fileId };
    return e && (r.filename = e), r;
  }
  return null;
}
function at(n) {
  return typeof n == "object" && n !== null;
}
function ie(n) {
  return typeof n == "string" && n.length > 0;
}
function jn(n, e) {
  if (typeof n == "string")
    return e && !n.startsWith("data:") ? Nt(n, e) : n;
  const t = Zr(n);
  return Nt(t, e);
}
function Nt(n, e) {
  return e ? `data:${e};base64,${n}` : n;
}
async function oi(n, e, t, r) {
  async function s(a) {
    let i = a.toolCall.arguments;
    if (a.tool.parameters && (St(a.tool.parameters) ? i = a.tool.parameters.parse(i) : i = JSON.parse(i)), await a.tool.needsApproval(r._context, i, a.toolCall.callId)) {
      const l = r._context.isToolApproved({
        toolName: a.tool.name,
        callId: a.toolCall.callId
      });
      if (l === !1)
        return Ks(async (c) => {
          const p = "Tool execution was not approved.";
          return c.setError({
            message: p,
            data: {
              tool_name: a.tool.name,
              error: `Tool execution for ${a.toolCall.callId} was manually rejected by user.`
            }
          }), c.spanData.output = p, {
            type: "function_output",
            tool: a.tool,
            output: p,
            runItem: new Kt(rr(a.toolCall, p), n, p)
          };
        }, {
          data: {
            name: a.tool.name
          }
        });
      if (l !== !0)
        return {
          type: "function_approval",
          tool: a.tool,
          runItem: new Se(a.toolCall, n)
        };
    }
    return Ks(async (l) => {
      t.config.traceIncludeSensitiveData && (l.spanData.input = a.toolCall.arguments);
      try {
        t.emit("agent_tool_start", r._context, n, a.tool, {
          toolCall: a.toolCall
        }), n.emit("agent_tool_start", r._context, a.tool, {
          toolCall: a.toolCall
        });
        const c = await a.tool.invoke(r._context, a.toolCall.arguments, { toolCall: a.toolCall }), p = et(c);
        t.emit("agent_tool_end", r._context, n, a.tool, p, { toolCall: a.toolCall }), n.emit("agent_tool_end", r._context, a.tool, p, { toolCall: a.toolCall }), t.config.traceIncludeSensitiveData && (l.spanData.output = p);
        const f = {
          type: "function_output",
          tool: a.tool,
          output: c,
          runItem: new Kt(rr(a.toolCall, c), n, c)
        }, h = ic(a.toolCall);
        if (h) {
          f.agentRunResult = h;
          const w = h.interruptions;
          w.length > 0 && (f.interruptions = w);
        }
        return f;
      } catch (c) {
        throw l.setError({
          message: "Error running tool",
          data: {
            tool_name: a.tool.name,
            error: String(c)
          }
        }), c;
      }
    }, {
      data: {
        name: a.tool.name
      }
    });
  }
  try {
    return await Promise.all(e.map(s));
  } catch (a) {
    throw new cu(`Failed to run function tools: ${a}`, a, r);
  }
}
async function Xc(n, e) {
  const t = e.action;
  let r;
  switch (t.type) {
    case "click":
      await n.click(t.x, t.y, t.button);
      break;
    case "double_click":
      await n.doubleClick(t.x, t.y);
      break;
    case "drag":
      await n.drag(t.path.map((s) => [s.x, s.y]));
      break;
    case "keypress":
      await n.keypress(t.keys);
      break;
    case "move":
      await n.move(t.x, t.y);
      break;
    case "screenshot":
      r = await n.screenshot();
      break;
    case "scroll":
      await n.scroll(t.x, t.y, t.scroll_x, t.scroll_y);
      break;
    case "type":
      await n.type(t.text);
      break;
    case "wait":
      await n.wait();
      break;
  }
  if (typeof r < "u" || typeof n.screenshot == "function" && (r = await n.screenshot(), typeof r < "u"))
    return r;
  throw new Error("Computer does not implement screenshot()");
}
async function Qc(n, e, t, r, s = void 0) {
  const a = s ?? M, i = [];
  for (const o of e) {
    const l = o.computer.computer, c = o.toolCall;
    t.emit("agent_tool_start", r, n, o.computer, {
      toolCall: c
    }), typeof n.emit == "function" && n.emit("agent_tool_start", r, o.computer, { toolCall: c });
    let p;
    try {
      p = await Xc(l, c);
    } catch (w) {
      a.error("Failed to execute computer action:", w), p = "";
    }
    t.emit("agent_tool_end", r, n, o.computer, p, {
      toolCall: c
    }), typeof n.emit == "function" && n.emit("agent_tool_end", r, o.computer, p, {
      toolCall: c
    });
    const f = p ? `data:image/png;base64,${p}` : "", h = {
      type: "computer_call_result",
      callId: c.callId,
      output: { type: "computer_screenshot", data: f }
    };
    i.push(new Kt(h, n, f));
  }
  return i;
}
async function ed(n, e, t, r, s, a, i, o) {
  if (r = [...r], a.length === 0)
    return M.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."), new be(e, s, t, r, { type: "next_step_run_again" });
  if (a.length > 1) {
    const c = "Multiple handoffs detected, ignoring this one.";
    for (let p = 1; p < a.length; p++)
      r.push(new Kt(rr(a[p].toolCall, c), n, c));
  }
  const l = a[0];
  return Lc(async (c) => {
    const p = l.handoff, f = await p.onInvokeHandoff(o, l.toolCall.arguments);
    if (c.spanData.to_agent = f.name, a.length > 1) {
      const w = a.map((g) => g.handoff.agentName);
      c.setError({
        message: "Multiple handoffs requested",
        data: {
          requested_agents: w
        }
      });
    }
    r.push(new cs(rr(l.toolCall, Ha(f)), n, f)), i.emit("agent_handoff", o, n, f), n.emit("agent_handoff", o, f);
    const h = p.inputFilter ?? i.config.handoffInputFilter;
    if (h) {
      M.debug("Filtering inputs for handoff"), typeof h != "function" && c.setError({
        message: "Invalid input filter",
        data: {
          details: "not callable"
        }
      });
      const w = {
        inputHistory: Array.isArray(e) ? [...e] : e,
        preHandoffItems: [...t],
        newItems: [...r],
        runContext: o
      }, g = h(w);
      e = g.inputHistory, t = g.preHandoffItems, r = g.newItems;
    }
    return new be(e, s, t, r, { type: "next_step_handoff", newAgent: f });
  }, {
    data: {
      from_agent: n.name
    }
  });
}
const $n = {
  isFinalOutput: !1,
  isInterrupted: void 0
};
async function ui(n, e, t) {
  if (e.length === 0)
    return $n;
  const r = [];
  for (const i of e)
    if (i.runItem instanceof Se && r.push(i.runItem), i.type === "function_output") {
      if (Array.isArray(i.interruptions))
        r.push(...i.interruptions);
      else if (i.agentRunResult) {
        const o = i.agentRunResult.interruptions;
        o.length > 0 && r.push(...o);
      }
    }
  if (r.length > 0)
    return {
      isFinalOutput: !1,
      isInterrupted: !0,
      interruptions: r
    };
  if (n.toolUseBehavior === "run_llm_again")
    return $n;
  const s = e[0];
  if (n.toolUseBehavior === "stop_on_first_tool")
    return (s == null ? void 0 : s.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: et(s.output)
    } : $n;
  const a = n.toolUseBehavior;
  if (typeof a == "object") {
    const i = e.find((o) => a.stopAtToolNames.includes(o.tool.name));
    return (i == null ? void 0 : i.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: et(i.output)
    } : $n;
  }
  if (typeof a == "function")
    return a(t._context, e);
  throw new Q(`Invalid toolUseBehavior: ${a}`, t);
}
function td(n) {
  if (n instanceof pr)
    return "message_output_created";
  if (n instanceof us)
    return "handoff_requested";
  if (n instanceof cs)
    return "handoff_occurred";
  if (n instanceof _t)
    return "tool_called";
  if (n instanceof Kt)
    return "tool_output";
  if (n instanceof os)
    return "reasoning_item_created";
  if (n instanceof Se)
    return "tool_approval_requested";
}
function ci(n, e) {
  const t = td(e);
  if (!t) {
    M.warn("Unknown item type: ", e);
    return;
  }
  n._addItem(new Bc(t, e));
}
function nd(n, e) {
  for (const t of e)
    ci(n, t);
}
function ra(n, e, t) {
  const r = t == null ? void 0 : t.skipItems;
  for (const s of e.newStepItems)
    r != null && r.has(s) || ci(n, s);
}
var Mt;
class sa {
  constructor() {
    O(this, Mt, /* @__PURE__ */ new Map());
  }
  addToolUse(e, t) {
    u(this, Mt).set(e, t);
  }
  hasUsedTools(e) {
    return u(this, Mt).has(e);
  }
  toJSON() {
    return Object.fromEntries(Array.from(u(this, Mt).entries()).map(([e, t]) => [e.name, t]));
  }
}
Mt = new WeakMap();
const Ln = "1.0", rd = _(Ln), Oe = y({
  name: d()
}), sd = y({
  object: _("trace.span"),
  id: d(),
  trace_id: d(),
  parent_id: d().nullable(),
  started_at: d().nullable(),
  ended_at: d().nullable(),
  error: y({
    message: d(),
    data: te(d(), B()).optional()
  }).nullable(),
  span_data: te(d(), B())
}), di = sd.extend({
  previous_span: vo(() => di).optional()
}), li = y({
  requests: R(),
  inputTokens: R(),
  outputTokens: R(),
  totalTokens: R()
}), aa = y({
  usage: li,
  output: G(is),
  responseId: d().optional(),
  providerData: te(d(), B()).optional()
}), pi = he("type", [
  y({
    type: _("message_output_item"),
    rawItem: dr,
    agent: Oe
  }),
  y({
    type: _("tool_call_item"),
    rawItem: Rc.or(an),
    agent: Oe
  }),
  y({
    type: _("tool_call_output_item"),
    rawItem: Lr,
    agent: Oe,
    output: d()
  }),
  y({
    type: _("reasoning_item"),
    rawItem: as,
    agent: Oe
  }),
  y({
    type: _("handoff_call_item"),
    rawItem: on,
    agent: Oe
  }),
  y({
    type: _("handoff_output_item"),
    rawItem: Lr,
    sourceAgent: Oe,
    targetAgent: Oe
  }),
  y({
    type: _("tool_approval_item"),
    rawItem: on.or(an),
    agent: Oe
  })
]), ad = y({
  object: _("trace"),
  id: d(),
  workflow_name: d(),
  group_id: d().nullable(),
  metadata: te(d(), B())
}), id = y({
  newItems: G(pi),
  toolsUsed: G(d()),
  handoffs: G(y({
    toolCall: B(),
    handoff: B()
  })),
  functions: G(y({
    toolCall: B(),
    tool: B()
  })),
  computerActions: G(y({
    toolCall: B(),
    computer: B()
  })),
  mcpApprovalRequests: G(y({
    requestItem: y({
      // protocol.HostedToolCallItem
      rawItem: y({
        type: _("hosted_tool_call"),
        name: d(),
        arguments: d().optional(),
        status: d().optional(),
        output: d().optional(),
        // this always exists but marked as optional for early version compatibility; when releasing 1.0, we can remove the nullable and optional
        providerData: te(d(), B()).nullable().optional()
      })
    }),
    // HostedMCPTool
    mcpTool: y({
      type: _("hosted_tool"),
      name: _("hosted_mcp"),
      providerData: te(d(), B())
    })
  })).optional()
}), fi = y({
  tripwireTriggered: yt(),
  outputInfo: B()
}), od = y({
  guardrail: y({
    type: _("input"),
    name: d()
  }),
  output: fi
}), ud = y({
  guardrail: y({
    type: _("output"),
    name: d()
  }),
  agentOutput: B(),
  agent: Oe,
  output: fi
}), ia = y({
  $schemaVersion: rd,
  currentTurn: R(),
  currentAgent: Oe,
  originalInput: d().or(G(Dc)),
  modelResponses: G(aa),
  context: y({
    usage: li,
    approvals: te(d(), y({
      approved: G(d()).or(yt()),
      rejected: G(d()).or(yt())
    })),
    context: te(d(), B())
  }),
  toolUseTracker: te(d(), G(d())),
  maxTurns: R(),
  currentAgentSpan: di.nullable().optional(),
  noActiveAgentRun: yt(),
  inputGuardrailResults: G(od),
  outputGuardrailResults: G(ud),
  currentStep: Gc.optional(),
  lastModelResponse: aa.optional(),
  generatedItems: G(pi),
  lastProcessedResponse: id.optional(),
  trace: ad.nullable()
});
class it {
  constructor(e, t, r, s) {
    /**
     * Current turn number in the conversation.
     */
    v(this, "_currentTurn", 0);
    /**
     * The agent currently handling the conversation.
     */
    v(this, "_currentAgent");
    /**
     * Original user input prior to any processing.
     */
    v(this, "_originalInput");
    /**
     * Responses from the model so far.
     */
    v(this, "_modelResponses");
    /**
     * Active tracing span for the current agent if tracing is enabled.
     */
    v(this, "_currentAgentSpan");
    /**
     * Run context tracking approvals, usage, and other metadata.
     */
    v(this, "_context");
    /**
     * Tracks what tools each agent has used.
     */
    v(this, "_toolUseTracker");
    /**
     * Items generated by the agent during the run.
     */
    v(this, "_generatedItems");
    /**
     * Maximum allowed turns before forcing termination.
     */
    v(this, "_maxTurns");
    /**
     * Whether the run has an active agent step in progress.
     */
    v(this, "_noActiveAgentRun", !0);
    /**
     * Last model response for the previous turn.
     */
    v(this, "_lastTurnResponse");
    /**
     * Results from input guardrails applied to the run.
     */
    v(this, "_inputGuardrailResults");
    /**
     * Results from output guardrails applied to the run.
     */
    v(this, "_outputGuardrailResults");
    /**
     * Next step computed for the agent to take.
     */
    v(this, "_currentStep");
    /**
     * Parsed model response after applying guardrails and tools.
     */
    v(this, "_lastProcessedResponse");
    /**
     * Trace associated with this run if tracing is enabled.
     */
    v(this, "_trace", null);
    this._context = e, this._originalInput = structuredClone(t), this._modelResponses = [], this._currentAgentSpan = void 0, this._currentAgent = r, this._toolUseTracker = new sa(), this._generatedItems = [], this._maxTurns = s, this._inputGuardrailResults = [], this._outputGuardrailResults = [], this._trace = cn();
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during the run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return un(this._originalInput, this._generatedItems);
  }
  /**
   * Returns all interruptions if the current step is an interruption otherwise returns an empty array.
   */
  getInterruptions() {
    var e;
    return ((e = this._currentStep) == null ? void 0 : e.type) !== "next_step_interruption" ? [] : this._currentStep.data.interruptions;
  }
  /**
   * Approves a tool call requested by the agent through an interruption and approval item request.
   *
   * To approve the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only approve the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysApprove` option to `true`.
   *
   * @param approvalItem - The tool call approval item to approve.
   * @param options - Options for the approval.
   */
  approve(e, t = { alwaysApprove: !1 }) {
    this._context.approveTool(e, t);
  }
  /**
   * Rejects a tool call requested by the agent through an interruption and approval item request.
   *
   * To reject the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only reject the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysReject` option to `true`.
   *
   * @param approvalItem - The tool call approval item to reject.
   * @param options - Options for the rejection.
   */
  reject(e, t = { alwaysReject: !1 }) {
    this._context.rejectTool(e, t);
  }
  /**
   * Serializes the run state to a JSON object.
   *
   * This method is used to serialize the run state to a JSON object that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toJSON() {
    var r;
    const e = {
      $schemaVersion: Ln,
      currentTurn: this._currentTurn,
      currentAgent: {
        name: this._currentAgent.name
      },
      originalInput: this._originalInput,
      modelResponses: this._modelResponses.map((s) => ({
        usage: {
          requests: s.usage.requests,
          inputTokens: s.usage.inputTokens,
          outputTokens: s.usage.outputTokens,
          totalTokens: s.usage.totalTokens
        },
        output: s.output,
        responseId: s.responseId,
        providerData: s.providerData
      })),
      context: this._context.toJSON(),
      toolUseTracker: this._toolUseTracker.toJSON(),
      maxTurns: this._maxTurns,
      currentAgentSpan: (r = this._currentAgentSpan) == null ? void 0 : r.toJSON(),
      noActiveAgentRun: this._noActiveAgentRun,
      inputGuardrailResults: this._inputGuardrailResults,
      outputGuardrailResults: this._outputGuardrailResults.map((s) => ({
        ...s,
        agent: s.agent.toJSON()
      })),
      currentStep: this._currentStep,
      lastModelResponse: this._lastTurnResponse,
      generatedItems: this._generatedItems.map((s) => s.toJSON()),
      lastProcessedResponse: this._lastProcessedResponse,
      trace: this._trace ? this._trace.toJSON() : null
    }, t = ia.safeParse(e);
    if (!t.success)
      throw new uu(`Failed to serialize run state. ${t.error.message}`);
    return t.data;
  }
  /**
   * Serializes the run state to a string.
   *
   * This method is used to serialize the run state to a string that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
  /**
   * Deserializes a run state from a string.
   *
   * This method is used to deserialize a run state from a string that was serialized using the
   * `toString` method.
   */
  static async fromString(e, t) {
    var f, h, w, g, x;
    const [r, s] = await Yr(() => JSON.parse(t));
    if (r)
      throw new Q(`Failed to parse run state. ${r instanceof Error ? r.message : String(r)}`);
    const a = s.$schemaVersion;
    if (!a)
      throw new Q("Run state is missing schema version");
    if (a !== Ln)
      throw new Q(`Run state schema version ${a} is not supported. Please use version ${Ln}`);
    const i = ia.parse(JSON.parse(t)), o = cd(e), l = new Et(i.context.context);
    l._rebuildApprovals(i.context.approvals);
    const c = o.get(i.currentAgent.name);
    if (!c)
      throw new Q(`Agent ${i.currentAgent.name} not found`);
    const p = new it(l, "", c, i.maxTurns);
    p._currentTurn = i.currentTurn, p._toolUseTracker = new sa();
    for (const [b, m] of Object.entries(i.toolUseTracker))
      p._toolUseTracker.addToolUse(o.get(b), m);
    if (i.currentAgentSpan) {
      i.trace || M.warn("Trace is not set, skipping tracing setup");
      const b = Pe().createTrace({
        traceId: (f = i.trace) == null ? void 0 : f.id,
        name: (h = i.trace) == null ? void 0 : h.workflow_name,
        groupId: ((w = i.trace) == null ? void 0 : w.group_id) ?? void 0,
        metadata: (g = i.trace) == null ? void 0 : g.metadata
      });
      p._currentAgentSpan = hi(b, i.currentAgentSpan), p._trace = b;
    }
    return p._noActiveAgentRun = i.noActiveAgentRun, p._inputGuardrailResults = i.inputGuardrailResults, p._outputGuardrailResults = i.outputGuardrailResults.map((b) => ({
      ...b,
      agent: o.get(b.agent.name)
    })), p._currentStep = i.currentStep, p._originalInput = i.originalInput, p._modelResponses = i.modelResponses.map(oa), p._lastTurnResponse = i.lastModelResponse ? oa(i.lastModelResponse) : void 0, p._generatedItems = i.generatedItems.map((b) => mi(b, o)), p._lastProcessedResponse = i.lastProcessedResponse ? await dd(o, p._currentAgent, p._context, i.lastProcessedResponse) : void 0, ((x = i.currentStep) == null ? void 0 : x.type) === "next_step_handoff" && (p._currentStep = {
      type: "next_step_handoff",
      newAgent: o.get(i.currentStep.newAgent.name)
    }), p;
  }
}
function cd(n) {
  const e = /* @__PURE__ */ new Map(), t = [n];
  for (; t.length > 0; ) {
    const r = t.shift();
    if (!e.has(r.name)) {
      e.set(r.name, r);
      for (const s of r.handoffs)
        s instanceof It ? e.has(s.name) || t.push(s) : s.agent && (e.has(s.agent.name) || t.push(s.agent));
    }
  }
  return e;
}
function hi(n, e) {
  const t = e.span_data, r = e.previous_span ? hi(n, e.previous_span) : void 0, s = Pe().createSpan({
    spanId: e.id,
    traceId: e.trace_id,
    parentId: e.parent_id ?? void 0,
    startedAt: e.started_at ?? void 0,
    endedAt: e.ended_at ?? void 0,
    data: t
  }, n);
  return s.previousSpan = r, s;
}
function oa(n) {
  const e = new lr();
  return e.requests = n.usage.requests, e.inputTokens = n.usage.inputTokens, e.outputTokens = n.usage.outputTokens, e.totalTokens = n.usage.totalTokens, {
    usage: e,
    output: n.output.map((t) => is.parse(t)),
    responseId: n.responseId,
    providerData: n.providerData
  };
}
function mi(n, e) {
  switch (n.type) {
    case "message_output_item":
      return new pr(n.rawItem, e.get(n.agent.name));
    case "tool_call_item":
      return new _t(n.rawItem, e.get(n.agent.name));
    case "tool_call_output_item":
      return new Kt(n.rawItem, e.get(n.agent.name), n.output);
    case "reasoning_item":
      return new os(n.rawItem, e.get(n.agent.name));
    case "handoff_call_item":
      return new us(n.rawItem, e.get(n.agent.name));
    case "handoff_output_item":
      return new cs(n.rawItem, e.get(n.sourceAgent.name), e.get(n.targetAgent.name));
    case "tool_approval_item":
      return new Se(n.rawItem, e.get(n.agent.name));
  }
}
async function dd(n, e, t, r) {
  const s = await e.getAllTools(t), a = new Map(s.filter((c) => c.type === "function").map((c) => [c.name, c])), i = new Map(s.filter((c) => c.type === "computer").map((c) => [c.name, c])), o = new Map(e.handoffs.map((c) => c instanceof It ? [c.name, Ya(c)] : [c.toolName, c])), l = {
    newItems: r.newItems.map((c) => mi(c, n)),
    toolsUsed: r.toolsUsed,
    handoffs: r.handoffs.map((c) => {
      if (!o.has(c.handoff.toolName))
        throw new Q(`Handoff ${c.handoff.toolName} not found`);
      return {
        toolCall: c.toolCall,
        handoff: o.get(c.handoff.toolName)
      };
    }),
    functions: await Promise.all(r.functions.map(async (c) => {
      if (!a.has(c.tool.name))
        throw new Q(`Tool ${c.tool.name} not found`);
      return {
        toolCall: c.toolCall,
        tool: a.get(c.tool.name)
      };
    })),
    computerActions: r.computerActions.map((c) => {
      const p = c.computer.name;
      if (!i.has(p))
        throw new Q(`Computer tool ${p} not found`);
      return {
        toolCall: c.toolCall,
        computer: i.get(p)
      };
    }),
    mcpApprovalRequests: (r.mcpApprovalRequests ?? []).map((c) => ({
      requestItem: new Se(c.requestItem.rawItem, e),
      mcpTool: c.mcpTool
    }))
  };
  return {
    ...l,
    hasToolsOrApprovalsToRun() {
      return l.handoffs.length > 0 || l.functions.length > 0 || l.mcpApprovalRequests.length > 0 || l.computerActions.length > 0;
    }
  };
}
const ua = 10;
function ca(n, e) {
  return n ? !1 : e ? !0 : "enabled_without_data";
}
function Ur(n) {
  return typeof n == "string" ? [{ type: "message", role: "user", content: n }] : [...n];
}
class da {
  constructor({ conversationId: e, previousResponseId: t }) {
    // Conversation ID:
    // - https://platform.openai.com/docs/guides/conversation-state?api-mode=responses#using-the-conversations-api
    // - https://platform.openai.com/docs/api-reference/conversations/create
    v(this, "conversationId");
    // Previous Response ID:
    // https://platform.openai.com/docs/guides/conversation-state?api-mode=responses#passing-context-from-the-previous-response
    v(this, "previousResponseId");
    // Using this flag because WeakSet does not provide a way to check its size
    v(this, "sentInitialInput", !1);
    // The items already sent to the model; using WeakSet for memory efficiency
    v(this, "sentItems", /* @__PURE__ */ new WeakSet());
    // The items received from the server; using WeakSet for memory efficiency
    v(this, "serverItems", /* @__PURE__ */ new WeakSet());
    this.conversationId = e ?? void 0, this.previousResponseId = t ?? void 0;
  }
  /**
   * Pre-populates tracker caches from an existing RunState when resuming server-managed runs.
   */
  primeFromState({ originalInput: e, generatedItems: t, modelResponses: r }) {
    if (this.sentInitialInput)
      return;
    for (const a of Ur(e))
      a && typeof a == "object" && this.sentItems.add(a);
    this.sentInitialInput = !0;
    const s = r[r.length - 1];
    for (const a of r)
      for (const i of a.output)
        i && typeof i == "object" && this.serverItems.add(i);
    !this.conversationId && (s != null && s.responseId) && (this.previousResponseId = s.responseId);
    for (const a of t) {
      const i = a.rawItem;
      !i || typeof i != "object" || this.serverItems.has(i) && this.sentItems.add(i);
    }
  }
  trackServerItems(e) {
    if (e) {
      for (const t of e.output)
        t && typeof t == "object" && this.serverItems.add(t);
      !this.conversationId && this.previousResponseId !== void 0 && e.responseId && (this.previousResponseId = e.responseId);
    }
  }
  prepareInput(e, t) {
    const r = [];
    if (!this.sentInitialInput) {
      const s = Ur(e);
      for (const a of s)
        r.push(a), a && typeof a == "object" && this.sentItems.add(a);
      this.sentInitialInput = !0;
    }
    for (const s of t) {
      if (s.type === "tool_approval_item")
        continue;
      const a = s.rawItem;
      !a || typeof a != "object" || this.sentItems.has(a) || this.serverItems.has(a) || (r.push(a), this.sentItems.add(a));
    }
    return r;
  }
}
function un(n, e) {
  const t = e.filter((r) => r.type !== "tool_approval_item").map((r) => r.rawItem);
  return [...Ur(n), ...t];
}
var de, Jr, qr, Br, gi, zr;
class ld extends Xu {
  constructor(t = {}) {
    super();
    O(this, de);
    v(this, "config");
    v(this, "inputGuardrailDefs");
    v(this, "outputGuardrailDefs");
    this.config = {
      modelProvider: t.modelProvider ?? uc(),
      model: t.model,
      modelSettings: t.modelSettings,
      handoffInputFilter: t.handoffInputFilter,
      inputGuardrails: t.inputGuardrails,
      outputGuardrails: t.outputGuardrails,
      tracingDisabled: t.tracingDisabled ?? !1,
      traceIncludeSensitiveData: t.traceIncludeSensitiveData ?? !0,
      workflowName: t.workflowName ?? "Agent workflow",
      traceId: t.traceId,
      groupId: t.groupId,
      traceMetadata: t.traceMetadata
    }, this.inputGuardrailDefs = (t.inputGuardrails ?? []).map(Gs), this.outputGuardrailDefs = (t.outputGuardrails ?? []).map(Fr);
  }
  run(t, r, s = {
    stream: !1,
    context: void 0
  }) {
    return r instanceof it && r._trace ? pd(r._trace, async () => (r._currentAgentSpan && Zn(r._currentAgentSpan), s != null && s.stream ? q(this, de, zr).call(this, t, r, s) : q(this, de, Jr).call(this, t, r, s))) : fd(async () => s != null && s.stream ? q(this, de, zr).call(this, t, r, s) : q(this, de, Jr).call(this, t, r, s), {
      traceId: this.config.traceId,
      name: this.config.workflowName,
      groupId: this.config.groupId,
      metadata: this.config.traceMetadata
    });
  }
}
de = new WeakSet(), Jr = async function(t, r, s) {
  return Gr(async () => {
    var l, c;
    const a = r instanceof it, i = a ? r : new it(s.context instanceof Et ? s.context : new Et(s.context), r, t, s.maxTurns ?? ua), o = s.conversationId || s.previousResponseId ? new da({
      conversationId: s.conversationId,
      previousResponseId: s.previousResponseId
    }) : void 0;
    o && a && o.primeFromState({
      originalInput: i._originalInput,
      generatedItems: i._generatedItems,
      modelResponses: i._modelResponses
    });
    try {
      for (; ; ) {
        const p = i._currentAgent.model !== void 0 && i._currentAgent.model !== "" || this.config.model !== void 0 && this.config.model !== "";
        let f = la(i._currentAgent.model, this.config.model);
        if (typeof f == "string" && (f = await this.config.modelProvider.getModel(f)), i._currentStep = i._currentStep ?? {
          type: "next_step_run_again"
        }, i._currentStep.type === "next_step_interruption") {
          if (M.debug("Continuing from interruption"), !i._lastTurnResponse || !i._lastProcessedResponse)
            throw new Q("No model response found in previous state", i);
          const h = await ea(i._currentAgent, i._originalInput, i._generatedItems, i._lastTurnResponse, i._lastProcessedResponse, this, i);
          if (i._toolUseTracker.addToolUse(i._currentAgent, i._lastProcessedResponse.toolsUsed), i._originalInput = h.originalInput, i._generatedItems = h.generatedItems, i._currentStep = h.nextStep, h.nextStep.type === "next_step_interruption")
            return new br(i);
          continue;
        }
        if (i._currentStep.type === "next_step_run_again") {
          const h = await i._currentAgent.getEnabledHandoffs(i._context);
          if (!i._currentAgentSpan) {
            const J = h.map((ne) => ne.agentName);
            i._currentAgentSpan = Hs({
              data: {
                name: i._currentAgent.name,
                handoffs: J,
                output_type: i._currentAgent.outputSchemaName
              }
            }), i._currentAgentSpan.start(), Zn(i._currentAgentSpan);
          }
          const w = await i._currentAgent.getAllTools(i._context), g = w.map((J) => Vs(J)), x = h.map((J) => Ws(J));
          if (i._currentAgentSpan && (i._currentAgentSpan.spanData.tools = w.map((J) => J.name)), i._currentTurn++, i._currentTurn > i._maxTurns)
            throw (l = i._currentAgentSpan) == null || l.setError({
              message: "Max turns exceeded",
              data: { max_turns: i._maxTurns }
            }), new Ms(`Max turns (${i._maxTurns}) exceeded`, i);
          M.debug(`Running agent ${i._currentAgent.name} (turn ${i._currentTurn})`), i._currentTurn === 1 && await q(this, de, qr).call(this, i);
          const b = o ? o.prepareInput(i._originalInput, i._generatedItems) : un(i._originalInput, i._generatedItems);
          i._noActiveAgentRun && (i._currentAgent.emit("agent_start", i._context, i._currentAgent), this.emit("agent_start", i._context, i._currentAgent));
          let m = {
            ...this.config.modelSettings,
            ...i._currentAgent.modelSettings
          };
          const I = i._currentAgent.modelSettings;
          m = pa(p, I, f, m), m = Qs(i._currentAgent, i._toolUseTracker, m);
          const A = (o == null ? void 0 : o.previousResponseId) ?? s.previousResponseId, D = (o == null ? void 0 : o.conversationId) ?? s.conversationId;
          i._lastTurnResponse = await f.getResponse({
            systemInstructions: await i._currentAgent.getSystemPrompt(i._context),
            prompt: await i._currentAgent.getPrompt(i._context),
            // Explicit agent/run config models should take precedence over prompt defaults.
            ...p ? { overridePromptModel: !0 } : {},
            input: b,
            previousResponseId: A,
            conversationId: D,
            modelSettings: m,
            tools: g,
            outputType: Ls(i._currentAgent.outputType),
            handoffs: x,
            tracing: ca(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
            signal: s.signal
          }), i._modelResponses.push(i._lastTurnResponse), i._context.usage.add(i._lastTurnResponse.usage), i._noActiveAgentRun = !1, o == null || o.trackServerItems(i._lastTurnResponse);
          const N = Xs(i._lastTurnResponse, i._currentAgent, w, h);
          i._lastProcessedResponse = N;
          const j = await ta(i._currentAgent, i._originalInput, i._generatedItems, i._lastTurnResponse, i._lastProcessedResponse, this, i);
          i._toolUseTracker.addToolUse(i._currentAgent, i._lastProcessedResponse.toolsUsed), i._originalInput = j.originalInput, i._generatedItems = j.generatedItems, i._currentStep = j.nextStep;
        }
        if (i._currentStep && i._currentStep.type === "next_step_final_output")
          return await q(this, de, Br).call(this, i, i._currentStep.output), this.emit("agent_end", i._context, i._currentAgent, i._currentStep.output), i._currentAgent.emit("agent_end", i._context, i._currentStep.output), new br(i);
        if (i._currentStep && i._currentStep.type === "next_step_handoff")
          i._currentAgent = i._currentStep.newAgent, i._currentAgentSpan && (i._currentAgentSpan.end(), en(), i._currentAgentSpan = void 0), i._noActiveAgentRun = !0, i._currentStep = { type: "next_step_run_again" };
        else {
          if (i._currentStep && i._currentStep.type === "next_step_interruption")
            return new br(i);
          M.debug("Running next loop");
        }
      }
    } catch (p) {
      throw i._currentAgentSpan && i._currentAgentSpan.setError({
        message: "Error in agent run",
        data: { error: String(p) }
      }), p;
    } finally {
      i._currentAgentSpan && (((c = i._currentStep) == null ? void 0 : c.type) !== "next_step_interruption" && i._currentAgentSpan.end(), en());
    }
  });
}, qr = async function(t) {
  const r = this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(Gs));
  if (r.length > 0) {
    const s = {
      agent: t._currentAgent,
      input: t._originalInput,
      context: t._context
    };
    try {
      const a = await Promise.all(r.map(async (i) => Ys(async (o) => {
        const l = await i.run(s);
        return o.spanData.triggered = l.output.tripwireTriggered, l;
      }, { data: { name: i.name } }, t._currentAgentSpan)));
      for (const i of a)
        if (i.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: i.guardrail.name }
          }), new $s(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`, i, t);
    } catch (a) {
      throw a instanceof $s ? a : (t._currentTurn--, new js(`Input guardrail failed to complete: ${a}`, a, t));
    }
  }
}, Br = async function(t, r) {
  const s = this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(Fr));
  if (s.length > 0) {
    const a = t._currentAgent.processFinalOutput(r), i = {
      agent: t._currentAgent,
      agentOutput: a,
      context: t._context,
      details: { modelResponse: t._lastTurnResponse }
    };
    try {
      const o = await Promise.all(s.map(async (l) => Ys(async (c) => {
        const p = await l.run(i);
        return c.spanData.triggered = p.output.tripwireTriggered, p;
      }, { data: { name: l.name } }, t._currentAgentSpan)));
      for (const l of o)
        if (l.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: l.guardrail.name }
          }), new Pr(`Output guardrail triggered: ${JSON.stringify(l.output.outputInfo)}`, l, t);
    } catch (o) {
      throw o instanceof Pr ? o : new js(`Output guardrail failed to complete: ${o}`, o, t);
    }
  }
}, gi = async function(t, r, s) {
  var i, o, l;
  const a = r.conversationId || r.previousResponseId ? new da({
    conversationId: r.conversationId,
    previousResponseId: r.previousResponseId
  }) : void 0;
  a && s && a.primeFromState({
    originalInput: t.state._originalInput,
    generatedItems: t.state._generatedItems,
    modelResponses: t.state._modelResponses
  });
  try {
    for (; ; ) {
      const c = t.state._currentAgent, p = await c.getEnabledHandoffs(t.state._context), f = await c.getAllTools(t.state._context), h = f.map((g) => Vs(g)), w = p.map((g) => Ws(g));
      if (t.state._currentStep = t.state._currentStep ?? {
        type: "next_step_run_again"
      }, t.state._currentStep.type === "next_step_interruption") {
        if (M.debug("Continuing from interruption"), !t.state._lastTurnResponse || !t.state._lastProcessedResponse)
          throw new Q("No model response found in previous state", t.state);
        const g = await ea(t.state._currentAgent, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        if (ra(t, g), t.state._toolUseTracker.addToolUse(t.state._currentAgent, t.state._lastProcessedResponse.toolsUsed), t.state._originalInput = g.originalInput, t.state._generatedItems = g.generatedItems, t.state._currentStep = g.nextStep, g.nextStep.type === "next_step_interruption")
          return;
        continue;
      }
      if (t.state._currentStep.type === "next_step_run_again") {
        if (!t.state._currentAgentSpan) {
          const me = p.map((ve) => ve.agentName);
          t.state._currentAgentSpan = Hs({
            data: {
              name: c.name,
              handoffs: me,
              tools: f.map((ve) => ve.name),
              output_type: c.outputSchemaName
            }
          }), t.state._currentAgentSpan.start(), Zn(t.state._currentAgentSpan);
        }
        if (t.state._currentTurn++, t.state._currentTurn > t.state._maxTurns)
          throw (i = t.state._currentAgentSpan) == null || i.setError({
            message: "Max turns exceeded",
            data: { max_turns: t.state._maxTurns }
          }), new Ms(`Max turns (${t.state._maxTurns}) exceeded`, t.state);
        M.debug(`Running agent ${c.name} (turn ${t.state._currentTurn})`);
        const g = c.model !== void 0 && c.model !== "" || this.config.model !== void 0 && this.config.model !== "";
        let x = la(c.model, this.config.model);
        typeof x == "string" && (x = await this.config.modelProvider.getModel(x)), t.state._currentTurn === 1 && await q(this, de, qr).call(this, t.state);
        let b = {
          ...this.config.modelSettings,
          ...c.modelSettings
        };
        const m = c.modelSettings;
        b = pa(g, m, x, b), b = Qs(c, t.state._toolUseTracker, b);
        const I = a ? a.prepareInput(t.input, t.newItems) : un(t.input, t.newItems);
        t.state._noActiveAgentRun && (c.emit("agent_start", t.state._context, c), this.emit("agent_start", t.state._context, c));
        let A;
        const D = (a == null ? void 0 : a.previousResponseId) ?? r.previousResponseId, N = (a == null ? void 0 : a.conversationId) ?? r.conversationId;
        for await (const me of x.getStreamedResponse({
          systemInstructions: await c.getSystemPrompt(t.state._context),
          prompt: await c.getPrompt(t.state._context),
          // Streaming requests should also honor explicitly chosen models.
          ...g ? { overridePromptModel: !0 } : {},
          input: I,
          previousResponseId: D,
          conversationId: N,
          modelSettings: b,
          tools: h,
          handoffs: w,
          outputType: Ls(c.outputType),
          tracing: ca(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
          signal: r.signal
        })) {
          if (me.type === "response_done") {
            const ve = ii.parse(me);
            A = {
              usage: new lr(ve.response.usage),
              output: ve.response.output,
              responseId: ve.response.id
            };
          }
          if (t.cancelled)
            return;
          t._addItem(new qc(me));
        }
        if (t.state._noActiveAgentRun = !1, !A)
          throw new xe("Model did not produce a final response!", t.state);
        t.state._lastTurnResponse = A, a == null || a.trackServerItems(A), t.state._modelResponses.push(t.state._lastTurnResponse);
        const j = Xs(t.state._lastTurnResponse, c, f, p);
        t.state._lastProcessedResponse = j;
        const J = new Set(j.newItems);
        J.size > 0 && nd(t, j.newItems);
        const ne = await ta(c, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        ra(t, ne, {
          skipItems: J
        }), t.state._toolUseTracker.addToolUse(c, j.toolsUsed), t.state._originalInput = ne.originalInput, t.state._generatedItems = ne.generatedItems, t.state._currentStep = ne.nextStep;
      }
      if (t.state._currentStep.type === "next_step_final_output") {
        await q(this, de, Br).call(this, t.state, t.state._currentStep.output), this.emit("agent_end", t.state._context, c, t.state._currentStep.output), c.emit("agent_end", t.state._context, t.state._currentStep.output);
        return;
      } else {
        if (t.state._currentStep.type === "next_step_interruption")
          return;
        t.state._currentStep.type === "next_step_handoff" ? (t.state._currentAgent = (o = t.state._currentStep) == null ? void 0 : o.newAgent, t.state._currentAgentSpan && (t.state._currentAgentSpan.end(), en()), t.state._currentAgentSpan = void 0, t._addItem(new zc(t.state._currentAgent)), t.state._noActiveAgentRun = !0, t.state._currentStep = {
          type: "next_step_run_again"
        }) : M.debug("Running next loop");
      }
    }
  } catch (c) {
    throw t.state._currentAgentSpan && t.state._currentAgentSpan.setError({
      message: "Error in agent run",
      data: { error: String(c) }
    }), c;
  } finally {
    t.state._currentAgentSpan && (((l = t.state._currentStep) == null ? void 0 : l.type) !== "next_step_interruption" && t.state._currentAgentSpan.end(), en());
  }
}, zr = async function(t, r, s) {
  return s = s ?? {}, Gr(async () => {
    const a = r instanceof it, i = a ? r : new it(s.context instanceof Et ? s.context : new Et(s.context), r, t, s.maxTurns ?? ua), o = new _i({
      signal: s.signal,
      state: i
    });
    o.maxTurns = s.maxTurns ?? i._maxTurns;
    const l = q(this, de, gi).call(this, o, s, a).then(() => {
      o._done();
    }, (c) => {
      o._raiseError(c);
    });
    return o._setStreamLoopPromise(l), o;
  });
};
function la(n, e) {
  return typeof n == "string" && n !== It.DEFAULT_MODEL_PLACEHOLDER || n ? n : e ?? n ?? It.DEFAULT_MODEL_PLACEHOLDER;
}
function pa(n, e, t, r) {
  var s, a, i, o, l, c, p, f;
  if (
    // gpt-5 is enabled for the default model for agents
    Va() && // explicitly set model for the agent
    n && // this runner uses a non-gpt-5 model
    (typeof t != "string" || !cr(t)) && ((s = e.providerData) != null && s.reasoning || (i = (a = e.providerData) == null ? void 0 : a.text) != null && i.verbosity || (o = e.providerData) != null && o.reasoning_effort)
  ) {
    const h = { ...r };
    return (l = h.providerData) == null || delete l.reasoning, (p = (c = h.providerData) == null ? void 0 : c.text) == null || delete p.verbosity, (f = h.providerData) == null || delete f.reasoning_effort, h.reasoning && (delete h.reasoning.effort, delete h.reasoning.summary), h.text && delete h.text.verbosity, h;
  }
  return r;
}
class yi {
  constructor(e) {
    v(this, "state");
    this.state = e;
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during
   * the agent run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return un(this.input, this.newItems);
  }
  /**
   * The new items generated during the agent run. These include things like new messages, tool
   * calls and their outputs, etc.
   *
   * It does not include information about the agents and instead represents the model data.
   *
   * For the output including the agents, use the `newItems` property.
   */
  get output() {
    return un([], this.newItems);
  }
  /**
   * A copy of the original input items.
   */
  get input() {
    return this.state._originalInput;
  }
  /**
   * The run items generated during the agent run. This associates the model data with the agents.
   *
   * For the model data that can be used as inputs for the next agent run, use the `output` property.
   */
  get newItems() {
    return this.state._generatedItems;
  }
  /**
   * The raw LLM responses generated by the model during the agent run.
   */
  get rawResponses() {
    return this.state._modelResponses;
  }
  /**
   * The last response ID generated by the model during the agent run.
   */
  get lastResponseId() {
    const e = this.rawResponses;
    return e && e.length > 0 ? e[e.length - 1].responseId : void 0;
  }
  /**
   * The last agent that was run
   */
  get lastAgent() {
    return this.state._currentAgent;
  }
  /**
   * Guardrail results for the input messages.
   */
  get inputGuardrailResults() {
    return this.state._inputGuardrailResults;
  }
  /**
   * Guardrail results for the final output of the agent.
   */
  get outputGuardrailResults() {
    return this.state._outputGuardrailResults;
  }
  /**
   * Any interruptions that occurred during the agent run for example for tool approvals.
   */
  get interruptions() {
    var e;
    return ((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_interruption" ? this.state._currentStep.data.interruptions : [];
  }
  /**
   * The final output of the agent. If the output type was set to anything other than `text`,
   * this will be parsed either as JSON or using the Zod schema you provided.
   */
  get finalOutput() {
    var e;
    if (((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_final_output")
      return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);
    M.warn("Accessed finalOutput before agent run is completed.");
  }
}
class br extends yi {
  constructor(e) {
    super(e);
  }
}
var fn, Ge, ye, $e, jt, $t, hn, ut, mn;
class _i extends yi {
  constructor(t = {}) {
    super(t.state);
    /**
     * The current turn number
     */
    v(this, "currentTurn", 0);
    /**
     * The maximum number of turns that can be run
     */
    v(this, "maxTurns");
    O(this, fn, null);
    O(this, Ge);
    O(this, ye);
    O(this, $e);
    O(this, jt);
    O(this, $t);
    O(this, hn);
    O(this, ut, !1);
    O(this, mn);
    if (S(this, Ge, t.signal), S(this, $e, new Gu({
      start: (r) => {
        S(this, ye, r);
      },
      cancel: () => {
        S(this, ut, !0);
      }
    })), S(this, jt, new Promise((r, s) => {
      S(this, $t, r), S(this, hn, s);
    })), u(this, Ge)) {
      const r = () => {
        var a, i;
        if (u(this, ut))
          return;
        S(this, ut, !0);
        const s = u(this, ye);
        if (S(this, ye, void 0), u(this, $e).locked) {
          if (s)
            try {
              s.close();
            } catch (o) {
              M.debug(`Failed to close readable stream on abort: ${o}`);
            }
        } else
          u(this, $e).cancel((a = u(this, Ge)) == null ? void 0 : a.reason).catch((o) => {
            M.debug(`Failed to cancel readable stream on abort: ${o}`);
          });
        (i = u(this, $t)) == null || i.call(this);
      };
      u(this, Ge).aborted ? r() : u(this, Ge).addEventListener("abort", r, { once: !0 });
    }
  }
  /**
   * The current agent that is running
   */
  get currentAgent() {
    return this.lastAgent;
  }
  /**
   * @internal
   * Adds an item to the stream of output items
   */
  _addItem(t) {
    var r;
    this.cancelled || (r = u(this, ye)) == null || r.enqueue(t);
  }
  /**
   * @internal
   * Indicates that the stream has been completed
   */
  _done() {
    var t;
    !this.cancelled && u(this, ye) && (u(this, ye).close(), S(this, ye, void 0), (t = u(this, $t)) == null || t.call(this));
  }
  /**
   * @internal
   * Handles an error in the stream loop.
   */
  _raiseError(t) {
    var r;
    !this.cancelled && u(this, ye) && (u(this, ye).error(t), S(this, ye, void 0)), S(this, fn, t), (r = u(this, hn)) == null || r.call(this, t), u(this, jt).catch((s) => {
      M.debug(`Resulted in an error: ${s}`);
    });
  }
  /**
   * Returns true if the stream has been cancelled.
   */
  get cancelled() {
    return u(this, ut);
  }
  /**
   * Returns the underlying readable stream.
   * @returns A readable stream of the agent run.
   */
  toStream() {
    return u(this, $e);
  }
  /**
   * Await this promise to ensure that the stream has been completed if you are not consuming the
   * stream directly.
   */
  get completed() {
    return u(this, jt);
  }
  /**
   * Error thrown during the run, if any.
   */
  get error() {
    return u(this, fn);
  }
  toTextStream(t = {}) {
    const r = u(this, $e).pipeThrough(new Vu({
      transform(s, a) {
        if (s.type === "raw_model_stream_event" && s.data.type === "output_text_delta") {
          const i = ai.parse(s.data);
          a.enqueue(i.delta);
        }
      }
    }));
    return t.compatibleWithNodeStreams ? zu.fromWeb(r) : r;
  }
  [Symbol.asyncIterator]() {
    return u(this, $e)[Symbol.asyncIterator]();
  }
  /**
   * @internal
   * Sets the stream loop promise that completes when the internal stream loop finishes.
   * This is used to defer trace end until all agent work is complete.
   */
  _setStreamLoopPromise(t) {
    S(this, mn, t);
  }
  /**
   * @internal
   * Returns a promise that resolves when the stream loop completes.
   * This is used by the tracing system to wait for all agent work before ending the trace.
   */
  _getStreamLoopPromise() {
    return u(this, mn);
  }
}
fn = new WeakMap(), Ge = new WeakMap(), ye = new WeakMap(), $e = new WeakMap(), jt = new WeakMap(), $t = new WeakMap(), hn = new WeakMap(), ut = new WeakMap(), mn = new WeakMap();
let fa;
function De() {
  return fa ?? (fa = new Wu()), fa;
}
function cn() {
  const n = De().getStore();
  return n != null && n.trace ? n.trace : null;
}
function dn() {
  const n = De().getStore();
  return n != null && n.span ? n.span : null;
}
function vi(n) {
  return async () => {
    const e = cn();
    if (!e)
      throw new Error("No trace found");
    await e.start();
    const t = await n(e);
    if (t instanceof _i) {
      const r = t._getStreamLoopPromise();
      if (r)
        return r.finally(() => e.end()), t;
    }
    return await e.end(), t;
  };
}
async function pd(n, e, t = {}) {
  const r = typeof n == "string" ? Pe().createTrace({
    ...t,
    name: n
  }) : n;
  return De().run({ trace: r }, vi(e));
}
async function fd(n, e = {}) {
  if (cn())
    return await n();
  const r = Pe().createTrace(e);
  return De().run({ trace: r }, vi(n));
}
function Zn(n) {
  const e = De().getStore();
  if (!e)
    throw new Error("No existing trace found");
  e.span && (e.span.previousSpan = e.previousSpan, e.previousSpan = e.span), e.span = n, De().enterWith(e);
}
function en() {
  var e;
  const n = De().getStore();
  n && (n.span = n.previousSpan, n.previousSpan = (e = n.previousSpan) == null ? void 0 : e.previousSpan, De().enterWith(n));
}
function Dt(n) {
  const e = dn();
  e && e.setError(n);
}
function hd(n) {
  var e, t, r;
  return {
    trace: (e = n.trace) == null ? void 0 : e.clone(),
    span: (t = n.span) == null ? void 0 : t.clone(),
    previousSpan: (r = n.previousSpan) == null ? void 0 : r.clone()
  };
}
function Gr(n) {
  const e = De().getStore();
  if (!e)
    throw new Error("No existing trace found");
  const t = hd(e);
  return De().run(t, n);
}
class md {
  async export(e) {
    if (Ua.disabled) {
      M.debug("Tracing is disabled. Skipping export");
      return;
    }
    for (const t of e)
      t.type === "trace" ? console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}${t.groupId ? ` groupId=${t.groupId}` : ""}`) : console.log(`[Exporter] Export span: ${JSON.stringify(t)}`);
  }
}
var gn, Ft, yn, _n, Lt, ce, Fe, Ve, We, Zt, fe, Vr, Wr, Ct;
class gd {
  constructor(e, {
    maxQueueSize: t = 1e3,
    maxBatchSize: r = 100,
    scheduleDelay: s = 5e3,
    // 5 seconds
    exportTriggerRatio: a = 0.8
  } = {}) {
    O(this, fe);
    O(this, gn);
    O(this, Ft);
    O(this, yn);
    O(this, _n);
    O(this, Lt);
    O(this, ce, []);
    O(this, Fe);
    O(this, Ve, null);
    O(this, We, !1);
    O(this, Zt, null);
    S(this, gn, t), S(this, Ft, r), S(this, yn, s), S(this, _n, t * a), S(this, Lt, e), S(this, Fe, Ku), M.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.");
  }
  start() {
    S(this, Zt, new AbortController()), q(this, fe, Wr).call(this);
  }
  async onTraceStart(e) {
    await q(this, fe, Vr).call(this, e);
  }
  async onTraceEnd(e) {
  }
  async onSpanStart(e) {
  }
  async onSpanEnd(e) {
    await q(this, fe, Vr).call(this, e);
  }
  async shutdown(e) {
    var t;
    for (e && u(this, Fe).setTimeout(() => {
      var r;
      (r = u(this, Zt)) == null || r.abort();
    }, e), M.debug("Shutting down gracefully"); u(this, ce).length > 0; ) {
      if (M.debug(`Waiting for buffer to empty. Items left: ${u(this, ce).length}`), u(this, We) || await q(this, fe, Ct).call(this, !0), (t = u(this, Zt)) != null && t.signal.aborted) {
        M.debug("Timeout reached, force flushing"), await q(this, fe, Ct).call(this, !0);
        break;
      }
      await new Promise((r) => u(this, Fe).setTimeout(r, 500));
    }
    M.debug("Buffer empty. Exiting"), u(this, Fe) && u(this, Ve) && u(this, Fe).clearTimeout(u(this, Ve));
  }
  async forceFlush() {
    u(this, ce).length > 0 && await q(this, fe, Ct).call(this, !0);
  }
}
gn = new WeakMap(), Ft = new WeakMap(), yn = new WeakMap(), _n = new WeakMap(), Lt = new WeakMap(), ce = new WeakMap(), Fe = new WeakMap(), Ve = new WeakMap(), We = new WeakMap(), Zt = new WeakMap(), fe = new WeakSet(), Vr = async function(e) {
  if (u(this, ce).length + 1 > u(this, gn)) {
    M.error("Dropping trace because buffer is full");
    return;
  }
  u(this, ce).push(e), u(this, ce).length > u(this, _n) && await q(this, fe, Ct).call(this);
}, Wr = function() {
  S(this, Ve, u(this, Fe).setTimeout(async () => {
    await q(this, fe, Ct).call(this), q(this, fe, Wr).call(this);
  }, u(this, yn))), typeof u(this, Ve).unref == "function" && u(this, Ve).unref();
}, Ct = async function(e = !1) {
  if (u(this, ce).length !== 0) {
    if (M.debug(`Exporting batches. Force: ${e}. Buffer size: ${u(this, ce).length}`), e || u(this, ce).length < u(this, Ft)) {
      const t = [...u(this, ce)];
      S(this, ce, []), S(this, We, !0), await u(this, Lt).export(t), S(this, We, !1);
    } else if (u(this, ce).length > 0) {
      const t = u(this, ce).splice(0, u(this, Ft));
      S(this, We, !0), await u(this, Lt).export(t), S(this, We, !1);
    }
  }
};
var _e;
class yd {
  constructor() {
    O(this, _e, []);
  }
  start() {
    for (const e of u(this, _e))
      e.start && e.start();
  }
  addTraceProcessor(e) {
    u(this, _e).push(e);
  }
  setProcessors(e) {
    M.debug("Shutting down old processors");
    for (const t of u(this, _e))
      t.shutdown();
    S(this, _e, e);
  }
  async onTraceStart(e) {
    for (const t of u(this, _e))
      await t.onTraceStart(e);
  }
  async onTraceEnd(e) {
    for (const t of u(this, _e))
      await t.onTraceEnd(e);
  }
  async onSpanStart(e) {
    for (const t of u(this, _e))
      await t.onSpanStart(e);
  }
  async onSpanEnd(e) {
    for (const t of u(this, _e))
      await t.onSpanEnd(e);
  }
  async shutdown(e) {
    for (const t of u(this, _e))
      await t.shutdown(e);
  }
  async forceFlush() {
    for (const e of u(this, _e))
      await e.forceFlush();
  }
}
_e = new WeakMap();
let wr = null, xr = null;
function _d() {
  return wr || (wr = new md()), wr;
}
function bi() {
  return xr || (xr = new gd(_d())), xr;
}
function ha() {
  return (/* @__PURE__ */ new Date()).toISOString();
}
function wi() {
  return `trace_${Ga().replace(/-/g, "")}`;
}
function vd() {
  return `span_${Ga().replace(/-/g, "").slice(0, 24)}`;
}
function bd(n) {
  return Object.fromEntries(Object.entries(n).filter(([e]) => !e.startsWith("_")));
}
var vn, bn, wn, xn, ct, He, Ke, dt, Sn;
const ls = class ls {
  constructor(e, t) {
    v(this, "type", "trace.span");
    O(this, vn);
    O(this, bn);
    O(this, wn);
    O(this, xn);
    O(this, ct);
    O(this, He);
    O(this, Ke);
    O(this, dt);
    O(this, Sn);
    S(this, bn, e.traceId), S(this, wn, e.spanId ?? vd()), S(this, vn, e.data), S(this, ct, t), S(this, xn, e.parentId ?? null), S(this, dt, e.error ?? null), S(this, He, e.startedAt ?? null), S(this, Ke, e.endedAt ?? null);
  }
  get traceId() {
    return u(this, bn);
  }
  get spanData() {
    return u(this, vn);
  }
  get spanId() {
    return u(this, wn);
  }
  get parentId() {
    return u(this, xn);
  }
  get previousSpan() {
    return u(this, Sn);
  }
  set previousSpan(e) {
    S(this, Sn, e);
  }
  start() {
    if (u(this, He)) {
      M.warn("Span already started");
      return;
    }
    S(this, He, ha()), u(this, ct).onSpanStart(this);
  }
  end() {
    if (u(this, Ke)) {
      M.debug("Span already finished", this.spanData);
      return;
    }
    S(this, Ke, ha()), u(this, ct).onSpanEnd(this);
  }
  setError(e) {
    S(this, dt, e);
  }
  get error() {
    return u(this, dt);
  }
  get startedAt() {
    return u(this, He);
  }
  get endedAt() {
    return u(this, Ke);
  }
  clone() {
    var t;
    const e = new ls({
      traceId: this.traceId,
      spanId: this.spanId,
      parentId: this.parentId ?? void 0,
      data: this.spanData,
      startedAt: u(this, He) ?? void 0,
      endedAt: u(this, Ke) ?? void 0,
      error: u(this, dt) ?? void 0
    }, u(this, ct));
    return e.previousSpan = (t = this.previousSpan) == null ? void 0 : t.clone(), e;
  }
  toJSON() {
    return {
      object: this.type,
      id: this.spanId,
      trace_id: this.traceId,
      parent_id: this.parentId,
      started_at: this.startedAt,
      ended_at: this.endedAt,
      span_data: bd(this.spanData),
      error: this.error
    };
  }
};
vn = new WeakMap(), bn = new WeakMap(), wn = new WeakMap(), xn = new WeakMap(), ct = new WeakMap(), He = new WeakMap(), Ke = new WeakMap(), dt = new WeakMap(), Sn = new WeakMap();
let ln = ls;
class Be extends ln {
  constructor(e, t) {
    super({ traceId: "no-op", spanId: "no-op", data: e }, t);
  }
  start() {
  }
  end() {
  }
  setError() {
  }
  toJSON() {
    return null;
  }
}
var Ut, Le;
const ps = class ps {
  constructor(e, t) {
    v(this, "type", "trace");
    v(this, "traceId");
    v(this, "name");
    v(this, "groupId", null);
    v(this, "metadata");
    O(this, Ut);
    O(this, Le);
    this.traceId = e.traceId ?? wi(), this.name = e.name ?? "Agent workflow", this.groupId = e.groupId ?? null, this.metadata = e.metadata ?? {}, S(this, Ut, t ?? bi()), S(this, Le, e.started ?? !1);
  }
  async start() {
    u(this, Le) || (S(this, Le, !0), await u(this, Ut).onTraceStart(this));
  }
  async end() {
    u(this, Le) && (S(this, Le, !1), await u(this, Ut).onTraceEnd(this));
  }
  clone() {
    return new ps({
      traceId: this.traceId,
      name: this.name,
      groupId: this.groupId ?? void 0,
      metadata: this.metadata,
      started: u(this, Le)
    });
  }
  toJSON() {
    return {
      object: this.type,
      id: this.traceId,
      workflow_name: this.name,
      group_id: this.groupId,
      metadata: this.metadata
    };
  }
};
Ut = new WeakMap(), Le = new WeakMap();
let pn = ps;
class Sr extends pn {
  constructor() {
    super({});
  }
  async start() {
  }
  async end() {
  }
  toJSON() {
    return null;
  }
}
var oe, lt, ar, xi;
class wd {
  constructor() {
    O(this, ar);
    O(this, oe);
    O(this, lt);
    S(this, oe, new yd()), S(this, lt, Ua.disabled), q(this, ar, xi).call(this);
  }
  /**
   * Add a processor to the list of processors. Each processor will receive all traces/spans.
   *
   * @param processor - The processor to add.
   */
  registerProcessor(e) {
    u(this, oe).addTraceProcessor(e);
  }
  /**
   * Set the list of processors. This will replace any existing processors.
   *
   * @param processors - The list of processors to set.
   */
  setProcessors(e) {
    u(this, oe).setProcessors(e);
  }
  /**
   * Get the current trace.
   *
   * @returns The current trace.
   */
  getCurrentTrace() {
    return cn();
  }
  getCurrentSpan() {
    return dn();
  }
  setDisabled(e) {
    S(this, lt, e);
  }
  startExportLoop() {
    u(this, oe).start();
  }
  createTrace(e) {
    if (u(this, lt))
      return M.debug("Tracing is disabled, Not creating trace %o", e), new Sr();
    const t = e.traceId ?? wi(), r = e.name ?? "Agent workflow";
    return M.debug("Creating trace %s with name %s", t, r), new pn({ ...e, name: r, traceId: t }, u(this, oe));
  }
  createSpan(e, t) {
    if (u(this, lt) || e.disabled)
      return M.debug("Tracing is disabled, Not creating span %o", e), new Be(e.data, u(this, oe));
    let r, s;
    if (t) {
      if (t instanceof pn) {
        if (t instanceof Sr)
          return M.debug("Parent trace is no-op, returning NoopSpan"), new Be(e.data, u(this, oe));
        s = t.traceId;
      } else if (t instanceof ln) {
        if (t instanceof Be)
          return M.debug("Parent span is no-op, returning NoopSpan"), new Be(e.data, u(this, oe));
        r = t.spanId, s = t.traceId;
      }
    } else {
      const a = cn(), i = dn();
      if (!a)
        return M.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new Be(e.data, u(this, oe));
      if (i instanceof Be || a instanceof Sr)
        return M.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`), new Be(e.data, u(this, oe));
      s = a.traceId, i ? (M.debug("Using parent span %s", i.spanId), r = i.spanId) : M.debug("No parent span, using current trace %s", a.traceId);
    }
    return s ? (M.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId ?? s}`), new ln({
      ...e,
      traceId: s,
      parentId: r
    }, u(this, oe))) : (M.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new Be(e.data, u(this, oe)));
  }
  async shutdown(e) {
    try {
      M.debug("Shutting down tracing provider"), await u(this, oe).shutdown(e);
    } catch (t) {
      M.error("Error shutting down tracing provider %o", t);
    }
  }
  async forceFlush() {
    await u(this, oe).forceFlush();
  }
}
oe = new WeakMap(), lt = new WeakMap(), ar = new WeakSet(), /** Adds listeners to `process` to ensure `shutdown` occurs before exit. */
xi = function() {
  if (typeof process < "u" && typeof process.on == "function") {
    const e = async () => {
      const t = setTimeout(() => {
        console.warn("Cleanup timeout, forcing exit"), process.exit(1);
      }, 5e3);
      try {
        await this.shutdown();
      } finally {
        clearTimeout(t);
      }
    };
    process.on("beforeExit", e), process.on("SIGINT", async () => {
      await e(), ma("SIGINT") || process.exit(130);
    }), process.on("SIGTERM", async () => {
      await e(), ma("SIGTERM") || process.exit(0);
    }), process.on("unhandledRejection", async (t, r) => {
      M.error("Unhandled rejection", t, r), await e(), xd("unhandledRejection") || process.exit(1);
    });
  }
};
function ma(n) {
  return process.listeners(n).length > 1;
}
function xd(n) {
  return process.listeners(n).length > 1;
}
let Ir;
function Pe() {
  return Ir || (Ir = new wd()), Ir;
}
function Sd(n) {
  Pe().registerProcessor(n);
}
Sd(bi());
function Si(n) {
  const e = atob(n), t = e.length, r = new Uint8Array(t);
  for (let s = 0; s < t; s++)
    r[s] = e.charCodeAt(s);
  return r.buffer;
}
function Ii(n) {
  const e = String.fromCharCode(...new Uint8Array(n));
  return btoa(e);
}
function Ti(n) {
  if (typeof n > "u" || n === null || typeof n != "object" || !("type" in n) || typeof n.type != "string" || !n.type || n.type !== "message" || !("content" in n) || !Array.isArray(n.content) || n.content.length < 1)
    return;
  const e = n.content[n.content.length - 1];
  if (!(!("type" in e) || typeof e.type != "string")) {
    if (e.type === "output_text")
      return typeof e.text == "string" ? e.text : void 0;
    if (e.type === "output_audio")
      return typeof e.transcript == "string" ? e.transcript : void 0;
  }
}
function Id(n, e) {
  const t = n.filter((a) => !e.some((i) => i.itemId === a.itemId)), r = e.filter((a) => !n.some((i) => i.itemId === a.itemId)), s = e.filter((a) => n.some((i) => i.itemId === a.itemId && JSON.stringify(i) !== JSON.stringify(a)));
  return {
    removals: t,
    additions: r,
    updates: s
  };
}
function Td() {
  return typeof window > "u" ? !1 : typeof window.RTCPeerConnection < "u";
}
function ga(n) {
  return n.role === "system" ? n : n.role === "assistant" ? {
    ...n,
    content: n.content.map((e) => e.type === "output_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n.role === "user" ? {
    ...n,
    content: n.content.map((e) => e.type === "input_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n;
}
function ya(n, e, t) {
  if (e.type === "conversation.item.input_audio_transcription.completed")
    return n.map((a) => {
      if (a.itemId === e.item_id && a.type === "message" && "role" in a && a.role === "user") {
        const i = a.content.map((o) => o.type === "input_audio" ? {
          ...o,
          transcript: e.transcript
        } : o);
        return {
          ...a,
          content: i,
          status: "completed"
        };
      }
      return a;
    });
  const r = !t && e.type === "message" ? ga(e) : e, s = n.findIndex((a) => a.itemId === e.itemId);
  if (s !== -1)
    return n.map((a, i) => i === s ? r : !t && a.type === "message" ? ga(a) : a);
  if (e.previousItemId) {
    const a = n.findIndex((i) => i.itemId === e.previousItemId);
    return a !== -1 ? [
      ...n.slice(0, a + 1),
      r,
      ...n.slice(a + 1)
    ] : [...n, r];
  } else
    return [...n, r];
}
const ki = {
  "User-Agent": `Agents/JavaScript ${Tr.version}`,
  "X-OpenAI-Agents-SDK": `openai-agents-sdk.${Tr.version}`
}, kd = `openai-agents-sdk.${Tr.version}`;
function Ad(n, e) {
  const { name: t, arguments: r, ...s } = e;
  return new Se({
    type: "hosted_tool_call",
    name: t,
    arguments: JSON.stringify(r),
    status: "in_progress",
    providerData: {
      ...s
    }
  }, n);
}
function _a(n) {
  const { name: e, arguments: t, providerData: r } = n.rawItem, { itemId: s, serverLabel: a, ...i } = r ?? {};
  if (!s || !a)
    throw new Error("Invalid approval item for Realtime MCP approval request");
  return {
    type: "mcp_approval_request",
    itemId: s,
    serverLabel: a,
    ...i,
    name: e,
    arguments: t ? JSON.parse(t) : {},
    approved: null
  };
}
class ql extends It {
  constructor(t) {
    super(t);
    /**
     * The voice intended to be used by the agent. If another agent already spoke during the
     * RealtimeSession, changing the voice during a handoff will fail.
     */
    v(this, "voice");
    this.voice = t.voice;
  }
}
function Od(n) {
  return {
    debounceTextLength: n.debounceTextLength ?? 100
  };
}
function Cd({ policyHint: n, ...e }) {
  const t = Fr(e), r = n ?? t.name;
  return {
    ...t,
    policyHint: r,
    run: async (s) => {
      const a = await t.run(s);
      return {
        ...a,
        guardrail: { ...a.guardrail, policyHint: r }
      };
    }
  };
}
function Ed(n) {
  return `
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo ?? {})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim();
}
function rt(n, e) {
  return n in e && typeof e[n] < "u";
}
function Nd(n) {
  return rt("modalities", n) || rt("inputAudioFormat", n) || rt("outputAudioFormat", n) || rt("inputAudioTranscription", n) || rt("turnDetection", n) || rt("inputAudioNoiseReduction", n) || rt("speed", n);
}
function Rd(n) {
  var e, t, r, s, a, i, o, l;
  if (!Nd(n)) {
    const c = (e = n.audio) != null && e.input ? {
      format: Fn(n.audio.input.format),
      noiseReduction: n.audio.input.noiseReduction ?? null,
      transcription: n.audio.input.transcription,
      turnDetection: n.audio.input.turnDetection
    } : void 0, p = ((r = (t = n.audio) == null ? void 0 : t.output) == null ? void 0 : r.voice) ?? n.voice, f = (s = n.audio) != null && s.output || typeof p < "u" ? {
      format: Fn((i = (a = n.audio) == null ? void 0 : a.output) == null ? void 0 : i.format),
      voice: p,
      speed: (l = (o = n.audio) == null ? void 0 : o.output) == null ? void 0 : l.speed
    } : void 0;
    return {
      model: n.model,
      instructions: n.instructions,
      toolChoice: n.toolChoice,
      tools: n.tools,
      tracing: n.tracing,
      providerData: n.providerData,
      prompt: n.prompt,
      outputModalities: n.outputModalities,
      audio: c || f ? {
        input: c,
        output: f
      } : void 0
    };
  }
  return {
    model: n.model,
    instructions: n.instructions,
    toolChoice: n.toolChoice,
    tools: n.tools,
    tracing: n.tracing,
    providerData: n.providerData,
    prompt: n.prompt,
    outputModalities: n.modalities,
    audio: {
      input: {
        format: Fn(n.inputAudioFormat),
        noiseReduction: n.inputAudioNoiseReduction ?? null,
        transcription: n.inputAudioTranscription,
        turnDetection: n.turnDetection
      },
      output: {
        format: Fn(n.outputAudioFormat),
        voice: n.voice,
        speed: n.speed
      }
    }
  };
}
function Fn(n) {
  if (!n)
    return;
  if (typeof n == "object")
    return n;
  const e = String(n);
  return e === "pcm16" ? { type: "audio/pcm", rate: 24e3 } : e === "g711_ulaw" ? { type: "audio/pcmu" } : e === "g711_alaw" ? { type: "audio/pcma" } : { type: "audio/pcm", rate: 24e3 };
}
y({
  itemId: d()
});
const va = he("role", [
  y({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: _("message"),
    role: _("system"),
    content: G(y({ type: _("input_text"), text: d() }))
  }),
  y({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: _("message"),
    role: _("user"),
    status: ue(["in_progress", "completed"]),
    content: G(y({ type: _("input_text"), text: d() }).or(y({
      type: _("input_audio"),
      audio: d().nullable().optional(),
      transcript: d().nullable()
    })))
  }),
  y({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: _("message"),
    role: _("assistant"),
    status: ue(["in_progress", "completed", "incomplete"]),
    content: G(y({ type: _("output_text"), text: d() }).or(y({
      type: _("output_audio"),
      audio: d().nullable().optional(),
      transcript: d().nullable().optional()
    })))
  })
]), ba = y({
  itemId: d(),
  previousItemId: d().nullable().optional(),
  type: _("function_call"),
  status: ue(["in_progress", "completed", "incomplete"]),
  arguments: d(),
  name: d(),
  output: d().nullable()
}), wa = y({
  itemId: d(),
  previousItemId: d().nullable().optional(),
  type: ue(["mcp_call", "mcp_tool_call"]),
  status: ue(["in_progress", "completed", "incomplete"]),
  arguments: d(),
  name: d(),
  output: d().nullable()
}), Dd = y({
  itemId: d(),
  type: _("mcp_approval_request"),
  serverLabel: d(),
  name: d(),
  arguments: te(d(), B()),
  approved: yt().optional().nullable()
}), we = qa("openai-agents:realtime"), Ai = y({
  id: d().optional().nullable(),
  conversation_id: d().optional().nullable(),
  max_output_tokens: R().or(_("inf")).optional().nullable(),
  metadata: te(d(), B()).optional().nullable(),
  // GA rename: modalities -> output_modalities
  output_modalities: G(d()).optional().nullable(),
  object: _("realtime.response").optional().nullable(),
  output: G(B()).optional().nullable(),
  // GA grouping: audio.output.{format,voice}
  audio: y({
    output: y({
      format: B().optional().nullable(),
      voice: d().optional().nullable()
    }).optional().nullable()
  }).optional().nullable(),
  status: ue(["completed", "incomplete", "failed", "cancelled", "in_progress"]).optional().nullable(),
  status_details: te(d(), B()).optional().nullable(),
  usage: y({
    input_tokens: R().optional(),
    input_token_details: te(d(), B()).optional().nullable(),
    output_tokens: R().optional(),
    output_token_details: te(d(), B()).optional().nullable()
  }).optional().nullable()
}), Pd = y({
  id: d().optional(),
  audio: d().nullable().optional(),
  text: d().nullable().optional(),
  transcript: d().nullable().optional(),
  type: Tt([
    _("input_text"),
    _("input_audio"),
    _("item_reference"),
    _("output_text"),
    _("output_audio")
  ])
}), Xt = y({
  id: d().optional(),
  arguments: d().optional(),
  call_id: d().optional(),
  content: G(Pd).optional(),
  name: d().optional(),
  output: d().nullable().optional(),
  role: ue(["user", "assistant", "system"]).optional(),
  status: ue(["completed", "incomplete", "in_progress"]).optional(),
  type: ue([
    "message",
    "function_call",
    "function_call_output",
    "mcp_list_tools",
    "mcp_tool_call",
    "mcp_call",
    "mcp_approval_request",
    "mcp_approval_response"
  ]).optional(),
  approval_request_id: d().nullable().optional(),
  approve: yt().nullable().optional(),
  reason: d().nullable().optional(),
  server_label: d().optional(),
  error: B().nullable().optional(),
  tools: G(y({
    name: d(),
    description: d(),
    input_schema: te(B()).optional()
  }).passthrough()).optional()
}).passthrough(), Md = y({
  type: _("conversation.created"),
  event_id: d(),
  conversation: y({
    id: d().optional(),
    object: _("realtime.conversation").optional()
  })
}), jd = y({
  type: _("conversation.item.added"),
  event_id: d(),
  item: Xt,
  previous_item_id: d().nullable().optional()
}), $d = y({
  type: _("conversation.item.done"),
  event_id: d(),
  item: Xt,
  previous_item_id: d().nullable().optional()
}), Fd = y({
  type: _("conversation.item.deleted"),
  event_id: d(),
  item_id: d()
}), Ld = y({
  type: _("conversation.item.input_audio_transcription.completed"),
  event_id: d(),
  item_id: d(),
  content_index: R(),
  transcript: d(),
  logprobs: G(B()).nullable().optional()
}), Zd = y({
  type: _("conversation.item.input_audio_transcription.delta"),
  event_id: d(),
  item_id: d(),
  content_index: R().optional(),
  delta: d().optional(),
  logprobs: G(B()).nullable().optional()
}), Ud = y({
  type: _("conversation.item.input_audio_transcription.failed"),
  event_id: d(),
  item_id: d(),
  content_index: R(),
  error: y({
    code: d().optional(),
    message: d().optional(),
    param: d().optional(),
    type: d().optional()
  })
}), Jd = y({
  type: _("conversation.item.retrieved"),
  event_id: d(),
  item: Xt
}), qd = y({
  type: _("conversation.item.truncated"),
  event_id: d(),
  item_id: d(),
  audio_end_ms: R(),
  content_index: R()
}), Bd = y({
  type: _("conversation.item.create"),
  item: Xt,
  event_id: d().optional(),
  previous_item_id: d().nullable().optional()
}), zd = y({
  type: _("conversation.item.delete"),
  item_id: d(),
  event_id: d().optional()
}), Gd = y({
  type: _("conversation.item.retrieve"),
  item_id: d(),
  event_id: d().optional()
}), Vd = y({
  type: _("conversation.item.truncate"),
  item_id: d(),
  audio_end_ms: R(),
  content_index: R(),
  event_id: d().optional()
}), Wd = y({
  type: _("error"),
  event_id: d().optional(),
  error: B().optional()
}), Hd = y({
  type: _("input_audio_buffer.cleared"),
  event_id: d()
}), Kd = y({
  type: _("input_audio_buffer.append"),
  audio: d(),
  event_id: d().optional()
}), Yd = y({
  type: _("input_audio_buffer.clear"),
  event_id: d().optional()
}), Xd = y({
  type: _("input_audio_buffer.commit"),
  event_id: d().optional()
}), Qd = y({
  type: _("input_audio_buffer.committed"),
  event_id: d(),
  item_id: d(),
  previous_item_id: d().nullable().optional()
}), el = y({
  type: _("input_audio_buffer.speech_started"),
  event_id: d(),
  item_id: d(),
  audio_start_ms: R()
}), tl = y({
  type: _("input_audio_buffer.speech_stopped"),
  event_id: d(),
  item_id: d(),
  audio_end_ms: R()
}), nl = y({
  type: _("output_audio_buffer.started"),
  event_id: d()
}).passthrough(), rl = y({
  type: _("output_audio_buffer.stopped"),
  event_id: d()
}).passthrough(), sl = y({
  type: _("output_audio_buffer.cleared"),
  event_id: d()
}), al = y({
  type: _("rate_limits.updated"),
  event_id: d(),
  rate_limits: G(y({
    limit: R().optional(),
    name: ue(["requests", "tokens"]).optional(),
    remaining: R().optional(),
    reset_seconds: R().optional()
  }))
}), il = y({
  type: _("response.output_audio.delta"),
  event_id: d(),
  item_id: d(),
  content_index: R(),
  delta: d(),
  output_index: R(),
  response_id: d()
}), ol = y({
  type: _("response.output_audio.done"),
  event_id: d(),
  item_id: d(),
  content_index: R(),
  output_index: R(),
  response_id: d()
}), ul = y({
  type: _("response.output_audio_transcript.delta"),
  event_id: d(),
  item_id: d(),
  content_index: R(),
  delta: d(),
  output_index: R(),
  response_id: d()
}), cl = y({
  //  GA may introduce response.output_audio_transcript.done
  type: _("response.output_audio_transcript.done"),
  event_id: d(),
  item_id: d(),
  content_index: R(),
  transcript: d(),
  output_index: R(),
  response_id: d()
}), dl = y({
  type: _("response.content_part.added"),
  event_id: d(),
  item_id: d(),
  content_index: R(),
  output_index: R(),
  response_id: d(),
  part: y({
    audio: d().optional(),
    text: d().optional(),
    transcript: d().optional(),
    type: ue(["text", "audio"]).optional()
  })
}), ll = y({
  type: _("response.content_part.done"),
  event_id: d(),
  item_id: d(),
  content_index: R(),
  output_index: R(),
  response_id: d(),
  part: y({
    audio: d().optional(),
    text: d().optional(),
    transcript: d().optional(),
    type: ue(["text", "audio"]).optional()
  })
}), pl = y({
  type: _("response.created"),
  event_id: d(),
  response: Ai
}), Oi = y({
  type: _("response.done"),
  event_id: d(),
  response: Ai
}), fl = y({
  type: _("response.function_call_arguments.delta"),
  event_id: d(),
  item_id: d(),
  call_id: d(),
  delta: d(),
  output_index: R(),
  response_id: d()
}), hl = y({
  type: _("response.function_call_arguments.done"),
  event_id: d(),
  item_id: d(),
  call_id: d(),
  arguments: d(),
  output_index: R(),
  response_id: d()
}), ml = y({
  type: _("response.output_item.added"),
  event_id: d(),
  item: Xt,
  output_index: R(),
  response_id: d()
}), gl = y({
  type: _("response.output_item.done"),
  event_id: d(),
  item: Xt,
  output_index: R(),
  response_id: d()
}), yl = y({
  type: _("response.output_text.delta"),
  event_id: d(),
  item_id: d(),
  content_index: R(),
  delta: d(),
  output_index: R(),
  response_id: d()
}), _l = y({
  // No rename specified for done; keep response.text.done
  type: _("response.output_text.done"),
  event_id: d(),
  item_id: d(),
  content_index: R(),
  text: d(),
  output_index: R(),
  response_id: d()
}), vl = y({
  type: _("session.created"),
  event_id: d(),
  session: B()
}), bl = y({
  type: _("session.updated"),
  event_id: d(),
  session: B()
}), wl = y({
  type: _("response.cancel"),
  event_id: d().optional(),
  response_id: d().optional()
}), xl = y({
  type: _("response.create"),
  event_id: d().optional(),
  response: B().optional()
}), Sl = y({
  type: _("session.update"),
  event_id: d().optional(),
  session: B()
}), Il = y({
  type: _("mcp_list_tools.in_progress"),
  event_id: d().optional(),
  item_id: d().optional()
}), Tl = y({
  type: _("mcp_list_tools.completed"),
  event_id: d().optional(),
  item_id: d().optional()
}), kl = y({
  type: _("response.mcp_call_arguments.delta"),
  event_id: d(),
  response_id: d(),
  item_id: d(),
  output_index: R(),
  delta: d(),
  obfuscation: d()
}), Al = y({
  type: _("response.mcp_call_arguments.done"),
  event_id: d(),
  response_id: d(),
  item_id: d(),
  output_index: R(),
  arguments: d()
}), Ol = y({
  type: _("response.mcp_call.in_progress"),
  event_id: d(),
  output_index: R(),
  item_id: d()
}), Cl = y({
  type: _("response.mcp_call.completed"),
  event_id: d(),
  output_index: R(),
  item_id: d()
}), El = y({
  type: _("mcp_list_tools.failed"),
  event_id: d().optional(),
  item_id: d().optional()
}), Nl = y({
  type: d(),
  event_id: d().optional().nullable()
}).passthrough(), Rl = he("type", [
  Md,
  jd,
  $d,
  Fd,
  Ld,
  Zd,
  Ud,
  Jd,
  qd,
  Wd,
  Hd,
  Qd,
  el,
  tl,
  nl,
  rl,
  sl,
  al,
  il,
  ol,
  ul,
  cl,
  dl,
  ll,
  pl,
  Oi,
  fl,
  hl,
  ml,
  gl,
  yl,
  _l,
  vl,
  bl,
  Il,
  Tl,
  El,
  kl,
  Al,
  Ol,
  Cl
]);
he("type", [
  Bd,
  zd,
  Gd,
  Vd,
  Kd,
  Yd,
  Xd,
  wl,
  xl,
  Sl
]);
function ds(n) {
  const e = JSON.parse(n.data.toString()), t = Rl.safeParse(e);
  if (!t.success) {
    const r = Nl.safeParse(e);
    return r.success ? { data: r.data, isGeneric: !0 } : { data: null, isGeneric: !0 };
  }
  return { data: t.data, isGeneric: !1 };
}
const Dl = "gpt-realtime", Ae = {
  outputModalities: ["audio"],
  audio: {
    input: {
      format: { type: "audio/pcm", rate: 24e3 },
      transcription: { model: "gpt-4o-mini-transcribe" },
      turnDetection: { type: "semantic_vad" },
      noiseReduction: null
    },
    output: {
      format: { type: "audio/pcm", rate: 24e3 },
      speed: 1
    }
  }
};
var pt, In, pe, Tn;
const fs = class fs extends ts {
  constructor(t = {}) {
    super();
    O(this, pt);
    O(this, In);
    O(this, pe, null);
    O(this, Tn, null);
    v(this, "eventEmitter", new ur());
    S(this, pt, t.model ?? Dl), S(this, In, t.apiKey);
  }
  /**
   * The current model that is being used by the transport layer.
   */
  get currentModel() {
    return u(this, pt);
  }
  /**
   * The current model that is being used by the transport layer.
   * **Note**: The model cannot be changed mid conversation.
   */
  set currentModel(t) {
    S(this, pt, t);
  }
  get _rawSessionConfig() {
    return u(this, Tn) ?? null;
  }
  async _getApiKey(t) {
    const r = t.apiKey ?? u(this, In);
    return typeof r == "function" ? await r() : r;
  }
  _onMessage(t) {
    var a, i, o, l, c, p;
    const { data: r, isGeneric: s } = ds(t);
    if (r !== null && (this.emit("*", r), !s)) {
      if (r.type === "error" ? this.emit("error", { type: "error", error: r }) : this.emit(r.type, r), r.type === "response.created") {
        this.emit("turn_started", {
          type: "response_started",
          providerData: {
            ...r
          }
        });
        return;
      }
      if (r.type === "session.updated" && S(this, Tn, r.session), r.type === "response.done") {
        const f = Oi.safeParse(r);
        if (!f.success) {
          we.error("Error parsing response done event", f.error);
          return;
        }
        const h = ((a = f.data.response.usage) == null ? void 0 : a.input_tokens) ?? 0, w = ((i = f.data.response.usage) == null ? void 0 : i.output_tokens) ?? 0, g = h + w, x = new lr({
          inputTokens: h,
          inputTokensDetails: ((o = f.data.response.usage) == null ? void 0 : o.input_token_details) ?? {},
          outputTokens: w,
          outputTokensDetails: ((l = f.data.response.usage) == null ? void 0 : l.output_token_details) ?? {},
          totalTokens: g
        });
        this.emit("usage_update", x), this.emit("turn_done", {
          type: "response_done",
          response: {
            id: f.data.response.id ?? "",
            output: f.data.response.output ?? [],
            usage: {
              inputTokens: h,
              inputTokensDetails: ((c = f.data.response.usage) == null ? void 0 : c.input_token_details) ?? {},
              outputTokens: w,
              outputTokensDetails: ((p = f.data.response.usage) == null ? void 0 : p.output_token_details) ?? {},
              totalTokens: g
            }
          }
        });
        return;
      }
      if (r.type === "response.output_audio.done") {
        this.emit("audio_done");
        return;
      }
      if (r.type === "conversation.item.deleted") {
        this.emit("item_deleted", {
          itemId: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.completed" || r.type === "conversation.item.truncated") {
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.delta" || r.type === "response.output_text.delta" || r.type === "response.output_audio_transcript.delta" || r.type === "response.function_call_arguments.delta") {
        r.type === "response.output_audio_transcript.delta" && this.emit("audio_transcript_delta", {
          type: "transcript_delta",
          delta: r.delta,
          itemId: r.item_id,
          responseId: r.response_id
        });
        return;
      }
      if (r.type === "conversation.item.added" || r.type === "conversation.item.done" || r.type === "conversation.item.retrieved") {
        if (r.item.type === "mcp_list_tools" && r.type === "conversation.item.done") {
          const f = r.item.server_label ?? "", h = r.item.tools ?? [];
          try {
            this.emit("mcp_tools_listed", {
              serverLabel: f,
              tools: h
            });
          } catch (w) {
            we.error("Error emitting mcp_tools_listed", w, r.item);
          }
          return;
        }
        if (r.item.type === "message") {
          const f = r.type === "conversation.item.added" || r.type === "conversation.item.done" ? r.previous_item_id : null, h = va.parse({
            itemId: r.item.id,
            previousItemId: f,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: r.item.status
          });
          this.emit("item_update", h);
          return;
        }
        if (r.item.type === "mcp_approval_request" && r.type === "conversation.item.done") {
          const f = r.item, h = Dd.parse({
            itemId: f.id,
            type: f.type,
            serverLabel: f.server_label,
            name: f.name,
            arguments: JSON.parse(f.arguments || "{}"),
            approved: f.approved
          });
          this.emit("item_update", h), this.emit("mcp_approval_request", h);
          return;
        }
        if (r.item.type === "mcp_tool_call" || r.item.type === "mcp_call") {
          const f = r.type === "conversation.item.done" ? "completed" : "in_progress", h = wa.parse({
            itemId: r.item.id,
            type: r.item.type,
            status: f,
            arguments: r.item.arguments,
            name: r.item.name,
            output: r.item.output
          });
          this.emit("item_update", h), r.type === "conversation.item.done" && this.emit("mcp_tool_call_completed", h);
          return;
        }
      }
      if (r.type === "response.mcp_call.in_progress") {
        const f = r;
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: f.item_id
        });
        return;
      }
      if (r.type === "mcp_list_tools.in_progress") {
        const f = r;
        f.item_id && this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: f.item_id
        });
        return;
      }
      if (r.type === "response.output_item.done" || r.type === "response.output_item.added") {
        const f = r.item;
        if (f.type === "function_call" && f.status === "completed") {
          const h = ba.parse({
            itemId: f.id,
            type: f.type,
            status: "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: f.arguments,
            name: f.name,
            output: null
          });
          this.emit("item_update", h), this.emit("function_call", {
            id: f.id,
            type: "function_call",
            callId: f.call_id ?? "",
            arguments: f.arguments ?? "",
            name: f.name ?? ""
          });
          return;
        }
        if (f.type === "mcp_tool_call" || f.type === "mcp_call") {
          const h = wa.parse({
            itemId: f.id,
            type: f.type,
            status: r.type === "response.output_item.done" ? "completed" : "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: f.arguments,
            name: f.name,
            output: f.output
          });
          this.emit("item_update", h);
          return;
        }
        if (f.type === "message") {
          const h = va.parse({
            itemId: r.item.id,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: r.type === "response.output_item.done" ? f.status ?? "completed" : f.status ?? "in_progress"
          });
          this.emit("item_update", h);
          return;
        }
      }
    }
  }
  _onError(t) {
    this.emit("error", {
      type: "error",
      error: t
    });
  }
  _onOpen() {
    this.emit("connected");
  }
  _onClose() {
    this.emit("disconnected");
  }
  /**
   * Send a message to the Realtime API. This will create a new item in the conversation and
   * trigger a response.
   *
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r, { triggerResponse: s = !0 } = {}) {
    const a = typeof t == "string" ? [
      {
        type: "input_text",
        text: t
      }
    ] : t.content.map((i) => i.type === "input_image" ? {
      type: "input_image",
      image_url: i.image,
      ...i.providerData ?? {}
    } : i);
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "message",
        role: "user",
        content: a
      },
      ...r
    }), s && this.sendEvent({
      type: "response.create"
    });
  }
  addImage(t, { triggerResponse: r = !0 } = {}) {
    this.sendMessage({
      type: "message",
      role: "user",
      content: [{ type: "input_image", image: t }]
    }, {}, { triggerResponse: r });
  }
  _getMergedSessionConfig(t) {
    var a, i, o, l, c, p, f, h, w, g, x, b, m, I, A, D, N, j, J, ne, me, ve, hs, ms, gs, ys, _s, vs;
    const r = Rd(t), s = {
      type: "realtime",
      instructions: r.instructions,
      model: r.model ?? u(this, pt),
      output_modalities: r.outputModalities ?? Ae.outputModalities,
      audio: {
        input: {
          format: ((i = (a = r.audio) == null ? void 0 : a.input) == null ? void 0 : i.format) ?? ((l = (o = Ae.audio) == null ? void 0 : o.input) == null ? void 0 : l.format),
          noise_reduction: ((p = (c = r.audio) == null ? void 0 : c.input) == null ? void 0 : p.noiseReduction) ?? ((h = (f = Ae.audio) == null ? void 0 : f.input) == null ? void 0 : h.noiseReduction),
          transcription: ((g = (w = r.audio) == null ? void 0 : w.input) == null ? void 0 : g.transcription) ?? ((b = (x = Ae.audio) == null ? void 0 : x.input) == null ? void 0 : b.transcription),
          turn_detection: fs.buildTurnDetectionConfig((I = (m = r.audio) == null ? void 0 : m.input) == null ? void 0 : I.turnDetection) ?? ((D = (A = Ae.audio) == null ? void 0 : A.input) == null ? void 0 : D.turnDetection)
        },
        output: {
          format: ((j = (N = r.audio) == null ? void 0 : N.output) == null ? void 0 : j.format) ?? ((ne = (J = Ae.audio) == null ? void 0 : J.output) == null ? void 0 : ne.format),
          voice: ((ve = (me = r.audio) == null ? void 0 : me.output) == null ? void 0 : ve.voice) ?? ((ms = (hs = Ae.audio) == null ? void 0 : hs.output) == null ? void 0 : ms.voice),
          speed: ((ys = (gs = r.audio) == null ? void 0 : gs.output) == null ? void 0 : ys.speed) ?? ((vs = (_s = Ae.audio) == null ? void 0 : _s.output) == null ? void 0 : vs.speed)
        }
      },
      tool_choice: r.toolChoice ?? Ae.toolChoice,
      // We don't set tracing here to make sure that we don't try to override it on every
      // session.update as it might lead to errors
      ...r.providerData ?? {}
    };
    return r.prompt && (s.prompt = {
      id: r.prompt.promptId,
      version: r.prompt.version,
      variables: r.prompt.variables
    }), r.tools && r.tools.length > 0 && (s.tools = r.tools.map((Pi) => ({
      ...Pi,
      strict: void 0
    }))), s;
  }
  static buildTurnDetectionConfig(t) {
    if (typeof t > "u")
      return;
    const { type: r, createResponse: s, create_response: a, eagerness: i, interruptResponse: o, interrupt_response: l, prefixPaddingMs: c, prefix_padding_ms: p, silenceDurationMs: f, silence_duration_ms: h, threshold: w, idleTimeoutMs: g, idle_timeout_ms: x, ...b } = t, m = {
      type: r,
      create_response: s || a,
      eagerness: i,
      interrupt_response: o || l,
      prefix_padding_ms: c || p,
      silence_duration_ms: f || h,
      idle_timeout_ms: g || x,
      threshold: w,
      ...b
    };
    return Object.keys(m).forEach((I) => {
      m[I] === void 0 && delete m[I];
    }), Object.keys(m).length > 0 ? m : void 0;
  }
  /**
   * Sets the internal tracing config. This is used to track the tracing config that has been set
   * during the session.create event.
   */
  set _tracingConfig(t) {
    S(this, pe, t);
  }
  /**
   * Sets the tracing config for the session. This will send the tracing config to the Realtime API.
   *
   * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists
   */
  _updateTracingConfig(t) {
    var r, s, a;
    if (typeof u(this, pe) > "u" && S(this, pe, null), t === "auto") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: "auto"
        }
      });
      return;
    }
    if (u(this, pe) !== null && typeof u(this, pe) != "string" && typeof t != "string") {
      we.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");
      return;
    }
    if (t === null) {
      we.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."), this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: null
        }
      });
      return;
    }
    if (u(this, pe) === null || typeof u(this, pe) == "string") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: t
        }
      });
      return;
    }
    if ((t == null ? void 0 : t.group_id) !== ((r = u(this, pe)) == null ? void 0 : r.group_id) || (t == null ? void 0 : t.metadata) !== ((s = u(this, pe)) == null ? void 0 : s.metadata) || (t == null ? void 0 : t.workflow_name) !== ((a = u(this, pe)) == null ? void 0 : a.workflow_name)) {
      we.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s", JSON.stringify(u(this, pe)), JSON.stringify(t));
      return;
    }
    this.sendEvent({
      type: "session.update",
      session: {
        type: "realtime",
        tracing: t
      }
    });
  }
  /**
   * Updates the session config. This will merge it with the current session config with the default
   * values and send it to the Realtime API.
   *
   * @param config - The session config to update.
   */
  updateSessionConfig(t) {
    const r = this._getMergedSessionConfig(t);
    this.sendEvent({
      type: "session.update",
      session: r
    });
  }
  /**
   * Send the output of a function call to the Realtime API.
   *
   * @param toolCall - The tool call to send the output for.
   * @param output - The output of the function call.
   * @param startResponse - Whether to start a new response after sending the output.
   */
  sendFunctionCallOutput(t, r, s = !0) {
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "function_call_output",
        output: r,
        call_id: t.callId
      }
    });
    try {
      const a = ba.parse({
        itemId: t.id,
        previousItemId: t.previousItemId,
        type: "function_call",
        status: "completed",
        arguments: t.arguments,
        name: t.name,
        output: r
      });
      this.emit("item_update", a);
    } catch (a) {
      we.error("Error parsing tool call item", a, t);
    }
    s && this.sendEvent({
      type: "response.create"
    });
  }
  /**
   * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer
   * will be committed and the model will start processing it. This is necessary if you have
   * disabled turn detection / voice activity detection (VAD).
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, { commit: r = !1 } = {}) {
    this.sendEvent({
      type: "input_audio_buffer.append",
      audio: Ii(t)
    }), r && this.sendEvent({
      type: "input_audio_buffer.commit"
    });
  }
  /**
   * Reset the history of the conversation. This will create a diff between the old and new history
   * and send the necessary events to the Realtime API to update the history.
   *
   * @param oldHistory - The old history of the conversation.
   * @param newHistory - The new history of the conversation.
   */
  resetHistory(t, r) {
    const { removals: s, additions: a, updates: i } = Id(t, r), o = new Set(s.map((c) => c.itemId));
    for (const c of i)
      o.add(c.itemId);
    if (o.size > 0)
      for (const c of o)
        this.sendEvent({
          type: "conversation.item.delete",
          item_id: c
        });
    const l = [...a, ...i];
    for (const c of l)
      if (c.type === "message") {
        const p = {
          type: "message",
          role: c.role,
          content: c.content,
          id: c.itemId
        };
        c.role !== "system" && c.status && (p.status = c.status), this.sendEvent({
          type: "conversation.item.create",
          item: p
        });
      } else c.type === "function_call" && we.warn("Function calls cannot be manually added or updated at the moment. Ignoring.");
  }
  sendMcpResponse(t, r) {
    this.sendEvent({
      type: "conversation.item.create",
      previous_item_id: t.itemId,
      item: {
        type: "mcp_approval_response",
        approval_request_id: t.itemId,
        approve: r
      }
    });
  }
};
pt = new WeakMap(), In = new WeakMap(), pe = new WeakMap(), Tn = new WeakMap();
let sr = fs;
var kn, K, An, ft, On;
class Pl extends sr {
  constructor(t = {}) {
    if (typeof RTCPeerConnection > "u")
      throw new Error("WebRTC is not supported in this environment");
    super(t);
    v(this, "options");
    O(this, kn);
    O(this, K, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0,
      callId: void 0
    });
    O(this, An);
    O(this, ft, !1);
    O(this, On, !1);
    this.options = t, S(this, kn, t.baseUrl ?? "https://api.openai.com/v1/realtime/calls"), S(this, An, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current call ID of the WebRTC connection.
   */
  get callId() {
    return u(this, K).callId;
  }
  /**
   * The current status of the WebRTC connection.
   */
  get status() {
    return u(this, K).status;
  }
  /**
   * The current connection state of the WebRTC connection including the peer connection and data
   * channel.
   */
  get connectionState() {
    return u(this, K);
  }
  /**
   * Whether the session is muted.
   */
  get muted() {
    return u(this, On);
  }
  /**
   * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API
   * via WebRTC.
   *
   * If you are using a browser, the transport layer will also automatically configure the
   * microphone and audio output to be used by the session.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    if (u(this, K).status === "connected")
      return;
    u(this, K).status === "connecting" && we.warn("Realtime connection already in progress. Please await original promise");
    const r = t.model ?? this.currentModel;
    this.currentModel = r;
    const s = t.url ?? u(this, kn), a = await this._getApiKey(t), i = typeof a == "string" && a.startsWith("ek_");
    if (!u(this, An) && !i)
      throw new Q("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");
    return new Promise(async (o, l) => {
      var c, p;
      try {
        const f = {
          ...t.initialSessionConfig || {},
          model: this.currentModel
        }, h = new URL(s);
        let w = new RTCPeerConnection();
        const g = w.createDataChannel("oai-events");
        let x;
        S(this, K, {
          status: "connecting",
          peerConnection: w,
          dataChannel: g,
          callId: x
        }), this.emit("connection_change", u(this, K).status), g.addEventListener("open", () => {
          S(this, K, {
            status: "connected",
            peerConnection: w,
            dataChannel: g,
            callId: x
          }), this.updateSessionConfig(f), this.emit("connection_change", u(this, K).status), this._onOpen(), o();
        }), g.addEventListener("error", (N) => {
          this.close(), this._onError(N), l(N);
        }), g.addEventListener("message", (N) => {
          this._onMessage(N);
          const { data: j, isGeneric: J } = ds(N);
          !j || J || (j.type === "response.created" ? S(this, ft, !0) : j.type === "response.done" && S(this, ft, !1), j.type === "session.created" && (this._tracingConfig = j.session.tracing, this._updateTracingConfig(f.tracing ?? "auto")));
        });
        const b = this.options.audioElement ?? document.createElement("audio");
        b.autoplay = !0, w.ontrack = (N) => {
          b.srcObject = N.streams[0];
        };
        const m = this.options.mediaStream ?? await navigator.mediaDevices.getUserMedia({
          audio: !0
        });
        w.addTrack(m.getAudioTracks()[0]), this.options.changePeerConnection && (w = await this.options.changePeerConnection(w), S(this, K, { ...u(this, K), peerConnection: w }));
        const I = await w.createOffer();
        if (await w.setLocalDescription(I), !I.sdp)
          throw new Error("Failed to create offer");
        const A = await fetch(h, {
          method: "POST",
          body: I.sdp,
          headers: {
            "Content-Type": "application/sdp",
            Authorization: `Bearer ${a}`,
            "X-OpenAI-Agents-SDK": ki["X-OpenAI-Agents-SDK"]
          }
        });
        x = (p = (c = A.headers) == null ? void 0 : c.get("Location")) == null ? void 0 : p.split("/").pop(), S(this, K, { ...u(this, K), callId: x });
        const D = {
          type: "answer",
          sdp: await A.text()
        };
        await w.setRemoteDescription(D);
      } catch (f) {
        this.close(), this._onError(f), l(f);
      }
    });
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!u(this, K).dataChannel || u(this, K).dataChannel.readyState !== "open")
      throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");
    u(this, K).dataChannel.send(JSON.stringify(t));
  }
  /**
   * Mute or unmute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    S(this, On, t), u(this, K).peerConnection && u(this, K).peerConnection.getSenders().forEach((s) => {
      s.track && (s.track.enabled = !t);
    });
  }
  /**
   * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.
   */
  close() {
    if (u(this, K).dataChannel && u(this, K).dataChannel.close(), u(this, K).peerConnection) {
      const t = u(this, K).peerConnection;
      t.getSenders().forEach((r) => {
        var s;
        (s = r.track) == null || s.stop();
      }), t.close();
    }
    u(this, K).status !== "disconnected" && (S(this, K, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0,
      callId: void 0
    }), this.emit("connection_change", u(this, K).status), this._onClose());
  }
  /**
   * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent
   * stops talking.
   */
  interrupt() {
    u(this, ft) && (this.sendEvent({
      type: "response.cancel"
    }), S(this, ft, !1)), this.sendEvent({
      type: "output_audio_buffer.clear"
    });
  }
}
kn = new WeakMap(), K = new WeakMap(), An = new WeakMap(), ft = new WeakMap(), On = new WeakMap();
const Ml = globalThis.WebSocket;
var Ye, Xe, ae, Cn, Ze, ht, mt, Jt, En, ir, Ci;
class jl extends sr {
  constructor(t = {}) {
    super(t);
    O(this, ir);
    O(this, Ye);
    O(this, Xe);
    O(this, ae, {
      status: "disconnected",
      websocket: void 0
    });
    O(this, Cn);
    O(this, Ze);
    O(this, ht);
    /**
     * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time
     * since the response started to compute the right interruption time.
     *
     * Mostly internal but might be used by extended transport layers for their interruption
     * calculation.
     */
    v(this, "_firstAudioTimestamp");
    v(this, "_audioLengthMs", 0);
    O(this, mt, !1);
    O(this, Jt);
    O(this, En);
    S(this, Xe, t.url), S(this, Cn, t.useInsecureApiKey ?? !1), S(this, Jt, t.createWebSocket), S(this, En, t.skipOpenEventListeners ?? !1);
  }
  getCommonRequestHeaders() {
    return ki;
  }
  /**
   * The current status of the WebSocket connection.
   */
  get status() {
    return u(this, ae).status;
  }
  /**
   * The current connection state of the WebSocket connection.
   */
  get connectionState() {
    return u(this, ae);
  }
  /**
   * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,
   * this should be handled by the client by not triggering the `sendAudio` method.
   */
  get muted() {
    return null;
  }
  /**
   * The current item ID of the ongoing response.
   */
  get currentItemId() {
    return u(this, Ze);
  }
  /**
   * Triggers the `audio` event that a client might listen to to receive the audio buffer.
   * Protected for you to be able to override and disable emitting this event in case your extended
   * transport layer handles audio internally.
   *
   * @param audioEvent - The audio event to emit.
   */
  _onAudio(t) {
    this.emit("audio", t);
  }
  async connect(t) {
    const r = t.model ?? this.currentModel;
    this.currentModel = r, S(this, Ye, await this._getApiKey(t));
    const s = t.url ?? u(this, Xe) ?? `wss://api.openai.com/v1/realtime?model=${this.currentModel}`;
    S(this, Xe, s);
    const a = {
      ...t.initialSessionConfig || {},
      model: this.currentModel
    };
    await new Promise((i, o) => {
      q(this, ir, Ci).call(this, i, o, a).catch(o);
    }), await this.updateSessionConfig(a);
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!u(this, ae).websocket)
      throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");
    u(this, ae).websocket.send(JSON.stringify(t));
  }
  /**
   * Close the WebSocket connection.
   *
   * This will also reset any internal connection tracking used for interruption handling.
   */
  close() {
    var t;
    (t = u(this, ae).websocket) == null || t.close(), S(this, Ze, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, S(this, ht, void 0);
  }
  /**
   * Will throw an error as the WebSocket transport layer does not support muting.
   */
  mute(t) {
    throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.");
  }
  /**
   * Send an audio buffer to the Realtime API. This is used for your client to send audio to the
   * model to respond.
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, r = {}) {
    u(this, ae).status === "connected" && super.sendAudio(t, r);
  }
  /**
   * Send a cancel response event to the Realtime API. This is used to cancel an ongoing
   *  response that the model is currently generating.
   */
  _cancelResponse() {
    u(this, mt) && (this.sendEvent({
      type: "response.cancel"
    }), S(this, mt, !1));
  }
  /**
   * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.
   *
   * This method is used to send the right events to the API to inform the model that the user has
   * interrupted the response. It might be overridden/extended by an extended transport layer. See
   * the `TwilioRealtimeTransportLayer` for an example.
   *
   * @param elapsedTime - The elapsed time since the response started.
   */
  _interrupt(t, r = !0) {
    if (t < 0)
      return;
    r && this._cancelResponse();
    const s = this._audioLengthMs ?? Number.POSITIVE_INFINITY, a = Math.max(0, Math.floor(Math.min(t, s)));
    this.emit("audio_interrupted"), this.sendEvent({
      type: "conversation.item.truncate",
      item_id: u(this, Ze),
      content_index: u(this, ht),
      audio_end_ms: a
    });
  }
  /**
   * Interrupt the ongoing response. This method is triggered automatically by the client when
   * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got
   * triggered.
   *
   * You can also call this method directly if you want to interrupt the conversation for example
   * based on an event in the client.
   */
  interrupt(t = !0) {
    if (!u(this, Ze) || typeof this._firstAudioTimestamp != "number")
      return;
    const r = Date.now() - this._firstAudioTimestamp;
    r >= 0 && this._interrupt(r, t), S(this, Ze, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, S(this, ht, void 0);
  }
}
Ye = new WeakMap(), Xe = new WeakMap(), ae = new WeakMap(), Cn = new WeakMap(), Ze = new WeakMap(), ht = new WeakMap(), mt = new WeakMap(), Jt = new WeakMap(), En = new WeakMap(), ir = new WeakSet(), Ci = async function(t, r, s) {
  if (u(this, ae).websocket) {
    t();
    return;
  }
  if (!u(this, Ye))
    throw new Q("API key is not set. Please call `connect()` with an API key first.");
  if (!u(this, Ye).startsWith("ek_") && !u(this, Cn))
    throw new Q("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");
  let a = null;
  if (u(this, Jt))
    a = await u(this, Jt).call(this, {
      url: u(this, Xe),
      apiKey: u(this, Ye)
    });
  else {
    const o = [
      "realtime",
      // Auth
      "openai-insecure-api-key." + u(this, Ye),
      // Version header
      kd
    ];
    a = new Ml(u(this, Xe), o);
  }
  S(this, ae, {
    status: "connecting",
    websocket: a
  }), this.emit("connection_change", u(this, ae).status);
  const i = () => {
    S(this, ae, {
      status: "connected",
      websocket: a
    }), this.emit("connection_change", u(this, ae).status), this._onOpen(), t();
  };
  u(this, En) === !0 ? i() : a.addEventListener("open", i), a.addEventListener("error", (o) => {
    this._onError(o), S(this, ae, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", u(this, ae).status), r(o);
  }), a.addEventListener("message", (o) => {
    var p, f, h, w, g, x, b;
    this._onMessage(o);
    const { data: l, isGeneric: c } = ds(o);
    if (!(!l || c))
      if (l.type === "response.output_audio.delta") {
        S(this, ht, l.content_index), S(this, Ze, l.item_id), this._firstAudioTimestamp === void 0 && (this._firstAudioTimestamp = Date.now(), this._audioLengthMs = 0);
        const m = Si(l.delta), I = (h = (f = (p = this._rawSessionConfig) == null ? void 0 : p.audio) == null ? void 0 : f.output) == null ? void 0 : h.format;
        if (I && typeof I == "object") {
          const D = I.type;
          if (D === "audio/pcmu" || D === "audio/pcma")
            this._audioLengthMs += m.byteLength / 8;
          else if (D === "audio/pcm") {
            const N = I.rate ?? 24e3;
            this._audioLengthMs += m.byteLength / 2 / N * 1e3;
          } else
            this._audioLengthMs += m.byteLength / 24 / 2;
        } else typeof I == "string" ? I.startsWith("g711_") ? this._audioLengthMs += m.byteLength / 8 : this._audioLengthMs += m.byteLength / 24 / 2 : this._audioLengthMs += m.byteLength / 24 / 2;
        const A = {
          type: "audio",
          data: m,
          responseId: l.response_id
        };
        this._onAudio(A);
      } else if (l.type === "input_audio_buffer.speech_started") {
        const m = ((b = (x = (g = (w = this._rawSessionConfig) == null ? void 0 : w.audio) == null ? void 0 : g.input) == null ? void 0 : x.turn_detection) == null ? void 0 : b.interrupt_response) ?? !1;
        this.interrupt(!m);
      } else l.type === "response.created" ? S(this, mt, !0) : l.type === "response.done" ? S(this, mt, !1) : l.type === "session.created" && (this._tracingConfig = l.session.tracing, this._updateTracingConfig(s.tracing ?? "auto"));
  }), a.addEventListener("close", () => {
    S(this, ae, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", u(this, ae).status), this._onClose();
  });
};
const Ei = Symbol("backgroundResult");
function Bl(n) {
  return {
    [Ei]: !0,
    content: n
  };
}
function $l(n) {
  return typeof n == "object" && n !== null && Ei in n;
}
function Fl(n) {
  return n.type === "function" || n.type === "hosted_tool" && n.name === "hosted_mcp";
}
function Ll(n) {
  if (n.type === "function")
    return n;
  if (n.type === "hosted_tool" && n.name === "hosted_mcp") {
    const e = n.providerData.server_url && n.providerData.server_url.length > 0 ? n.providerData.server_url : void 0;
    return {
      type: "mcp",
      server_label: n.providerData.server_label,
      server_url: e,
      headers: n.providerData.headers,
      allowed_tools: n.providerData.allowed_tools,
      require_approval: n.providerData.require_approval
    };
  }
  throw new Q(`Invalid tool type: ${n}`);
}
function Zl() {
  return JSON.parse(JSON.stringify(Ae));
}
var U, $, qt, F, Bt, zt, Nn, X, Gt, Vt, Ce, Rn, gt, Dn, Pn, Y, Un, Jn, Ni, qn, Ri, Hr, Di, Kr;
class zl extends ur {
  constructor(t, r = {}) {
    super();
    O(this, Y);
    v(this, "initialAgent");
    v(this, "options");
    O(this, U);
    O(this, $);
    O(this, qt);
    O(this, F);
    O(this, Bt, []);
    O(this, zt);
    O(this, Nn, {});
    O(this, X, []);
    O(this, Gt);
    O(this, Vt, {});
    O(this, Ce, !1);
    // Tracks all MCP tools fetched per server label (from mcp_list_tools results).
    O(this, Rn, /* @__PURE__ */ new Map());
    // Tracks currently available MCP tools based on the active agent's configured server_labels.
    O(this, gt, []);
    // Keeps track of the last full session config we sent (camelCase keys) so that
    // subsequent updates (e.g. during agent handoffs) preserve properties that are
    // not explicitly recalculated here (such as inputAudioFormat, outputAudioFormat,
    // modalities, speed, toolChoice, turnDetection, etc.). Without this, updating
    // the agent would drop audio format overrides (e.g. g711_ulaw) and revert to
    // transport defaults causing issues for integrations like Twilio.
    O(this, Dn, Zl());
    O(this, Pn, !0);
    this.initialAgent = t, this.options = r, typeof r.transport > "u" && Td() || r.transport === "webrtc" ? S(this, U, new Pl()) : r.transport === "websocket" || typeof r.transport > "u" ? S(this, U, new jl()) : S(this, U, r.transport), S(this, $, t), S(this, F, new Et({
      ...r.context ?? {},
      history: u(this, X)
    })), S(this, Bt, (r.outputGuardrails ?? []).map(Cd)), S(this, zt, Od(r.outputGuardrailSettings ?? {})), S(this, Gt, r.historyStoreAudio ?? !1), S(this, Pn, r.automaticallyTriggerResponseForMcpToolCalls ?? !0);
  }
  /**
   * The transport layer used by the session.
   */
  get transport() {
    return u(this, U);
  }
  /**
   * The current agent in the session.
   */
  get currentAgent() {
    return u(this, $);
  }
  /**
   * The current usage of the session.
   */
  get usage() {
    return u(this, F).usage;
  }
  /**
   * The current context of the session.
   */
  get context() {
    return u(this, F);
  }
  /**
   * Whether the session is muted. Might be `null` if the underlying transport layer does not
   * support muting.
   */
  get muted() {
    return u(this, U).muted;
  }
  /**
   * The history of the session.
   */
  get history() {
    return u(this, X);
  }
  get availableMcpTools() {
    return u(this, gt);
  }
  async updateAgent(t) {
    return u(this, $).emit("agent_handoff", u(this, F), t), this.emit("agent_handoff", u(this, F), u(this, $), t), await q(this, Y, Un).call(this, t), await u(this, U).updateSessionConfig(await q(this, Y, Jn).call(this)), t;
  }
  /**
   * Connect to the session. This will establish the connection to the underlying transport layer
   * and start the session.
   *
   * After connecting, the session will also emit a `history_updated` event with an empty history.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    await q(this, Y, Un).call(this, this.initialAgent), q(this, Y, Di).call(this), await u(this, U).connect({
      apiKey: t.apiKey ?? this.options.apiKey,
      model: this.options.model,
      url: t.url,
      initialSessionConfig: await q(this, Y, Jn).call(this, this.options.config)
    }), S(this, X, []), this.emit("history_updated", u(this, X));
  }
  /**
   * Update the history of the session.
   * @param newHistory - The new history to set.
   */
  updateHistory(t) {
    let r;
    typeof t == "function" ? r = t(u(this, X)) : r = t, u(this, U).resetHistory(u(this, X), r);
  }
  /**
   * Send a message to the session.
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r = {}) {
    u(this, U).sendMessage(t, r);
  }
  /**
   * Add image to the session
   * @param image - The image to add.
   */
  addImage(t, { triggerResponse: r = !0 } = {}) {
    u(this, U).addImage(t, { triggerResponse: r });
  }
  /**
   * Mute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    u(this, U).mute(t);
  }
  /**
   * Disconnect from the session.
   */
  close() {
    S(this, Vt, {}), u(this, U).close();
  }
  /**
   * Send audio to the session.
   * @param audio - The audio to send.
   * @param options - Additional options.
   * @param options.commit - Whether to finish the turn with this audio.
   */
  sendAudio(t, r = {}) {
    u(this, U).sendAudio(t, r);
  }
  /**
   * Interrupt the session artificially for example if you want to build a "stop talking"
   * button.
   */
  interrupt() {
    u(this, U).interrupt();
  }
  /**
   * Approve a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to approve.
   * @param options - Additional options.
   * @param options.alwaysApprove - Whether to always approve the tool call.
   */
  async approve(t, r = { alwaysApprove: !1 }) {
    u(this, F).approveTool(t, r);
    const s = u(this, $).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await q(this, Y, qn).call(this, t.rawItem, s);
    else if (t.rawItem.type === "hosted_tool_call") {
      r.alwaysApprove && we.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");
      const a = _a(t);
      u(this, U).sendMcpResponse(a, !0);
    } else
      throw new xe(`Tool ${t.rawItem.name} not found`);
  }
  /**
   * Reject a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to reject.
   * @param options - Additional options.
   * @param options.alwaysReject - Whether to always reject the tool call.
   */
  async reject(t, r = { alwaysReject: !1 }) {
    u(this, F).rejectTool(t, r);
    const s = u(this, $).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await q(this, Y, qn).call(this, t.rawItem, s);
    else if (t.rawItem.type === "hosted_tool_call") {
      r.alwaysReject && we.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");
      const a = _a(t);
      u(this, U).sendMcpResponse(a, !1);
    } else
      throw new xe(`Tool ${t.rawItem.name} not found`);
  }
}
U = new WeakMap(), $ = new WeakMap(), qt = new WeakMap(), F = new WeakMap(), Bt = new WeakMap(), zt = new WeakMap(), Nn = new WeakMap(), X = new WeakMap(), Gt = new WeakMap(), Vt = new WeakMap(), Ce = new WeakMap(), Rn = new WeakMap(), gt = new WeakMap(), Dn = new WeakMap(), Pn = new WeakMap(), Y = new WeakSet(), Un = async function(t) {
  S(this, $, t);
  const r = await u(this, $).getEnabledHandoffs(u(this, F)), s = r.map((l) => l.getHandoffAsFunctionTool()), a = (await u(this, $).getAllTools(u(this, F))).filter(Fl).map(Ll), i = typeof u(this, $).tools < "u" || typeof u(this, $).mcpServers < "u", o = r.length > 0;
  S(this, qt, i || o ? [...a, ...s] : void 0), q(this, Y, Kr).call(this);
}, Jn = async function(t = {}) {
  const r = await u(this, $).getSystemPrompt(u(this, F)), s = this.options.tracingDisabled ? null : this.options.workflowName ? {
    workflow_name: this.options.workflowName
  } : "auto";
  s !== null && s !== "auto" ? (this.options.groupId && (s.group_id = this.options.groupId), this.options.traceMetadata && (s.metadata = this.options.traceMetadata)) : (this.options.groupId || this.options.traceMetadata) && we.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");
  const i = {
    ...{
      ...u(this, Dn) ?? {},
      ...this.options.config ?? {},
      ...t ?? {}
    },
    instructions: r,
    voice: u(this, $).voice,
    model: this.options.model,
    tools: u(this, qt),
    tracing: s,
    prompt: typeof u(this, $).prompt == "function" ? await u(this, $).prompt(u(this, F), u(this, $)) : u(this, $).prompt
  };
  return S(this, Dn, i), i;
}, Ni = async function(t, r) {
  const s = await r.onInvokeHandoff(u(this, F), t.arguments);
  u(this, $).emit("agent_handoff", u(this, F), s), this.emit("agent_handoff", u(this, F), u(this, $), s), await q(this, Y, Un).call(this, s), await u(this, U).updateSessionConfig(await q(this, Y, Jn).call(this));
  const a = Ha(s);
  return u(this, U).sendFunctionCallOutput(t, a, !0), s;
}, qn = async function(t, r) {
  u(this, F).context.history = JSON.parse(JSON.stringify(u(this, X)));
  let s = t.arguments;
  if (r.parameters && (St(r.parameters) ? s = r.parameters.parse(s) : s = JSON.parse(s)), await r.needsApproval(u(this, F), s, t.callId)) {
    const l = this.context.isToolApproved({
      toolName: r.name,
      callId: t.callId
    });
    if (l === !1) {
      this.emit("agent_tool_start", u(this, F), u(this, $), r, {
        toolCall: t
      }), u(this, $).emit("agent_tool_start", u(this, F), r, {
        toolCall: t
      });
      const c = "Tool execution was not approved.";
      u(this, U).sendFunctionCallOutput(t, c, !0), this.emit("agent_tool_end", u(this, F), u(this, $), r, c, { toolCall: t }), u(this, $).emit("agent_tool_end", u(this, F), r, c, {
        toolCall: t
      });
      return;
    } else if (typeof l > "u") {
      this.emit("tool_approval_requested", u(this, F), u(this, $), {
        type: "function_approval",
        tool: r,
        approvalItem: new Se(t, u(this, $))
      });
      return;
    }
  }
  this.emit("agent_tool_start", u(this, F), u(this, $), r, {
    toolCall: t
  }), u(this, $).emit("agent_tool_start", u(this, F), r, {
    toolCall: t
  }), u(this, F).context.history = JSON.parse(JSON.stringify(u(this, X)));
  const i = await r.invoke(u(this, F), t.arguments, {
    toolCall: t
  });
  let o;
  $l(i) ? (o = et(i.content), u(this, U).sendFunctionCallOutput(t, o, !1)) : (o = et(i), u(this, U).sendFunctionCallOutput(t, o, !0)), this.emit("agent_tool_end", u(this, F), u(this, $), r, o, { toolCall: t }), u(this, $).emit("agent_tool_end", u(this, F), r, o, { toolCall: t });
}, Ri = async function(t) {
  const r = await u(this, $).getEnabledHandoffs(u(this, F)), s = new Map(r.map((l) => [l.toolName, l])), a = await u(this, $).getAllTools(u(this, F)), i = new Map(a.map((l) => [l.name, l])), o = s.get(t.name);
  if (o)
    await q(this, Y, Ni).call(this, t, o);
  else {
    const l = i.get(t.name);
    if (l && l.type === "function")
      await q(this, Y, qn).call(this, t, l);
    else
      throw new xe(`Tool ${t.name} not found`);
  }
}, Hr = async function(t, r, s) {
  if (u(this, Bt).length === 0)
    return;
  const a = {
    agent: u(this, $),
    agentOutput: t,
    context: u(this, F)
  }, o = (await Promise.all(u(this, Bt).map((l) => l.run(a)))).find((l) => l.output.tripwireTriggered);
  if (o) {
    if (u(this, Vt)[r])
      return;
    u(this, Vt)[r] = !0;
    const l = new Pr(`Output guardrail triggered: ${JSON.stringify(o.output.outputInfo)}`, o);
    this.emit("guardrail_tripped", u(this, F), u(this, $), l, {
      itemId: s
    }), this.interrupt();
    const c = Ed(o);
    this.sendMessage(c);
    return;
  }
}, Di = function() {
  u(this, U).on("*", (s) => {
    if (this.emit("transport_event", s), s.type === "conversation.item.input_audio_transcription.completed")
      try {
        const a = s;
        S(this, X, ya(u(this, X), a, u(this, Gt))), u(this, F).context.history = u(this, X), this.emit("history_updated", u(this, X));
      } catch (a) {
        this.emit("error", {
          type: "error",
          error: a
        });
      }
  }), u(this, U).on("mcp_tools_listed", ({ serverLabel: s, tools: a }) => {
    try {
      u(this, Rn).set(s, a ?? []), q(this, Y, Kr).call(this);
    } catch (i) {
      this.emit("error", { type: "error", error: i });
    }
  }), u(this, U).on("audio", (s) => {
    u(this, Ce) || (S(this, Ce, !0), this.emit("audio_start", u(this, F), u(this, $))), this.emit("audio", s);
  }), u(this, U).on("turn_started", () => {
    S(this, Ce, !1), this.emit("agent_start", u(this, F), u(this, $)), u(this, $).emit("agent_start", u(this, F), u(this, $));
  }), u(this, U).on("turn_done", (s) => {
    const a = s.response.output[s.response.output.length - 1], i = Ti(a) ?? "", o = (a == null ? void 0 : a.id) ?? "";
    this.emit("agent_end", u(this, F), u(this, $), i), u(this, $).emit("agent_end", u(this, F), i), q(this, Y, Hr).call(this, i, s.response.id, o);
  }), u(this, U).on("audio_done", () => {
    u(this, Ce) && S(this, Ce, !1), this.emit("audio_stopped", u(this, F), u(this, $));
  });
  let t = 0, r;
  u(this, U).on("audio_transcript_delta", (s) => {
    try {
      const a = s.delta, i = s.itemId, o = s.responseId;
      r !== i && (r = i, t = 0);
      const c = (u(this, Nn)[i] ?? "") + a;
      if (u(this, Nn)[i] = c, u(this, zt).debounceTextLength < 0)
        return;
      const p = Math.floor(c.length / u(this, zt).debounceTextLength);
      p > t && (t = p, q(this, Y, Hr).call(this, c, o, i));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, U).on("item_update", (s) => {
    try {
      const a = !u(this, X).some((i) => i.itemId === s.itemId);
      if (S(this, X, ya(u(this, X), s, u(this, Gt))), u(this, F).context.history = u(this, X), a) {
        const i = u(this, X).find((o) => o.itemId === s.itemId);
        i && this.emit("history_added", i);
      }
      this.emit("history_updated", u(this, X));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, U).on("item_deleted", (s) => {
    try {
      S(this, X, u(this, X).filter((a) => a.itemId !== s.itemId)), u(this, F).context.history = u(this, X), this.emit("history_updated", u(this, X));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, U).on("function_call", async (s) => {
    try {
      await q(this, Y, Ri).call(this, s);
    } catch (a) {
      we.error("Error handling function call", a), this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, U).on("usage_update", (s) => {
    u(this, F).usage.add(s);
  }), u(this, U).on("audio_interrupted", () => {
    u(this, Ce) && S(this, Ce, !1), this.emit("audio_interrupted", u(this, F), u(this, $));
  }), u(this, U).on("error", (s) => {
    this.emit("error", s);
  }), u(this, U).on("mcp_tool_call_completed", (s) => {
    this.emit("mcp_tool_call_completed", u(this, F), u(this, $), s), u(this, Pn) && u(this, U).sendEvent({
      type: "response.create"
    });
  }), u(this, U).on("mcp_approval_request", (s) => {
    this.emit("tool_approval_requested", u(this, F), u(this, $), {
      type: "mcp_approval_request",
      approvalItem: Ad(u(this, $), s)
    });
  });
}, /**
 * Recomputes the currently available MCP tools based on the current agent's active
 * MCP server configurations and the cached per-server tool listings. Emits
 * `mcp_tools_changed` if the set changed.
 */
Kr = function() {
  var l;
  const t = (l = u(this, qt)) == null ? void 0 : l.filter((c) => c.type === "mcp"), r = (c) => {
    const p = c.allowed_tools;
    if (p) {
      if (Array.isArray(p))
        return p;
      if (p && Array.isArray(p.tool_names))
        return p.tool_names;
    }
  }, s = /* @__PURE__ */ new Map();
  for (const c of t) {
    const p = u(this, Rn).get(c.server_label) ?? [], f = r(c);
    for (const h of p)
      f && !f.includes(h.name) || s.has(h.name) || s.set(h.name, h);
  }
  const a = Array.from(s.values()), i = u(this, gt);
  (i.length !== a.length || JSON.stringify(i.map((c) => c.name).sort()) !== JSON.stringify(a.map((c) => c.name).sort())) && (S(this, gt, a), this.emit("mcp_tools_changed", u(this, gt)));
};
const Gl = {
  base64ToArrayBuffer: Si,
  arrayBufferToBase64: Ii,
  getLastTextFromAudioOutputMessage: Ti
};
export {
  Dl as DEFAULT_OPENAI_REALTIME_MODEL,
  Ae as DEFAULT_OPENAI_REALTIME_SESSION_CONFIG,
  xe as ModelBehaviorError,
  sr as OpenAIRealtimeBase,
  Pl as OpenAIRealtimeWebRTC,
  jl as OpenAIRealtimeWebSocket,
  Pr as OutputGuardrailTripwireTriggered,
  ql as RealtimeAgent,
  zl as RealtimeSession,
  Q as UserError,
  Bl as backgroundResult,
  $l as isBackgroundResult,
  jr as tool,
  Gl as utils
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
