(function(Z,K){typeof exports=="object"&&typeof module<"u"?K(exports):typeof define=="function"&&define.amd?define(["exports"],K):(Z=typeof globalThis<"u"?globalThis:Z||self,K(Z.OpenAIAgentsRealtime={}))})(this,(function(Z){"use strict";var Bl=Object.defineProperty;var Di=Z=>{throw TypeError(Z)};var ql=(Z,K,ne)=>K in Z?Bl(Z,K,{enumerable:!0,configurable:!0,writable:!0,value:ne}):Z[K]=ne;var v=(Z,K,ne)=>ql(Z,typeof K!="symbol"?K+"":K,ne),os=(Z,K,ne)=>K.has(Z)||Di("Cannot "+ne);var u=(Z,K,ne)=>(os(Z,K,"read from private field"),ne?ne.call(Z):K.get(Z)),O=(Z,K,ne)=>K.has(Z)?Di("Cannot add the same private member more than once"):K instanceof WeakSet?K.add(Z):K.set(Z,ne),S=(Z,K,ne,Ln)=>(os(Z,K,"write to private field"),Ln?Ln.call(Z,ne):K.set(Z,ne),ne),q=(Z,K,ne)=>(os(Z,K,"access private method"),ne);var Zt,wt,ve,Jt,pe,us,cs,ds,Pi,ls,yn,Xe,be,Be,Bt,qt,_n,xt,vn,bn,zt,wn,xn,Gt,fe,qe,Qe,et,Vt,ge,ps,fs,tn,we,Sn,In,Tn,kn,St,tt,nt,It,An,Wt,ze,le,Tt,mr,Mi,kt,On,ye,Cn,En,X,Rn,At,Nn,rt,st,ce,Dn,Ge,Ot,Ct,Ht,Pn,gr,ji,J,F,Kt,L,Yt,Xt,Mn,ee,Qt,en,$e,jn,Et,$n,Fn,Q,yr,_r,$i,vr,Fi,hs,Li,ms;const K={version:"0.2.1"};async function ne(n){try{return[null,await n()]}catch(e){return[e,null]}}function Ln(n){const e=Object.values(n).filter(r=>typeof r=="number");return Object.entries(n).filter(([r,s])=>e.indexOf(+r)===-1).map(([r,s])=>s)}class gs{constructor(){this._map=new Map,this._idmap=new Map}add(e,...t){const r=t[0];if(this._map.set(e,r),r&&typeof r=="object"&&"id"in r){if(this._idmap.has(r.id))throw new Error(`ID ${r.id} already exists in the registry`);this._idmap.set(r.id,e)}return this}clear(){return this._map=new Map,this._idmap=new Map,this}remove(e){const t=this._map.get(e);return t&&typeof t=="object"&&"id"in t&&this._idmap.delete(t.id),this._map.delete(e),this}get(e){const t=e._zod.parent;if(t){const r={...this.get(t)??{}};return delete r.id,{...r,...this._map.get(e)}}return this._map.get(e)}has(e){return this._map.has(e)}}function Zi(){return new gs}const Ui=Zi();class ys{constructor(e){this.counter=0,this.metadataRegistry=(e==null?void 0:e.metadata)??Ui,this.target=(e==null?void 0:e.target)??"draft-2020-12",this.unrepresentable=(e==null?void 0:e.unrepresentable)??"throw",this.override=(e==null?void 0:e.override)??(()=>{}),this.io=(e==null?void 0:e.io)??"output",this.seen=new Map}process(e,t={path:[],schemaPath:[]}){var f,h,w;var r;const s=e._zod.def,a={guid:"uuid",url:"uri",datetime:"date-time",json_string:"json-string",regex:""},i=this.seen.get(e);if(i)return i.count++,t.schemaPath.includes(e)&&(i.cycle=t.path),i.schema;const o={schema:{},count:1,cycle:void 0,path:t.path};this.seen.set(e,o);const l=(h=(f=e._zod).toJSONSchema)==null?void 0:h.call(f);if(l)o.schema=l;else{const g={...t,schemaPath:[...t.schemaPath,e],path:t.path},x=e._zod.parent;if(x)o.ref=x,this.process(x,g),this.seen.get(x).isParent=!0;else{const b=o.schema;switch(s.type){case"string":{const m=b;m.type="string";const{minimum:I,maximum:A,format:P,patterns:R,contentEncoding:j}=e._zod.bag;if(typeof I=="number"&&(m.minLength=I),typeof A=="number"&&(m.maxLength=A),P&&(m.format=a[P]??P,m.format===""&&delete m.format),j&&(m.contentEncoding=j),R&&R.size>0){const B=[...R];B.length===1?m.pattern=B[0].source:B.length>1&&(o.schema.allOf=[...B.map(oe=>({...this.target==="draft-7"?{type:"string"}:{},pattern:oe.source}))])}break}case"number":{const m=b,{minimum:I,maximum:A,format:P,multipleOf:R,exclusiveMaximum:j,exclusiveMinimum:B}=e._zod.bag;typeof P=="string"&&P.includes("int")?m.type="integer":m.type="number",typeof B=="number"&&(m.exclusiveMinimum=B),typeof I=="number"&&(m.minimum=I,typeof B=="number"&&(B>=I?delete m.minimum:delete m.exclusiveMinimum)),typeof j=="number"&&(m.exclusiveMaximum=j),typeof A=="number"&&(m.maximum=A,typeof j=="number"&&(j<=A?delete m.maximum:delete m.exclusiveMaximum)),typeof R=="number"&&(m.multipleOf=R);break}case"boolean":{const m=b;m.type="boolean";break}case"bigint":{if(this.unrepresentable==="throw")throw new Error("BigInt cannot be represented in JSON Schema");break}case"symbol":{if(this.unrepresentable==="throw")throw new Error("Symbols cannot be represented in JSON Schema");break}case"null":{b.type="null";break}case"any":break;case"unknown":break;case"undefined":{if(this.unrepresentable==="throw")throw new Error("Undefined cannot be represented in JSON Schema");break}case"void":{if(this.unrepresentable==="throw")throw new Error("Void cannot be represented in JSON Schema");break}case"never":{b.not={};break}case"date":{if(this.unrepresentable==="throw")throw new Error("Date cannot be represented in JSON Schema");break}case"array":{const m=b,{minimum:I,maximum:A}=e._zod.bag;typeof I=="number"&&(m.minItems=I),typeof A=="number"&&(m.maxItems=A),m.type="array",m.items=this.process(s.element,{...g,path:[...g.path,"items"]});break}case"object":{const m=b;m.type="object",m.properties={};const I=s.shape;for(const R in I)m.properties[R]=this.process(I[R],{...g,path:[...g.path,"properties",R]});const A=new Set(Object.keys(I)),P=new Set([...A].filter(R=>{const j=s.shape[R]._zod;return this.io==="input"?j.optin===void 0:j.optout===void 0}));P.size>0&&(m.required=Array.from(P)),((w=s.catchall)==null?void 0:w._zod.def.type)==="never"?m.additionalProperties=!1:s.catchall?s.catchall&&(m.additionalProperties=this.process(s.catchall,{...g,path:[...g.path,"additionalProperties"]})):this.io==="output"&&(m.additionalProperties=!1);break}case"union":{const m=b;m.anyOf=s.options.map((I,A)=>this.process(I,{...g,path:[...g.path,"anyOf",A]}));break}case"intersection":{const m=b,I=this.process(s.left,{...g,path:[...g.path,"allOf",0]}),A=this.process(s.right,{...g,path:[...g.path,"allOf",1]}),P=j=>"allOf"in j&&Object.keys(j).length===1,R=[...P(I)?I.allOf:[I],...P(A)?A.allOf:[A]];m.allOf=R;break}case"tuple":{const m=b;m.type="array";const I=s.items.map((R,j)=>this.process(R,{...g,path:[...g.path,"prefixItems",j]}));if(this.target==="draft-2020-12"?m.prefixItems=I:m.items=I,s.rest){const R=this.process(s.rest,{...g,path:[...g.path,"items"]});this.target==="draft-2020-12"?m.items=R:m.additionalItems=R}s.rest&&(m.items=this.process(s.rest,{...g,path:[...g.path,"items"]}));const{minimum:A,maximum:P}=e._zod.bag;typeof A=="number"&&(m.minItems=A),typeof P=="number"&&(m.maxItems=P);break}case"record":{const m=b;m.type="object",m.propertyNames=this.process(s.keyType,{...g,path:[...g.path,"propertyNames"]}),m.additionalProperties=this.process(s.valueType,{...g,path:[...g.path,"additionalProperties"]});break}case"map":{if(this.unrepresentable==="throw")throw new Error("Map cannot be represented in JSON Schema");break}case"set":{if(this.unrepresentable==="throw")throw new Error("Set cannot be represented in JSON Schema");break}case"enum":{const m=b,I=Ln(s.entries);I.every(A=>typeof A=="number")&&(m.type="number"),I.every(A=>typeof A=="string")&&(m.type="string"),m.enum=I;break}case"literal":{const m=b,I=[];for(const A of s.values)if(A===void 0){if(this.unrepresentable==="throw")throw new Error("Literal `undefined` cannot be represented in JSON Schema")}else if(typeof A=="bigint"){if(this.unrepresentable==="throw")throw new Error("BigInt literals cannot be represented in JSON Schema");I.push(Number(A))}else I.push(A);if(I.length!==0)if(I.length===1){const A=I[0];m.type=A===null?"null":typeof A,m.const=A}else I.every(A=>typeof A=="number")&&(m.type="number"),I.every(A=>typeof A=="string")&&(m.type="string"),I.every(A=>typeof A=="boolean")&&(m.type="string"),I.every(A=>A===null)&&(m.type="null"),m.enum=I;break}case"file":{const m=b,I={type:"string",format:"binary",contentEncoding:"binary"},{minimum:A,maximum:P,mime:R}=e._zod.bag;A!==void 0&&(I.minLength=A),P!==void 0&&(I.maxLength=P),R?R.length===1?(I.contentMediaType=R[0],Object.assign(m,I)):m.anyOf=R.map(j=>({...I,contentMediaType:j})):Object.assign(m,I);break}case"transform":{if(this.unrepresentable==="throw")throw new Error("Transforms cannot be represented in JSON Schema");break}case"nullable":{const m=this.process(s.innerType,g);b.anyOf=[m,{type:"null"}];break}case"nonoptional":{this.process(s.innerType,g),o.ref=s.innerType;break}case"success":{const m=b;m.type="boolean";break}case"default":{this.process(s.innerType,g),o.ref=s.innerType,b.default=JSON.parse(JSON.stringify(s.defaultValue));break}case"prefault":{this.process(s.innerType,g),o.ref=s.innerType,this.io==="input"&&(b._prefault=JSON.parse(JSON.stringify(s.defaultValue)));break}case"catch":{this.process(s.innerType,g),o.ref=s.innerType;let m;try{m=s.catchValue(void 0)}catch{throw new Error("Dynamic catch values are not supported in JSON Schema")}b.default=m;break}case"nan":{if(this.unrepresentable==="throw")throw new Error("NaN cannot be represented in JSON Schema");break}case"template_literal":{const m=b,I=e._zod.pattern;if(!I)throw new Error("Pattern not found in template literal");m.type="string",m.pattern=I.source;break}case"pipe":{const m=this.io==="input"?s.in._zod.def.type==="transform"?s.out:s.in:s.out;this.process(m,g),o.ref=m;break}case"readonly":{this.process(s.innerType,g),o.ref=s.innerType,b.readOnly=!0;break}case"promise":{this.process(s.innerType,g),o.ref=s.innerType;break}case"optional":{this.process(s.innerType,g),o.ref=s.innerType;break}case"lazy":{const m=e._zod.innerType;this.process(m,g),o.ref=m;break}case"custom":{if(this.unrepresentable==="throw")throw new Error("Custom types cannot be represented in JSON Schema");break}}}}const c=this.metadataRegistry.get(e);return c&&Object.assign(o.schema,c),this.io==="input"&&ae(e)&&(delete o.schema.examples,delete o.schema.default),this.io==="input"&&o.schema._prefault&&((r=o.schema).default??(r.default=o.schema._prefault)),delete o.schema._prefault,this.seen.get(e).schema}emit(e,t){var p,f,h,w,g,x;const r={cycles:(t==null?void 0:t.cycles)??"ref",reused:(t==null?void 0:t.reused)??"inline",external:(t==null?void 0:t.external)??void 0},s=this.seen.get(e);if(!s)throw new Error("Unprocessed schema. This is a bug in Zod.");const a=b=>{var R;const m=this.target==="draft-2020-12"?"$defs":"definitions";if(r.external){const j=(R=r.external.registry.get(b[0]))==null?void 0:R.id,B=r.external.uri??(xe=>xe);if(j)return{ref:B(j)};const oe=b[1].defId??b[1].schema.id??`schema${this.counter++}`;return b[1].defId=oe,{defId:oe,ref:`${B("__shared")}#/${m}/${oe}`}}if(b[1]===s)return{ref:"#"};const A=`#/${m}/`,P=b[1].schema.id??`__schema${this.counter++}`;return{defId:P,ref:A+P}},i=b=>{if(b[1].schema.$ref)return;const m=b[1],{ref:I,defId:A}=a(b);m.def={...m.schema},A&&(m.defId=A);const P=m.schema;for(const R in P)delete P[R];P.$ref=I};if(r.cycles==="throw")for(const b of this.seen.entries()){const m=b[1];if(m.cycle)throw new Error(`Cycle detected: #/${(p=m.cycle)==null?void 0:p.join("/")}/<root>

Set the \`cycles\` parameter to \`"ref"\` to resolve cyclical schemas with defs.`)}for(const b of this.seen.entries()){const m=b[1];if(e===b[0]){i(b);continue}if(r.external){const A=(f=r.external.registry.get(b[0]))==null?void 0:f.id;if(e!==b[0]&&A){i(b);continue}}if((h=this.metadataRegistry.get(b[0]))==null?void 0:h.id){i(b);continue}if(m.cycle){i(b);continue}if(m.count>1&&r.reused==="ref"){i(b);continue}}const o=(b,m)=>{const I=this.seen.get(b),A=I.def??I.schema,P={...A};if(I.ref===null)return;const R=I.ref;if(I.ref=null,R){o(R,m);const j=this.seen.get(R).schema;j.$ref&&m.target==="draft-7"?(A.allOf=A.allOf??[],A.allOf.push(j)):(Object.assign(A,j),Object.assign(A,P))}I.isParent||this.override({zodSchema:b,jsonSchema:A,path:I.path??[]})};for(const b of[...this.seen.entries()].reverse())o(b[0],{target:this.target});const l={};if(this.target==="draft-2020-12"?l.$schema="https://json-schema.org/draft/2020-12/schema":this.target==="draft-7"?l.$schema="http://json-schema.org/draft-07/schema#":console.warn(`Invalid target: ${this.target}`),(w=r.external)!=null&&w.uri){const b=(g=r.external.registry.get(e))==null?void 0:g.id;if(!b)throw new Error("Schema is missing an `id` property");l.$id=r.external.uri(b)}Object.assign(l,s.def);const c=((x=r.external)==null?void 0:x.defs)??{};for(const b of this.seen.entries()){const m=b[1];m.def&&m.defId&&(c[m.defId]=m.def)}r.external||Object.keys(c).length>0&&(this.target==="draft-2020-12"?l.$defs=c:l.definitions=c);try{return JSON.parse(JSON.stringify(l))}catch{throw new Error("Error converting schema to JSON.")}}}function Ji(n,e){if(n instanceof gs){const r=new ys(e),s={};for(const o of n._idmap.entries()){const[l,c]=o;r.process(c)}const a={},i={registry:n,uri:e==null?void 0:e.uri,defs:s};for(const o of n._idmap.entries()){const[l,c]=o;a[l]=r.emit(c,{...e,external:i})}if(Object.keys(s).length>0){const o=r.target==="draft-2020-12"?"$defs":"definitions";a.__shared={[o]:s}}return{schemas:a}}const t=new ys(e);return t.process(n),t.emit(n,e)}function ae(n,e){const t=e??{seen:new Set};if(t.seen.has(n))return!1;t.seen.add(n);const s=n._zod.def;switch(s.type){case"string":case"number":case"bigint":case"boolean":case"date":case"symbol":case"undefined":case"null":case"any":case"unknown":case"never":case"void":case"literal":case"enum":case"nan":case"file":case"template_literal":return!1;case"array":return ae(s.element,t);case"object":{for(const a in s.shape)if(ae(s.shape[a],t))return!0;return!1}case"union":{for(const a of s.options)if(ae(a,t))return!0;return!1}case"intersection":return ae(s.left,t)||ae(s.right,t);case"tuple":{for(const a of s.items)if(ae(a,t))return!0;return!!(s.rest&&ae(s.rest,t))}case"record":return ae(s.keyType,t)||ae(s.valueType,t);case"map":return ae(s.keyType,t)||ae(s.valueType,t);case"set":return ae(s.valueType,t);case"promise":case"optional":case"nonoptional":case"nullable":case"readonly":return ae(s.innerType,t);case"lazy":return ae(s.getter(),t);case"default":return ae(s.innerType,t);case"prefault":return ae(s.innerType,t);case"custom":return!1;case"transform":return!0;case"pipe":return ae(s.in,t)||ae(s.out,t);case"success":return!1;case"catch":return!1}throw new Error(`Unknown schema type: ${s.type}`)}function Bi(n,e){const t={...n};return Object.defineProperties(t,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),t}const qi=Symbol("Let zodToJsonSchema decide on which parser to use"),_s={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},zi=n=>typeof n=="string"?{..._s,basePath:["#"],definitions:{},name:n}:{..._s,basePath:["#"],definitions:{},...n},br=n=>"_def"in n?n._def:n;function Gi(n){if(!n)return!0;for(const e in n)return!1;return!0}const Vi=n=>{const e=zi(n),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:t,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[br(s),{def:br(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function vs(n,e,t,r){r!=null&&r.errorMessages&&t&&(n.errorMessage={...n.errorMessage,[e]:t})}function Y(n,e,t,r,s){n[e]=t,vs(n,e,r,s)}var W;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(W||(W={}));var bs;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(bs||(bs={}));const E=W.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Ve=n=>{switch(typeof n){case"undefined":return E.undefined;case"string":return E.string;case"number":return Number.isNaN(n)?E.nan:E.number;case"boolean":return E.boolean;case"function":return E.function;case"bigint":return E.bigint;case"symbol":return E.symbol;case"object":return Array.isArray(n)?E.array:n===null?E.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?E.promise:typeof Map<"u"&&n instanceof Map?E.map:typeof Set<"u"&&n instanceof Set?E.set:typeof Date<"u"&&n instanceof Date?E.date:E.object;default:return E.unknown}},T=W.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class Fe extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let o=r,l=0;for(;l<i.path.length;){const c=i.path[l];l===i.path.length-1?(o[c]=o[c]||{_errors:[]},o[c]._errors.push(t(i))):o[c]=o[c]||{_errors:[]},o=o[c],l++}}};return s(this),r}static assert(e){if(!(e instanceof Fe))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,W.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)if(s.path.length>0){const a=s.path[0];t[a]=t[a]||[],t[a].push(e(s))}else r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}Fe.create=n=>new Fe(n);const wr=(n,e)=>{let t;switch(n.code){case T.invalid_type:n.received===E.undefined?t="Required":t=`Expected ${n.expected}, received ${n.received}`;break;case T.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(n.expected,W.jsonStringifyReplacer)}`;break;case T.unrecognized_keys:t=`Unrecognized key(s) in object: ${W.joinValues(n.keys,", ")}`;break;case T.invalid_union:t="Invalid input";break;case T.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${W.joinValues(n.options)}`;break;case T.invalid_enum_value:t=`Invalid enum value. Expected ${W.joinValues(n.options)}, received '${n.received}'`;break;case T.invalid_arguments:t="Invalid function arguments";break;case T.invalid_return_type:t="Invalid function return type";break;case T.invalid_date:t="Invalid date";break;case T.invalid_string:typeof n.validation=="object"?"includes"in n.validation?(t=`Invalid input: must include "${n.validation.includes}"`,typeof n.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${n.validation.position}`)):"startsWith"in n.validation?t=`Invalid input: must start with "${n.validation.startsWith}"`:"endsWith"in n.validation?t=`Invalid input: must end with "${n.validation.endsWith}"`:W.assertNever(n.validation):n.validation!=="regex"?t=`Invalid ${n.validation}`:t="Invalid";break;case T.too_small:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at least":"more than"} ${n.minimum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at least":"over"} ${n.minimum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="bigint"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(n.minimum))}`:t="Invalid input";break;case T.too_big:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at most":"less than"} ${n.maximum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at most":"under"} ${n.maximum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="bigint"?t=`BigInt must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly":n.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(n.maximum))}`:t="Invalid input";break;case T.custom:t="Invalid input";break;case T.invalid_intersection_types:t="Intersection results could not be merged";break;case T.not_multiple_of:t=`Number must be a multiple of ${n.multipleOf}`;break;case T.not_finite:t="Number must be finite";break;default:t=e.defaultError,W.assertNever(n)}return{message:t}};let Wi=wr;function Hi(){return Wi}const Ki=n=>{const{data:e,path:t,errorMaps:r,issueData:s}=n,a=[...t,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let o="";const l=r.filter(c=>!!c).slice().reverse();for(const c of l)o=c(i,{data:e,defaultError:o}).message;return{...s,path:a,message:o}};function C(n,e){const t=Hi(),r=Ki({issueData:e,data:n.data,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,t,t===wr?void 0:wr].filter(s=>!!s)});n.common.issues.push(r)}class he{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const r=[];for(const s of t){if(s.status==="aborted")return $;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const s of t){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return he.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const s of t){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return $;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const $=Object.freeze({status:"aborted"}),nn=n=>({status:"dirty",value:n}),Se=n=>({status:"valid",value:n}),ws=n=>n.status==="aborted",xs=n=>n.status==="dirty",Rt=n=>n.status==="valid",Zn=n=>typeof Promise<"u"&&n instanceof Promise;var D;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(D||(D={}));class Re{constructor(e,t,r,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=s}get path(){return this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const Ss=(n,e)=>{if(Rt(e))return{success:!0,data:e.value};if(!n.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Fe(n.common.issues);return this._error=t,this._error}}};function U(n){if(!n)return{};const{errorMap:e,invalid_type_error:t,required_error:r,description:s}=n;if(e&&(t||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,o)=>{const{message:l}=n;return i.code==="invalid_enum_value"?{message:l??o.defaultError}:typeof o.data>"u"?{message:l??r??o.defaultError}:i.code!=="invalid_type"?{message:o.defaultError}:{message:l??t??o.defaultError}},description:s}}class z{get description(){return this._def.description}_getType(e){return Ve(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:Ve(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new he,ctx:{common:e.parent.common,data:e.data,parsedType:Ve(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(Zn(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){const r={common:{issues:[],async:(t==null?void 0:t.async)??!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ve(e)},s=this._parseSync({data:e,path:r.path,parent:r});return Ss(r,s)}"~validate"(e){var r,s;const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ve(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:t});return Rt(a)?{value:a.value}:{issues:t.common.issues}}catch(a){(s=(r=a==null?void 0:a.message)==null?void 0:r.toLowerCase())!=null&&s.includes("encountered")&&(this["~standard"].async=!0),t.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:t}).then(a=>Rt(a)?{value:a.value}:{issues:t.common.issues})}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ve(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(Zn(s)?s:Promise.resolve(s));return Ss(r,a)}refine(e,t){const r=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{const i=e(s),o=()=>a.addIssue({code:T.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(l=>l?!0:(o(),!1)):i?!0:(o(),!1)})}refinement(e,t){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof t=="function"?t(r,s):t),!1))}_refinement(e){return new ot({schema:this,typeName:k.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return Ue.create(this,this._def)}nullable(){return ut.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return Ne.create(this)}promise(){return Vn.create(this,this._def)}or(e){return Jn.create([this,e],this._def)}and(e){return Bn.create(this,e,this._def)}transform(e){return new ot({...U(this._def),schema:this,typeName:k.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new Wn({...U(this._def),innerType:this,defaultValue:t,typeName:k.ZodDefault})}brand(){return new Ns({typeName:k.ZodBranded,type:this,...U(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new Hn({...U(this._def),innerType:this,catchValue:t,typeName:k.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return Cr.create(this,e)}readonly(){return Kn.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const Yi=/^c[^\s-]{8,}$/i,Xi=/^[0-9a-z]+$/,Qi=/^[0-9A-HJKMNP-TV-Z]{26}$/i,eo=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,to=/^[a-z0-9_-]{21}$/i,no=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,ro=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,so=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,ao="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let xr;const io=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,oo=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,uo=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,co=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,lo=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,po=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,Is="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",fo=new RegExp(`^${Is}$`);function Ts(n){let e="[0-5]\\d";n.precision?e=`${e}\\.\\d{${n.precision}}`:n.precision==null&&(e=`${e}(\\.\\d+)?`);const t=n.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function ho(n){return new RegExp(`^${Ts(n)}$`)}function mo(n){let e=`${Is}T${Ts(n)}`;const t=[];return t.push(n.local?"Z?":"Z"),n.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function go(n,e){return!!((e==="v4"||!e)&&io.test(n)||(e==="v6"||!e)&&uo.test(n))}function yo(n,e){if(!no.test(n))return!1;try{const[t]=n.split(".");if(!t)return!1;const r=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||"typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||e&&s.alg!==e)}catch{return!1}}function _o(n,e){return!!((e==="v4"||!e)&&oo.test(n)||(e==="v6"||!e)&&co.test(n))}class Le extends z{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==E.string){const a=this._getOrReturnCtx(e);return C(a,{code:T.invalid_type,expected:E.string,received:a.parsedType}),$}const r=new he;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),C(s,{code:T.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),C(s,{code:T.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,o=e.data.length<a.value;(i||o)&&(s=this._getOrReturnCtx(e,s),i?C(s,{code:T.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):o&&C(s,{code:T.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")so.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"email",code:T.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")xr||(xr=new RegExp(ao,"u")),xr.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"emoji",code:T.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")eo.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"uuid",code:T.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")to.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"nanoid",code:T.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")Yi.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"cuid",code:T.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")Xi.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"cuid2",code:T.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")Qi.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"ulid",code:T.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),C(s,{validation:"url",code:T.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"regex",code:T.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),C(s,{code:T.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),C(s,{code:T.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),C(s,{code:T.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?mo(a).test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{code:T.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?fo.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{code:T.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?ho(a).test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{code:T.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?ro.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"duration",code:T.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?go(e.data,a.version)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"ip",code:T.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?yo(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"jwt",code:T.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?_o(e.data,a.version)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"cidr",code:T.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?lo.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"base64",code:T.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?po.test(e.data)||(s=this._getOrReturnCtx(e,s),C(s,{validation:"base64url",code:T.invalid_string,message:a.message}),r.dirty()):W.assertNever(a);return{status:r.value,value:e.data}}_regex(e,t,r){return this.refinement(s=>e.test(s),{validation:t,code:T.invalid_string,...D.errToObj(r)})}_addCheck(e){return new Le({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...D.errToObj(e)})}url(e){return this._addCheck({kind:"url",...D.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...D.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...D.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...D.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...D.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...D.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...D.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...D.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...D.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...D.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...D.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...D.errToObj(e)})}datetime(e){return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(e==null?void 0:e.offset)??!1,local:(e==null?void 0:e.local)??!1,...D.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...D.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...D.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...D.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...D.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...D.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...D.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...D.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...D.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...D.errToObj(t)})}nonempty(e){return this.min(1,D.errToObj(e))}trim(){return new Le({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new Le({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new Le({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Le.create=n=>new Le({checks:[],typeName:k.ZodString,coerce:(n==null?void 0:n.coerce)??!1,...U(n)});function vo(n,e){const t=(n.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=t>r?t:r,a=Number.parseInt(n.toFixed(s).replace(".","")),i=Number.parseInt(e.toFixed(s).replace(".",""));return a%i/10**s}class Nt extends z{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==E.number){const a=this._getOrReturnCtx(e);return C(a,{code:T.invalid_type,expected:E.number,received:a.parsedType}),$}let r;const s=new he;for(const a of this._def.checks)a.kind==="int"?W.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),C(r,{code:T.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),C(r,{code:T.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),C(r,{code:T.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?vo(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),C(r,{code:T.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),C(r,{code:T.not_finite,message:a.message}),s.dirty()):W.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,D.toString(t))}gt(e,t){return this.setLimit("min",e,!1,D.toString(t))}lte(e,t){return this.setLimit("max",e,!0,D.toString(t))}lt(e,t){return this.setLimit("max",e,!1,D.toString(t))}setLimit(e,t,r,s){return new Nt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:D.toString(s)}]})}_addCheck(e){return new Nt({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:D.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:D.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:D.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:D.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:D.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:D.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:D.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:D.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:D.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&W.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(t===null||r.value>t)&&(t=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}Nt.create=n=>new Nt({checks:[],typeName:k.ZodNumber,coerce:(n==null?void 0:n.coerce)||!1,...U(n)});class rn extends z{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==E.bigint)return this._getInvalidInput(e);let r;const s=new he;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),C(r,{code:T.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),C(r,{code:T.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),C(r,{code:T.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):W.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return C(t,{code:T.invalid_type,expected:E.bigint,received:t.parsedType}),$}gte(e,t){return this.setLimit("min",e,!0,D.toString(t))}gt(e,t){return this.setLimit("min",e,!1,D.toString(t))}lte(e,t){return this.setLimit("max",e,!0,D.toString(t))}lt(e,t){return this.setLimit("max",e,!1,D.toString(t))}setLimit(e,t,r,s){return new rn({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:D.toString(s)}]})}_addCheck(e){return new rn({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:D.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:D.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:D.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:D.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:D.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}rn.create=n=>new rn({checks:[],typeName:k.ZodBigInt,coerce:(n==null?void 0:n.coerce)??!1,...U(n)});class Sr extends z{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==E.boolean){const r=this._getOrReturnCtx(e);return C(r,{code:T.invalid_type,expected:E.boolean,received:r.parsedType}),$}return Se(e.data)}}Sr.create=n=>new Sr({typeName:k.ZodBoolean,coerce:(n==null?void 0:n.coerce)||!1,...U(n)});class Un extends z{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==E.date){const a=this._getOrReturnCtx(e);return C(a,{code:T.invalid_type,expected:E.date,received:a.parsedType}),$}if(Number.isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return C(a,{code:T.invalid_date}),$}const r=new he;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),C(s,{code:T.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),C(s,{code:T.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):W.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new Un({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:D.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:D.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}Un.create=n=>new Un({checks:[],coerce:(n==null?void 0:n.coerce)||!1,typeName:k.ZodDate,...U(n)});class ks extends z{_parse(e){if(this._getType(e)!==E.symbol){const r=this._getOrReturnCtx(e);return C(r,{code:T.invalid_type,expected:E.symbol,received:r.parsedType}),$}return Se(e.data)}}ks.create=n=>new ks({typeName:k.ZodSymbol,...U(n)});class Ir extends z{_parse(e){if(this._getType(e)!==E.undefined){const r=this._getOrReturnCtx(e);return C(r,{code:T.invalid_type,expected:E.undefined,received:r.parsedType}),$}return Se(e.data)}}Ir.create=n=>new Ir({typeName:k.ZodUndefined,...U(n)});class Tr extends z{_parse(e){if(this._getType(e)!==E.null){const r=this._getOrReturnCtx(e);return C(r,{code:T.invalid_type,expected:E.null,received:r.parsedType}),$}return Se(e.data)}}Tr.create=n=>new Tr({typeName:k.ZodNull,...U(n)});class sn extends z{constructor(){super(...arguments),this._any=!0}_parse(e){return Se(e.data)}}sn.create=n=>new sn({typeName:k.ZodAny,...U(n)});class As extends z{constructor(){super(...arguments),this._unknown=!0}_parse(e){return Se(e.data)}}As.create=n=>new As({typeName:k.ZodUnknown,...U(n)});class We extends z{_parse(e){const t=this._getOrReturnCtx(e);return C(t,{code:T.invalid_type,expected:E.never,received:t.parsedType}),$}}We.create=n=>new We({typeName:k.ZodNever,...U(n)});class Os extends z{_parse(e){if(this._getType(e)!==E.undefined){const r=this._getOrReturnCtx(e);return C(r,{code:T.invalid_type,expected:E.void,received:r.parsedType}),$}return Se(e.data)}}Os.create=n=>new Os({typeName:k.ZodVoid,...U(n)});class Ne extends z{_parse(e){const{ctx:t,status:r}=this._processInputParams(e),s=this._def;if(t.parsedType!==E.array)return C(t,{code:T.invalid_type,expected:E.array,received:t.parsedType}),$;if(s.exactLength!==null){const i=t.data.length>s.exactLength.value,o=t.data.length<s.exactLength.value;(i||o)&&(C(t,{code:i?T.too_big:T.too_small,minimum:o?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(C(t,{code:T.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(C(t,{code:T.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map((i,o)=>s.type._parseAsync(new Re(t,i,t.path,o)))).then(i=>he.mergeArray(r,i));const a=[...t.data].map((i,o)=>s.type._parseSync(new Re(t,i,t.path,o)));return he.mergeArray(r,a)}get element(){return this._def.type}min(e,t){return new Ne({...this._def,minLength:{value:e,message:D.toString(t)}})}max(e,t){return new Ne({...this._def,maxLength:{value:e,message:D.toString(t)}})}length(e,t){return new Ne({...this._def,exactLength:{value:e,message:D.toString(t)}})}nonempty(e){return this.min(1,e)}}Ne.create=(n,e)=>new Ne({type:n,minLength:null,maxLength:null,exactLength:null,typeName:k.ZodArray,...U(e)});function Dt(n){if(n instanceof re){const e={};for(const t in n.shape){const r=n.shape[t];e[t]=Ue.create(Dt(r))}return new re({...n._def,shape:()=>e})}else return n instanceof Ne?new Ne({...n._def,type:Dt(n.element)}):n instanceof Ue?Ue.create(Dt(n.unwrap())):n instanceof ut?ut.create(Dt(n.unwrap())):n instanceof at?at.create(n.items.map(e=>Dt(e))):n}class re extends z{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=W.objectKeys(e);return this._cached={shape:e,keys:t},this._cached}_parse(e){if(this._getType(e)!==E.object){const c=this._getOrReturnCtx(e);return C(c,{code:T.invalid_type,expected:E.object,received:c.parsedType}),$}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),o=[];if(!(this._def.catchall instanceof We&&this._def.unknownKeys==="strip"))for(const c in s.data)i.includes(c)||o.push(c);const l=[];for(const c of i){const p=a[c],f=s.data[c];l.push({key:{status:"valid",value:c},value:p._parse(new Re(s,f,s.path,c)),alwaysSet:c in s.data})}if(this._def.catchall instanceof We){const c=this._def.unknownKeys;if(c==="passthrough")for(const p of o)l.push({key:{status:"valid",value:p},value:{status:"valid",value:s.data[p]}});else if(c==="strict")o.length>0&&(C(s,{code:T.unrecognized_keys,keys:o}),r.dirty());else if(c!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const c=this._def.catchall;for(const p of o){const f=s.data[p];l.push({key:{status:"valid",value:p},value:c._parse(new Re(s,f,s.path,p)),alwaysSet:p in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const c=[];for(const p of l){const f=await p.key,h=await p.value;c.push({key:f,value:h,alwaysSet:p.alwaysSet})}return c}).then(c=>he.mergeObjectSync(r,c)):he.mergeObjectSync(r,l)}get shape(){return this._def.shape()}strict(e){return D.errToObj,new re({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,r)=>{var a,i;const s=((i=(a=this._def).errorMap)==null?void 0:i.call(a,t,r).message)??r.defaultError;return t.code==="unrecognized_keys"?{message:D.errToObj(e).message??s}:{message:s}}}:{}})}strip(){return new re({...this._def,unknownKeys:"strip"})}passthrough(){return new re({...this._def,unknownKeys:"passthrough"})}extend(e){return new re({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new re({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:k.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new re({...this._def,catchall:e})}pick(e){const t={};for(const r of W.objectKeys(e))e[r]&&this.shape[r]&&(t[r]=this.shape[r]);return new re({...this._def,shape:()=>t})}omit(e){const t={};for(const r of W.objectKeys(this.shape))e[r]||(t[r]=this.shape[r]);return new re({...this._def,shape:()=>t})}deepPartial(){return Dt(this)}partial(e){const t={};for(const r of W.objectKeys(this.shape)){const s=this.shape[r];e&&!e[r]?t[r]=s:t[r]=s.optional()}return new re({...this._def,shape:()=>t})}required(e){const t={};for(const r of W.objectKeys(this.shape))if(e&&!e[r])t[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof Ue;)a=a._def.innerType;t[r]=a}return new re({...this._def,shape:()=>t})}keyof(){return Es(W.objectKeys(this.shape))}}re.create=(n,e)=>new re({shape:()=>n,unknownKeys:"strip",catchall:We.create(),typeName:k.ZodObject,...U(e)}),re.strictCreate=(n,e)=>new re({shape:()=>n,unknownKeys:"strict",catchall:We.create(),typeName:k.ZodObject,...U(e)}),re.lazycreate=(n,e)=>new re({shape:n,unknownKeys:"strip",catchall:We.create(),typeName:k.ZodObject,...U(e)});class Jn extends z{_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;function s(a){for(const o of a)if(o.result.status==="valid")return o.result;for(const o of a)if(o.result.status==="dirty")return t.common.issues.push(...o.ctx.common.issues),o.result;const i=a.map(o=>new Fe(o.ctx.common.issues));return C(t,{code:T.invalid_union,unionErrors:i}),$}if(t.common.async)return Promise.all(r.map(async a=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const l of r){const c={...t,common:{...t.common,issues:[]},parent:null},p=l._parseSync({data:t.data,path:t.path,parent:c});if(p.status==="valid")return p;p.status==="dirty"&&!a&&(a={result:p,ctx:c}),c.common.issues.length&&i.push(c.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;const o=i.map(l=>new Fe(l));return C(t,{code:T.invalid_union,unionErrors:o}),$}}get options(){return this._def.options}}Jn.create=(n,e)=>new Jn({options:n,typeName:k.ZodUnion,...U(e)});const Ze=n=>n instanceof zn?Ze(n.schema):n instanceof ot?Ze(n.innerType()):n instanceof Gn?[n.value]:n instanceof it?n.options:n instanceof Or?W.objectValues(n.enum):n instanceof Wn?Ze(n._def.innerType):n instanceof Ir?[void 0]:n instanceof Tr?[null]:n instanceof Ue?[void 0,...Ze(n.unwrap())]:n instanceof ut?[null,...Ze(n.unwrap())]:n instanceof Ns||n instanceof Kn?Ze(n.unwrap()):n instanceof Hn?Ze(n._def.innerType):[];class kr extends z{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==E.object)return C(t,{code:T.invalid_type,expected:E.object,received:t.parsedType}),$;const r=this.discriminator,s=t.data[r],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(C(t,{code:T.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),$)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const s=new Map;for(const a of t){const i=Ze(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const o of i){if(s.has(o))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);s.set(o,a)}}return new kr({typeName:k.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...U(r)})}}function Ar(n,e){const t=Ve(n),r=Ve(e);if(n===e)return{valid:!0,data:n};if(t===E.object&&r===E.object){const s=W.objectKeys(e),a=W.objectKeys(n).filter(o=>s.indexOf(o)!==-1),i={...n,...e};for(const o of a){const l=Ar(n[o],e[o]);if(!l.valid)return{valid:!1};i[o]=l.data}return{valid:!0,data:i}}else if(t===E.array&&r===E.array){if(n.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<n.length;a++){const i=n[a],o=e[a],l=Ar(i,o);if(!l.valid)return{valid:!1};s.push(l.data)}return{valid:!0,data:s}}else return t===E.date&&r===E.date&&+n==+e?{valid:!0,data:n}:{valid:!1}}class Bn extends z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(ws(a)||ws(i))return $;const o=Ar(a.value,i.value);return o.valid?((xs(a)||xs(i))&&t.dirty(),{status:t.value,value:o.data}):(C(r,{code:T.invalid_intersection_types}),$)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}Bn.create=(n,e,t)=>new Bn({left:n,right:e,typeName:k.ZodIntersection,...U(t)});class at extends z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==E.array)return C(r,{code:T.invalid_type,expected:E.array,received:r.parsedType}),$;if(r.data.length<this._def.items.length)return C(r,{code:T.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),$;!this._def.rest&&r.data.length>this._def.items.length&&(C(r,{code:T.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const a=[...r.data].map((i,o)=>{const l=this._def.items[o]||this._def.rest;return l?l._parse(new Re(r,i,r.path,o)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>he.mergeArray(t,i)):he.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new at({...this._def,rest:e})}}at.create=(n,e)=>{if(!Array.isArray(n))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new at({items:n,typeName:k.ZodTuple,rest:null,...U(e)})};class qn extends z{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==E.object)return C(r,{code:T.invalid_type,expected:E.object,received:r.parsedType}),$;const s=[],a=this._def.keyType,i=this._def.valueType;for(const o in r.data)s.push({key:a._parse(new Re(r,o,r.path,o)),value:i._parse(new Re(r,r.data[o],r.path,o)),alwaysSet:o in r.data});return r.common.async?he.mergeObjectAsync(t,s):he.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,r){return t instanceof z?new qn({keyType:e,valueType:t,typeName:k.ZodRecord,...U(r)}):new qn({keyType:Le.create(),valueType:e,typeName:k.ZodRecord,...U(t)})}}class Cs extends z{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==E.map)return C(r,{code:T.invalid_type,expected:E.map,received:r.parsedType}),$;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([o,l],c)=>({key:s._parse(new Re(r,o,r.path,[c,"key"])),value:a._parse(new Re(r,l,r.path,[c,"value"]))}));if(r.common.async){const o=new Map;return Promise.resolve().then(async()=>{for(const l of i){const c=await l.key,p=await l.value;if(c.status==="aborted"||p.status==="aborted")return $;(c.status==="dirty"||p.status==="dirty")&&t.dirty(),o.set(c.value,p.value)}return{status:t.value,value:o}})}else{const o=new Map;for(const l of i){const c=l.key,p=l.value;if(c.status==="aborted"||p.status==="aborted")return $;(c.status==="dirty"||p.status==="dirty")&&t.dirty(),o.set(c.value,p.value)}return{status:t.value,value:o}}}}Cs.create=(n,e,t)=>new Cs({valueType:e,keyType:n,typeName:k.ZodMap,...U(t)});class an extends z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==E.set)return C(r,{code:T.invalid_type,expected:E.set,received:r.parsedType}),$;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(C(r,{code:T.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(C(r,{code:T.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const a=this._def.valueType;function i(l){const c=new Set;for(const p of l){if(p.status==="aborted")return $;p.status==="dirty"&&t.dirty(),c.add(p.value)}return{status:t.value,value:c}}const o=[...r.data.values()].map((l,c)=>a._parse(new Re(r,l,r.path,c)));return r.common.async?Promise.all(o).then(l=>i(l)):i(o)}min(e,t){return new an({...this._def,minSize:{value:e,message:D.toString(t)}})}max(e,t){return new an({...this._def,maxSize:{value:e,message:D.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}an.create=(n,e)=>new an({valueType:n,minSize:null,maxSize:null,typeName:k.ZodSet,...U(e)});class zn extends z{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}zn.create=(n,e)=>new zn({getter:n,typeName:k.ZodLazy,...U(e)});class Gn extends z{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return C(t,{received:t.data,code:T.invalid_literal,expected:this._def.value}),$}return{status:"valid",value:e.data}}get value(){return this._def.value}}Gn.create=(n,e)=>new Gn({value:n,typeName:k.ZodLiteral,...U(e)});function Es(n,e){return new it({values:n,typeName:k.ZodEnum,...U(e)})}class it extends z{_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),r=this._def.values;return C(t,{expected:W.joinValues(r),received:t.parsedType,code:T.invalid_type}),$}if(this._cache||(this._cache=new Set(this._def.values)),!this._cache.has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return C(t,{received:t.data,code:T.invalid_enum_value,options:r}),$}return Se(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return it.create(e,{...this._def,...t})}exclude(e,t=this._def){return it.create(this.options.filter(r=>!e.includes(r)),{...this._def,...t})}}it.create=Es;class Or extends z{_parse(e){const t=W.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==E.string&&r.parsedType!==E.number){const s=W.objectValues(t);return C(r,{expected:W.joinValues(s),received:r.parsedType,code:T.invalid_type}),$}if(this._cache||(this._cache=new Set(W.getValidEnumValues(this._def.values))),!this._cache.has(e.data)){const s=W.objectValues(t);return C(r,{received:r.data,code:T.invalid_enum_value,options:s}),$}return Se(e.data)}get enum(){return this._def.values}}Or.create=(n,e)=>new Or({values:n,typeName:k.ZodNativeEnum,...U(e)});class Vn extends z{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==E.promise&&t.common.async===!1)return C(t,{code:T.invalid_type,expected:E.promise,received:t.parsedType}),$;const r=t.parsedType===E.promise?t.data:Promise.resolve(t.data);return Se(r.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}}Vn.create=(n,e)=>new Vn({type:n,typeName:k.ZodPromise,...U(e)});class ot extends z{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===k.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{C(r,i),i.fatal?t.abort():t.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async o=>{if(t.value==="aborted")return $;const l=await this._def.schema._parseAsync({data:o,path:r.path,parent:r});return l.status==="aborted"?$:l.status==="dirty"||t.value==="dirty"?nn(l.value):l});{if(t.value==="aborted")return $;const o=this._def.schema._parseSync({data:i,path:r.path,parent:r});return o.status==="aborted"?$:o.status==="dirty"||t.value==="dirty"?nn(o.value):o}}if(s.type==="refinement"){const i=o=>{const l=s.refinement(o,a);if(r.common.async)return Promise.resolve(l);if(l instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return o};if(r.common.async===!1){const o=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return o.status==="aborted"?$:(o.status==="dirty"&&t.dirty(),i(o.value),{status:t.value,value:o.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(o=>o.status==="aborted"?$:(o.status==="dirty"&&t.dirty(),i(o.value).then(()=>({status:t.value,value:o.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!Rt(i))return $;const o=s.transform(i.value,a);if(o instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:o}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>Rt(i)?Promise.resolve(s.transform(i.value,a)).then(o=>({status:t.value,value:o})):$);W.assertNever(s)}}ot.create=(n,e,t)=>new ot({schema:n,typeName:k.ZodEffects,effect:e,...U(t)}),ot.createWithPreprocess=(n,e,t)=>new ot({schema:e,effect:{type:"preprocess",transform:n},typeName:k.ZodEffects,...U(t)});class Ue extends z{_parse(e){return this._getType(e)===E.undefined?Se(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Ue.create=(n,e)=>new Ue({innerType:n,typeName:k.ZodOptional,...U(e)});class ut extends z{_parse(e){return this._getType(e)===E.null?Se(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}ut.create=(n,e)=>new ut({innerType:n,typeName:k.ZodNullable,...U(e)});class Wn extends z{_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===E.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}Wn.create=(n,e)=>new Wn({innerType:n,typeName:k.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...U(e)});class Hn extends z{_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return Zn(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Fe(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Fe(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}Hn.create=(n,e)=>new Hn({innerType:n,typeName:k.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...U(e)});class Rs extends z{_parse(e){if(this._getType(e)!==E.nan){const r=this._getOrReturnCtx(e);return C(r,{code:T.invalid_type,expected:E.nan,received:r.parsedType}),$}return{status:"valid",value:e.data}}}Rs.create=n=>new Rs({typeName:k.ZodNaN,...U(n)});class Ns extends z{_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class Cr extends z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?$:a.status==="dirty"?(t.dirty(),nn(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?$:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,t){return new Cr({in:e,out:t,typeName:k.ZodPipeline})}}class Kn extends z{_parse(e){const t=this._def.innerType._parse(e),r=s=>(Rt(s)&&(s.value=Object.freeze(s.value)),s);return Zn(t)?t.then(s=>r(s)):r(t)}unwrap(){return this._def.innerType}}Kn.create=(n,e)=>new Kn({innerType:n,typeName:k.ZodReadonly,...U(e)});function Ds(n,e){const t=typeof n=="function"?n(e):typeof n=="string"?{message:n}:n;return typeof t=="string"?{message:t}:t}function bo(n,e={},t){return n?sn.create().superRefine((r,s)=>{const a=n(r);if(a instanceof Promise)return a.then(i=>{if(!i){const o=Ds(e,r),l=o.fatal??t??!0;s.addIssue({code:"custom",...o,fatal:l})}});if(!a){const i=Ds(e,r),o=i.fatal??t??!0;s.addIssue({code:"custom",...i,fatal:o})}}):sn.create()}var k;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(k||(k={}));const Ps=(n,e={message:`Input not instance of ${n.name}`})=>bo(t=>t instanceof n,e),d=Le.create,N=Nt.create,ct=Sr.create,G=sn.create;We.create;const V=Ne.create,y=re.create,dt=Jn.create,me=kr.create;Bn.create,at.create;const se=qn.create,wo=zn.create,_=Gn.create,de=it.create;Vn.create,Ue.create,ut.create;function xo(){return{}}function So(n,e){var r,s;const t={type:"array"};return((s=(r=n.type)==null?void 0:r._def)==null?void 0:s.typeName)!==k.ZodAny&&(t.items=H(n.type._def,{...e,currentPath:[...e.currentPath,"items"]})),n.minLength&&Y(t,"minItems",n.minLength.value,n.minLength.message,e),n.maxLength&&Y(t,"maxItems",n.maxLength.value,n.maxLength.message,e),n.exactLength&&(Y(t,"minItems",n.exactLength.value,n.exactLength.message,e),Y(t,"maxItems",n.exactLength.value,n.exactLength.message,e)),t}function Io(n,e){const t={type:"integer",format:"int64"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?Y(t,"minimum",r.value,r.message,e):Y(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),Y(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?Y(t,"maximum",r.value,r.message,e):Y(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),Y(t,"maximum",r.value,r.message,e));break;case"multipleOf":Y(t,"multipleOf",r.value,r.message,e);break}return t}function To(){return{type:"boolean"}}function ko(n,e){return H(n.type._def,e)}const Ao=(n,e)=>H(n.innerType._def,e);function Ms(n,e,t){const r=t??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>Ms(n,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return Oo(n,e)}}const Oo=(n,e)=>{const t={type:"integer",format:"unix-time"};if(e.target==="openApi3")return t;for(const r of n.checks)switch(r.kind){case"min":Y(t,"minimum",r.value,r.message,e);break;case"max":Y(t,"maximum",r.value,r.message,e);break}return t};function Co(n,e){return{...H(n.innerType._def,e),default:n.defaultValue()}}function Eo(n,e,t){return e.effectStrategy==="input"?H(n.schema._def,e,t):{}}function Ro(n){return{type:"string",enum:[...n.values]}}const No=n=>"type"in n&&n.type==="string"?!1:"allOf"in n;function Do(n,e){const t=[H(n.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),H(n.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return t.forEach(a=>{if(No(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:o,...l}=a;i=l}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function Po(n,e){const t=typeof n.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(n.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[n.value]}:{type:t==="bigint"?"integer":t,const:n.value}}let Er;const lt={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(Er===void 0&&(Er=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),Er),base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function js(n,e){const t={type:"string"};function r(s){return e.patternStrategy==="escape"?Mo(s):s}if(n.checks)for(const s of n.checks)switch(s.kind){case"min":Y(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e);break;case"max":Y(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":Oe(t,"email",s.message,e);break;case"format:idn-email":Oe(t,"idn-email",s.message,e);break;case"pattern:zod":Ce(t,lt.email,s.message,e);break}break;case"url":Oe(t,"uri",s.message,e);break;case"uuid":Oe(t,"uuid",s.message,e);break;case"regex":Ce(t,s.regex,s.message,e);break;case"cuid":Ce(t,lt.cuid,s.message,e);break;case"cuid2":Ce(t,lt.cuid2,s.message,e);break;case"startsWith":Ce(t,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":Ce(t,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":Oe(t,"date-time",s.message,e);break;case"date":Oe(t,"date",s.message,e);break;case"time":Oe(t,"time",s.message,e);break;case"duration":Oe(t,"duration",s.message,e);break;case"length":Y(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e),Y(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"includes":{Ce(t,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&Oe(t,"ipv4",s.message,e),s.version!=="v4"&&Oe(t,"ipv6",s.message,e);break}case"emoji":Ce(t,lt.emoji,s.message,e);break;case"ulid":{Ce(t,lt.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{Oe(t,"binary",s.message,e);break}case"contentEncoding:base64":{Y(t,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{Ce(t,lt.base64,s.message,e);break}}break}case"nanoid":Ce(t,lt.nanoid,s.message,e)}return t}const Mo=n=>Array.from(n).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),Oe=(n,e,t,r)=>{var s;n.format||(s=n.anyOf)!=null&&s.some(a=>a.format)?(n.anyOf||(n.anyOf=[]),n.format&&(n.anyOf.push({format:n.format,...n.errorMessage&&r.errorMessages&&{errorMessage:{format:n.errorMessage.format}}}),delete n.format,n.errorMessage&&(delete n.errorMessage.format,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.anyOf.push({format:e,...t&&r.errorMessages&&{errorMessage:{format:t}}})):Y(n,"format",e,t,r)},Ce=(n,e,t,r)=>{var s;n.pattern||(s=n.allOf)!=null&&s.some(a=>a.pattern)?(n.allOf||(n.allOf=[]),n.pattern&&(n.allOf.push({pattern:n.pattern,...n.errorMessage&&r.errorMessages&&{errorMessage:{pattern:n.errorMessage.pattern}}}),delete n.pattern,n.errorMessage&&(delete n.errorMessage.pattern,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.allOf.push({pattern:$s(e,r),...t&&r.errorMessages&&{errorMessage:{pattern:t}}})):Y(n,"pattern",$s(e,r),t,r)},$s=(n,e)=>{var c;const t=typeof n=="function"?n():n;if(!e.applyRegexFlags||!t.flags)return t.source;const r={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},s=r.i?t.source.toLowerCase():t.source;let a="",i=!1,o=!1,l=!1;for(let p=0;p<s.length;p++){if(i){a+=s[p],i=!1;continue}if(r.i){if(o){if(s[p].match(/[a-z]/)){l?(a+=s[p],a+=`${s[p-2]}-${s[p]}`.toUpperCase(),l=!1):s[p+1]==="-"&&((c=s[p+2])!=null&&c.match(/[a-z]/))?(a+=s[p],l=!0):a+=`${s[p]}${s[p].toUpperCase()}`;continue}}else if(s[p].match(/[a-z]/)){a+=`[${s[p]}${s[p].toUpperCase()}]`;continue}}if(r.m){if(s[p]==="^"){a+=`(^|(?<=[\r
]))`;continue}else if(s[p]==="$"){a+=`($|(?=[\r
]))`;continue}}if(r.s&&s[p]==="."){a+=o?`${s[p]}\r
`:`[${s[p]}\r
]`;continue}a+=s[p],s[p]==="\\"?i=!0:o&&s[p]==="]"?o=!1:!o&&s[p]==="["&&(o=!0)}try{const p=new RegExp(a)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return a};function Fs(n,e){var r,s,a,i;if(e.target==="openApi3"&&((r=n.keyType)==null?void 0:r._def.typeName)===k.ZodEnum)return{type:"object",required:n.keyType._def.values,properties:n.keyType._def.values.reduce((o,l)=>({...o,[l]:H(n.valueType._def,{...e,currentPath:[...e.currentPath,"properties",l]})??{}}),{}),additionalProperties:!1};const t={type:"object",additionalProperties:H(n.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return t;if(((s=n.keyType)==null?void 0:s._def.typeName)===k.ZodString&&((a=n.keyType._def.checks)!=null&&a.length)){const o=Object.entries(js(n.keyType._def,e)).reduce((l,[c,p])=>c==="type"?l:{...l,[c]:p},{});return{...t,propertyNames:o}}else if(((i=n.keyType)==null?void 0:i._def.typeName)===k.ZodEnum)return{...t,propertyNames:{enum:n.keyType._def.values}};return t}function jo(n,e){if(e.mapStrategy==="record")return Fs(n,e);const t=H(n.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=H(n.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[t,r],minItems:2,maxItems:2}}}function $o(n){const e=n.values,r=Object.keys(n.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function Fo(){return{not:{}}}function Lo(n){return n.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const Yn={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function Zo(n,e){if(e.target==="openApi3")return Ls(n,e);const t=n.options instanceof Map?Array.from(n.options.values()):n.options;if(t.every(r=>r._def.typeName in Yn&&(!r._def.checks||!r._def.checks.length))){const r=t.reduce((s,a)=>{const i=Yn[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(t.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=t.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===t.length){const s=r.filter((a,i,o)=>o.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:t.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(t.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:t.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return Ls(n,e)}const Ls=(n,e)=>{const t=(n.options instanceof Map?Array.from(n.options.values()):n.options).map((r,s)=>H(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return t.length?{anyOf:t}:void 0};function Uo(n,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:Yn[n.innerType._def.typeName],nullable:!0}:{type:[Yn[n.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=H(n.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const t=H(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return t&&{anyOf:[t,{type:"null"}]}}function Jo(n,e){const t={type:"number"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"int":t.type="integer",vs(t,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?Y(t,"minimum",r.value,r.message,e):Y(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),Y(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?Y(t,"maximum",r.value,r.message,e):Y(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),Y(t,"maximum",r.value,r.message,e));break;case"multipleOf":Y(t,"multipleOf",r.value,r.message,e);break}return t}function Bo(n,e){return e.removeAdditionalStrategy==="strict"?n.catchall._def.typeName==="ZodNever"?n.unknownKeys!=="strict":H(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":H(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function qo(n,e){const t={type:"object",...Object.entries(n.shape()).reduce((r,[s,a])=>{var l;if(a===void 0||a._def===void 0)return r;const i=[...e.currentPath,"properties",s],o=H(a._def,{...e,currentPath:i,propertyPath:i});if(o===void 0)return r;if(e.openaiStrictMode&&a.isOptional()&&!a.isNullable()&&typeof((l=a._def)==null?void 0:l.defaultValue)>"u")throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);return{properties:{...r.properties,[s]:o},required:a.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:Bo(n,e)};return t.required.length||delete t.required,t}const zo=(n,e)=>{if(e.propertyPath&&e.currentPath.slice(0,e.propertyPath.length).toString()===e.propertyPath.toString())return H(n.innerType._def,{...e,currentPath:e.currentPath});const t=H(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return t?{anyOf:[{not:{}},t]}:{}},Go=(n,e)=>{if(e.pipeStrategy==="input")return H(n.in._def,e);if(e.pipeStrategy==="output")return H(n.out._def,e);const t=H(n.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=H(n.out._def,{...e,currentPath:[...e.currentPath,"allOf",t?"1":"0"]});return{allOf:[t,r].filter(s=>s!==void 0)}};function Vo(n,e){return H(n.type._def,e)}function Wo(n,e){const r={type:"array",uniqueItems:!0,items:H(n.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return n.minSize&&Y(r,"minItems",n.minSize.value,n.minSize.message,e),n.maxSize&&Y(r,"maxItems",n.maxSize.value,n.maxSize.message,e),r}function Ho(n,e){return n.rest?{type:"array",minItems:n.items.length,items:n.items.map((t,r)=>H(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[]),additionalItems:H(n.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:n.items.length,maxItems:n.items.length,items:n.items.map((t,r)=>H(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[])}}function Ko(){return{not:{}}}function Yo(){return{}}const Xo=(n,e)=>H(n.innerType._def,e);function H(n,e,t=!1){var i;const r=e.seen.get(n);if(e.override){const o=(i=e.override)==null?void 0:i.call(e,n,e,r,t);if(o!==qi)return o}if(r&&!t){const o=Qo(r,e);if(o!==void 0)return"$ref"in o&&e.seenRefs.add(o.$ref),o}const s={def:n,path:e.currentPath,jsonSchema:void 0};e.seen.set(n,s);const a=tu(n,n.typeName,e,t);return a&&nu(n,e,a),s.jsonSchema=a,a}const Qo=(n,e)=>{switch(e.$refStrategy){case"root":return{$ref:n.path.join("/")};case"extract-to-root":const t=n.path.slice(e.basePath.length+1).join("_");return t!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[t]=n.def),{$ref:[...e.basePath,e.definitionPath,t].join("/")};case"relative":return{$ref:eu(e.currentPath,n.path)};case"none":case"seen":return n.path.length<e.currentPath.length&&n.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},eu=(n,e)=>{let t=0;for(;t<n.length&&t<e.length&&n[t]===e[t];t++);return[(n.length-t).toString(),...e.slice(t)].join("/")},tu=(n,e,t,r)=>{switch(e){case k.ZodString:return js(n,t);case k.ZodNumber:return Jo(n,t);case k.ZodObject:return qo(n,t);case k.ZodBigInt:return Io(n,t);case k.ZodBoolean:return To();case k.ZodDate:return Ms(n,t);case k.ZodUndefined:return Ko();case k.ZodNull:return Lo(t);case k.ZodArray:return So(n,t);case k.ZodUnion:case k.ZodDiscriminatedUnion:return Zo(n,t);case k.ZodIntersection:return Do(n,t);case k.ZodTuple:return Ho(n,t);case k.ZodRecord:return Fs(n,t);case k.ZodLiteral:return Po(n,t);case k.ZodEnum:return Ro(n);case k.ZodNativeEnum:return $o(n);case k.ZodNullable:return Uo(n,t);case k.ZodOptional:return zo(n,t);case k.ZodMap:return jo(n,t);case k.ZodSet:return Wo(n,t);case k.ZodLazy:return H(n.getter()._def,t);case k.ZodPromise:return Vo(n,t);case k.ZodNaN:case k.ZodNever:return Fo();case k.ZodEffects:return Eo(n,t,r);case k.ZodAny:return xo();case k.ZodUnknown:return Yo();case k.ZodDefault:return Co(n,t);case k.ZodBranded:return ko(n,t);case k.ZodReadonly:return Xo(n,t);case k.ZodCatch:return Ao(n,t);case k.ZodPipeline:return Go(n,t);case k.ZodFunction:case k.ZodVoid:case k.ZodSymbol:return;default:return(s=>{})()}},nu=(n,e,t)=>(n.description&&(t.description=n.description,e.markdownDescription&&(t.markdownDescription=n.description)),t),ru=(n,e)=>{const t=Vi(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=H(n._def,r===void 0?t:{...t,currentPath:[...t.basePath,t.definitionPath,r]},!1)??{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(s.title=a);const i=(()=>{if(Gi(t.definitions))return;const l={},c=new Set;for(let p=0;p<500;p++){const f=Object.entries(t.definitions).filter(([h])=>!c.has(h));if(f.length===0)break;for(const[h,w]of f)l[h]=H(br(w),{...t,currentPath:[...t.basePath,t.definitionPath,h]},!0)??{},c.add(h)}return l})(),o=r===void 0?i?{...s,[t.definitionPath]:i}:s:t.nameStrategy==="duplicate-ref"?{...s,...i||t.seenRefs.size?{[t.definitionPath]:{...i,...t.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...t.$refStrategy==="relative"?[]:t.basePath,t.definitionPath,r].join("/"),[t.definitionPath]:{...i,[r]:s}};return t.target==="jsonSchema7"?o.$schema="http://json-schema.org/draft-07/schema#":t.target==="jsonSchema2019-09"&&(o.$schema="https://json-schema.org/draft/2019-09/schema#"),o};function su(n,{parser:e,callback:t}){const r={...n};return Object.defineProperties(r,{$brand:{value:"auto-parseable-tool",enumerable:!1},$parseRaw:{value:e,enumerable:!1},$callback:{value:t,enumerable:!1}}),r}function au(n){if(n.type!=="object")throw new Error(`Root schema must have type: 'object' but got type: ${n.type?`'${n.type}'`:"undefined"}`);const e=structuredClone(n);return Je(e,[],e)}function Rr(n){if(typeof n=="boolean")return!1;if(n.type==="null")return!0;for(const e of n.oneOf??[])if(Rr(e))return!0;for(const e of n.anyOf??[])if(Rr(e))return!0;return!1}function Je(n,e,t){if(typeof n=="boolean")throw new TypeError(`Expected object schema but got boolean; path=${e.join("/")}`);if(!pt(n))throw new TypeError(`Expected ${JSON.stringify(n)} to be an object; path=${e.join("/")}`);const r=n.$defs;if(pt(r))for(const[h,w]of Object.entries(r))Je(w,[...e,"$defs",h],t);const s=n.definitions;if(pt(s))for(const[h,w]of Object.entries(s))Je(w,[...e,"definitions",h],t);n.type==="object"&&!("additionalProperties"in n)&&(n.additionalProperties=!1);const i=n.required??[],o=n.properties;if(pt(o)){for(const[h,w]of Object.entries(o))if(!Rr(w)&&!i.includes(h))throw new Error(`Zod field at \`${[...e,"properties",h].join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);n.required=Object.keys(o),n.properties=Object.fromEntries(Object.entries(o).map(([h,w])=>[h,Je(w,[...e,"properties",h],t)]))}const l=n.items;pt(l)&&(n.items=Je(l,[...e,"items"],t));const c=n.anyOf;Array.isArray(c)&&(n.anyOf=c.map((h,w)=>Je(h,[...e,"anyOf",String(w)],t)));const p=n.allOf;if(Array.isArray(p))if(p.length===1){const h=Je(p[0],[...e,"allOf","0"],t);Object.assign(n,h),delete n.allOf}else n.allOf=p.map((h,w)=>Je(h,[...e,"allOf",String(w)],t));n.default===null&&delete n.default;const f=n.$ref;if(f&&ou(n,1)){if(typeof f!="string")throw new TypeError(`Received non-string $ref - ${f}; path=${e.join("/")}`);const h=iu(t,f);if(typeof h=="boolean")throw new Error(`Expected \`$ref: ${f}\` to resolve to an object schema but got boolean`);if(!pt(h))throw new Error(`Expected \`$ref: ${f}\` to resolve to an object but got ${JSON.stringify(h)}`);return Object.assign(n,{...h,...n}),delete n.$ref,Je(n,e,t)}return n}function iu(n,e){if(!e.startsWith("#/"))throw new Error(`Unexpected $ref format ${JSON.stringify(e)}; Does not start with #/`);const t=e.slice(2).split("/");let r=n;for(const s of t){if(!pt(r))throw new Error(`encountered non-object entry while resolving ${e} - ${JSON.stringify(r)}`);const a=r[s];if(a===void 0)throw new Error(`Key ${s} not found while resolving ${e}`);r=a}return r}function pt(n){return typeof n=="object"&&n!==null&&!Array.isArray(n)}function ou(n,e){let t=0;for(const r in n)if(t++,t>e)return!0;return!1}function Zs(n,e){return ru(n,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function Us(n){return au(Ji(n,{target:"draft-7"}))}function Js(n){return"_zod"in n}function uu(n,e,t){return Bi({type:"json_schema",...t,name:e,strict:!0,schema:Js(n)?Us(n):Zs(n,{name:e})},r=>n.parse(JSON.parse(r)))}function cu(n){return su({type:"function",name:n.name,parameters:Js(n.parameters)?Us(n.parameters):Zs(n.parameters,{name:n.name}),strict:!0,...n.description?{description:n.description}:void 0},{callback:n.function,parser:e=>n.parameters.parse(JSON.parse(e))})}class He extends Error{constructor(t,r){super(t);v(this,"state");this.state=r}}class du extends He{}class Bs extends He{}class _e extends He{}class te extends He{}class qs extends He{constructor(t,r,s){super(t,s);v(this,"error");this.error=r}}class lu extends He{constructor(t,r,s){super(t,s);v(this,"error");this.error=r}}class zs extends He{constructor(t,r,s){super(t,s);v(this,"result");this.result=r}}class Xn extends He{constructor(t,r,s){super(t,s);v(this,"result");this.result=r}}function zl(n){return n}function Pt(n){var t;if(typeof n!="object"||n===null)return;const e=n;return((t=e._zod)==null?void 0:t.def)||e._def||e.def}function Qn(n){const e=Pt(n);if(!e)return;const t=typeof e.typeName=="string"&&e.typeName||typeof e.type=="string"&&e.type;if(typeof t!="string")return;const r=t.toLowerCase();return r.startsWith("zod")?r.slice(3):r}function ft(n){return Pt(n)?Qn(n)==="object":!1}function pu(n){return typeof n=="object"&&n!==null&&"input"in n&&typeof n.input=="string"}const fu="http://json-schema.org/draft-07/schema#",hu=new Set(["optional"]),mu=new Set(["brand","branded","catch","default","effects","pipeline","pipe","prefault","readonly","refinement","transform"]),Gs={string:{type:"string"},number:{type:"number"},bigint:{type:"integer"},boolean:{type:"boolean"},date:{type:"string",format:"date-time"}};function Vs(n){return typeof n=="object"&&n!==null&&n.type==="object"&&"properties"in n&&"additionalProperties"in n}function gu(n){const e=Ws(n);if(e)return Array.isArray(e.required)||(e.required=[]),typeof e.additionalProperties>"u"&&(e.additionalProperties=!1),typeof e.$schema!="string"&&(e.$schema=fu),e}function Ws(n){const e=Ou(n);if(!e)return;const t={},r=[];for(const[s,a]of Object.entries(e)){const{schema:i,optional:o}=yu(a);if(!i)return;t[s]=i,o||r.push(s)}return{type:"object",properties:t,required:r,additionalProperties:!1}}function yu(n){let e=Nr(n),t=!1;for(;hu.has(Qn(e)??"");){t=!0;const r=Pt(e),s=Nr(r==null?void 0:r.innerType);if(!s||s===e)break;e=s}return{schema:De(e),optional:t}}function De(n){if(n===void 0)return;const e=Nr(n),t=Qn(e),r=Pt(e);if(t){if(t in Gs)return Gs[t];switch(t){case"object":return Ws(e);case"array":return _u(r);case"tuple":return vu(r);case"union":return bu(r);case"intersection":return wu(r);case"literal":return ku(r);case"enum":case"nativeenum":return Au(r);case"record":return xu(r);case"map":return Su(r);case"set":return Iu(r);case"nullable":return Tu(r);default:return}}}function _u(n){const e=De(Hs(n,"element","items","type"));return e?{type:"array",items:e}:void 0}function vu(n){const e=Ks(n==null?void 0:n.items).map(r=>De(r)).filter(Boolean);if(!e.length)return;const t={type:"array",items:e,minItems:e.length};return n!=null&&n.rest||(t.maxItems=e.length),t}function bu(n){const e=Ks((n==null?void 0:n.options)??(n==null?void 0:n.schemas)).map(t=>De(t)).filter(Boolean);return e.length?{anyOf:e}:void 0}function wu(n){const e=De(n==null?void 0:n.left),t=De(n==null?void 0:n.right);return e&&t?{allOf:[e,t]}:void 0}function xu(n){const e=De((n==null?void 0:n.valueType)??(n==null?void 0:n.values));return e?{type:"object",additionalProperties:e}:void 0}function Su(n){const e=De((n==null?void 0:n.valueType)??(n==null?void 0:n.values));return e?{type:"array",items:e}:void 0}function Iu(n){const e=De(n==null?void 0:n.valueType);return e?{type:"array",items:e,uniqueItems:!0}:void 0}function Tu(n){const e=De((n==null?void 0:n.innerType)??(n==null?void 0:n.type));return e?{anyOf:[e,{type:"null"}]}:void 0}function Nr(n){let e=n;for(;mu.has(Qn(e)??"");){const t=Pt(e),r=(t==null?void 0:t.innerType)??(t==null?void 0:t.schema)??(t==null?void 0:t.base)??(t==null?void 0:t.type)??(t==null?void 0:t.wrapped)??(t==null?void 0:t.underlying);if(!r||r===e)return e;e=r}return e}function Hs(n,...e){if(n){for(const t of e)if(t in n&&n[t]!==void 0)return n[t]}}function Ks(n){return Array.isArray(n)?n:n===void 0?[]:[n]}function ku(n){if(!n)return;const e=Hs(n,"value","literal");if(e!==void 0)return{const:e,type:e===null?"null":typeof e}}function Au(n){if(n){if(Array.isArray(n.values))return{enum:n.values};if(Array.isArray(n.options))return{enum:n.options};if(n.values&&typeof n.values=="object")return{enum:Object.values(n.values)};if(n.enum&&typeof n.enum=="object")return{enum:Object.values(n.enum)}}}function Ou(n){if(typeof n!="object"||n===null)return;const e=n;if(e.shape&&typeof e.shape=="object")return e.shape;if(typeof e.shape=="function")try{return e.shape()}catch{return}const t=Pt(e),r=t==null?void 0:t.shape;if(r&&typeof r=="object")return r;if(typeof r=="function")try{return r()}catch{return}}const Cu=cu,Eu=uu;function Ys(n){return gu(n)}function er(n){if(n=n.replace(/\s/g,"_"),n=n.replace(/[^a-zA-Z0-9]/g,"_"),n.length===0)throw new Error("Tool name cannot be empty");return n}function Dr(n,e){const t=r=>JSON.parse(r);if(ft(n)){const r=a=>{const i=Ys(n);if(i)return{schema:i,parser:l=>n.parse(JSON.parse(l))};const o=a instanceof Error?` Upstream helper error: ${a.message}`:"";throw new te(`Unable to convert the provided Zod schema to JSON Schema. Ensure that the \`zod\` package is available at runtime or provide a JSON schema object instead.${o}`)};let s;try{s=Cu({name:e,parameters:n,function:()=>{},description:""})}catch(a){return r(a)}return Vs(s.parameters)?{schema:s.parameters,parser:s.$parseRaw}:r()}else if(typeof n=="object"&&n!==null)return{schema:n,parser:t};throw new te("Input type is not a ZodObject or a valid JSON schema")}function Xs(n){if(n==="text")return"text";if(ft(n)){const e=(r,s)=>{const a=Ys(n);if(a)return{type:(r==null?void 0:r.type)??"json_schema",name:(r==null?void 0:r.name)??"output",strict:(r==null?void 0:r.strict)??!1,schema:a};const i=s instanceof Error?` Upstream helper error: ${s.message}`:"";throw new te(`Unable to convert the provided Zod schema to JSON Schema. Ensure that the \`zod\` package is available at runtime or provide a JSON schema object instead.${i}`)};let t;try{t=Eu(n,"output")}catch(r){return e(void 0,r)}return Vs(t.schema)?{type:t.type,name:t.name,strict:t.strict||!1,schema:t.schema}:e(t)}return n}function Ru(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var tr={exports:{}},Pr,Qs;function Nu(){if(Qs)return Pr;Qs=1;var n=1e3,e=n*60,t=e*60,r=t*24,s=r*7,a=r*365.25;Pr=function(p,f){f=f||{};var h=typeof p;if(h==="string"&&p.length>0)return i(p);if(h==="number"&&isFinite(p))return f.long?l(p):o(p);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(p))};function i(p){if(p=String(p),!(p.length>100)){var f=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(p);if(f){var h=parseFloat(f[1]),w=(f[2]||"ms").toLowerCase();switch(w){case"years":case"year":case"yrs":case"yr":case"y":return h*a;case"weeks":case"week":case"w":return h*s;case"days":case"day":case"d":return h*r;case"hours":case"hour":case"hrs":case"hr":case"h":return h*t;case"minutes":case"minute":case"mins":case"min":case"m":return h*e;case"seconds":case"second":case"secs":case"sec":case"s":return h*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return h;default:return}}}}function o(p){var f=Math.abs(p);return f>=r?Math.round(p/r)+"d":f>=t?Math.round(p/t)+"h":f>=e?Math.round(p/e)+"m":f>=n?Math.round(p/n)+"s":p+"ms"}function l(p){var f=Math.abs(p);return f>=r?c(p,f,r,"day"):f>=t?c(p,f,t,"hour"):f>=e?c(p,f,e,"minute"):f>=n?c(p,f,n,"second"):p+" ms"}function c(p,f,h,w){var g=f>=h*1.5;return Math.round(p/h)+" "+w+(g?"s":"")}return Pr}var Mr,ea;function Du(){if(ea)return Mr;ea=1;function n(e){r.debug=r,r.default=r,r.coerce=c,r.disable=o,r.enable=a,r.enabled=l,r.humanize=Nu(),r.destroy=p,Object.keys(e).forEach(f=>{r[f]=e[f]}),r.names=[],r.skips=[],r.formatters={};function t(f){let h=0;for(let w=0;w<f.length;w++)h=(h<<5)-h+f.charCodeAt(w),h|=0;return r.colors[Math.abs(h)%r.colors.length]}r.selectColor=t;function r(f){let h,w=null,g,x;function b(...m){if(!b.enabled)return;const I=b,A=Number(new Date),P=A-(h||A);I.diff=P,I.prev=h,I.curr=A,h=A,m[0]=r.coerce(m[0]),typeof m[0]!="string"&&m.unshift("%O");let R=0;m[0]=m[0].replace(/%([a-zA-Z%])/g,(B,oe)=>{if(B==="%%")return"%";R++;const xe=r.formatters[oe];if(typeof xe=="function"){const Ae=m[R];B=xe.call(I,Ae),m.splice(R,1),R--}return B}),r.formatArgs.call(I,m),(I.log||r.log).apply(I,m)}return b.namespace=f,b.useColors=r.useColors(),b.color=r.selectColor(f),b.extend=s,b.destroy=r.destroy,Object.defineProperty(b,"enabled",{enumerable:!0,configurable:!1,get:()=>w!==null?w:(g!==r.namespaces&&(g=r.namespaces,x=r.enabled(f)),x),set:m=>{w=m}}),typeof r.init=="function"&&r.init(b),b}function s(f,h){const w=r(this.namespace+(typeof h>"u"?":":h)+f);return w.log=this.log,w}function a(f){r.save(f),r.namespaces=f,r.names=[],r.skips=[];const h=(typeof f=="string"?f:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const w of h)w[0]==="-"?r.skips.push(w.slice(1)):r.names.push(w)}function i(f,h){let w=0,g=0,x=-1,b=0;for(;w<f.length;)if(g<h.length&&(h[g]===f[w]||h[g]==="*"))h[g]==="*"?(x=g,b=w,g++):(w++,g++);else if(x!==-1)g=x+1,b++,w=b;else return!1;for(;g<h.length&&h[g]==="*";)g++;return g===h.length}function o(){const f=[...r.names,...r.skips.map(h=>"-"+h)].join(",");return r.enable(""),f}function l(f){for(const h of r.skips)if(i(f,h))return!1;for(const h of r.names)if(i(f,h))return!0;return!1}function c(f){return f instanceof Error?f.stack||f.message:f}function p(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}return Mr=n,Mr}var ta;function Pu(){return ta||(ta=1,(function(n,e){e.formatArgs=r,e.save=s,e.load=a,e.useColors=t,e.storage=i(),e.destroy=(()=>{let l=!1;return()=>{l||(l=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function t(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let l;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(l=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(l[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(l){if(l[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+l[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const c="color: "+this.color;l.splice(1,0,c,"color: inherit");let p=0,f=0;l[0].replace(/%[a-zA-Z%]/g,h=>{h!=="%%"&&(p++,h==="%c"&&(f=p))}),l.splice(f,0,c)}e.log=console.debug||console.log||(()=>{});function s(l){try{l?e.storage.setItem("debug",l):e.storage.removeItem("debug")}catch{}}function a(){let l;try{l=e.storage.getItem("debug")||e.storage.getItem("DEBUG")}catch{}return!l&&typeof process<"u"&&"env"in process&&(l=process.env.DEBUG),l}function i(){try{return localStorage}catch{}}n.exports=Du()(e);const{formatters:o}=n.exports;o.j=function(l){try{return JSON.stringify(l)}catch(c){return"[UnexpectedJSONParseError]: "+c.message}}})(tr,tr.exports)),tr.exports}var Mu=Pu();const ju=Ru(Mu);function na(){return Gu()}function ra(n){const e=na();return typeof e<"u"&&(e[n]==="true"||e[n]==="1")}const sa={get disabled(){return!0}},aa={get dontLogModelData(){return ra("OPENAI_AGENTS_DONT_LOG_MODEL_DATA")},get dontLogToolData(){return ra("OPENAI_AGENTS_DONT_LOG_TOOL_DATA")}},$u=aa.dontLogModelData,Fu=aa.dontLogToolData;function ia(n="openai-agents"){return{namespace:n,debug:ju(n),error:console.error,warn:console.warn,dontLogModelData:$u,dontLogToolData:Fu}}const M=ia("openai-agents:core"),oa=20;function Ke(n){if(n==null)return String(n);if(ua(n))return on(new Uint8Array(n));if(ca(n)){const e=n;return on(new Uint8Array(e.buffer,e.byteOffset,e.byteLength))}if(typeof n=="string")return n;if(typeof n=="object")try{return JSON.stringify(n,Uu)}catch{return"[object with circular references]"}return String(n)}function ua(n){if(n instanceof ArrayBuffer)return!0;const e=globalThis.SharedArrayBuffer;return!!(e&&n instanceof e)}function ca(n){return typeof ArrayBuffer<"u"&&ArrayBuffer.isView(n)}function Lu(n){return typeof n=="object"&&n!==null&&n.type==="Buffer"&&Array.isArray(n.data)}function on(n){if(n.length===0)return"[byte array (0 bytes)]";const e=Math.min(n.length,oa),t=[];for(let a=0;a<e;a++)t.push(Zu(n[a]));const r=n.length>oa?" …":"";return`[byte array ${t.join(" ")}${r} (${n.length} bytes)]`}function Zu(n){return`0x${n.toString(16).padStart(2,"0")}`}function Uu(n,e){if(ua(e))return on(new Uint8Array(e));if(ca(e)){const t=e;return on(new Uint8Array(t.buffer,t.byteOffset,t.byteLength))}return Lu(e)?on(Uint8Array.from(e.data)):e}function Ju(n,e){return`An error occurred while running the tool. Please try again. Error: ${e instanceof Error?e.toString():String(e)}`}function nr(n){const e=n.name?er(n.name):er(n.execute.name),t=typeof n.errorFunction>"u"?Ju:n.errorFunction;if(!e)throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");const r=n.strict??!0;if(!r&&ft(n.parameters))throw new te("Strict mode is required for Zod parameters");const{parser:s,schema:a}=Dr(n.parameters,e);async function i(p,f,h){const[w,g]=await ne(()=>s(f));if(w!==null)throw M.dontLogToolData?M.debug(`Invalid JSON input for tool ${e}`):M.debug(`Invalid JSON input for tool ${e}: ${f}`),new _e("Invalid JSON input for tool");M.dontLogToolData?M.debug(`Invoking tool ${e}`):M.debug(`Invoking tool ${e} with input ${f}`);const x=await n.execute(g,p,h),b=Ke(x);return M.dontLogToolData?M.debug(`Tool ${e} completed`):M.debug(`Tool ${e} returned: ${b}`),x}async function o(p,f,h){return i(p,f,h).catch(w=>{if(t){const g=pn();return g==null||g.setError({message:"Error running tool (non-fatal)",data:{tool_name:e,error:w.toString()}}),t(p,w)}throw w})}const l=typeof n.needsApproval=="function"?n.needsApproval:async()=>typeof n.needsApproval=="boolean"?n.needsApproval:!1,c=typeof n.isEnabled=="function"?async(p,f)=>{const h=n.isEnabled;return!!await h({runContext:p,agent:f})}:async()=>typeof n.isEnabled=="boolean"?n.isEnabled:!0;return{type:"function",name:e,description:n.description,parameters:a,strict:r,invoke:o,needsApproval:l,isEnabled:c}}y({name:d(),description:d().optional(),inputSchema:y({type:_("object"),properties:se(d(),G()),required:V(d()),additionalProperties:ct()})});const jr={};async function Bu({server:n,convertSchemasToStrict:e,runContext:t,agent:r}){return n.cacheToolsList&&jr[n.name]?jr[n.name].map(s=>da(s,n,e)):qc(async s=>{const a=await n.listTools();let i=a;if(t&&r){const l={runContext:t,agent:r,serverName:n.name},c=[];for(const p of a){const f=n.toolFilter;if(f)if(typeof f=="function"){if(!await f(l,p)){M.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the callable filter.`);continue}}else{const h=f.allowedToolNames??[],w=f.blockedToolNames??[];if(h.length>0||w.length>0){const g=h.length>0?h.includes(p.name):!0,x=w.length>0?w.includes(p.name):!1;if(!g||x){x?M.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the static filter.`):g||M.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is not allowed by the static filter.`);continue}}}c.push(p)}i=c}s.spanData.result=i.map(l=>l.name);const o=i.map(l=>da(l,n,e));return n.cacheToolsList&&(jr[n.name]=i),o},{data:{server:n.name}})}async function qu(n,e,t,r=!1){const s=Array.isArray(n)?{mcpServers:n,runContext:e,agent:t,convertSchemasToStrict:r}:n,{mcpServers:a,convertSchemasToStrict:i=!1,runContext:o,agent:l}=s,c=[],p=new Set;for(const f of a){const h=await Bu({server:f,convertSchemasToStrict:i,runContext:o,agent:l}),g=[...new Set(h.map(x=>x.name))].filter(x=>p.has(x));if(g.length>0)throw new te(`Duplicate tool names found across MCP servers: ${g.join(", ")}`);for(const x of h)p.add(x.name),c.push(x)}return c}function da(n,e,t){var i,o,l,c;async function r(p,f){let h={};typeof p=="string"&&p?h=JSON.parse(p):typeof p=="object"&&p!=null&&(h=p);const w=pn();w&&(w.spanData.mcp_data={server:e.name});const g=await e.callTool(n.name,h);return g.length===1?g[0]:g}const s={...n.inputSchema,type:((i=n.inputSchema)==null?void 0:i.type)??"object",properties:((o=n.inputSchema)==null?void 0:o.properties)??{},required:((l=n.inputSchema)==null?void 0:l.required)??[],additionalProperties:((c=n.inputSchema)==null?void 0:c.additionalProperties)??!1};if(t||s.additionalProperties===!0)try{const p=zu(s);return nr({name:n.name,description:n.description||"",parameters:p,strict:!0,execute:r})}catch(p){M.warn(`Error converting MCP schema to strict mode: ${p}`)}const a={...s,additionalProperties:!0};return nr({name:n.name,description:n.description||"",parameters:a,strict:!1,execute:r})}function zu(n){const e={...n,additionalProperties:!1};return e.required||(e.required=[]),e}function Gu(){return{}}class rr{constructor(){O(this,Zt,new EventTarget);O(this,wt,new Map)}on(e,t){const r=e;let s=u(this,wt).get(r);s||(s=new Map,u(this,wt).set(r,s));let a=s.get(t);a||(a=new Set,s.set(t,a));const i=(o=>t(...o.detail??[]));return a.add(i),u(this,Zt).addEventListener(r,i),this}off(e,t){const r=e,s=u(this,wt).get(r),a=s==null?void 0:s.get(t);if(a!=null&&a.size){for(const i of a)u(this,Zt).removeEventListener(r,i);s==null||s.delete(t),(s==null?void 0:s.size)===0&&u(this,wt).delete(r)}return this}emit(e,...t){const r=new CustomEvent(e,{detail:t});return u(this,Zt).dispatchEvent(r)}once(e,t){const r=(...s)=>{this.off(e,r),t(...s)};return this.on(e,r),this}}Zt=new WeakMap,wt=new WeakMap;const la=()=>typeof crypto<"u"&&crypto.randomUUID?crypto.randomUUID():"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){const e=Math.random()*16|0;return(n==="x"?e:e&3|8).toString(16)}),Vu=class{constructor(){}pipeTo(e,t){}pipeThrough(e,t){}},Wu=globalThis.ReadableStream,Hu=globalThis.TransformStream;class Ku{constructor(){v(this,"context",null)}run(e,t){return this.context=e,t()}getStore(){return this.context}enterWith(e){this.context=e}}class Yu{constructor(){}setTimeout(e,t){const r=setTimeout(e,t);return r.ref=typeof r.ref=="function"?r.ref:()=>r,r.unref=typeof r.unref=="function"?r.unref:()=>r,r.hasRef=typeof r.hasRef=="function"?r.hasRef:()=>!0,r.refresh=typeof r.refresh=="function"?r.refresh:()=>r,r}clearTimeout(e){window.clearTimeout(e)}}const Xu=new Yu;class $r{on(e,t){return this.eventEmitter.on(e,t),this.eventEmitter}off(e,t){return this.eventEmitter.off(e,t),this.eventEmitter}emit(e,...t){return this.eventEmitter.emit(e,...t)}once(e,t){return this.eventEmitter.once(e,t),this.eventEmitter}}class Qu extends $r{constructor(){super(...arguments);v(this,"eventEmitter",new rr)}}class ec extends $r{constructor(){super(...arguments);v(this,"eventEmitter",new rr)}}const tc="OPENAI_DEFAULT_MODEL";function sr(n){return n.startsWith("gpt-5-chat")?!1:n.startsWith("gpt-5")}function pa(){return sr(fa())}function fa(){var e;return((e=na()[tc])==null?void 0:e.toLowerCase())??"gpt-4.1"}function nc(n){const e=fa();return sr(e)?{reasoning:{effort:"low"},text:{verbosity:"low"}}:{}}function ha(n){return JSON.stringify({assistant:n.name})}function rc(n){return`transfer_to_${er(n.name)}`}function sc(n){return`Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription??""}`}class ma{constructor(e,t){v(this,"toolName");v(this,"toolDescription");v(this,"inputJsonSchema",{type:"object",properties:{},required:[],additionalProperties:!1});v(this,"strictJsonSchema",!0);v(this,"onInvokeHandoff");v(this,"agentName");v(this,"inputFilter");v(this,"agent");v(this,"isEnabled",async()=>!0);this.agentName=e.name,this.onInvokeHandoff=t,this.toolName=rc(e),this.toolDescription=sc(e),this.agent=e}getHandoffAsFunctionTool(){return{type:"function",name:this.toolName,description:this.toolDescription,parameters:this.inputJsonSchema,strict:this.strictJsonSchema}}}function ga(n,e={}){let t;const r=!!e.onHandoff,s=!!e.inputType;if(!(r===s))throw new te("You must provide either both `onHandoff` and `inputType` or neither.");async function i(l,c){var p;if(t){if(!c)throw Ft({message:`Handoff function expected non empty input but got: ${c}`,data:{details:"input is empty"}}),new _e("Handoff function expected non empty input");try{const f=await t(c);e.onHandoff&&await e.onHandoff(l,f)}catch(f){throw Ft({message:"Invalid JSON provided",data:{}}),M.dontLogToolData||M.error(`Invalid JSON when parsing: ${c}. Error: ${f}`),new _e("Invalid JSON provided")}}else await((p=e.onHandoff)==null?void 0:p.call(e,l));return n}const o=new ma(n,i);if(typeof e.isEnabled=="function"){const l=e.isEnabled;o.isEnabled=async({runContext:c,agent:p})=>!!await l({runContext:c,agent:p})}else typeof e.isEnabled=="boolean"&&(o.isEnabled=async()=>e.isEnabled);if(e.inputType){const l=Dr(e.inputType,o.toolName);o.inputJsonSchema=l.schema,o.strictJsonSchema=!0,t=l.parser}return e.toolNameOverride&&(o.toolName=e.toolNameOverride),e.toolDescriptionOverride&&(o.toolDescription=e.toolDescriptionOverride),e.inputFilter&&(o.inputFilter=e.inputFilter),o}function ac(n){return n instanceof ma?n:ga(n)}function ya(n){if(n.type!=="message"||n.role!=="assistant")return;const e=n.content[n.content.length-1];if(e.type==="output_text")return e.text}function ic(n){return n.output.length===0?"":ya(n.output[n.output.length-1])||""}const Fr=new WeakMap;function oc(n,e){n&&Fr.set(n,e)}function uc(n){const e=Fr.get(n);return e&&Fr.delete(n),e}const cc=y({input:d()}),Ut=class Ut extends Qu{constructor(t){super();v(this,"name");v(this,"instructions");v(this,"prompt");v(this,"handoffDescription");v(this,"handoffs");v(this,"model");v(this,"modelSettings");v(this,"tools");v(this,"mcpServers");v(this,"inputGuardrails");v(this,"outputGuardrails");v(this,"outputType","text");v(this,"toolUseBehavior");v(this,"resetToolChoice");if(typeof t.name!="string"||t.name.trim()==="")throw new te("Agent must have a name.");if(this.name=t.name,this.instructions=t.instructions??Ut.DEFAULT_MODEL_PLACEHOLDER,this.prompt=t.prompt,this.handoffDescription=t.handoffDescription??"",this.handoffs=t.handoffs??[],this.model=t.model??"",this.modelSettings=t.modelSettings??nc(),this.tools=t.tools??[],this.mcpServers=t.mcpServers??[],this.inputGuardrails=t.inputGuardrails??[],this.outputGuardrails=t.outputGuardrails??[],t.outputType&&(this.outputType=t.outputType),this.toolUseBehavior=t.toolUseBehavior??"run_llm_again",this.resetToolChoice=t.resetToolChoice??!0,t.model!==void 0&&pa()&&(typeof t.model!="string"||!sr(t.model))&&t.modelSettings===void 0&&(this.modelSettings={}),(t.handoffOutputTypeWarningEnabled===void 0||t.handoffOutputTypeWarningEnabled)&&this.handoffs&&this.outputType){const r=new Set([JSON.stringify(this.outputType)]);for(const s of this.handoffs)"outputType"in s&&s.outputType?r.add(JSON.stringify(s.outputType)):"agent"in s&&s.agent.outputType&&r.add(JSON.stringify(s.agent.outputType));r.size>1&&M.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`)}}static create(t){return new Ut({...t,handoffs:t.handoffs,outputType:t.outputType,handoffOutputTypeWarningEnabled:!1})}get outputSchemaName(){if(this.outputType==="text")return"text";if(ft(this.outputType))return"ZodOutput";if(typeof this.outputType=="object")return this.outputType.name;throw new Error(`Unknown output type: ${this.outputType}`)}clone(t){return new Ut({...this,...t})}asTool(t){const{toolName:r,toolDescription:s,customOutputExtractor:a,needsApproval:i,runConfig:o,runOptions:l,isEnabled:c}=t;return nr({name:r??er(this.name),description:s??"",parameters:cc,strict:!0,needsApproval:i,isEnabled:c,execute:async(p,f,h)=>{if(!pu(p))throw new _e("Agent tool called with invalid input");const x=await new pd(o??{}).run(this,p.input,{context:f,...l??{}}),b=typeof this.toolUseBehavior=="object"&&this.toolUseBehavior!==null&&"stopAtToolNames"in this.toolUseBehavior;typeof a!="function"&&b&&M.debug(`You're passing the agent (name: ${this.name}) with toolUseBehavior.stopAtToolNames configured as a tool to a different agent; this may not work as you expect. You may want to have a wrapper function tool to consistently return the final output.`);const m=typeof a=="function"?await a(x):ic(x.rawResponses[x.rawResponses.length-1]);return h!=null&&h.toolCall&&oc(h.toolCall,x),m}})}async getSystemPrompt(t){return typeof this.instructions=="function"?await this.instructions(t,this):this.instructions}async getPrompt(t){return typeof this.prompt=="function"?await this.prompt(t,this):this.prompt}async getMcpTools(t){return this.mcpServers.length>0?qu({mcpServers:this.mcpServers,runContext:t,agent:this,convertSchemasToStrict:!1}):[]}async getAllTools(t){const r=await this.getMcpTools(t),s=[];for(const a of this.tools){if(a.type==="function"){const i=a.isEnabled;if(!(typeof i=="function"?await i(t,this):typeof i=="boolean"?i:!0))continue}s.push(a)}return[...r,...s]}async getEnabledHandoffs(t){var a;const r=((a=this.handoffs)==null?void 0:a.map(i=>ac(i)))??[],s=[];for(const i of r)await i.isEnabled({runContext:t,agent:this})&&s.push(i);return s}processFinalOutput(t){if(this.outputType==="text")return t;if(typeof this.outputType=="object"){const r=JSON.parse(t);return ft(this.outputType)?this.outputType.parse(r):r}throw new Error(`Unknown output type: ${this.outputType}`)}toJSON(){return{name:this.name}}};v(Ut,"DEFAULT_MODEL_PLACEHOLDER","");let ht=Ut;function _a({name:n,execute:e}){return{type:"input",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"input",name:n},output:await e(t)}}}}function Lr({name:n,execute:e}){return{type:"output",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"output",name:n},agent:t.agent,agentOutput:t.agentOutput,output:await e(t)}}}}function dc(){throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.")}const ie=y({providerData:se(d(),G()).optional()}),mt=ie.extend({id:d().optional()}),lc=ie.extend({type:_("refusal"),refusal:d()}),pc=ie.extend({type:_("output_text"),text:d()}),Zr=ie.extend({type:_("input_text"),text:d()}),fc=ie.extend({type:_("reasoning_text"),text:d()}),va=ie.extend({type:_("input_image"),image:d().or(y({id:d().describe("OpenAI file ID")})).describe("Either base64 encoded image data, a data URL, or an object with a file ID.").optional(),detail:d().optional()}),ba=ie.extend({type:_("input_file"),file:d().describe("Either base64 encoded file data or a publicly accessible file URL").or(y({id:d().describe("OpenAI file ID")})).or(y({url:d().describe("Publicly accessible file URL")})).describe("Contents of the file or an object with a file ID.").optional(),filename:d().optional()}),wa=ie.extend({type:_("audio"),audio:d().or(y({id:d()})).describe("Base64 encoded audio data or file id"),format:d().nullable().optional(),transcript:d().nullable().optional()}),hc=ie.extend({type:_("image"),image:d().describe("Base64 encoded image data")}),mc=ie.extend({type:_("text"),text:d()}),gc=y({data:dt([d(),Ps(Uint8Array)]).describe("Base64 image data, or raw bytes that will be base64 encoded automatically."),mediaType:d().optional()}),yc=y({url:d().describe("Publicly accessible URL pointing to the image content")}),_c=y({fileId:d().describe("OpenAI file ID referencing uploaded image content")}),vc=dt([gc,yc,_c]).describe("Inline image data or references to uploaded content."),bc=y({data:dt([d(),Ps(Uint8Array)]).describe("Base64 encoded file data, or raw bytes that will be encoded automatically."),mediaType:d().describe("IANA media type describing the file contents"),filename:d().describe("Filename associated with the inline data")}),wc=y({url:d().describe("Publicly accessible URL for the file content"),filename:d().optional()}),xc=y({id:d().describe("OpenAI file ID referencing uploaded content"),filename:d().optional()}),Sc=dt([d().describe("Existing data URL or base64 string"),bc,wc,xc]).describe("Inline data (with metadata) or references pointing to file contents."),Ic=(...n)=>d(),Tc=ie.extend({type:_("image"),image:d().or(vc).optional(),detail:Ic("low","high","auto").optional()}),kc=ie.extend({type:_("file"),file:Sc}),Ac=ie.extend({type:_("computer_screenshot"),data:d().describe("Base64 encoded image data or URL")}),Oc=me("type",[y({type:_("screenshot")}),y({type:_("click"),x:N(),y:N(),button:de(["left","right","wheel","back","forward"])}),y({type:_("double_click"),x:N(),y:N()}),y({type:_("scroll"),x:N(),y:N(),scroll_x:N(),scroll_y:N()}),y({type:_("type"),text:d()}),y({type:_("wait")}),y({type:_("move"),x:N(),y:N()}),y({type:_("keypress"),keys:V(d())}),y({type:_("drag"),path:V(y({x:N(),y:N()}))})]),Cc=me("type",[pc,lc,wa,hc]),Ur=mt.extend({type:_("message").optional()}),ar=Ur.extend({role:_("assistant"),status:de(["in_progress","completed","incomplete"]),content:V(Cc)}),Ec=me("type",[Zr,va,ba,wa]),xa=Ur.extend({role:_("user"),content:V(Ec).or(d())}),Sa=Ur.extend({role:_("system"),content:d()});me("role",[Sa,ar,xa]);const un=mt.extend({type:_("hosted_tool_call"),name:d().describe("The name of the hosted tool"),arguments:d().describe("The arguments of the hosted tool call").optional(),status:d().optional(),output:d().optional()}),cn=mt.extend({type:_("function_call"),callId:d().describe("The ID of the tool call"),name:d().describe("The name of the function"),status:de(["in_progress","completed","incomplete"]).optional(),arguments:d()}),Rc=me("type",[mc,Tc,kc]),Nc=me("type",[Zr,va,ba]),Jr=mt.extend({type:_("function_call_result"),name:d().describe("The name of the tool"),callId:d().describe("The ID of the tool call"),status:de(["in_progress","completed","incomplete"]),output:dt([d(),Rc,V(Nc)]).describe("Output returned by the tool call. Supports plain strings, legacy ToolOutput items, or structured input_* items.")}),Br=mt.extend({type:_("computer_call"),callId:d().describe("The ID of the computer call"),status:de(["in_progress","completed","incomplete"]),action:Oc}),Dc=mt.extend({type:_("computer_call_result"),callId:d().describe("The ID of the computer call"),output:Ac}),Pc=me("type",[Br,cn,un]),qr=ie.extend({id:d().optional(),type:_("reasoning"),content:V(Zr),rawContent:V(fc).optional()}),Ia=mt.extend({type:_("unknown")}),zr=me("type",[ar,un,cn,Br,qr,Ia]),Mc=dt([xa,ar,Sa,un,cn,Br,Jr,Dc,qr,Ia]),jc=y({requests:N().optional(),inputTokens:N(),outputTokens:N(),totalTokens:N(),inputTokensDetails:se(d(),N()).optional(),outputTokensDetails:se(d(),N()).optional()}),Ta=ie.extend({type:_("output_text_delta"),delta:d()}),$c=ie.extend({type:_("response_started")}),ka=ie.extend({type:_("response_done"),response:ie.extend({id:d(),usage:jc,output:V(zr)})}),Fc=ie.extend({type:_("model"),event:G().describe("The event from the model")});me("type",[Ta,ka,$c,Fc]);class ir{constructor(e){v(this,"requests");v(this,"inputTokens");v(this,"outputTokens");v(this,"totalTokens");v(this,"inputTokensDetails",[]);v(this,"outputTokensDetails",[]);if(typeof e>"u")this.requests=0,this.inputTokens=0,this.outputTokens=0,this.totalTokens=0,this.inputTokensDetails=[],this.outputTokensDetails=[];else{this.requests=(e==null?void 0:e.requests)??1,this.inputTokens=(e==null?void 0:e.inputTokens)??(e==null?void 0:e.input_tokens)??0,this.outputTokens=(e==null?void 0:e.outputTokens)??(e==null?void 0:e.output_tokens)??0,this.totalTokens=(e==null?void 0:e.totalTokens)??(e==null?void 0:e.total_tokens)??0;const t=(e==null?void 0:e.inputTokensDetails)??(e==null?void 0:e.input_tokens_details);this.inputTokensDetails=t?[t]:[];const r=(e==null?void 0:e.outputTokensDetails)??(e==null?void 0:e.output_tokens_details);this.outputTokensDetails=r?[r]:[]}}add(e){this.requests+=e.requests,this.inputTokens+=e.inputTokens,this.outputTokens+=e.outputTokens,this.totalTokens+=e.totalTokens,e.inputTokensDetails&&this.inputTokensDetails.push(...e.inputTokensDetails),e.outputTokensDetails&&this.outputTokensDetails.push(...e.outputTokensDetails)}}class Mt{constructor(e={}){v(this,"context");v(this,"usage");O(this,ve);this.context=e,this.usage=new ir,S(this,ve,new Map)}_rebuildApprovals(e){S(this,ve,new Map(Object.entries(e)))}isToolApproved(e){const{toolName:t,callId:r}=e,s=u(this,ve).get(t);if((s==null?void 0:s.approved)===!0&&s.rejected===!0)return M.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"),!0;if((s==null?void 0:s.approved)===!0)return!0;if((s==null?void 0:s.rejected)===!0)return!1;const a=Array.isArray(s==null?void 0:s.approved)?s.approved.includes(r):!1,i=Array.isArray(s==null?void 0:s.rejected)?s.rejected.includes(r):!1;if(a&&i)return M.warn(`Tool call ${r} is both approved and rejected at the same time. Approval takes precedence`),!0;if(a)return!0;if(i)return!1}approveTool(e,{alwaysApprove:t=!1}={}){const r=e.rawItem.name;if(t){u(this,ve).set(r,{approved:!0,rejected:[]});return}const s=u(this,ve).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.approved)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.approved.push(a)}u(this,ve).set(r,s)}rejectTool(e,{alwaysReject:t=!1}={}){const r=e.rawItem.name;if(t){u(this,ve).set(r,{approved:!1,rejected:!0});return}const s=u(this,ve).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.rejected)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.rejected.push(a)}u(this,ve).set(r,s)}toJSON(){return{context:this.context,usage:this.usage,approvals:Object.fromEntries(u(this,ve).entries())}}}ve=new WeakMap;function Aa(n){return n.type==="function"?{type:"function",name:n.name,description:n.description,parameters:n.parameters,strict:n.strict}:n.type==="computer"?{type:"computer",name:n.name,environment:n.computer.environment,dimensions:n.computer.dimensions}:{type:"hosted_tool",name:n.name,providerData:n.providerData}}function Oa(n){return{toolName:n.toolName,toolDescription:n.toolDescription,inputJsonSchema:n.inputJsonSchema,strictJsonSchema:n.strictJsonSchema}}class gt{constructor(){v(this,"type","base_item");v(this,"rawItem")}toJSON(){return{type:this.type,rawItem:this.rawItem}}}class or extends gt{constructor(t,r){super();v(this,"rawItem");v(this,"agent");v(this,"type","message_output_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}get content(){let t="";for(const r of this.rawItem.content)r.type==="output_text"&&(t+=r.text);return t}}class yt extends gt{constructor(t,r){super();v(this,"rawItem");v(this,"agent");v(this,"type","tool_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class jt extends gt{constructor(t,r,s){super();v(this,"rawItem");v(this,"agent");v(this,"output");v(this,"type","tool_call_output_item");this.rawItem=t,this.agent=r,this.output=s}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON(),output:Ke(this.output)}}}class Gr extends gt{constructor(t,r){super();v(this,"rawItem");v(this,"agent");v(this,"type","reasoning_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Vr extends gt{constructor(t,r){super();v(this,"rawItem");v(this,"agent");v(this,"type","handoff_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Wr extends gt{constructor(t,r,s){super();v(this,"rawItem");v(this,"sourceAgent");v(this,"targetAgent");v(this,"type","handoff_output_item");this.rawItem=t,this.sourceAgent=r,this.targetAgent=s}toJSON(){return{...super.toJSON(),sourceAgent:this.sourceAgent.toJSON(),targetAgent:this.targetAgent.toJSON()}}}class Ie extends gt{constructor(t,r){super();v(this,"rawItem");v(this,"agent");v(this,"type","tool_approval_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}function ur(n){return async(e,...t)=>Xr(async()=>{const r=n(...t);fr(r);try{return r.start(),await e(r)}catch(s){throw r.setError({message:s.message,data:s.data}),s}finally{r.end(),fn()}})}function Ca(n,e){var t;return je().createSpan({...n,data:{type:"agent",name:((t=n==null?void 0:n.data)==null?void 0:t.name)??"Agent",...n==null?void 0:n.data}},e)}function Lc(n,e){var t,r;return je().createSpan({...n,data:{type:"function",input:((t=n==null?void 0:n.data)==null?void 0:t.input)??"",output:((r=n==null?void 0:n.data)==null?void 0:r.output)??"",...n==null?void 0:n.data}},e)}const Ea=ur(Lc);function Zc(n,e){return je().createSpan({...n,data:{type:"handoff",...n==null?void 0:n.data}},e)}const Uc=ur(Zc);function Jc(n,e){return je().createSpan({...n,data:{type:"guardrail",triggered:!1,...n==null?void 0:n.data}},e)}const Ra=ur(Jc);function Bc(n,e){return je().createSpan({...n,data:{type:"mcp_tools",...n==null?void 0:n.data}},e)}const qc=ur(Bc);function Hr(n){if(n.length===0)return"";const e=typeof globalThis<"u"&&globalThis.Buffer?globalThis.Buffer:void 0;if(e)return e.from(n).toString("base64");let t="";for(let i=0;i<n.length;i+=1)t+=String.fromCharCode(n[i]);if(typeof globalThis.btoa=="function")return globalThis.btoa(t);const r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";let s="",a=0;for(;a<t.length;){const i=t.charCodeAt(a++),o=t.charCodeAt(a++),l=t.charCodeAt(a++),c=i>>2,p=(i&3)<<4|o>>4,f=isNaN(o)?64:(o&15)<<2|l>>6,h=isNaN(l)?64:l&63;s+=r.charAt(c)+r.charAt(p)+r.charAt(f)+r.charAt(h)}return s}class zc{constructor(e){v(this,"data");v(this,"type","raw_model_stream_event");this.data=e}}class Gc{constructor(e,t){v(this,"name");v(this,"item");v(this,"type","run_item_stream_event");this.name=e,this.item=t}}class Vc{constructor(e){v(this,"agent");v(this,"type","agent_updated_stream_event");this.agent=e}}function Na(n,e,t,r){var g;const s=[],a=[],i=[],o=[],l=[],c=[],p=new Map(r.map(x=>[x.toolName,x])),f=new Map(t.filter(x=>x.type==="function").map(x=>[x.name,x])),h=t.find(x=>x.type==="computer"),w=new Map(t.filter(x=>{var b;return x.type==="hosted_tool"&&((b=x.providerData)==null?void 0:b.type)==="mcp"}).map(x=>x).map(x=>[x.providerData.server_label,x]));for(const x of n.output){if(x.type==="message")x.role==="assistant"&&s.push(new or(x,e));else if(x.type==="hosted_tool_call"){s.push(new yt(x,e));const m=x.name;if(c.push(m),((g=x.providerData)==null?void 0:g.type)==="mcp_approval_request"||x.name==="mcp_approval_request"){const I=x.providerData,A=I.server_label,P=w.get(A);if(typeof P>"u"){const j=`MCP server (${A}) not found in Agent (${e.name})`;throw Ft({message:j,data:{mcp_server_label:A}}),new _e(j)}const R=new Ie({type:"hosted_tool_call",name:I.name,id:I.id,status:"in_progress",providerData:I},e);l.push({requestItem:R,mcpTool:P}),P.providerData.on_approval||s.push(R)}}else if(x.type==="reasoning")s.push(new Gr(x,e));else if(x.type==="computer_call"){if(s.push(new yt(x,e)),c.push("computer_use"),!h)throw Ft({message:"Model produced computer action without a computer tool.",data:{agent_name:e.name}}),new _e("Model produced computer action without a computer tool.");o.push({toolCall:x,computer:h})}if(x.type!=="function_call")continue;c.push(x.name);const b=p.get(x.name);if(b)s.push(new Vr(x,e)),a.push({toolCall:x,handoff:b});else{const m=f.get(x.name);if(!m)throw Ft({message:`Tool ${x.name} not found in agent ${e.name}.`,data:{tool_name:x.name,agent_name:e.name}}),new _e(`Tool ${x.name} not found in agent ${e.name}.`);s.push(new yt(x,e)),i.push({toolCall:x,tool:m})}}return{newItems:s,handoffs:a,functions:i,computerActions:o,mcpApprovalRequests:l,toolsUsed:c,hasToolsOrApprovalsToRun(){return a.length>0||i.length>0||l.length>0||o.length>0}}}const Wc=me("type",[y({type:_("next_step_handoff"),newAgent:G()}),y({type:_("next_step_final_output"),output:d()}),y({type:_("next_step_run_again")}),y({type:_("next_step_interruption"),data:se(d(),G())})]);class Te{constructor(e,t,r,s,a){v(this,"originalInput");v(this,"modelResponse");v(this,"preStepItems");v(this,"newStepItems");v(this,"nextStep");this.originalInput=e,this.modelResponse=t,this.preStepItems=r,this.newStepItems=s,this.nextStep=a}get generatedItems(){return this.preStepItems.concat(this.newStepItems)}}function Da(n,e,t){return n.resetToolChoice&&e.hasUsedTools(n)?{...t,toolChoice:void 0}:t}async function Pa(n,e,t,r,s,a,i){const o=t.filter(g=>g instanceof Ie&&"callId"in g.rawItem&&g.rawItem.type==="function_call").map(g=>g.rawItem.callId),l=s.functions.filter(g=>o.includes(g.toolCall.callId)),c=await $a(n,l,a,i),p=c.map(g=>g.runItem),f=s.mcpApprovalRequests.filter(g=>{var x;return g.requestItem.type==="tool_approval_item"&&g.requestItem.rawItem.type==="hosted_tool_call"&&((x=g.requestItem.rawItem.providerData)==null?void 0:x.type)==="mcp_approval_request"});for(const g of f){const x=g.requestItem.rawItem.id,b=i._context.isToolApproved({toolName:g.requestItem.rawItem.name,callId:x});if(typeof b<"u"){const m={approve:b,approval_request_id:x,reason:void 0};p.push(new yt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:m},n))}}const h=await Fa(n,c,i),w=t.filter(g=>!(g instanceof Ie));return h.isFinalOutput?(a.emit("agent_end",i._context,n,h.finalOutput),n.emit("agent_end",i._context,h.finalOutput),new Te(e,r,w,p,{type:"next_step_final_output",output:h.finalOutput})):h.isInterrupted?new Te(e,r,w,p,{type:"next_step_interruption",data:{interruptions:h.interruptions}}):new Te(e,r,w,p,{type:"next_step_run_again"})}async function Ma(n,e,t,r,s,a,i){var b,m,I,A;const o=t;let l=s.newItems;const[c,p]=await Promise.all([$a(n,s.functions,a,i),td(n,s.computerActions,a,i._context)]);if(l=l.concat(c.map(P=>P.runItem)),l=l.concat(p),s.mcpApprovalRequests.length>0)for(const P of s.mcpApprovalRequests){const R=P.mcpTool.providerData,j=P.requestItem.rawItem.providerData;if(R.on_approval){const B=await R.on_approval(i._context,P.requestItem),oe={approve:B.approve,approval_request_id:j.id,reason:B.reason};l.push(new yt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:oe},n))}else{l.push(P.requestItem);const B={type:"hosted_mcp_tool_approval",tool:P.mcpTool,runItem:new Ie({type:"hosted_tool_call",name:j.name,id:j.id,arguments:j.arguments,status:"in_progress",providerData:j},n)};c.push(B)}}if(s.handoffs.length>0)return await nd(n,e,o,l,r,s.handoffs,a,i._context);const f=await Fa(n,c,i);if(f.isFinalOutput)return a.emit("agent_end",i._context,n,f.finalOutput),n.emit("agent_end",i._context,f.finalOutput),new Te(e,r,o,l,{type:"next_step_final_output",output:f.finalOutput});if(f.isInterrupted)return new Te(e,r,o,l,{type:"next_step_interruption",data:{interruptions:f.interruptions}});if((((b=s.functions)==null?void 0:b.length)??0)>0||(((m=s.computerActions)==null?void 0:m.length)??0)>0||(((I=s.mcpApprovalRequests)==null?void 0:I.length)??0)>0||(((A=s.handoffs)==null?void 0:A.length)??0)>0)return new Te(e,r,o,l,{type:"next_step_run_again"});const w=l.filter(P=>P instanceof or),g=w.length>0?ya(w[w.length-1].rawItem):void 0;if(typeof g>"u")return new Te(e,r,o,l,{type:"next_step_run_again"});if(!c.some(P=>P.runItem instanceof Ie)){if(n.outputType==="text")return new Te(e,r,o,l,{type:"next_step_final_output",output:g});if(n.outputType!=="text"&&g){const{parser:P}=Dr(n.outputType,"final_output"),[R]=await ne(()=>P(g));if(R)throw Ft({message:"Invalid output type",data:{error:String(R)}}),new _e("Invalid output type");return new Te(e,r,o,l,{type:"next_step_final_output",output:g})}}return new Te(e,r,o,l,{type:"next_step_run_again"})}function cr(n,e){const t=Hc(e);if(t){const r=t.map(Kc);return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:r}}return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:{type:"text",text:Ke(e)}}}function Hc(n){if(Array.isArray(n)){const t=[];for(const r of n){const s=ja(r);if(!s)return null;t.push(s)}return t}const e=ja(n);return e?[e]:null}function ja(n){if(!_t(n))return null;const e=n.type;if(e==="text"&&typeof n.text=="string"){const t={type:"text",text:n.text};return _t(n.providerData)&&(t.providerData=n.providerData),t}if(e==="image"){const t={type:"image"};let r,s;const a=ue(n.mediaType)?n.mediaType:void 0,i=n.image;if(typeof i=="string"&&i.length>0)r=i;else if(_t(i)){const o=i,l=ue(o.mediaType)?o.mediaType:a;if(ue(o.url)?r=o.url:(ue(o.data)||o.data instanceof Uint8Array&&o.data.length>0)&&(r=dr(o.data,l)),!r){const c=ue(o.fileId)&&o.fileId||ue(o.id)&&o.id||void 0;c&&(s=c)}}if(!r&&typeof n.imageUrl=="string"&&n.imageUrl.length>0&&(r=n.imageUrl),!s&&typeof n.fileId=="string"&&n.fileId.length>0&&(s=n.fileId),!r&&typeof n.data=="string"&&n.data.length>0?r=a?dr(n.data,a):n.data:!r&&n.data instanceof Uint8Array&&n.data.length>0&&(r=dr(n.data,a)),typeof n.detail=="string"&&n.detail.length>0&&(t.detail=n.detail),r)t.image=r;else if(s)t.image={fileId:s};else return null;return _t(n.providerData)&&(t.providerData=n.providerData),t}if(e==="file"){const t=Yc(n);if(!t)return null;const r={type:"file",file:t};return _t(n.providerData)&&(r.providerData=n.providerData),r}return null}function Kc(n){if(n.type==="text"){const t={type:"input_text",text:n.text};return n.providerData&&(t.providerData=n.providerData),t}if(n.type==="image"){const t={type:"input_image"};if(typeof n.detail=="string"&&n.detail.length>0&&(t.detail=n.detail),typeof n.image=="string"&&n.image.length>0)t.image=n.image;else if(_t(n.image)){const r=n.image,s=ue(r.mediaType)?r.mediaType:void 0;if(ue(r.url))t.image=r.url;else if(ue(r.data))t.image=s&&!r.data.startsWith("data:")?$t(r.data,s):r.data;else if(r.data instanceof Uint8Array&&r.data.length>0){const a=Hr(r.data);t.image=$t(a,s)}else{const a=ue(r.fileId)&&r.fileId||ue(r.id)&&r.id||void 0;a&&(t.image={id:a})}}return n.providerData&&(t.providerData=n.providerData),t}if(n.type==="file"){const t={type:"input_file"},r=n.file;if(typeof r=="string")t.file=r;else if(r&&typeof r=="object"){const s=r;if("data"in s&&s.data){const a=s.mediaType??"text/plain";if(typeof s.data=="string")t.file=$t(s.data,a);else{const i=Hr(s.data);t.file=$t(i,a)}}else if(typeof s.url=="string"&&s.url.length>0)t.file={url:s.url};else{const a=typeof s.id=="string"&&s.id.length>0&&s.id||(typeof s.fileId=="string"&&s.fileId.length>0?s.fileId:void 0);a&&(t.file={id:a})}typeof s.filename=="string"&&s.filename.length>0&&(t.filename=s.filename)}return n.providerData&&(t.providerData=n.providerData),t}return n}function Yc(n){const e=n.file;if(typeof e=="string"&&e.length>0)return e;const t=Xc(e);if(t)return t;const r=Qc(n);return r||null}function Xc(n){if(!_t(n))return null;if("data"in n&&n.data!==void 0){const t=n.data,r=typeof t=="string"&&t.length>0,s=t instanceof Uint8Array&&t.length>0;return!r&&!s||!ue(n.mediaType)||!ue(n.filename)?null:{data:typeof t=="string"?t:new Uint8Array(t),mediaType:n.mediaType,filename:n.filename}}if(ue(n.url)){const t={url:n.url};return ue(n.filename)&&(t.filename=n.filename),t}const e=ue(n.id)&&n.id||ue(n.fileId)&&n.fileId;if(e){const t={id:e};return ue(n.filename)&&(t.filename=n.filename),t}return null}function Qc(n){const e=typeof n.filename=="string"&&n.filename.length>0?n.filename:void 0,t=typeof n.mediaType=="string"&&n.mediaType.length>0?n.mediaType:void 0;if(typeof n.fileData=="string"&&n.fileData.length>0)return!t||!e?null:{data:n.fileData,mediaType:t,filename:e};if(n.fileData instanceof Uint8Array&&n.fileData.length>0)return!t||!e?null:{data:new Uint8Array(n.fileData),mediaType:t,filename:e};if(typeof n.fileUrl=="string"&&n.fileUrl.length>0){const r={url:n.fileUrl};return e&&(r.filename=e),r}if(typeof n.fileId=="string"&&n.fileId.length>0){const r={id:n.fileId};return e&&(r.filename=e),r}return null}function _t(n){return typeof n=="object"&&n!==null}function ue(n){return typeof n=="string"&&n.length>0}function dr(n,e){if(typeof n=="string")return e&&!n.startsWith("data:")?$t(n,e):n;const t=Hr(n);return $t(t,e)}function $t(n,e){return e?`data:${e};base64,${n}`:n}async function $a(n,e,t,r){async function s(a){let i=a.toolCall.arguments;if(a.tool.parameters&&(ft(a.tool.parameters)?i=a.tool.parameters.parse(i):i=JSON.parse(i)),await a.tool.needsApproval(r._context,i,a.toolCall.callId)){const l=r._context.isToolApproved({toolName:a.tool.name,callId:a.toolCall.callId});if(l===!1)return Ea(async c=>{const p="Tool execution was not approved.";return c.setError({message:p,data:{tool_name:a.tool.name,error:`Tool execution for ${a.toolCall.callId} was manually rejected by user.`}}),c.spanData.output=p,{type:"function_output",tool:a.tool,output:p,runItem:new jt(cr(a.toolCall,p),n,p)}},{data:{name:a.tool.name}});if(l!==!0)return{type:"function_approval",tool:a.tool,runItem:new Ie(a.toolCall,n)}}return Ea(async l=>{t.config.traceIncludeSensitiveData&&(l.spanData.input=a.toolCall.arguments);try{t.emit("agent_tool_start",r._context,n,a.tool,{toolCall:a.toolCall}),n.emit("agent_tool_start",r._context,a.tool,{toolCall:a.toolCall});const c=await a.tool.invoke(r._context,a.toolCall.arguments,{toolCall:a.toolCall}),p=Ke(c);t.emit("agent_tool_end",r._context,n,a.tool,p,{toolCall:a.toolCall}),n.emit("agent_tool_end",r._context,a.tool,p,{toolCall:a.toolCall}),t.config.traceIncludeSensitiveData&&(l.spanData.output=p);const f={type:"function_output",tool:a.tool,output:c,runItem:new jt(cr(a.toolCall,c),n,c)},h=uc(a.toolCall);if(h){f.agentRunResult=h;const w=h.interruptions;w.length>0&&(f.interruptions=w)}return f}catch(c){throw l.setError({message:"Error running tool",data:{tool_name:a.tool.name,error:String(c)}}),c}},{data:{name:a.tool.name}})}try{return await Promise.all(e.map(s))}catch(a){throw new lu(`Failed to run function tools: ${a}`,a,r)}}async function ed(n,e){const t=e.action;let r;switch(t.type){case"click":await n.click(t.x,t.y,t.button);break;case"double_click":await n.doubleClick(t.x,t.y);break;case"drag":await n.drag(t.path.map(s=>[s.x,s.y]));break;case"keypress":await n.keypress(t.keys);break;case"move":await n.move(t.x,t.y);break;case"screenshot":r=await n.screenshot();break;case"scroll":await n.scroll(t.x,t.y,t.scroll_x,t.scroll_y);break;case"type":await n.type(t.text);break;case"wait":await n.wait();break}if(typeof r<"u"||typeof n.screenshot=="function"&&(r=await n.screenshot(),typeof r<"u"))return r;throw new Error("Computer does not implement screenshot()")}async function td(n,e,t,r,s=void 0){const a=s??M,i=[];for(const o of e){const l=o.computer.computer,c=o.toolCall;t.emit("agent_tool_start",r,n,o.computer,{toolCall:c}),typeof n.emit=="function"&&n.emit("agent_tool_start",r,o.computer,{toolCall:c});let p;try{p=await ed(l,c)}catch(w){a.error("Failed to execute computer action:",w),p=""}t.emit("agent_tool_end",r,n,o.computer,p,{toolCall:c}),typeof n.emit=="function"&&n.emit("agent_tool_end",r,o.computer,p,{toolCall:c});const f=p?`data:image/png;base64,${p}`:"",h={type:"computer_call_result",callId:c.callId,output:{type:"computer_screenshot",data:f}};i.push(new jt(h,n,f))}return i}async function nd(n,e,t,r,s,a,i,o){if(r=[...r],a.length===0)return M.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."),new Te(e,s,t,r,{type:"next_step_run_again"});if(a.length>1){const c="Multiple handoffs detected, ignoring this one.";for(let p=1;p<a.length;p++)r.push(new jt(cr(a[p].toolCall,c),n,c))}const l=a[0];return Uc(async c=>{const p=l.handoff,f=await p.onInvokeHandoff(o,l.toolCall.arguments);if(c.spanData.to_agent=f.name,a.length>1){const w=a.map(g=>g.handoff.agentName);c.setError({message:"Multiple handoffs requested",data:{requested_agents:w}})}r.push(new Wr(cr(l.toolCall,ha(f)),n,f)),i.emit("agent_handoff",o,n,f),n.emit("agent_handoff",o,f);const h=p.inputFilter??i.config.handoffInputFilter;if(h){M.debug("Filtering inputs for handoff"),typeof h!="function"&&c.setError({message:"Invalid input filter",data:{details:"not callable"}});const w={inputHistory:Array.isArray(e)?[...e]:e,preHandoffItems:[...t],newItems:[...r],runContext:o},g=h(w);e=g.inputHistory,t=g.preHandoffItems,r=g.newItems}return new Te(e,s,t,r,{type:"next_step_handoff",newAgent:f})},{data:{from_agent:n.name}})}const lr={isFinalOutput:!1,isInterrupted:void 0};async function Fa(n,e,t){if(e.length===0)return lr;const r=[];for(const i of e)if(i.runItem instanceof Ie&&r.push(i.runItem),i.type==="function_output"){if(Array.isArray(i.interruptions))r.push(...i.interruptions);else if(i.agentRunResult){const o=i.agentRunResult.interruptions;o.length>0&&r.push(...o)}}if(r.length>0)return{isFinalOutput:!1,isInterrupted:!0,interruptions:r};if(n.toolUseBehavior==="run_llm_again")return lr;const s=e[0];if(n.toolUseBehavior==="stop_on_first_tool")return(s==null?void 0:s.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:Ke(s.output)}:lr;const a=n.toolUseBehavior;if(typeof a=="object"){const i=e.find(o=>a.stopAtToolNames.includes(o.tool.name));return(i==null?void 0:i.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:Ke(i.output)}:lr}if(typeof a=="function")return a(t._context,e);throw new te(`Invalid toolUseBehavior: ${a}`,t)}function rd(n){if(n instanceof or)return"message_output_created";if(n instanceof Vr)return"handoff_requested";if(n instanceof Wr)return"handoff_occurred";if(n instanceof yt)return"tool_called";if(n instanceof jt)return"tool_output";if(n instanceof Gr)return"reasoning_item_created";if(n instanceof Ie)return"tool_approval_requested"}function La(n,e){const t=rd(e);if(!t){M.warn("Unknown item type: ",e);return}n._addItem(new Gc(t,e))}function sd(n,e){for(const t of e)La(n,t)}function Za(n,e,t){const r=t==null?void 0:t.skipItems;for(const s of e.newStepItems)r!=null&&r.has(s)||La(n,s)}class Ua{constructor(){O(this,Jt,new Map)}addToolUse(e,t){u(this,Jt).set(e,t)}hasUsedTools(e){return u(this,Jt).has(e)}toJSON(){return Object.fromEntries(Array.from(u(this,Jt).entries()).map(([e,t])=>[e.name,t]))}}Jt=new WeakMap;const pr="1.0",ad=_(pr),Pe=y({name:d()}),Ja=y({object:_("trace.span"),id:d(),trace_id:d(),parent_id:d().nullable(),started_at:d().nullable(),ended_at:d().nullable(),error:y({message:d(),data:se(d(),G()).optional()}).nullable(),span_data:se(d(),G())}).extend({previous_span:wo(()=>Ja).optional()}),Ba=y({requests:N(),inputTokens:N(),outputTokens:N(),totalTokens:N()}),qa=y({usage:Ba,output:V(zr),responseId:d().optional(),providerData:se(d(),G()).optional()}),za=me("type",[y({type:_("message_output_item"),rawItem:ar,agent:Pe}),y({type:_("tool_call_item"),rawItem:Pc.or(un),agent:Pe}),y({type:_("tool_call_output_item"),rawItem:Jr,agent:Pe,output:d()}),y({type:_("reasoning_item"),rawItem:qr,agent:Pe}),y({type:_("handoff_call_item"),rawItem:cn,agent:Pe}),y({type:_("handoff_output_item"),rawItem:Jr,sourceAgent:Pe,targetAgent:Pe}),y({type:_("tool_approval_item"),rawItem:cn.or(un),agent:Pe})]),id=y({object:_("trace"),id:d(),workflow_name:d(),group_id:d().nullable(),metadata:se(d(),G())}),od=y({newItems:V(za),toolsUsed:V(d()),handoffs:V(y({toolCall:G(),handoff:G()})),functions:V(y({toolCall:G(),tool:G()})),computerActions:V(y({toolCall:G(),computer:G()})),mcpApprovalRequests:V(y({requestItem:y({rawItem:y({type:_("hosted_tool_call"),name:d(),arguments:d().optional(),status:d().optional(),output:d().optional(),providerData:se(d(),G()).nullable().optional()})}),mcpTool:y({type:_("hosted_tool"),name:_("hosted_mcp"),providerData:se(d(),G())})})).optional()}),Ga=y({tripwireTriggered:ct(),outputInfo:G()}),ud=y({guardrail:y({type:_("input"),name:d()}),output:Ga}),cd=y({guardrail:y({type:_("output"),name:d()}),agentOutput:G(),agent:Pe,output:Ga}),Va=y({$schemaVersion:ad,currentTurn:N(),currentAgent:Pe,originalInput:d().or(V(Mc)),modelResponses:V(qa),context:y({usage:Ba,approvals:se(d(),y({approved:V(d()).or(ct()),rejected:V(d()).or(ct())})),context:se(d(),G())}),toolUseTracker:se(d(),V(d())),maxTurns:N(),currentAgentSpan:Ja.nullable().optional(),noActiveAgentRun:ct(),inputGuardrailResults:V(ud),outputGuardrailResults:V(cd),currentStep:Wc.optional(),lastModelResponse:qa.optional(),generatedItems:V(za),lastProcessedResponse:od.optional(),trace:id.nullable()});class vt{constructor(e,t,r,s){v(this,"_currentTurn",0);v(this,"_currentAgent");v(this,"_originalInput");v(this,"_modelResponses");v(this,"_currentAgentSpan");v(this,"_context");v(this,"_toolUseTracker");v(this,"_generatedItems");v(this,"_maxTurns");v(this,"_noActiveAgentRun",!0);v(this,"_lastTurnResponse");v(this,"_inputGuardrailResults");v(this,"_outputGuardrailResults");v(this,"_currentStep");v(this,"_lastProcessedResponse");v(this,"_trace",null);this._context=e,this._originalInput=structuredClone(t),this._modelResponses=[],this._currentAgentSpan=void 0,this._currentAgent=r,this._toolUseTracker=new Ua,this._generatedItems=[],this._maxTurns=s,this._inputGuardrailResults=[],this._outputGuardrailResults=[],this._trace=ln()}get history(){return dn(this._originalInput,this._generatedItems)}getInterruptions(){var e;return((e=this._currentStep)==null?void 0:e.type)!=="next_step_interruption"?[]:this._currentStep.data.interruptions}approve(e,t={alwaysApprove:!1}){this._context.approveTool(e,t)}reject(e,t={alwaysReject:!1}){this._context.rejectTool(e,t)}toJSON(){var r;const e={$schemaVersion:pr,currentTurn:this._currentTurn,currentAgent:{name:this._currentAgent.name},originalInput:this._originalInput,modelResponses:this._modelResponses.map(s=>({usage:{requests:s.usage.requests,inputTokens:s.usage.inputTokens,outputTokens:s.usage.outputTokens,totalTokens:s.usage.totalTokens},output:s.output,responseId:s.responseId,providerData:s.providerData})),context:this._context.toJSON(),toolUseTracker:this._toolUseTracker.toJSON(),maxTurns:this._maxTurns,currentAgentSpan:(r=this._currentAgentSpan)==null?void 0:r.toJSON(),noActiveAgentRun:this._noActiveAgentRun,inputGuardrailResults:this._inputGuardrailResults,outputGuardrailResults:this._outputGuardrailResults.map(s=>({...s,agent:s.agent.toJSON()})),currentStep:this._currentStep,lastModelResponse:this._lastTurnResponse,generatedItems:this._generatedItems.map(s=>s.toJSON()),lastProcessedResponse:this._lastProcessedResponse,trace:this._trace?this._trace.toJSON():null},t=Va.safeParse(e);if(!t.success)throw new du(`Failed to serialize run state. ${t.error.message}`);return t.data}toString(){return JSON.stringify(this.toJSON())}static async fromString(e,t){var f,h,w,g,x;const[r,s]=await ne(()=>JSON.parse(t));if(r)throw new te(`Failed to parse run state. ${r instanceof Error?r.message:String(r)}`);const a=s.$schemaVersion;if(!a)throw new te("Run state is missing schema version");if(a!==pr)throw new te(`Run state schema version ${a} is not supported. Please use version ${pr}`);const i=Va.parse(JSON.parse(t)),o=dd(e),l=new Mt(i.context.context);l._rebuildApprovals(i.context.approvals);const c=o.get(i.currentAgent.name);if(!c)throw new te(`Agent ${i.currentAgent.name} not found`);const p=new vt(l,"",c,i.maxTurns);p._currentTurn=i.currentTurn,p._toolUseTracker=new Ua;for(const[b,m]of Object.entries(i.toolUseTracker))p._toolUseTracker.addToolUse(o.get(b),m);if(i.currentAgentSpan){i.trace||M.warn("Trace is not set, skipping tracing setup");const b=je().createTrace({traceId:(f=i.trace)==null?void 0:f.id,name:(h=i.trace)==null?void 0:h.workflow_name,groupId:((w=i.trace)==null?void 0:w.group_id)??void 0,metadata:(g=i.trace)==null?void 0:g.metadata});p._currentAgentSpan=Wa(b,i.currentAgentSpan),p._trace=b}return p._noActiveAgentRun=i.noActiveAgentRun,p._inputGuardrailResults=i.inputGuardrailResults,p._outputGuardrailResults=i.outputGuardrailResults.map(b=>({...b,agent:o.get(b.agent.name)})),p._currentStep=i.currentStep,p._originalInput=i.originalInput,p._modelResponses=i.modelResponses.map(Ha),p._lastTurnResponse=i.lastModelResponse?Ha(i.lastModelResponse):void 0,p._generatedItems=i.generatedItems.map(b=>Ka(b,o)),p._lastProcessedResponse=i.lastProcessedResponse?await ld(o,p._currentAgent,p._context,i.lastProcessedResponse):void 0,((x=i.currentStep)==null?void 0:x.type)==="next_step_handoff"&&(p._currentStep={type:"next_step_handoff",newAgent:o.get(i.currentStep.newAgent.name)}),p}}function dd(n){const e=new Map,t=[n];for(;t.length>0;){const r=t.shift();if(!e.has(r.name)){e.set(r.name,r);for(const s of r.handoffs)s instanceof ht?e.has(s.name)||t.push(s):s.agent&&(e.has(s.agent.name)||t.push(s.agent))}}return e}function Wa(n,e){const t=e.span_data,r=e.previous_span?Wa(n,e.previous_span):void 0,s=je().createSpan({spanId:e.id,traceId:e.trace_id,parentId:e.parent_id??void 0,startedAt:e.started_at??void 0,endedAt:e.ended_at??void 0,data:t},n);return s.previousSpan=r,s}function Ha(n){const e=new ir;return e.requests=n.usage.requests,e.inputTokens=n.usage.inputTokens,e.outputTokens=n.usage.outputTokens,e.totalTokens=n.usage.totalTokens,{usage:e,output:n.output.map(t=>zr.parse(t)),responseId:n.responseId,providerData:n.providerData}}function Ka(n,e){switch(n.type){case"message_output_item":return new or(n.rawItem,e.get(n.agent.name));case"tool_call_item":return new yt(n.rawItem,e.get(n.agent.name));case"tool_call_output_item":return new jt(n.rawItem,e.get(n.agent.name),n.output);case"reasoning_item":return new Gr(n.rawItem,e.get(n.agent.name));case"handoff_call_item":return new Vr(n.rawItem,e.get(n.agent.name));case"handoff_output_item":return new Wr(n.rawItem,e.get(n.sourceAgent.name),e.get(n.targetAgent.name));case"tool_approval_item":return new Ie(n.rawItem,e.get(n.agent.name))}}async function ld(n,e,t,r){const s=await e.getAllTools(t),a=new Map(s.filter(c=>c.type==="function").map(c=>[c.name,c])),i=new Map(s.filter(c=>c.type==="computer").map(c=>[c.name,c])),o=new Map(e.handoffs.map(c=>c instanceof ht?[c.name,ga(c)]:[c.toolName,c])),l={newItems:r.newItems.map(c=>Ka(c,n)),toolsUsed:r.toolsUsed,handoffs:r.handoffs.map(c=>{if(!o.has(c.handoff.toolName))throw new te(`Handoff ${c.handoff.toolName} not found`);return{toolCall:c.toolCall,handoff:o.get(c.handoff.toolName)}}),functions:await Promise.all(r.functions.map(async c=>{if(!a.has(c.tool.name))throw new te(`Tool ${c.tool.name} not found`);return{toolCall:c.toolCall,tool:a.get(c.tool.name)}})),computerActions:r.computerActions.map(c=>{const p=c.computer.name;if(!i.has(p))throw new te(`Computer tool ${p} not found`);return{toolCall:c.toolCall,computer:i.get(p)}}),mcpApprovalRequests:(r.mcpApprovalRequests??[]).map(c=>({requestItem:new Ie(c.requestItem.rawItem,e),mcpTool:c.mcpTool}))};return{...l,hasToolsOrApprovalsToRun(){return l.handoffs.length>0||l.functions.length>0||l.mcpApprovalRequests.length>0||l.computerActions.length>0}}}const Ya=10;function Xa(n,e){return n?!1:e?!0:"enabled_without_data"}function Kr(n){return typeof n=="string"?[{type:"message",role:"user",content:n}]:[...n]}class Qa{constructor({conversationId:e,previousResponseId:t}){v(this,"conversationId");v(this,"previousResponseId");v(this,"sentInitialInput",!1);v(this,"sentItems",new WeakSet);v(this,"serverItems",new WeakSet);this.conversationId=e??void 0,this.previousResponseId=t??void 0}primeFromState({originalInput:e,generatedItems:t,modelResponses:r}){if(this.sentInitialInput)return;for(const a of Kr(e))a&&typeof a=="object"&&this.sentItems.add(a);this.sentInitialInput=!0;const s=r[r.length-1];for(const a of r)for(const i of a.output)i&&typeof i=="object"&&this.serverItems.add(i);!this.conversationId&&(s!=null&&s.responseId)&&(this.previousResponseId=s.responseId);for(const a of t){const i=a.rawItem;!i||typeof i!="object"||this.serverItems.has(i)&&this.sentItems.add(i)}}trackServerItems(e){if(e){for(const t of e.output)t&&typeof t=="object"&&this.serverItems.add(t);!this.conversationId&&this.previousResponseId!==void 0&&e.responseId&&(this.previousResponseId=e.responseId)}}prepareInput(e,t){const r=[];if(!this.sentInitialInput){const s=Kr(e);for(const a of s)r.push(a),a&&typeof a=="object"&&this.sentItems.add(a);this.sentInitialInput=!0}for(const s of t){if(s.type==="tool_approval_item")continue;const a=s.rawItem;!a||typeof a!="object"||this.sentItems.has(a)||this.serverItems.has(a)||(r.push(a),this.sentItems.add(a))}return r}}function dn(n,e){const t=e.filter(r=>r.type!=="tool_approval_item").map(r=>r.rawItem);return[...Kr(n),...t]}class pd extends ec{constructor(t={}){super();O(this,pe);v(this,"config");v(this,"inputGuardrailDefs");v(this,"outputGuardrailDefs");this.config={modelProvider:t.modelProvider??dc(),model:t.model,modelSettings:t.modelSettings,handoffInputFilter:t.handoffInputFilter,inputGuardrails:t.inputGuardrails,outputGuardrails:t.outputGuardrails,tracingDisabled:t.tracingDisabled??!1,traceIncludeSensitiveData:t.traceIncludeSensitiveData??!0,workflowName:t.workflowName??"Agent workflow",traceId:t.traceId,groupId:t.groupId,traceMetadata:t.traceMetadata},this.inputGuardrailDefs=(t.inputGuardrails??[]).map(_a),this.outputGuardrailDefs=(t.outputGuardrails??[]).map(Lr)}run(t,r,s={stream:!1,context:void 0}){return r instanceof vt&&r._trace?fd(r._trace,async()=>(r._currentAgentSpan&&fr(r._currentAgentSpan),s!=null&&s.stream?q(this,pe,ls).call(this,t,r,s):q(this,pe,us).call(this,t,r,s))):hd(async()=>s!=null&&s.stream?q(this,pe,ls).call(this,t,r,s):q(this,pe,us).call(this,t,r,s),{traceId:this.config.traceId,name:this.config.workflowName,groupId:this.config.groupId,metadata:this.config.traceMetadata})}}pe=new WeakSet,us=async function(t,r,s){return Xr(async()=>{var l,c;const a=r instanceof vt,i=a?r:new vt(s.context instanceof Mt?s.context:new Mt(s.context),r,t,s.maxTurns??Ya),o=s.conversationId||s.previousResponseId?new Qa({conversationId:s.conversationId,previousResponseId:s.previousResponseId}):void 0;o&&a&&o.primeFromState({originalInput:i._originalInput,generatedItems:i._generatedItems,modelResponses:i._modelResponses});try{for(;;){const p=i._currentAgent.model!==void 0&&i._currentAgent.model!==""||this.config.model!==void 0&&this.config.model!=="";let f=ei(i._currentAgent.model,this.config.model);if(typeof f=="string"&&(f=await this.config.modelProvider.getModel(f)),i._currentStep=i._currentStep??{type:"next_step_run_again"},i._currentStep.type==="next_step_interruption"){if(M.debug("Continuing from interruption"),!i._lastTurnResponse||!i._lastProcessedResponse)throw new te("No model response found in previous state",i);const h=await Pa(i._currentAgent,i._originalInput,i._generatedItems,i._lastTurnResponse,i._lastProcessedResponse,this,i);if(i._toolUseTracker.addToolUse(i._currentAgent,i._lastProcessedResponse.toolsUsed),i._originalInput=h.originalInput,i._generatedItems=h.generatedItems,i._currentStep=h.nextStep,h.nextStep.type==="next_step_interruption")return new Yr(i);continue}if(i._currentStep.type==="next_step_run_again"){const h=await i._currentAgent.getEnabledHandoffs(i._context);if(!i._currentAgentSpan){const B=h.map(oe=>oe.agentName);i._currentAgentSpan=Ca({data:{name:i._currentAgent.name,handoffs:B,output_type:i._currentAgent.outputSchemaName}}),i._currentAgentSpan.start(),fr(i._currentAgentSpan)}const w=await i._currentAgent.getAllTools(i._context),g=w.map(B=>Aa(B)),x=h.map(B=>Oa(B));if(i._currentAgentSpan&&(i._currentAgentSpan.spanData.tools=w.map(B=>B.name)),i._currentTurn++,i._currentTurn>i._maxTurns)throw(l=i._currentAgentSpan)==null||l.setError({message:"Max turns exceeded",data:{max_turns:i._maxTurns}}),new Bs(`Max turns (${i._maxTurns}) exceeded`,i);M.debug(`Running agent ${i._currentAgent.name} (turn ${i._currentTurn})`),i._currentTurn===1&&await q(this,pe,cs).call(this,i);const b=o?o.prepareInput(i._originalInput,i._generatedItems):dn(i._originalInput,i._generatedItems);i._noActiveAgentRun&&(i._currentAgent.emit("agent_start",i._context,i._currentAgent),this.emit("agent_start",i._context,i._currentAgent));let m={...this.config.modelSettings,...i._currentAgent.modelSettings};const I=i._currentAgent.modelSettings;m=ti(p,I,f,m),m=Da(i._currentAgent,i._toolUseTracker,m);const A=(o==null?void 0:o.previousResponseId)??s.previousResponseId,P=(o==null?void 0:o.conversationId)??s.conversationId;i._lastTurnResponse=await f.getResponse({systemInstructions:await i._currentAgent.getSystemPrompt(i._context),prompt:await i._currentAgent.getPrompt(i._context),...p?{overridePromptModel:!0}:{},input:b,previousResponseId:A,conversationId:P,modelSettings:m,tools:g,outputType:Xs(i._currentAgent.outputType),handoffs:x,tracing:Xa(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:s.signal}),i._modelResponses.push(i._lastTurnResponse),i._context.usage.add(i._lastTurnResponse.usage),i._noActiveAgentRun=!1,o==null||o.trackServerItems(i._lastTurnResponse);const R=Na(i._lastTurnResponse,i._currentAgent,w,h);i._lastProcessedResponse=R;const j=await Ma(i._currentAgent,i._originalInput,i._generatedItems,i._lastTurnResponse,i._lastProcessedResponse,this,i);i._toolUseTracker.addToolUse(i._currentAgent,i._lastProcessedResponse.toolsUsed),i._originalInput=j.originalInput,i._generatedItems=j.generatedItems,i._currentStep=j.nextStep}if(i._currentStep&&i._currentStep.type==="next_step_final_output")return await q(this,pe,ds).call(this,i,i._currentStep.output),this.emit("agent_end",i._context,i._currentAgent,i._currentStep.output),i._currentAgent.emit("agent_end",i._context,i._currentStep.output),new Yr(i);if(i._currentStep&&i._currentStep.type==="next_step_handoff")i._currentAgent=i._currentStep.newAgent,i._currentAgentSpan&&(i._currentAgentSpan.end(),fn(),i._currentAgentSpan=void 0),i._noActiveAgentRun=!0,i._currentStep={type:"next_step_run_again"};else{if(i._currentStep&&i._currentStep.type==="next_step_interruption")return new Yr(i);M.debug("Running next loop")}}}catch(p){throw i._currentAgentSpan&&i._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(p)}}),p}finally{i._currentAgentSpan&&(((c=i._currentStep)==null?void 0:c.type)!=="next_step_interruption"&&i._currentAgentSpan.end(),fn())}})},cs=async function(t){const r=this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(_a));if(r.length>0){const s={agent:t._currentAgent,input:t._originalInput,context:t._context};try{const a=await Promise.all(r.map(async i=>Ra(async o=>{const l=await i.run(s);return o.spanData.triggered=l.output.tripwireTriggered,l},{data:{name:i.name}},t._currentAgentSpan)));for(const i of a)if(i.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:i.guardrail.name}}),new zs(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i,t)}catch(a){throw a instanceof zs?a:(t._currentTurn--,new qs(`Input guardrail failed to complete: ${a}`,a,t))}}},ds=async function(t,r){const s=this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(Lr));if(s.length>0){const a=t._currentAgent.processFinalOutput(r),i={agent:t._currentAgent,agentOutput:a,context:t._context,details:{modelResponse:t._lastTurnResponse}};try{const o=await Promise.all(s.map(async l=>Ra(async c=>{const p=await l.run(i);return c.spanData.triggered=p.output.tripwireTriggered,p},{data:{name:l.name}},t._currentAgentSpan)));for(const l of o)if(l.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:l.guardrail.name}}),new Xn(`Output guardrail triggered: ${JSON.stringify(l.output.outputInfo)}`,l,t)}catch(o){throw o instanceof Xn?o:new qs(`Output guardrail failed to complete: ${o}`,o,t)}}},Pi=async function(t,r,s){var i,o,l;const a=r.conversationId||r.previousResponseId?new Qa({conversationId:r.conversationId,previousResponseId:r.previousResponseId}):void 0;a&&s&&a.primeFromState({originalInput:t.state._originalInput,generatedItems:t.state._generatedItems,modelResponses:t.state._modelResponses});try{for(;;){const c=t.state._currentAgent,p=await c.getEnabledHandoffs(t.state._context),f=await c.getAllTools(t.state._context),h=f.map(g=>Aa(g)),w=p.map(g=>Oa(g));if(t.state._currentStep=t.state._currentStep??{type:"next_step_run_again"},t.state._currentStep.type==="next_step_interruption"){if(M.debug("Continuing from interruption"),!t.state._lastTurnResponse||!t.state._lastProcessedResponse)throw new te("No model response found in previous state",t.state);const g=await Pa(t.state._currentAgent,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);if(Za(t,g),t.state._toolUseTracker.addToolUse(t.state._currentAgent,t.state._lastProcessedResponse.toolsUsed),t.state._originalInput=g.originalInput,t.state._generatedItems=g.generatedItems,t.state._currentStep=g.nextStep,g.nextStep.type==="next_step_interruption")return;continue}if(t.state._currentStep.type==="next_step_run_again"){if(!t.state._currentAgentSpan){const xe=p.map(Ae=>Ae.agentName);t.state._currentAgentSpan=Ca({data:{name:c.name,handoffs:xe,tools:f.map(Ae=>Ae.name),output_type:c.outputSchemaName}}),t.state._currentAgentSpan.start(),fr(t.state._currentAgentSpan)}if(t.state._currentTurn++,t.state._currentTurn>t.state._maxTurns)throw(i=t.state._currentAgentSpan)==null||i.setError({message:"Max turns exceeded",data:{max_turns:t.state._maxTurns}}),new Bs(`Max turns (${t.state._maxTurns}) exceeded`,t.state);M.debug(`Running agent ${c.name} (turn ${t.state._currentTurn})`);const g=c.model!==void 0&&c.model!==""||this.config.model!==void 0&&this.config.model!=="";let x=ei(c.model,this.config.model);typeof x=="string"&&(x=await this.config.modelProvider.getModel(x)),t.state._currentTurn===1&&await q(this,pe,cs).call(this,t.state);let b={...this.config.modelSettings,...c.modelSettings};const m=c.modelSettings;b=ti(g,m,x,b),b=Da(c,t.state._toolUseTracker,b);const I=a?a.prepareInput(t.input,t.newItems):dn(t.input,t.newItems);t.state._noActiveAgentRun&&(c.emit("agent_start",t.state._context,c),this.emit("agent_start",t.state._context,c));let A;const P=(a==null?void 0:a.previousResponseId)??r.previousResponseId,R=(a==null?void 0:a.conversationId)??r.conversationId;for await(const xe of x.getStreamedResponse({systemInstructions:await c.getSystemPrompt(t.state._context),prompt:await c.getPrompt(t.state._context),...g?{overridePromptModel:!0}:{},input:I,previousResponseId:P,conversationId:R,modelSettings:b,tools:h,handoffs:w,outputType:Xs(c.outputType),tracing:Xa(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:r.signal})){if(xe.type==="response_done"){const Ae=ka.parse(xe);A={usage:new ir(Ae.response.usage),output:Ae.response.output,responseId:Ae.response.id}}if(t.cancelled)return;t._addItem(new zc(xe))}if(t.state._noActiveAgentRun=!1,!A)throw new _e("Model did not produce a final response!",t.state);t.state._lastTurnResponse=A,a==null||a.trackServerItems(A),t.state._modelResponses.push(t.state._lastTurnResponse);const j=Na(t.state._lastTurnResponse,c,f,p);t.state._lastProcessedResponse=j;const B=new Set(j.newItems);B.size>0&&sd(t,j.newItems);const oe=await Ma(c,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);Za(t,oe,{skipItems:B}),t.state._toolUseTracker.addToolUse(c,j.toolsUsed),t.state._originalInput=oe.originalInput,t.state._generatedItems=oe.generatedItems,t.state._currentStep=oe.nextStep}if(t.state._currentStep.type==="next_step_final_output"){await q(this,pe,ds).call(this,t.state,t.state._currentStep.output),this.emit("agent_end",t.state._context,c,t.state._currentStep.output),c.emit("agent_end",t.state._context,t.state._currentStep.output);return}else{if(t.state._currentStep.type==="next_step_interruption")return;t.state._currentStep.type==="next_step_handoff"?(t.state._currentAgent=(o=t.state._currentStep)==null?void 0:o.newAgent,t.state._currentAgentSpan&&(t.state._currentAgentSpan.end(),fn()),t.state._currentAgentSpan=void 0,t._addItem(new Vc(t.state._currentAgent)),t.state._noActiveAgentRun=!0,t.state._currentStep={type:"next_step_run_again"}):M.debug("Running next loop")}}}catch(c){throw t.state._currentAgentSpan&&t.state._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(c)}}),c}finally{t.state._currentAgentSpan&&(((l=t.state._currentStep)==null?void 0:l.type)!=="next_step_interruption"&&t.state._currentAgentSpan.end(),fn())}},ls=async function(t,r,s){return s=s??{},Xr(async()=>{const a=r instanceof vt,i=a?r:new vt(s.context instanceof Mt?s.context:new Mt(s.context),r,t,s.maxTurns??Ya),o=new ri({signal:s.signal,state:i});o.maxTurns=s.maxTurns??i._maxTurns;const l=q(this,pe,Pi).call(this,o,s,a).then(()=>{o._done()},c=>{o._raiseError(c)});return o._setStreamLoopPromise(l),o})};function ei(n,e){return typeof n=="string"&&n!==ht.DEFAULT_MODEL_PLACEHOLDER||n?n:e??n??ht.DEFAULT_MODEL_PLACEHOLDER}function ti(n,e,t,r){var s,a,i,o,l,c,p,f;if(pa()&&n&&(typeof t!="string"||!sr(t))&&((s=e.providerData)!=null&&s.reasoning||(i=(a=e.providerData)==null?void 0:a.text)!=null&&i.verbosity||(o=e.providerData)!=null&&o.reasoning_effort)){const h={...r};return(l=h.providerData)==null||delete l.reasoning,(p=(c=h.providerData)==null?void 0:c.text)==null||delete p.verbosity,(f=h.providerData)==null||delete f.reasoning_effort,h.reasoning&&(delete h.reasoning.effort,delete h.reasoning.summary),h.text&&delete h.text.verbosity,h}return r}class ni{constructor(e){v(this,"state");this.state=e}get history(){return dn(this.input,this.newItems)}get output(){return dn([],this.newItems)}get input(){return this.state._originalInput}get newItems(){return this.state._generatedItems}get rawResponses(){return this.state._modelResponses}get lastResponseId(){const e=this.rawResponses;return e&&e.length>0?e[e.length-1].responseId:void 0}get lastAgent(){return this.state._currentAgent}get inputGuardrailResults(){return this.state._inputGuardrailResults}get outputGuardrailResults(){return this.state._outputGuardrailResults}get interruptions(){var e;return((e=this.state._currentStep)==null?void 0:e.type)==="next_step_interruption"?this.state._currentStep.data.interruptions:[]}get finalOutput(){var e;if(((e=this.state._currentStep)==null?void 0:e.type)==="next_step_final_output")return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);M.warn("Accessed finalOutput before agent run is completed.")}}class Yr extends ni{constructor(e){super(e)}}class ri extends ni{constructor(t={}){super(t.state);v(this,"currentTurn",0);v(this,"maxTurns");O(this,yn,null);O(this,Xe);O(this,be);O(this,Be);O(this,Bt);O(this,qt);O(this,_n);O(this,xt,!1);O(this,vn);if(S(this,Xe,t.signal),S(this,Be,new Wu({start:r=>{S(this,be,r)},cancel:()=>{S(this,xt,!0)}})),S(this,Bt,new Promise((r,s)=>{S(this,qt,r),S(this,_n,s)})),u(this,Xe)){const r=()=>{var a,i;if(u(this,xt))return;S(this,xt,!0);const s=u(this,be);if(S(this,be,void 0),u(this,Be).locked){if(s)try{s.close()}catch(o){M.debug(`Failed to close readable stream on abort: ${o}`)}}else u(this,Be).cancel((a=u(this,Xe))==null?void 0:a.reason).catch(o=>{M.debug(`Failed to cancel readable stream on abort: ${o}`)});(i=u(this,qt))==null||i.call(this)};u(this,Xe).aborted?r():u(this,Xe).addEventListener("abort",r,{once:!0})}}get currentAgent(){return this.lastAgent}_addItem(t){var r;this.cancelled||(r=u(this,be))==null||r.enqueue(t)}_done(){var t;!this.cancelled&&u(this,be)&&(u(this,be).close(),S(this,be,void 0),(t=u(this,qt))==null||t.call(this))}_raiseError(t){var r;!this.cancelled&&u(this,be)&&(u(this,be).error(t),S(this,be,void 0)),S(this,yn,t),(r=u(this,_n))==null||r.call(this,t),u(this,Bt).catch(s=>{M.debug(`Resulted in an error: ${s}`)})}get cancelled(){return u(this,xt)}toStream(){return u(this,Be)}get completed(){return u(this,Bt)}get error(){return u(this,yn)}toTextStream(t={}){const r=u(this,Be).pipeThrough(new Hu({transform(s,a){if(s.type==="raw_model_stream_event"&&s.data.type==="output_text_delta"){const i=Ta.parse(s.data);a.enqueue(i.delta)}}}));return t.compatibleWithNodeStreams?Vu.fromWeb(r):r}[Symbol.asyncIterator](){return u(this,Be)[Symbol.asyncIterator]()}_setStreamLoopPromise(t){S(this,vn,t)}_getStreamLoopPromise(){return u(this,vn)}}yn=new WeakMap,Xe=new WeakMap,be=new WeakMap,Be=new WeakMap,Bt=new WeakMap,qt=new WeakMap,_n=new WeakMap,xt=new WeakMap,vn=new WeakMap;let si;function Me(){return si??(si=new Ku),si}function ln(){const n=Me().getStore();return n!=null&&n.trace?n.trace:null}function pn(){const n=Me().getStore();return n!=null&&n.span?n.span:null}function ai(n){return async()=>{const e=ln();if(!e)throw new Error("No trace found");await e.start();const t=await n(e);if(t instanceof ri){const r=t._getStreamLoopPromise();if(r)return r.finally(()=>e.end()),t}return await e.end(),t}}async function fd(n,e,t={}){const r=typeof n=="string"?je().createTrace({...t,name:n}):n;return Me().run({trace:r},ai(e))}async function hd(n,e={}){if(ln())return await n();const r=je().createTrace(e);return Me().run({trace:r},ai(n))}function fr(n){const e=Me().getStore();if(!e)throw new Error("No existing trace found");e.span&&(e.span.previousSpan=e.previousSpan,e.previousSpan=e.span),e.span=n,Me().enterWith(e)}function fn(){var e;const n=Me().getStore();n&&(n.span=n.previousSpan,n.previousSpan=(e=n.previousSpan)==null?void 0:e.previousSpan,Me().enterWith(n))}function Ft(n){const e=pn();e&&e.setError(n)}function md(n){var e,t,r;return{trace:(e=n.trace)==null?void 0:e.clone(),span:(t=n.span)==null?void 0:t.clone(),previousSpan:(r=n.previousSpan)==null?void 0:r.clone()}}function Xr(n){const e=Me().getStore();if(!e)throw new Error("No existing trace found");const t=md(e);return Me().run(t,n)}class gd{async export(e){if(sa.disabled){M.debug("Tracing is disabled. Skipping export");return}for(const t of e)t.type==="trace"?console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}${t.groupId?` groupId=${t.groupId}`:""}`):console.log(`[Exporter] Export span: ${JSON.stringify(t)}`)}}class yd{constructor(e,{maxQueueSize:t=1e3,maxBatchSize:r=100,scheduleDelay:s=5e3,exportTriggerRatio:a=.8}={}){O(this,ge);O(this,bn);O(this,zt);O(this,wn);O(this,xn);O(this,Gt);O(this,fe,[]);O(this,qe);O(this,Qe,null);O(this,et,!1);O(this,Vt,null);S(this,bn,t),S(this,zt,r),S(this,wn,s),S(this,xn,t*a),S(this,Gt,e),S(this,qe,Xu),M.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.")}start(){S(this,Vt,new AbortController),q(this,ge,fs).call(this)}async onTraceStart(e){await q(this,ge,ps).call(this,e)}async onTraceEnd(e){}async onSpanStart(e){}async onSpanEnd(e){await q(this,ge,ps).call(this,e)}async shutdown(e){var t;for(e&&u(this,qe).setTimeout(()=>{var r;(r=u(this,Vt))==null||r.abort()},e),M.debug("Shutting down gracefully");u(this,fe).length>0;){if(M.debug(`Waiting for buffer to empty. Items left: ${u(this,fe).length}`),u(this,et)||await q(this,ge,tn).call(this,!0),(t=u(this,Vt))!=null&&t.signal.aborted){M.debug("Timeout reached, force flushing"),await q(this,ge,tn).call(this,!0);break}await new Promise(r=>u(this,qe).setTimeout(r,500))}M.debug("Buffer empty. Exiting"),u(this,qe)&&u(this,Qe)&&u(this,qe).clearTimeout(u(this,Qe))}async forceFlush(){u(this,fe).length>0&&await q(this,ge,tn).call(this,!0)}}bn=new WeakMap,zt=new WeakMap,wn=new WeakMap,xn=new WeakMap,Gt=new WeakMap,fe=new WeakMap,qe=new WeakMap,Qe=new WeakMap,et=new WeakMap,Vt=new WeakMap,ge=new WeakSet,ps=async function(e){if(u(this,fe).length+1>u(this,bn)){M.error("Dropping trace because buffer is full");return}u(this,fe).push(e),u(this,fe).length>u(this,xn)&&await q(this,ge,tn).call(this)},fs=function(){S(this,Qe,u(this,qe).setTimeout(async()=>{await q(this,ge,tn).call(this),q(this,ge,fs).call(this)},u(this,wn))),typeof u(this,Qe).unref=="function"&&u(this,Qe).unref()},tn=async function(e=!1){if(u(this,fe).length!==0){if(M.debug(`Exporting batches. Force: ${e}. Buffer size: ${u(this,fe).length}`),e||u(this,fe).length<u(this,zt)){const t=[...u(this,fe)];S(this,fe,[]),S(this,et,!0),await u(this,Gt).export(t),S(this,et,!1)}else if(u(this,fe).length>0){const t=u(this,fe).splice(0,u(this,zt));S(this,et,!0),await u(this,Gt).export(t),S(this,et,!1)}}};class _d{constructor(){O(this,we,[])}start(){for(const e of u(this,we))e.start&&e.start()}addTraceProcessor(e){u(this,we).push(e)}setProcessors(e){M.debug("Shutting down old processors");for(const t of u(this,we))t.shutdown();S(this,we,e)}async onTraceStart(e){for(const t of u(this,we))await t.onTraceStart(e)}async onTraceEnd(e){for(const t of u(this,we))await t.onTraceEnd(e)}async onSpanStart(e){for(const t of u(this,we))await t.onSpanStart(e)}async onSpanEnd(e){for(const t of u(this,we))await t.onSpanEnd(e)}async shutdown(e){for(const t of u(this,we))await t.shutdown(e)}async forceFlush(){for(const e of u(this,we))await e.forceFlush()}}we=new WeakMap;let Qr=null,es=null;function vd(){return Qr||(Qr=new gd),Qr}function ii(){return es||(es=new yd(vd())),es}function oi(){return new Date().toISOString()}function ui(){return`trace_${la().replace(/-/g,"")}`}function bd(){return`span_${la().replace(/-/g,"").slice(0,24)}`}function wd(n){return Object.fromEntries(Object.entries(n).filter(([e])=>!e.startsWith("_")))}const ss=class ss{constructor(e,t){v(this,"type","trace.span");O(this,Sn);O(this,In);O(this,Tn);O(this,kn);O(this,St);O(this,tt);O(this,nt);O(this,It);O(this,An);S(this,In,e.traceId),S(this,Tn,e.spanId??bd()),S(this,Sn,e.data),S(this,St,t),S(this,kn,e.parentId??null),S(this,It,e.error??null),S(this,tt,e.startedAt??null),S(this,nt,e.endedAt??null)}get traceId(){return u(this,In)}get spanData(){return u(this,Sn)}get spanId(){return u(this,Tn)}get parentId(){return u(this,kn)}get previousSpan(){return u(this,An)}set previousSpan(e){S(this,An,e)}start(){if(u(this,tt)){M.warn("Span already started");return}S(this,tt,oi()),u(this,St).onSpanStart(this)}end(){if(u(this,nt)){M.debug("Span already finished",this.spanData);return}S(this,nt,oi()),u(this,St).onSpanEnd(this)}setError(e){S(this,It,e)}get error(){return u(this,It)}get startedAt(){return u(this,tt)}get endedAt(){return u(this,nt)}clone(){var t;const e=new ss({traceId:this.traceId,spanId:this.spanId,parentId:this.parentId??void 0,data:this.spanData,startedAt:u(this,tt)??void 0,endedAt:u(this,nt)??void 0,error:u(this,It)??void 0},u(this,St));return e.previousSpan=(t=this.previousSpan)==null?void 0:t.clone(),e}toJSON(){return{object:this.type,id:this.spanId,trace_id:this.traceId,parent_id:this.parentId,started_at:this.startedAt,ended_at:this.endedAt,span_data:wd(this.spanData),error:this.error}}};Sn=new WeakMap,In=new WeakMap,Tn=new WeakMap,kn=new WeakMap,St=new WeakMap,tt=new WeakMap,nt=new WeakMap,It=new WeakMap,An=new WeakMap;let hn=ss;class Ye extends hn{constructor(e,t){super({traceId:"no-op",spanId:"no-op",data:e},t)}start(){}end(){}setError(){}toJSON(){return null}}const as=class as{constructor(e,t){v(this,"type","trace");v(this,"traceId");v(this,"name");v(this,"groupId",null);v(this,"metadata");O(this,Wt);O(this,ze);this.traceId=e.traceId??ui(),this.name=e.name??"Agent workflow",this.groupId=e.groupId??null,this.metadata=e.metadata??{},S(this,Wt,t??ii()),S(this,ze,e.started??!1)}async start(){u(this,ze)||(S(this,ze,!0),await u(this,Wt).onTraceStart(this))}async end(){u(this,ze)&&(S(this,ze,!1),await u(this,Wt).onTraceEnd(this))}clone(){return new as({traceId:this.traceId,name:this.name,groupId:this.groupId??void 0,metadata:this.metadata,started:u(this,ze)})}toJSON(){return{object:this.type,id:this.traceId,workflow_name:this.name,group_id:this.groupId,metadata:this.metadata}}};Wt=new WeakMap,ze=new WeakMap;let mn=as;class ts extends mn{constructor(){super({})}async start(){}async end(){}toJSON(){return null}}class xd{constructor(){O(this,mr);O(this,le);O(this,Tt);S(this,le,new _d),S(this,Tt,sa.disabled),q(this,mr,Mi).call(this)}registerProcessor(e){u(this,le).addTraceProcessor(e)}setProcessors(e){u(this,le).setProcessors(e)}getCurrentTrace(){return ln()}getCurrentSpan(){return pn()}setDisabled(e){S(this,Tt,e)}startExportLoop(){u(this,le).start()}createTrace(e){if(u(this,Tt))return M.debug("Tracing is disabled, Not creating trace %o",e),new ts;const t=e.traceId??ui(),r=e.name??"Agent workflow";return M.debug("Creating trace %s with name %s",t,r),new mn({...e,name:r,traceId:t},u(this,le))}createSpan(e,t){if(u(this,Tt)||e.disabled)return M.debug("Tracing is disabled, Not creating span %o",e),new Ye(e.data,u(this,le));let r,s;if(t){if(t instanceof mn){if(t instanceof ts)return M.debug("Parent trace is no-op, returning NoopSpan"),new Ye(e.data,u(this,le));s=t.traceId}else if(t instanceof hn){if(t instanceof Ye)return M.debug("Parent span is no-op, returning NoopSpan"),new Ye(e.data,u(this,le));r=t.spanId,s=t.traceId}}else{const a=ln(),i=pn();if(!a)return M.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Ye(e.data,u(this,le));if(i instanceof Ye||a instanceof ts)return M.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`),new Ye(e.data,u(this,le));s=a.traceId,i?(M.debug("Using parent span %s",i.spanId),r=i.spanId):M.debug("No parent span, using current trace %s",a.traceId)}return s?(M.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId??s}`),new hn({...e,traceId:s,parentId:r},u(this,le))):(M.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Ye(e.data,u(this,le)))}async shutdown(e){try{M.debug("Shutting down tracing provider"),await u(this,le).shutdown(e)}catch(t){M.error("Error shutting down tracing provider %o",t)}}async forceFlush(){await u(this,le).forceFlush()}}le=new WeakMap,Tt=new WeakMap,mr=new WeakSet,Mi=function(){if(typeof process<"u"&&typeof process.on=="function"){const e=async()=>{const t=setTimeout(()=>{console.warn("Cleanup timeout, forcing exit"),process.exit(1)},5e3);try{await this.shutdown()}finally{clearTimeout(t)}};process.on("beforeExit",e),process.on("SIGINT",async()=>{await e(),ci("SIGINT")||process.exit(130)}),process.on("SIGTERM",async()=>{await e(),ci("SIGTERM")||process.exit(0)}),process.on("unhandledRejection",async(t,r)=>{M.error("Unhandled rejection",t,r),await e(),Sd("unhandledRejection")||process.exit(1)})}};function ci(n){return process.listeners(n).length>1}function Sd(n){return process.listeners(n).length>1}let ns;function je(){return ns||(ns=new xd),ns}function Id(n){je().registerProcessor(n)}Id(ii());function di(n){const e=atob(n),t=e.length,r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e.charCodeAt(s);return r.buffer}function li(n){const e=String.fromCharCode(...new Uint8Array(n));return btoa(e)}function pi(n){if(typeof n>"u"||n===null||typeof n!="object"||!("type"in n)||typeof n.type!="string"||!n.type||n.type!=="message"||!("content"in n)||!Array.isArray(n.content)||n.content.length<1)return;const e=n.content[n.content.length-1];if(!(!("type"in e)||typeof e.type!="string")){if(e.type==="output_text")return typeof e.text=="string"?e.text:void 0;if(e.type==="output_audio")return typeof e.transcript=="string"?e.transcript:void 0}}function Td(n,e){const t=n.filter(a=>!e.some(i=>i.itemId===a.itemId)),r=e.filter(a=>!n.some(i=>i.itemId===a.itemId)),s=e.filter(a=>n.some(i=>i.itemId===a.itemId&&JSON.stringify(i)!==JSON.stringify(a)));return{removals:t,additions:r,updates:s}}function kd(){return typeof window>"u"?!1:typeof window.RTCPeerConnection<"u"}function fi(n){return n.role==="system"?n:n.role==="assistant"?{...n,content:n.content.map(e=>e.type==="output_audio"?{...e,audio:null}:e)}:n.role==="user"?{...n,content:n.content.map(e=>e.type==="input_audio"?{...e,audio:null}:e)}:n}function hi(n,e,t){if(e.type==="conversation.item.input_audio_transcription.completed")return n.map(a=>{if(a.itemId===e.item_id&&a.type==="message"&&"role"in a&&a.role==="user"){const i=a.content.map(o=>o.type==="input_audio"?{...o,transcript:e.transcript}:o);return{...a,content:i,status:"completed"}}return a});const r=!t&&e.type==="message"?fi(e):e,s=n.findIndex(a=>a.itemId===e.itemId);if(s!==-1)return n.map((a,i)=>i===s?r:!t&&a.type==="message"?fi(a):a);if(e.previousItemId){const a=n.findIndex(i=>i.itemId===e.previousItemId);return a!==-1?[...n.slice(0,a+1),r,...n.slice(a+1)]:[...n,r]}else return[...n,r]}const mi={"User-Agent":`Agents/JavaScript ${K.version}`,"X-OpenAI-Agents-SDK":`openai-agents-sdk.${K.version}`},Ad=`openai-agents-sdk.${K.version}`;function Od(n,e){const{name:t,arguments:r,...s}=e;return new Ie({type:"hosted_tool_call",name:t,arguments:JSON.stringify(r),status:"in_progress",providerData:{...s}},n)}function gi(n){const{name:e,arguments:t,providerData:r}=n.rawItem,{itemId:s,serverLabel:a,...i}=r??{};if(!s||!a)throw new Error("Invalid approval item for Realtime MCP approval request");return{type:"mcp_approval_request",itemId:s,serverLabel:a,...i,name:e,arguments:t?JSON.parse(t):{},approved:null}}class Cd extends ht{constructor(t){super(t);v(this,"voice");this.voice=t.voice}}function Ed(n){return{debounceTextLength:n.debounceTextLength??100}}function Rd({policyHint:n,...e}){const t=Lr(e),r=n??t.name;return{...t,policyHint:r,run:async s=>{const a=await t.run(s);return{...a,guardrail:{...a.guardrail,policyHint:r}}}}}function Nd(n){return`
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo??{})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim()}function bt(n,e){return n in e&&typeof e[n]<"u"}function Dd(n){return bt("modalities",n)||bt("inputAudioFormat",n)||bt("outputAudioFormat",n)||bt("inputAudioTranscription",n)||bt("turnDetection",n)||bt("inputAudioNoiseReduction",n)||bt("speed",n)}function Pd(n){var e,t,r,s,a,i,o,l;if(!Dd(n)){const c=(e=n.audio)!=null&&e.input?{format:hr(n.audio.input.format),noiseReduction:n.audio.input.noiseReduction??null,transcription:n.audio.input.transcription,turnDetection:n.audio.input.turnDetection}:void 0,p=((r=(t=n.audio)==null?void 0:t.output)==null?void 0:r.voice)??n.voice,f=(s=n.audio)!=null&&s.output||typeof p<"u"?{format:hr((i=(a=n.audio)==null?void 0:a.output)==null?void 0:i.format),voice:p,speed:(l=(o=n.audio)==null?void 0:o.output)==null?void 0:l.speed}:void 0;return{model:n.model,instructions:n.instructions,toolChoice:n.toolChoice,tools:n.tools,tracing:n.tracing,providerData:n.providerData,prompt:n.prompt,outputModalities:n.outputModalities,audio:c||f?{input:c,output:f}:void 0}}return{model:n.model,instructions:n.instructions,toolChoice:n.toolChoice,tools:n.tools,tracing:n.tracing,providerData:n.providerData,prompt:n.prompt,outputModalities:n.modalities,audio:{input:{format:hr(n.inputAudioFormat),noiseReduction:n.inputAudioNoiseReduction??null,transcription:n.inputAudioTranscription,turnDetection:n.turnDetection},output:{format:hr(n.outputAudioFormat),voice:n.voice,speed:n.speed}}}}function hr(n){if(!n)return;if(typeof n=="object")return n;const e=String(n);return e==="pcm16"?{type:"audio/pcm",rate:24e3}:e==="g711_ulaw"?{type:"audio/pcmu"}:e==="g711_alaw"?{type:"audio/pcma"}:{type:"audio/pcm",rate:24e3}}y({itemId:d()});const yi=me("role",[y({itemId:d(),previousItemId:d().nullable().optional(),type:_("message"),role:_("system"),content:V(y({type:_("input_text"),text:d()}))}),y({itemId:d(),previousItemId:d().nullable().optional(),type:_("message"),role:_("user"),status:de(["in_progress","completed"]),content:V(y({type:_("input_text"),text:d()}).or(y({type:_("input_audio"),audio:d().nullable().optional(),transcript:d().nullable()})))}),y({itemId:d(),previousItemId:d().nullable().optional(),type:_("message"),role:_("assistant"),status:de(["in_progress","completed","incomplete"]),content:V(y({type:_("output_text"),text:d()}).or(y({type:_("output_audio"),audio:d().nullable().optional(),transcript:d().nullable().optional()})))})]),_i=y({itemId:d(),previousItemId:d().nullable().optional(),type:_("function_call"),status:de(["in_progress","completed","incomplete"]),arguments:d(),name:d(),output:d().nullable()}),vi=y({itemId:d(),previousItemId:d().nullable().optional(),type:de(["mcp_call","mcp_tool_call"]),status:de(["in_progress","completed","incomplete"]),arguments:d(),name:d(),output:d().nullable()}),Md=y({itemId:d(),type:_("mcp_approval_request"),serverLabel:d(),name:d(),arguments:se(d(),G()),approved:ct().optional().nullable()}),ke=ia("openai-agents:realtime"),bi=y({id:d().optional().nullable(),conversation_id:d().optional().nullable(),max_output_tokens:N().or(_("inf")).optional().nullable(),metadata:se(d(),G()).optional().nullable(),output_modalities:V(d()).optional().nullable(),object:_("realtime.response").optional().nullable(),output:V(G()).optional().nullable(),audio:y({output:y({format:G().optional().nullable(),voice:d().optional().nullable()}).optional().nullable()}).optional().nullable(),status:de(["completed","incomplete","failed","cancelled","in_progress"]).optional().nullable(),status_details:se(d(),G()).optional().nullable(),usage:y({input_tokens:N().optional(),input_token_details:se(d(),G()).optional().nullable(),output_tokens:N().optional(),output_token_details:se(d(),G()).optional().nullable()}).optional().nullable()}),jd=y({id:d().optional(),audio:d().nullable().optional(),text:d().nullable().optional(),transcript:d().nullable().optional(),type:dt([_("input_text"),_("input_audio"),_("item_reference"),_("output_text"),_("output_audio")])}),Lt=y({id:d().optional(),arguments:d().optional(),call_id:d().optional(),content:V(jd).optional(),name:d().optional(),output:d().nullable().optional(),role:de(["user","assistant","system"]).optional(),status:de(["completed","incomplete","in_progress"]).optional(),type:de(["message","function_call","function_call_output","mcp_list_tools","mcp_tool_call","mcp_call","mcp_approval_request","mcp_approval_response"]).optional(),approval_request_id:d().nullable().optional(),approve:ct().nullable().optional(),reason:d().nullable().optional(),server_label:d().optional(),error:G().nullable().optional(),tools:V(y({name:d(),description:d(),input_schema:se(G()).optional()}).passthrough()).optional()}).passthrough(),$d=y({type:_("conversation.created"),event_id:d(),conversation:y({id:d().optional(),object:_("realtime.conversation").optional()})}),Fd=y({type:_("conversation.item.added"),event_id:d(),item:Lt,previous_item_id:d().nullable().optional()}),Ld=y({type:_("conversation.item.done"),event_id:d(),item:Lt,previous_item_id:d().nullable().optional()}),Zd=y({type:_("conversation.item.deleted"),event_id:d(),item_id:d()}),Ud=y({type:_("conversation.item.input_audio_transcription.completed"),event_id:d(),item_id:d(),content_index:N(),transcript:d(),logprobs:V(G()).nullable().optional()}),Jd=y({type:_("conversation.item.input_audio_transcription.delta"),event_id:d(),item_id:d(),content_index:N().optional(),delta:d().optional(),logprobs:V(G()).nullable().optional()}),Bd=y({type:_("conversation.item.input_audio_transcription.failed"),event_id:d(),item_id:d(),content_index:N(),error:y({code:d().optional(),message:d().optional(),param:d().optional(),type:d().optional()})}),qd=y({type:_("conversation.item.retrieved"),event_id:d(),item:Lt}),zd=y({type:_("conversation.item.truncated"),event_id:d(),item_id:d(),audio_end_ms:N(),content_index:N()}),Gd=y({type:_("conversation.item.create"),item:Lt,event_id:d().optional(),previous_item_id:d().nullable().optional()}),Vd=y({type:_("conversation.item.delete"),item_id:d(),event_id:d().optional()}),Wd=y({type:_("conversation.item.retrieve"),item_id:d(),event_id:d().optional()}),Hd=y({type:_("conversation.item.truncate"),item_id:d(),audio_end_ms:N(),content_index:N(),event_id:d().optional()}),Kd=y({type:_("error"),event_id:d().optional(),error:G().optional()}),Yd=y({type:_("input_audio_buffer.cleared"),event_id:d()}),Xd=y({type:_("input_audio_buffer.append"),audio:d(),event_id:d().optional()}),Qd=y({type:_("input_audio_buffer.clear"),event_id:d().optional()}),el=y({type:_("input_audio_buffer.commit"),event_id:d().optional()}),tl=y({type:_("input_audio_buffer.committed"),event_id:d(),item_id:d(),previous_item_id:d().nullable().optional()}),nl=y({type:_("input_audio_buffer.speech_started"),event_id:d(),item_id:d(),audio_start_ms:N()}),rl=y({type:_("input_audio_buffer.speech_stopped"),event_id:d(),item_id:d(),audio_end_ms:N()}),sl=y({type:_("output_audio_buffer.started"),event_id:d()}).passthrough(),al=y({type:_("output_audio_buffer.stopped"),event_id:d()}).passthrough(),il=y({type:_("output_audio_buffer.cleared"),event_id:d()}),ol=y({type:_("rate_limits.updated"),event_id:d(),rate_limits:V(y({limit:N().optional(),name:de(["requests","tokens"]).optional(),remaining:N().optional(),reset_seconds:N().optional()}))}),ul=y({type:_("response.output_audio.delta"),event_id:d(),item_id:d(),content_index:N(),delta:d(),output_index:N(),response_id:d()}),cl=y({type:_("response.output_audio.done"),event_id:d(),item_id:d(),content_index:N(),output_index:N(),response_id:d()}),dl=y({type:_("response.output_audio_transcript.delta"),event_id:d(),item_id:d(),content_index:N(),delta:d(),output_index:N(),response_id:d()}),ll=y({type:_("response.output_audio_transcript.done"),event_id:d(),item_id:d(),content_index:N(),transcript:d(),output_index:N(),response_id:d()}),pl=y({type:_("response.content_part.added"),event_id:d(),item_id:d(),content_index:N(),output_index:N(),response_id:d(),part:y({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:de(["text","audio"]).optional()})}),fl=y({type:_("response.content_part.done"),event_id:d(),item_id:d(),content_index:N(),output_index:N(),response_id:d(),part:y({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:de(["text","audio"]).optional()})}),hl=y({type:_("response.created"),event_id:d(),response:bi}),wi=y({type:_("response.done"),event_id:d(),response:bi}),ml=y({type:_("response.function_call_arguments.delta"),event_id:d(),item_id:d(),call_id:d(),delta:d(),output_index:N(),response_id:d()}),gl=y({type:_("response.function_call_arguments.done"),event_id:d(),item_id:d(),call_id:d(),arguments:d(),output_index:N(),response_id:d()}),yl=y({type:_("response.output_item.added"),event_id:d(),item:Lt,output_index:N(),response_id:d()}),_l=y({type:_("response.output_item.done"),event_id:d(),item:Lt,output_index:N(),response_id:d()}),vl=y({type:_("response.output_text.delta"),event_id:d(),item_id:d(),content_index:N(),delta:d(),output_index:N(),response_id:d()}),bl=y({type:_("response.output_text.done"),event_id:d(),item_id:d(),content_index:N(),text:d(),output_index:N(),response_id:d()}),wl=y({type:_("session.created"),event_id:d(),session:G()}),xl=y({type:_("session.updated"),event_id:d(),session:G()}),Sl=y({type:_("response.cancel"),event_id:d().optional(),response_id:d().optional()}),Il=y({type:_("response.create"),event_id:d().optional(),response:G().optional()}),Tl=y({type:_("session.update"),event_id:d().optional(),session:G()}),kl=y({type:_("mcp_list_tools.in_progress"),event_id:d().optional(),item_id:d().optional()}),Al=y({type:_("mcp_list_tools.completed"),event_id:d().optional(),item_id:d().optional()}),Ol=y({type:_("response.mcp_call_arguments.delta"),event_id:d(),response_id:d(),item_id:d(),output_index:N(),delta:d(),obfuscation:d()}),Cl=y({type:_("response.mcp_call_arguments.done"),event_id:d(),response_id:d(),item_id:d(),output_index:N(),arguments:d()}),El=y({type:_("response.mcp_call.in_progress"),event_id:d(),output_index:N(),item_id:d()}),Rl=y({type:_("response.mcp_call.completed"),event_id:d(),output_index:N(),item_id:d()}),Nl=y({type:_("mcp_list_tools.failed"),event_id:d().optional(),item_id:d().optional()}),Dl=y({type:d(),event_id:d().optional().nullable()}).passthrough(),Pl=me("type",[$d,Fd,Ld,Zd,Ud,Jd,Bd,qd,zd,Kd,Yd,tl,nl,rl,sl,al,il,ol,ul,cl,dl,ll,pl,fl,hl,wi,ml,gl,yl,_l,vl,bl,wl,xl,kl,Al,Nl,Ol,Cl,El,Rl]);me("type",[Gd,Vd,Wd,Hd,Xd,Qd,el,Sl,Il,Tl]);function rs(n){const e=JSON.parse(n.data.toString()),t=Pl.safeParse(e);if(!t.success){const r=Dl.safeParse(e);return r.success?{data:r.data,isGeneric:!0}:{data:null,isGeneric:!0}}return{data:t.data,isGeneric:!1}}const xi="gpt-realtime",Ee={outputModalities:["audio"],audio:{input:{format:{type:"audio/pcm",rate:24e3},transcription:{model:"gpt-4o-mini-transcribe"},turnDetection:{type:"semantic_vad"},noiseReduction:null},output:{format:{type:"audio/pcm",rate:24e3},speed:1}}},is=class is extends $r{constructor(t={}){super();O(this,kt);O(this,On);O(this,ye,null);O(this,Cn,null);v(this,"eventEmitter",new rr);S(this,kt,t.model??xi),S(this,On,t.apiKey)}get currentModel(){return u(this,kt)}set currentModel(t){S(this,kt,t)}get _rawSessionConfig(){return u(this,Cn)??null}async _getApiKey(t){const r=t.apiKey??u(this,On);return typeof r=="function"?await r():r}_onMessage(t){var a,i,o,l,c,p;const{data:r,isGeneric:s}=rs(t);if(r!==null&&(this.emit("*",r),!s)){if(r.type==="error"?this.emit("error",{type:"error",error:r}):this.emit(r.type,r),r.type==="response.created"){this.emit("turn_started",{type:"response_started",providerData:{...r}});return}if(r.type==="session.updated"&&S(this,Cn,r.session),r.type==="response.done"){const f=wi.safeParse(r);if(!f.success){ke.error("Error parsing response done event",f.error);return}const h=((a=f.data.response.usage)==null?void 0:a.input_tokens)??0,w=((i=f.data.response.usage)==null?void 0:i.output_tokens)??0,g=h+w,x=new ir({inputTokens:h,inputTokensDetails:((o=f.data.response.usage)==null?void 0:o.input_token_details)??{},outputTokens:w,outputTokensDetails:((l=f.data.response.usage)==null?void 0:l.output_token_details)??{},totalTokens:g});this.emit("usage_update",x),this.emit("turn_done",{type:"response_done",response:{id:f.data.response.id??"",output:f.data.response.output??[],usage:{inputTokens:h,inputTokensDetails:((c=f.data.response.usage)==null?void 0:c.input_token_details)??{},outputTokens:w,outputTokensDetails:((p=f.data.response.usage)==null?void 0:p.output_token_details)??{},totalTokens:g}}});return}if(r.type==="response.output_audio.done"){this.emit("audio_done");return}if(r.type==="conversation.item.deleted"){this.emit("item_deleted",{itemId:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.completed"||r.type==="conversation.item.truncated"){this.sendEvent({type:"conversation.item.retrieve",item_id:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.delta"||r.type==="response.output_text.delta"||r.type==="response.output_audio_transcript.delta"||r.type==="response.function_call_arguments.delta"){r.type==="response.output_audio_transcript.delta"&&this.emit("audio_transcript_delta",{type:"transcript_delta",delta:r.delta,itemId:r.item_id,responseId:r.response_id});return}if(r.type==="conversation.item.added"||r.type==="conversation.item.done"||r.type==="conversation.item.retrieved"){if(r.item.type==="mcp_list_tools"&&r.type==="conversation.item.done"){const f=r.item.server_label??"",h=r.item.tools??[];try{this.emit("mcp_tools_listed",{serverLabel:f,tools:h})}catch(w){ke.error("Error emitting mcp_tools_listed",w,r.item)}return}if(r.item.type==="message"){const f=r.type==="conversation.item.added"||r.type==="conversation.item.done"?r.previous_item_id:null,h=yi.parse({itemId:r.item.id,previousItemId:f,type:r.item.type,role:r.item.role,content:r.item.content,status:r.item.status});this.emit("item_update",h);return}if(r.item.type==="mcp_approval_request"&&r.type==="conversation.item.done"){const f=r.item,h=Md.parse({itemId:f.id,type:f.type,serverLabel:f.server_label,name:f.name,arguments:JSON.parse(f.arguments||"{}"),approved:f.approved});this.emit("item_update",h),this.emit("mcp_approval_request",h);return}if(r.item.type==="mcp_tool_call"||r.item.type==="mcp_call"){const f=r.type==="conversation.item.done"?"completed":"in_progress",h=vi.parse({itemId:r.item.id,type:r.item.type,status:f,arguments:r.item.arguments,name:r.item.name,output:r.item.output});this.emit("item_update",h),r.type==="conversation.item.done"&&this.emit("mcp_tool_call_completed",h);return}}if(r.type==="response.mcp_call.in_progress"){const f=r;this.sendEvent({type:"conversation.item.retrieve",item_id:f.item_id});return}if(r.type==="mcp_list_tools.in_progress"){const f=r;f.item_id&&this.sendEvent({type:"conversation.item.retrieve",item_id:f.item_id});return}if(r.type==="response.output_item.done"||r.type==="response.output_item.added"){const f=r.item;if(f.type==="function_call"&&f.status==="completed"){const h=_i.parse({itemId:f.id,type:f.type,status:"in_progress",arguments:f.arguments,name:f.name,output:null});this.emit("item_update",h),this.emit("function_call",{id:f.id,type:"function_call",callId:f.call_id??"",arguments:f.arguments??"",name:f.name??""});return}if(f.type==="mcp_tool_call"||f.type==="mcp_call"){const h=vi.parse({itemId:f.id,type:f.type,status:r.type==="response.output_item.done"?"completed":"in_progress",arguments:f.arguments,name:f.name,output:f.output});this.emit("item_update",h);return}if(f.type==="message"){const h=yi.parse({itemId:r.item.id,type:r.item.type,role:r.item.role,content:r.item.content,status:r.type==="response.output_item.done"?f.status??"completed":f.status??"in_progress"});this.emit("item_update",h);return}}}}_onError(t){this.emit("error",{type:"error",error:t})}_onOpen(){this.emit("connected")}_onClose(){this.emit("disconnected")}sendMessage(t,r,{triggerResponse:s=!0}={}){const a=typeof t=="string"?[{type:"input_text",text:t}]:t.content.map(i=>i.type==="input_image"?{type:"input_image",image_url:i.image,...i.providerData??{}}:i);this.sendEvent({type:"conversation.item.create",item:{type:"message",role:"user",content:a},...r}),s&&this.sendEvent({type:"response.create"})}addImage(t,{triggerResponse:r=!0}={}){this.sendMessage({type:"message",role:"user",content:[{type:"input_image",image:t}]},{},{triggerResponse:r})}_getMergedSessionConfig(t){var a,i,o,l,c,p,f,h,w,g,x,b,m,I,A,P,R,j,B,oe,xe,Ae,Ai,Oi,Ci,Ei,Ri,Ni;const r=Pd(t),s={type:"realtime",instructions:r.instructions,model:r.model??u(this,kt),output_modalities:r.outputModalities??Ee.outputModalities,audio:{input:{format:((i=(a=r.audio)==null?void 0:a.input)==null?void 0:i.format)??((l=(o=Ee.audio)==null?void 0:o.input)==null?void 0:l.format),noise_reduction:((p=(c=r.audio)==null?void 0:c.input)==null?void 0:p.noiseReduction)??((h=(f=Ee.audio)==null?void 0:f.input)==null?void 0:h.noiseReduction),transcription:((g=(w=r.audio)==null?void 0:w.input)==null?void 0:g.transcription)??((b=(x=Ee.audio)==null?void 0:x.input)==null?void 0:b.transcription),turn_detection:is.buildTurnDetectionConfig((I=(m=r.audio)==null?void 0:m.input)==null?void 0:I.turnDetection)??((P=(A=Ee.audio)==null?void 0:A.input)==null?void 0:P.turnDetection)},output:{format:((j=(R=r.audio)==null?void 0:R.output)==null?void 0:j.format)??((oe=(B=Ee.audio)==null?void 0:B.output)==null?void 0:oe.format),voice:((Ae=(xe=r.audio)==null?void 0:xe.output)==null?void 0:Ae.voice)??((Oi=(Ai=Ee.audio)==null?void 0:Ai.output)==null?void 0:Oi.voice),speed:((Ei=(Ci=r.audio)==null?void 0:Ci.output)==null?void 0:Ei.speed)??((Ni=(Ri=Ee.audio)==null?void 0:Ri.output)==null?void 0:Ni.speed)}},tool_choice:r.toolChoice??Ee.toolChoice,...r.providerData??{}};return r.prompt&&(s.prompt={id:r.prompt.promptId,version:r.prompt.version,variables:r.prompt.variables}),r.tools&&r.tools.length>0&&(s.tools=r.tools.map(Jl=>({...Jl,strict:void 0}))),s}static buildTurnDetectionConfig(t){if(typeof t>"u")return;const{type:r,createResponse:s,create_response:a,eagerness:i,interruptResponse:o,interrupt_response:l,prefixPaddingMs:c,prefix_padding_ms:p,silenceDurationMs:f,silence_duration_ms:h,threshold:w,idleTimeoutMs:g,idle_timeout_ms:x,...b}=t,m={type:r,create_response:s||a,eagerness:i,interrupt_response:o||l,prefix_padding_ms:c||p,silence_duration_ms:f||h,idle_timeout_ms:g||x,threshold:w,...b};return Object.keys(m).forEach(I=>{m[I]===void 0&&delete m[I]}),Object.keys(m).length>0?m:void 0}set _tracingConfig(t){S(this,ye,t)}_updateTracingConfig(t){var r,s,a;if(typeof u(this,ye)>"u"&&S(this,ye,null),t==="auto"){this.sendEvent({type:"session.update",session:{type:"realtime",tracing:"auto"}});return}if(u(this,ye)!==null&&typeof u(this,ye)!="string"&&typeof t!="string"){ke.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");return}if(t===null){ke.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."),this.sendEvent({type:"session.update",session:{type:"realtime",tracing:null}});return}if(u(this,ye)===null||typeof u(this,ye)=="string"){this.sendEvent({type:"session.update",session:{type:"realtime",tracing:t}});return}if((t==null?void 0:t.group_id)!==((r=u(this,ye))==null?void 0:r.group_id)||(t==null?void 0:t.metadata)!==((s=u(this,ye))==null?void 0:s.metadata)||(t==null?void 0:t.workflow_name)!==((a=u(this,ye))==null?void 0:a.workflow_name)){ke.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s",JSON.stringify(u(this,ye)),JSON.stringify(t));return}this.sendEvent({type:"session.update",session:{type:"realtime",tracing:t}})}updateSessionConfig(t){const r=this._getMergedSessionConfig(t);this.sendEvent({type:"session.update",session:r})}sendFunctionCallOutput(t,r,s=!0){this.sendEvent({type:"conversation.item.create",item:{type:"function_call_output",output:r,call_id:t.callId}});try{const a=_i.parse({itemId:t.id,previousItemId:t.previousItemId,type:"function_call",status:"completed",arguments:t.arguments,name:t.name,output:r});this.emit("item_update",a)}catch(a){ke.error("Error parsing tool call item",a,t)}s&&this.sendEvent({type:"response.create"})}sendAudio(t,{commit:r=!1}={}){this.sendEvent({type:"input_audio_buffer.append",audio:li(t)}),r&&this.sendEvent({type:"input_audio_buffer.commit"})}resetHistory(t,r){const{removals:s,additions:a,updates:i}=Td(t,r),o=new Set(s.map(c=>c.itemId));for(const c of i)o.add(c.itemId);if(o.size>0)for(const c of o)this.sendEvent({type:"conversation.item.delete",item_id:c});const l=[...a,...i];for(const c of l)if(c.type==="message"){const p={type:"message",role:c.role,content:c.content,id:c.itemId};c.role!=="system"&&c.status&&(p.status=c.status),this.sendEvent({type:"conversation.item.create",item:p})}else c.type==="function_call"&&ke.warn("Function calls cannot be manually added or updated at the moment. Ignoring.")}sendMcpResponse(t,r){this.sendEvent({type:"conversation.item.create",previous_item_id:t.itemId,item:{type:"mcp_approval_response",approval_request_id:t.itemId,approve:r}})}};kt=new WeakMap,On=new WeakMap,ye=new WeakMap,Cn=new WeakMap;let gn=is;class Si extends gn{constructor(t={}){if(typeof RTCPeerConnection>"u")throw new Error("WebRTC is not supported in this environment");super(t);v(this,"options");O(this,En);O(this,X,{status:"disconnected",peerConnection:void 0,dataChannel:void 0,callId:void 0});O(this,Rn);O(this,At,!1);O(this,Nn,!1);this.options=t,S(this,En,t.baseUrl??"https://api.openai.com/v1/realtime/calls"),S(this,Rn,t.useInsecureApiKey??!1)}get callId(){return u(this,X).callId}get status(){return u(this,X).status}get connectionState(){return u(this,X)}get muted(){return u(this,Nn)}async connect(t){if(u(this,X).status==="connected")return;u(this,X).status==="connecting"&&ke.warn("Realtime connection already in progress. Please await original promise");const r=t.model??this.currentModel;this.currentModel=r;const s=t.url??u(this,En),a=await this._getApiKey(t),i=typeof a=="string"&&a.startsWith("ek_");if(!u(this,Rn)&&!i)throw new te("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");return new Promise(async(o,l)=>{var c,p;try{const f={...t.initialSessionConfig||{},model:this.currentModel},h=new URL(s);let w=new RTCPeerConnection;const g=w.createDataChannel("oai-events");let x;S(this,X,{status:"connecting",peerConnection:w,dataChannel:g,callId:x}),this.emit("connection_change",u(this,X).status),g.addEventListener("open",()=>{S(this,X,{status:"connected",peerConnection:w,dataChannel:g,callId:x}),this.updateSessionConfig(f),this.emit("connection_change",u(this,X).status),this._onOpen(),o()}),g.addEventListener("error",R=>{this.close(),this._onError(R),l(R)}),g.addEventListener("message",R=>{this._onMessage(R);const{data:j,isGeneric:B}=rs(R);!j||B||(j.type==="response.created"?S(this,At,!0):j.type==="response.done"&&S(this,At,!1),j.type==="session.created"&&(this._tracingConfig=j.session.tracing,this._updateTracingConfig(f.tracing??"auto")))});const b=this.options.audioElement??document.createElement("audio");b.autoplay=!0,w.ontrack=R=>{b.srcObject=R.streams[0]};const m=this.options.mediaStream??await navigator.mediaDevices.getUserMedia({audio:!0});w.addTrack(m.getAudioTracks()[0]),this.options.changePeerConnection&&(w=await this.options.changePeerConnection(w),S(this,X,{...u(this,X),peerConnection:w}));const I=await w.createOffer();if(await w.setLocalDescription(I),!I.sdp)throw new Error("Failed to create offer");const A=await fetch(h,{method:"POST",body:I.sdp,headers:{"Content-Type":"application/sdp",Authorization:`Bearer ${a}`,"X-OpenAI-Agents-SDK":mi["X-OpenAI-Agents-SDK"]}});x=(p=(c=A.headers)==null?void 0:c.get("Location"))==null?void 0:p.split("/").pop(),S(this,X,{...u(this,X),callId:x});const P={type:"answer",sdp:await A.text()};await w.setRemoteDescription(P)}catch(f){this.close(),this._onError(f),l(f)}})}sendEvent(t){if(!u(this,X).dataChannel||u(this,X).dataChannel.readyState!=="open")throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");u(this,X).dataChannel.send(JSON.stringify(t))}mute(t){S(this,Nn,t),u(this,X).peerConnection&&u(this,X).peerConnection.getSenders().forEach(s=>{s.track&&(s.track.enabled=!t)})}close(){if(u(this,X).dataChannel&&u(this,X).dataChannel.close(),u(this,X).peerConnection){const t=u(this,X).peerConnection;t.getSenders().forEach(r=>{var s;(s=r.track)==null||s.stop()}),t.close()}u(this,X).status!=="disconnected"&&(S(this,X,{status:"disconnected",peerConnection:void 0,dataChannel:void 0,callId:void 0}),this.emit("connection_change",u(this,X).status),this._onClose())}interrupt(){u(this,At)&&(this.sendEvent({type:"response.cancel"}),S(this,At,!1)),this.sendEvent({type:"output_audio_buffer.clear"})}}En=new WeakMap,X=new WeakMap,Rn=new WeakMap,At=new WeakMap,Nn=new WeakMap;const Ml=globalThis.WebSocket;class Ii extends gn{constructor(t={}){super(t);O(this,gr);O(this,rt);O(this,st);O(this,ce,{status:"disconnected",websocket:void 0});O(this,Dn);O(this,Ge);O(this,Ot);v(this,"_firstAudioTimestamp");v(this,"_audioLengthMs",0);O(this,Ct,!1);O(this,Ht);O(this,Pn);S(this,st,t.url),S(this,Dn,t.useInsecureApiKey??!1),S(this,Ht,t.createWebSocket),S(this,Pn,t.skipOpenEventListeners??!1)}getCommonRequestHeaders(){return mi}get status(){return u(this,ce).status}get connectionState(){return u(this,ce)}get muted(){return null}get currentItemId(){return u(this,Ge)}_onAudio(t){this.emit("audio",t)}async connect(t){const r=t.model??this.currentModel;this.currentModel=r,S(this,rt,await this._getApiKey(t));const s=t.url??u(this,st)??`wss://api.openai.com/v1/realtime?model=${this.currentModel}`;S(this,st,s);const a={...t.initialSessionConfig||{},model:this.currentModel};await new Promise((i,o)=>{q(this,gr,ji).call(this,i,o,a).catch(o)}),await this.updateSessionConfig(a)}sendEvent(t){if(!u(this,ce).websocket)throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");u(this,ce).websocket.send(JSON.stringify(t))}close(){var t;(t=u(this,ce).websocket)==null||t.close(),S(this,Ge,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,S(this,Ot,void 0)}mute(t){throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.")}sendAudio(t,r={}){u(this,ce).status==="connected"&&super.sendAudio(t,r)}_cancelResponse(){u(this,Ct)&&(this.sendEvent({type:"response.cancel"}),S(this,Ct,!1))}_interrupt(t,r=!0){if(t<0)return;r&&this._cancelResponse();const s=this._audioLengthMs??Number.POSITIVE_INFINITY,a=Math.max(0,Math.floor(Math.min(t,s)));this.emit("audio_interrupted"),this.sendEvent({type:"conversation.item.truncate",item_id:u(this,Ge),content_index:u(this,Ot),audio_end_ms:a})}interrupt(t=!0){if(!u(this,Ge)||typeof this._firstAudioTimestamp!="number")return;const r=Date.now()-this._firstAudioTimestamp;r>=0&&this._interrupt(r,t),S(this,Ge,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,S(this,Ot,void 0)}}rt=new WeakMap,st=new WeakMap,ce=new WeakMap,Dn=new WeakMap,Ge=new WeakMap,Ot=new WeakMap,Ct=new WeakMap,Ht=new WeakMap,Pn=new WeakMap,gr=new WeakSet,ji=async function(t,r,s){if(u(this,ce).websocket){t();return}if(!u(this,rt))throw new te("API key is not set. Please call `connect()` with an API key first.");if(!u(this,rt).startsWith("ek_")&&!u(this,Dn))throw new te("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");let a=null;if(u(this,Ht))a=await u(this,Ht).call(this,{url:u(this,st),apiKey:u(this,rt)});else{const o=["realtime","openai-insecure-api-key."+u(this,rt),Ad];a=new Ml(u(this,st),o)}S(this,ce,{status:"connecting",websocket:a}),this.emit("connection_change",u(this,ce).status);const i=()=>{S(this,ce,{status:"connected",websocket:a}),this.emit("connection_change",u(this,ce).status),this._onOpen(),t()};u(this,Pn)===!0?i():a.addEventListener("open",i),a.addEventListener("error",o=>{this._onError(o),S(this,ce,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,ce).status),r(o)}),a.addEventListener("message",o=>{var p,f,h,w,g,x,b;this._onMessage(o);const{data:l,isGeneric:c}=rs(o);if(!(!l||c))if(l.type==="response.output_audio.delta"){S(this,Ot,l.content_index),S(this,Ge,l.item_id),this._firstAudioTimestamp===void 0&&(this._firstAudioTimestamp=Date.now(),this._audioLengthMs=0);const m=di(l.delta),I=(h=(f=(p=this._rawSessionConfig)==null?void 0:p.audio)==null?void 0:f.output)==null?void 0:h.format;if(I&&typeof I=="object"){const P=I.type;if(P==="audio/pcmu"||P==="audio/pcma")this._audioLengthMs+=m.byteLength/8;else if(P==="audio/pcm"){const R=I.rate??24e3;this._audioLengthMs+=m.byteLength/2/R*1e3}else this._audioLengthMs+=m.byteLength/24/2}else typeof I=="string"?I.startsWith("g711_")?this._audioLengthMs+=m.byteLength/8:this._audioLengthMs+=m.byteLength/24/2:this._audioLengthMs+=m.byteLength/24/2;const A={type:"audio",data:m,responseId:l.response_id};this._onAudio(A)}else if(l.type==="input_audio_buffer.speech_started"){const m=((b=(x=(g=(w=this._rawSessionConfig)==null?void 0:w.audio)==null?void 0:g.input)==null?void 0:x.turn_detection)==null?void 0:b.interrupt_response)??!1;this.interrupt(!m)}else l.type==="response.created"?S(this,Ct,!0):l.type==="response.done"?S(this,Ct,!1):l.type==="session.created"&&(this._tracingConfig=l.session.tracing,this._updateTracingConfig(s.tracing??"auto"))}),a.addEventListener("close",()=>{S(this,ce,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,ce).status),this._onClose()})};const Ti=Symbol("backgroundResult");function jl(n){return{[Ti]:!0,content:n}}function ki(n){return typeof n=="object"&&n!==null&&Ti in n}function $l(n){return n.type==="function"||n.type==="hosted_tool"&&n.name==="hosted_mcp"}function Fl(n){if(n.type==="function")return n;if(n.type==="hosted_tool"&&n.name==="hosted_mcp"){const e=n.providerData.server_url&&n.providerData.server_url.length>0?n.providerData.server_url:void 0;return{type:"mcp",server_label:n.providerData.server_label,server_url:e,headers:n.providerData.headers,allowed_tools:n.providerData.allowed_tools,require_approval:n.providerData.require_approval}}throw new te(`Invalid tool type: ${n}`)}function Ll(){return JSON.parse(JSON.stringify(Ee))}class Zl extends rr{constructor(t,r={}){super();O(this,Q);v(this,"initialAgent");v(this,"options");O(this,J);O(this,F);O(this,Kt);O(this,L);O(this,Yt,[]);O(this,Xt);O(this,Mn,{});O(this,ee,[]);O(this,Qt);O(this,en,{});O(this,$e,!1);O(this,jn,new Map);O(this,Et,[]);O(this,$n,Ll());O(this,Fn,!0);this.initialAgent=t,this.options=r,typeof r.transport>"u"&&kd()||r.transport==="webrtc"?S(this,J,new Si):r.transport==="websocket"||typeof r.transport>"u"?S(this,J,new Ii):S(this,J,r.transport),S(this,F,t),S(this,L,new Mt({...r.context??{},history:u(this,ee)})),S(this,Yt,(r.outputGuardrails??[]).map(Rd)),S(this,Xt,Ed(r.outputGuardrailSettings??{})),S(this,Qt,r.historyStoreAudio??!1),S(this,Fn,r.automaticallyTriggerResponseForMcpToolCalls??!0)}get transport(){return u(this,J)}get currentAgent(){return u(this,F)}get usage(){return u(this,L).usage}get context(){return u(this,L)}get muted(){return u(this,J).muted}get history(){return u(this,ee)}get availableMcpTools(){return u(this,Et)}async updateAgent(t){return u(this,F).emit("agent_handoff",u(this,L),t),this.emit("agent_handoff",u(this,L),u(this,F),t),await q(this,Q,yr).call(this,t),await u(this,J).updateSessionConfig(await q(this,Q,_r).call(this)),t}async connect(t){await q(this,Q,yr).call(this,this.initialAgent),q(this,Q,Li).call(this),await u(this,J).connect({apiKey:t.apiKey??this.options.apiKey,model:this.options.model,url:t.url,initialSessionConfig:await q(this,Q,_r).call(this,this.options.config)}),S(this,ee,[]),this.emit("history_updated",u(this,ee))}updateHistory(t){let r;typeof t=="function"?r=t(u(this,ee)):r=t,u(this,J).resetHistory(u(this,ee),r)}sendMessage(t,r={}){u(this,J).sendMessage(t,r)}addImage(t,{triggerResponse:r=!0}={}){u(this,J).addImage(t,{triggerResponse:r})}mute(t){u(this,J).mute(t)}close(){S(this,en,{}),u(this,J).close()}sendAudio(t,r={}){u(this,J).sendAudio(t,r)}interrupt(){u(this,J).interrupt()}async approve(t,r={alwaysApprove:!1}){u(this,L).approveTool(t,r);const s=u(this,F).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await q(this,Q,vr).call(this,t.rawItem,s);else if(t.rawItem.type==="hosted_tool_call"){r.alwaysApprove&&ke.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");const a=gi(t);u(this,J).sendMcpResponse(a,!0)}else throw new _e(`Tool ${t.rawItem.name} not found`)}async reject(t,r={alwaysReject:!1}){u(this,L).rejectTool(t,r);const s=u(this,F).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await q(this,Q,vr).call(this,t.rawItem,s);else if(t.rawItem.type==="hosted_tool_call"){r.alwaysReject&&ke.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");const a=gi(t);u(this,J).sendMcpResponse(a,!1)}else throw new _e(`Tool ${t.rawItem.name} not found`)}}J=new WeakMap,F=new WeakMap,Kt=new WeakMap,L=new WeakMap,Yt=new WeakMap,Xt=new WeakMap,Mn=new WeakMap,ee=new WeakMap,Qt=new WeakMap,en=new WeakMap,$e=new WeakMap,jn=new WeakMap,Et=new WeakMap,$n=new WeakMap,Fn=new WeakMap,Q=new WeakSet,yr=async function(t){S(this,F,t);const r=await u(this,F).getEnabledHandoffs(u(this,L)),s=r.map(l=>l.getHandoffAsFunctionTool()),a=(await u(this,F).getAllTools(u(this,L))).filter($l).map(Fl),i=typeof u(this,F).tools<"u"||typeof u(this,F).mcpServers<"u",o=r.length>0;S(this,Kt,i||o?[...a,...s]:void 0),q(this,Q,ms).call(this)},_r=async function(t={}){const r=await u(this,F).getSystemPrompt(u(this,L)),s=this.options.tracingDisabled?null:this.options.workflowName?{workflow_name:this.options.workflowName}:"auto";s!==null&&s!=="auto"?(this.options.groupId&&(s.group_id=this.options.groupId),this.options.traceMetadata&&(s.metadata=this.options.traceMetadata)):(this.options.groupId||this.options.traceMetadata)&&ke.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");const i={...{...u(this,$n)??{},...this.options.config??{},...t??{}},instructions:r,voice:u(this,F).voice,model:this.options.model,tools:u(this,Kt),tracing:s,prompt:typeof u(this,F).prompt=="function"?await u(this,F).prompt(u(this,L),u(this,F)):u(this,F).prompt};return S(this,$n,i),i},$i=async function(t,r){const s=await r.onInvokeHandoff(u(this,L),t.arguments);u(this,F).emit("agent_handoff",u(this,L),s),this.emit("agent_handoff",u(this,L),u(this,F),s),await q(this,Q,yr).call(this,s),await u(this,J).updateSessionConfig(await q(this,Q,_r).call(this));const a=ha(s);return u(this,J).sendFunctionCallOutput(t,a,!0),s},vr=async function(t,r){u(this,L).context.history=JSON.parse(JSON.stringify(u(this,ee)));let s=t.arguments;if(r.parameters&&(ft(r.parameters)?s=r.parameters.parse(s):s=JSON.parse(s)),await r.needsApproval(u(this,L),s,t.callId)){const l=this.context.isToolApproved({toolName:r.name,callId:t.callId});if(l===!1){this.emit("agent_tool_start",u(this,L),u(this,F),r,{toolCall:t}),u(this,F).emit("agent_tool_start",u(this,L),r,{toolCall:t});const c="Tool execution was not approved.";u(this,J).sendFunctionCallOutput(t,c,!0),this.emit("agent_tool_end",u(this,L),u(this,F),r,c,{toolCall:t}),u(this,F).emit("agent_tool_end",u(this,L),r,c,{toolCall:t});return}else if(typeof l>"u"){this.emit("tool_approval_requested",u(this,L),u(this,F),{type:"function_approval",tool:r,approvalItem:new Ie(t,u(this,F))});return}}this.emit("agent_tool_start",u(this,L),u(this,F),r,{toolCall:t}),u(this,F).emit("agent_tool_start",u(this,L),r,{toolCall:t}),u(this,L).context.history=JSON.parse(JSON.stringify(u(this,ee)));const i=await r.invoke(u(this,L),t.arguments,{toolCall:t});let o;ki(i)?(o=Ke(i.content),u(this,J).sendFunctionCallOutput(t,o,!1)):(o=Ke(i),u(this,J).sendFunctionCallOutput(t,o,!0)),this.emit("agent_tool_end",u(this,L),u(this,F),r,o,{toolCall:t}),u(this,F).emit("agent_tool_end",u(this,L),r,o,{toolCall:t})},Fi=async function(t){const r=await u(this,F).getEnabledHandoffs(u(this,L)),s=new Map(r.map(l=>[l.toolName,l])),a=await u(this,F).getAllTools(u(this,L)),i=new Map(a.map(l=>[l.name,l])),o=s.get(t.name);if(o)await q(this,Q,$i).call(this,t,o);else{const l=i.get(t.name);if(l&&l.type==="function")await q(this,Q,vr).call(this,t,l);else throw new _e(`Tool ${t.name} not found`)}},hs=async function(t,r,s){if(u(this,Yt).length===0)return;const a={agent:u(this,F),agentOutput:t,context:u(this,L)},o=(await Promise.all(u(this,Yt).map(l=>l.run(a)))).find(l=>l.output.tripwireTriggered);if(o){if(u(this,en)[r])return;u(this,en)[r]=!0;const l=new Xn(`Output guardrail triggered: ${JSON.stringify(o.output.outputInfo)}`,o);this.emit("guardrail_tripped",u(this,L),u(this,F),l,{itemId:s}),this.interrupt();const c=Nd(o);this.sendMessage(c);return}},Li=function(){u(this,J).on("*",s=>{if(this.emit("transport_event",s),s.type==="conversation.item.input_audio_transcription.completed")try{const a=s;S(this,ee,hi(u(this,ee),a,u(this,Qt))),u(this,L).context.history=u(this,ee),this.emit("history_updated",u(this,ee))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,J).on("mcp_tools_listed",({serverLabel:s,tools:a})=>{try{u(this,jn).set(s,a??[]),q(this,Q,ms).call(this)}catch(i){this.emit("error",{type:"error",error:i})}}),u(this,J).on("audio",s=>{u(this,$e)||(S(this,$e,!0),this.emit("audio_start",u(this,L),u(this,F))),this.emit("audio",s)}),u(this,J).on("turn_started",()=>{S(this,$e,!1),this.emit("agent_start",u(this,L),u(this,F)),u(this,F).emit("agent_start",u(this,L),u(this,F))}),u(this,J).on("turn_done",s=>{const a=s.response.output[s.response.output.length-1],i=pi(a)??"",o=(a==null?void 0:a.id)??"";this.emit("agent_end",u(this,L),u(this,F),i),u(this,F).emit("agent_end",u(this,L),i),q(this,Q,hs).call(this,i,s.response.id,o)}),u(this,J).on("audio_done",()=>{u(this,$e)&&S(this,$e,!1),this.emit("audio_stopped",u(this,L),u(this,F))});let t=0,r;u(this,J).on("audio_transcript_delta",s=>{try{const a=s.delta,i=s.itemId,o=s.responseId;r!==i&&(r=i,t=0);const c=(u(this,Mn)[i]??"")+a;if(u(this,Mn)[i]=c,u(this,Xt).debounceTextLength<0)return;const p=Math.floor(c.length/u(this,Xt).debounceTextLength);p>t&&(t=p,q(this,Q,hs).call(this,c,o,i))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,J).on("item_update",s=>{try{const a=!u(this,ee).some(i=>i.itemId===s.itemId);if(S(this,ee,hi(u(this,ee),s,u(this,Qt))),u(this,L).context.history=u(this,ee),a){const i=u(this,ee).find(o=>o.itemId===s.itemId);i&&this.emit("history_added",i)}this.emit("history_updated",u(this,ee))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,J).on("item_deleted",s=>{try{S(this,ee,u(this,ee).filter(a=>a.itemId!==s.itemId)),u(this,L).context.history=u(this,ee),this.emit("history_updated",u(this,ee))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,J).on("function_call",async s=>{try{await q(this,Q,Fi).call(this,s)}catch(a){ke.error("Error handling function call",a),this.emit("error",{type:"error",error:a})}}),u(this,J).on("usage_update",s=>{u(this,L).usage.add(s)}),u(this,J).on("audio_interrupted",()=>{u(this,$e)&&S(this,$e,!1),this.emit("audio_interrupted",u(this,L),u(this,F))}),u(this,J).on("error",s=>{this.emit("error",s)}),u(this,J).on("mcp_tool_call_completed",s=>{this.emit("mcp_tool_call_completed",u(this,L),u(this,F),s),u(this,Fn)&&u(this,J).sendEvent({type:"response.create"})}),u(this,J).on("mcp_approval_request",s=>{this.emit("tool_approval_requested",u(this,L),u(this,F),{type:"mcp_approval_request",approvalItem:Od(u(this,F),s)})})},ms=function(){var l;const t=(l=u(this,Kt))==null?void 0:l.filter(c=>c.type==="mcp"),r=c=>{const p=c.allowed_tools;if(p){if(Array.isArray(p))return p;if(p&&Array.isArray(p.tool_names))return p.tool_names}},s=new Map;for(const c of t){const p=u(this,jn).get(c.server_label)??[],f=r(c);for(const h of p)f&&!f.includes(h.name)||s.has(h.name)||s.set(h.name,h)}const a=Array.from(s.values()),i=u(this,Et);(i.length!==a.length||JSON.stringify(i.map(c=>c.name).sort())!==JSON.stringify(a.map(c=>c.name).sort()))&&(S(this,Et,a),this.emit("mcp_tools_changed",u(this,Et)))};const Ul={base64ToArrayBuffer:di,arrayBufferToBase64:li,getLastTextFromAudioOutputMessage:pi};Z.DEFAULT_OPENAI_REALTIME_MODEL=xi,Z.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG=Ee,Z.ModelBehaviorError=_e,Z.OpenAIRealtimeBase=gn,Z.OpenAIRealtimeWebRTC=Si,Z.OpenAIRealtimeWebSocket=Ii,Z.OutputGuardrailTripwireTriggered=Xn,Z.RealtimeAgent=Cd,Z.RealtimeSession=Zl,Z.UserError=te,Z.backgroundResult=jl,Z.isBackgroundResult=ki,Z.tool=nr,Z.utils=Ul,Object.defineProperty(Z,Symbol.toStringTag,{value:"Module"})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
